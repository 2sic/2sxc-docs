{
  "specs/cms/templates-token.html": {
    "href": "specs/cms/templates-token.html",
    "title": "Moved to | 2sxc and EAV 10",
    "keywords": "Moved to Token Templates"
  },
  "specs/data/permissions.html": {
    "href": "specs/data/permissions.html",
    "title": "Moved to | 2sxc and EAV 10",
    "keywords": "Moved to Permissions"
  },
  "specs/cms/inner-content.html": {
    "href": "specs/cms/inner-content.html",
    "title": "Moved to | 2sxc and EAV 10",
    "keywords": "Moved to Inner Content (Content Within Other Content)"
  },
  "specs/cms/polymorph.html": {
    "href": "specs/cms/polymorph.html",
    "title": "Moved to | 2sxc and EAV 10",
    "keywords": "Moved to Polymorphism aka Open-Heart-Surgery"
  },
  "net-code/razor/edit.enable.html": {
    "href": "net-code/razor/edit.enable.html",
    "title": "Method in C# Razor | 2sxc and EAV 10",
    "keywords": "@Edit.Enable Method in C# Razor Editing or adding data to a 2sxc app requires the UI to have some JS, CSS and context information. This is only loaded/included for editors/admin/super-users, and not available for users with limited permissions. If you want to enable this for more restricted users - for example when you want to use the 2sxc-form to let users add data - this must be enabled. That's what Edit.Enable(...) is for. Discover More in the Razor Tutorials We have an rich series of Razor tutorials . You should really check them out üëç. How to use This example shows how you enable the UI using Razor, which will allow public users to create data: <div> @Edit.Enable(api: true, forms: true, context: true, autoToolbar: false) </div> This example ensures that api : basic JS for editing are loaded, allowing you to then run javascript commands like $2sxc(...).run(...) forms : additional JS is loaded, enabling the standard form dialogs to open context : the html contains context-information about the app, so that the dialogs actually work - see also edit context the auto-toolbars are disabled (this would generate a default toolbar if no toolbar was specified) Usage Notes This command simply enables editing - but doesn't provide any permissions or show any buttons yet. Here are a few things you must know to get this to work: remember to set permissions to allow what you want to do (like create new draft items for public users) Edit.Enable uses named parameters , so you always have to use the api: true syntax the Edit.Enable won't output anything in the position it's added, because it controls the main wrapper you must also create a link or toolbar in your code for the public users, as they won't have a button to press otherwise Read also Tutorial app for Public Forms Blog Recipe for using Public Forms with 2sxc History Introduced in 2sxc 9.30"
  },
  "js-code/2sxc-api/2sxc.cms.html": {
    "href": "js-code/2sxc-api/2sxc.cms.html",
    "title": "The $2sxc.cms API | 2sxc and EAV 10",
    "keywords": "The $2sxc.cms API <!-- Data Highlights --> <!-- ADAM --> <!-- Server --> <!-- Prepare --> <!-- Data Source --> <!-- Optimzers --> <!-- Process / Awesomize --> <!-- Libraries --> <!-- data formats --> <!-- Browser --> <!-- Frameworks --> <!-- App show parts --> <!-- Interact parts --> <!-- Edit parts --> <!-- Edit UI parts --> <!-- SPA parts --> <!-- Custom highlight boxes - can be controlled by in-page CSS --> you are here (click to zoom) - discover the stack .context-box-summary .edit-custom { visibility: visible; } The $2sxc.cms object is the core JavaScript API to perform CMS actions such as opening edit-dialogs etc. As of now (2sxc 9.30) it only has 1 command run(...) but will be enhanced in the future to do more. You need this in advanced use cases. otherwise you don't need this . Such advanced cases are: when you create custom JS buttons to start a content-management action How to use Before you start, ensure you have the necessary JS scripts loaded: in edit-mode this happens automatically if you want to provide this to low-priviledge users, use @Edit.Enable(...) in razor Simple example: @* enable the editing *@ @Edit.Enable(api: true, forms: true, context: true, autoToolbar: false) <script> // simple function to run the command and handle the returned promise function addProject(tag) { $2sxc.cms.run(tag, \"new\", { contentType: \"Project\"}) .then(function () { alert(\"Thanks - we'll review your entry and publish it.\") }); } </script> <span onclick='window.addProject(this)'> add your project </span> the first parameter is an HTML tag in the DOM, which is used to look up the context automatically (see edit-context ) the second parameter is the verb for the cms-command to run the third parameter is additional parameters for that command Demo App and further links Tutorial app for Public Forms Blog Recipe for using Public Forms with 2sxc History Introduced in 2sxc 09.30"
  },
  "how-to/razor/edit.enable.html": {
    "href": "how-to/razor/edit.enable.html",
    "title": "Method in C# Razor | 2sxc and EAV 10",
    "keywords": "@Edit.Enable Method in C# Razor This document has been moved to NetCo Method in C# Razor"
  },
  "how-to/razor/edit.contextattributes.html": {
    "href": "how-to/razor/edit.contextattributes.html",
    "title": "ContextAttributes in Razor-Output | 2sxc and EAV 10",
    "keywords": "ContextAttributes in Razor-Output This document has been moved to NetCo ContextAttributes in Razor-Output"
  },
  "specs/web-api/url-schema.html": {
    "href": "specs/web-api/url-schema.html",
    "title": "This page has moved | 2sxc and EAV 10",
    "keywords": "This page has moved Visit the new location here: URLs for 2sxc WebAPI and REST APIs"
  },
  "specs/oqtane/index.html": {
    "href": "specs/oqtane/index.html",
    "title": "Oqtane Platform | 2sxc and EAV 10",
    "keywords": "Oqtane Platform Oqtane is a modern Blazor based platform similar to Dnn. It's inspired by the Dnn model but uses the latest .net core and more. As of now (March 2021) we are porting 2sxc to work on Oqtane and Dnn. The work is still in progress."
  },
  "specs/lookup/placeholder-tokens.html": {
    "href": "specs/lookup/placeholder-tokens.html",
    "title": "Placeholder Tokens | 2sxc and EAV 10",
    "keywords": "Placeholder Tokens Often you need a text-based code which should be replaced at runtime with a real value from elsewhere. In DNN / 2sxc this is called a token , and they usually look like [Source:Property] . At runtime, this will then show a value like 27 . Note this article applies to tokens as they are handled server-side. There is a special token-like syntax in JavaScript, which is not discussed here. Note There is also a TokenEngine which uses the same Token mechanism to generate HTML. What you see here also applies to that, but it's actually a separate topic. Token Basics A token is a piece of text that looks like [Source:Property] , which will be replaced by an engine so that it will then be a value. For example, [QueryString:Page] is replaced with 2 if the current url has ?page=2 in it. You can research more about tokens in older docs here and in the full list of standard tokens , it's a standard DNN concept. Internally it uses a LookUp-Engine which itself uses LookUp-Sources - see LookUp & LookUpEngine . Additional Token Features in 2sxc/EAV The EAV and 2sxc have enhanced Tokens to a new level with these features: 1. Sub-Tokens A token like [App:Settings:PageSize] will go through a tree of info-objects to find an inner property if it exists. This only works on special object types that are specifically meant to provide sub-data. 2. Fallback A token like [QueryString:page||1] will deliver the url-param, and if that is empty, will deliver 1 . Note that you need 2 pipe symbols | because the convention is that after the first pipe you can have a format specifier like #.## . 3. Stacking Stacking with more Tokens: a token like [QueryString:PageSize||[App:Settings:PageSize]] will try the first token, and if it doesn't resolve, try the next one 4. Recursion A token can resolve into a token, which would then be looked up again. So if a token [Settings:Page||1] is used, and the setting Page is not a number but again a token like [QueryString:Page] , then it will... resolve Settings:Page and find Querystring:Page resolve QueryString:Page and maybe find something if that is empty, return the fallback 1 Some Token Examples [Portal:PortalId] would return the current portal Id [App:Settings:PageSize] would return the page size as configured in app-settings [QueryString:Id] would retrieve the id-parameter from the url (note: you should never put this in your data source) [Settings:ProductId] would retrieve the id as configured in the UI by the user [Settings:productId||27] would also try to get the id, but return 27 if not found Advanced Token Sources in Special Scenarios Some situations will have token sources beyond the default. For example, when configuring data sources they always have 2 more sources In - used like [In:Default:PageSize] Settings - used like [Settings:PageSize] There is another special override-token system (not documented) which is used for testing Also Read LookUp & LookUpEngine DataSource Concept: Configuration Injection using Tokens IDataStream DataSource API DataSource API: EnsureConfigurationIsLoaded History General Tokens introduced in 2sxc 1.0 Most enhancements were in 2sxc 07.00"
  },
  "specs/lookup/lookup-and-engine.html": {
    "href": "specs/lookup/lookup-and-engine.html",
    "title": "LookUp & LookUpEngine | 2sxc and EAV 10",
    "keywords": "LookUp & LookUpEngine Many things in the EAV and 2sxc require it to look up parameters. For example, when a Query is created, it may need to know the current PortalId or the current time, to properly filter/sort something. This is achieved through 2 special object types, the ToSic.Eav.LookUp .ILookUp and ToSic.Eav.LookUp .ILookUpEngine, both in the ToSic.Eav.LookUp namespace. LookUp Objects LookUp objects have a Name similar to a namespace or a scope. For example, when a Module is being rendered, there are LookUp objects with names like QueryString , Module , Portal etc. They also have a list of properties they can look up, like Id , PortalId or parameters from the url. The lookup object is then responsible to retrieve these if requested. Everything is lazy, so these objects are only accessed if the parameter is actually needed. All LookUp objects implement the ToSic.Eav.LookUp .ILookUp interface and should inherit the ToSic.Eav.LookUp .LookUpBase object. LookUpEngine LookUp Engines will collect a set of LookUp objects and use these to resolve strings like Module:ModuleId . For this, they will check which LookUp has the right name (in this case Module ) and will ask it if it can provide the value (in this case the ModuleId ). LookUp Engines all implement the ToSic.Eav.LookUp .ILookUpEngine interface and should inherit the ToSic.Eav.LookUp .LookUpEngine object. Note Usually LookUp Engines will receive a long list (Dictionary) of things to look up, and resolve these in one quick call. This is because often they are attached to a DataSource which requires many configuration values - so they will prepare the list of parameters, pass it to the LookUpEngine and then work with the results as needed. Tip LookUp Engines can also perform default-fallbacks - so if a LookUp source can't provide the answer needed, the engine may use a static value instead: [QueryString:PageSize||10] Tip LookUp Engines can also perform lookup-fallbacks if the source can't provide an answer. In this case it may ask another LookUp if it has the answer. This happens when the Token looks like this: [QueryString:PageSize||[App:Settings:PageSize]] LookUpEngine objects are provided with DepedencyInjection. The system that gets the currently valid LookUpEngine inherits the ToSic.Eav.LookUp .IGetEngine. Examples of LookUp Objects Just to give you an idea of the power of LookUp objects, here are some in use: ToSic.Eav.LookUp .LookUpInEntity - this resolves entity values. ToSic.Eav.LookUp .LookUpInNameValueCollection - this resolves from name/value lists like Dictionary or Request.QueryString objects ToSic.Eav.LookUp .LookUpInMetadata - will get values from Metadata of something ToSic.Eav.LookUp .LookUpInLookUps - will look up values in various attached LookUp objects LookUpInDnnPropertyAccess - will look up stuff in DNN specific PropertyAccess objects, which are similar to LookUp objects LookUpInEntity - will look up things in an IEntity and also provide more information like Count, IsFirst, etc. for the Token Engine Also Read DataSource Concept: Configuration Injection using Tokens Placeholder Tokens DataSource API: EnsureConfigurationIsLoaded ToSic.Eav.LookUp ToSic.Sxc.LookUp ToSic.Sxc.Dnn.LookUp History General Tokens introduced in 2sxc 1.0 Most enhancements were in 2sxc 07.00"
  },
  "specs/js/toolbars-and-buttons-js.html": {
    "href": "specs/js/toolbars-and-buttons-js.html",
    "title": "Moved to | 2sxc and EAV 10",
    "keywords": "Moved to Toolbars and Buttons"
  },
  "specs/js/jquery.html": {
    "href": "specs/js/jquery.html",
    "title": "Moved | 2sxc and EAV 10",
    "keywords": "Moved Moved to JQuery in DNN and 2sxc"
  },
  "specs/js/commands.html": {
    "href": "specs/js/commands.html",
    "title": "Moved | 2sxc and EAV 10",
    "keywords": "Moved Moved to CMS Commands in JavaScript"
  },
  "specs/js/command-delete.html": {
    "href": "specs/js/command-delete.html",
    "title": "Moved to | 2sxc and EAV 10",
    "keywords": "Moved to delete Command"
  },
  "specs/js/command-custom-code.html": {
    "href": "specs/js/command-custom-code.html",
    "title": "Moved to | 2sxc and EAV 10",
    "keywords": "Moved to Buttons with Custom Code in a Toolbar"
  },
  "specs/input-types/ui-field-string-default.html": {
    "href": "specs/input-types/ui-field-string-default.html",
    "title": "Field Input-Type string-default | 2sxc and EAV 10",
    "keywords": "Field Input-Type string-default Moved to Field Input-Type string-default"
  },
  "specs/input-types/ui-field-number.html": {
    "href": "specs/input-types/ui-field-number.html",
    "title": "Field Input-Type Number | 2sxc and EAV 10",
    "keywords": "Field Input-Type Number Moved to Field Data Type: Number"
  },
  "specs/input-types/ui-field-number-default.html": {
    "href": "specs/input-types/ui-field-number-default.html",
    "title": "Field Input-Type number-default | 2sxc and EAV 10",
    "keywords": "Field Input-Type number-default Moved to Field Input-Type number-default"
  },
  "specs/input-types/custom.html": {
    "href": "specs/input-types/custom.html",
    "title": "Field Input-Type Custom | 2sxc and EAV 10",
    "keywords": "Field Input-Type Custom Moved to Field Data Type: Custom"
  },
  "specs/form/js-connector.html": {
    "href": "specs/form/js-connector.html",
    "title": "Moved to | 2sxc and EAV 10",
    "keywords": "Moved to API of Connector Object in Custom Input Fields"
  },
  "specs/form/index.html": {
    "href": "specs/form/index.html",
    "title": "Moved to | 2sxc and EAV 10",
    "keywords": "Moved to Customizing the Form - 2sxc v11!"
  },
  "specs/form/field-wysiwyg.html": {
    "href": "specs/form/field-wysiwyg.html",
    "title": "Moved to | 2sxc and EAV 10",
    "keywords": "Moved to Customizing the WYSIWYG Field in 2sxc 11"
  },
  "specs/roadmap/breaking-changes.html": {
    "href": "specs/roadmap/breaking-changes.html",
    "title": "Breaking Changes in EAV and 2sxc | 2sxc and EAV 10",
    "keywords": "Breaking Changes in EAV and 2sxc We try to minimize breaking changes, and most breaking changes won't affect your work, because it's internal API. We're documenting it here to ensure you know what happened, in case you still run into this. Version 11 There were small breaking changes in 11.00 to 11.11 but they were internal so shouldn't affect normal developers. Version 11.07 - Drop the old edit UI In 11.07 the old edit UI was removed, so customizations for that UI would not be in effect any more. Version 11.10 - Mainly Dependency Injection In v11.10 we used much more dependency injection than ever before and stopped using static values which were still in the API in many places. Because of this, certain helper objects to create entities or lookup values were changed and their constructors were changed. We invested a lot of time to try to ensure that old APIs still work, but in case you're hit by one of these, make sure you check the DI and switch to resolving the objects using DI. Version 11.11 - Language Detection Previously the language detection used the Thread culture. Turns out this wasn't reliable because DNN does some funny stuff (probably historical) which means that API-calls ended up using the language stored in some cookie instead of the one specified by the URL. We changed this, which should be more reliable. But if you were relying on this strange effect, then it may be a breaking change. Internally our tokens were also using the thread culture. When we changed this, we also had to change how tokens pick up the language. In rare cases this may affect you. We changed all tokens to always resolve boolean values to true / false (previously they would have been changed to the current language, like wahr for german). We believe this change is only an improvement, and should ensure that internal resolves in Queries etc. result in reliable output. Version 11.11 - DataSources: DataSourceConfiguration Note that we also improved the DataSourceConfiguration to an interface IDataSourceConfiguration and documented this. As a side effect the API stays the same, but you will have to recompile your data sources for them to work again - sorry. Version 11.11.03 - IEntity Values IEntity had a command called Value(fieldName) which was probably never used. The idea used to be that it does language lookup internally, but we refactored this out since it could never be fully reliable because the full language list wasn't known to the IEntity . So we re-purposed the method (assuming it's not used) to just lookup the first occurance of the value. This way it`s useful for configurations and similar which are not multi-language. IEntity also had a Value(fieldname, lookup) method. We are deprecating it, and making the lookup not happen from now on. We believe it was never used. IEntity had a command called PrimaryValue(fieldName) which was probably never ever used, so we're deprecating it. Use Value(fieldName) instead. Version 11.11.03 - Other UI Toolbar dropped the button and command for item-history , as the history is now part of the edit dialog Version 10 Version 10 has a lot of small breaking changes because we restructured the internal API so it's consistent when we publish it. All these things shouldn't affect you, because they were internal APIs, but in case it does - here's what we did. Version 10.22 and 10.23 Renamed the RootDataSource and the Interface to IAppRoot Split SOC of the AppRoot DataSource so that caching, Root-Metadata and ListCache is fully separate Since the Logging system now auto-picks up the code lines and names of the methods, we simplified the commands and dropped some parameters. Moved quite a bit of the DataSource objects into sub-objects, again for SOC. Version 10.20-04 (ca. 2019-12-03) Renamed DataTableDataSource to DataTable , old name still works. Renamed ExternalDataDataSource to ExternalData , old name still works. Renamed ToSic.SexyContent.DataSources.ModuleDataSource to ToSic.Sxc.DataSources.CmsBlock , old name still works. Renamed ToSic.Eav.DataSources.VisualQuery.VisualQueryAttribute to ToSic.Eav.DataSources.Queries.VisualQueryAttribute , old name still works. Renamed ToSic.SexyContent.Environment.Dnn7.Factory to ToSic.Sxc.Dnn.Factory , old name still works. Renamed ToSic.Eav.DataSources.BaseDataSource to ToSic.Eav.DataSources.DataSourceBase for consistency, old name still works. Moved the LookUp namespaces into the Core DLL Version 10.20-02 (ca. 2019-11-22) More internal changes which shouldn't affect anybody, but make the API ready for public docs... Moved/renamed the internal Eav.AppDataPackage to Eav.Apps.AppState Moved/renamed some internal interfaces like Entity... Did a major change for how Attribute<T> for relationships work. Before they were Attribute<EntityRelationship> and now they are Attribute<IEnumerable<IEntity>> . This also affects Value<EntityRelationship> which is now Value<IEnumerable<IEntity>> Moved Tenant<T> and Container<T> including matching interfaces to Eav.Environment Renamed IAppIdentity to IInAppAndZone and IZoneIdentity to IInZone Renamed ICacheKeyProvider to ICacheKey Renamed CacheChainedIEnumerable<T> to SynchronizedList<T> Moved/Renamed MetadataFor to Eav.Metadata.Target . Left old name compatible. Moved some extension methods for IEntity from ToSic.Eav.Data.Query to ToSic.Eav.Data Changed Permissions to be strongly typed EntityBased objects Version 10.20.01 (2019-11-12) Internal code now uses the term Header instead of ListContent . External code provides both for backward-compatibility moved internal interfaces for engines (Razor/Token) to final namespaces ToSic.Sxc.Engines IEngine EngineBase ITokenEngine IRazorEngine corrected architecture - some template-management code had slipped into Eav.Apps , was moved back to Sxc.Apps The Template object was moved from Eav.Apps to Sxc.Views and we added an interface IView . We also renamed the internal properti ViewNameInUrl to UrlIdentifier . To correct the API a CmsManager was created extending the AppManager, which is in charge of Views Moving internal stuff related to content blocks IContentBlock from SexyContent.Interfaces to Sxc.Blocks from ToSic.SexyContent.ISxcInstance to ToSic.Sxc.Blocks.IBlockContext actually moved a lot of things there incl. ContentBlock now BlockConfiguration and more - all internal stuff Moving the ToSic.SexyContent.App to ToSic.Sxc.Apps.App In a razor page, we added the preferred Purpose . The old InstancePurpose will still work Placed some things we just moved in 10.20 to a final place - since it's a very recent change, we updated the docs in the 10.20.00 section Changed, but completely internal Some namespaces on SexyContent.ContentBlocks were moved to Sxc.Blocks Version 10.20.00 (2019-11-05) the internal interface IInPageEditingHelpers was moved from ToSic.SexyContent.Interfaces to the namespace ToSic.Sxc.Web the internal interface ILinkHelper was moved to ToSic.Sxc.Web the internal interface IHtmlHelper was moved to ToSic.Sxc.Dnn the property Configuration on dynamic entities was deprecated in 2sxc 4 and removed in 2sxc 10 - we don't think it was ever used moved internal Metadata interfaces (ca. 5) into final namespace ToSic.Eav.Metadata Moved a bunch of internal interfaces which we believe were never used externally from ToSic.Eav.Interfaces to ToSic.Eav.Data ToSic.Eav.Data.IAttribute ToSic.Eav.IAttribute<T> IAttributeBase IAttributeDefinition IChildEntities IContentType IDimension IEntityLight ILanguage IRelationshipManager IValue IValue<T> IValueOfDimension<T> Moved a bunch of internal interfaces which we believe were never used externally from ToSic.Eav.Apps.Interfaces to ToSic.Eav.Apps IApp IAppData IAppDataConfiguration IAppEnvironment IEnvironmentFactory IInstanceInfo IItemListAction IPagePublishing ITenant IZoneMapper the internal namespace ToSic.Eav.ValueProvider was changed to ToSic.Eav.LookUp and inside it we renamed a bunch of internal interfaces and objects which we believe were never used externally Deprecated/Changed, but not broken the internal interface ToSic.SexyContent.IAppAndDataHelpers was renamed to ToSic.Sxc.IDynamicCode but the old interface still exists, so it shouldn't break it was used by Mobius Forms moved ToSic.Eav.Interfaces.IEntity to ToSic.Eav.Data.IEntity - but preserved the old interface for compatibility it was used everywhere Clean-Up, but not broken We're transitioning to the term Header instead of ListContent in templates. The Razor pages and WebApi have this starting now, while old terms still work. Note that we're not creating a HeaderPresentation , because you should use Header.Presentation Version 9 Version 9.20.00 (2018-03-04) Minor breaking change in ADAM properties, like Id instead of FolderID which was a leftover of DNN naming. see full blog post Version 09.08.00 (2017-11-28) Minor breaking change List<IEntity> instead of Dictionary<int, IEntity> on the IDataSource see full blog post Version 09.03.00 (2017-10-08) Breaking change on inconsistent naming ToSic.Eav.IEntity instead of ToSic.Eav.Interfaces.IEntity . see full blog post"
  },
  "specs/js/sxc.html": {
    "href": "specs/js/sxc.html",
    "title": "Moved to | 2sxc and EAV 10",
    "keywords": "Moved to The Module-Instance Sxc Controller"
  },
  "specs/js/sxc.manage.html": {
    "href": "specs/js/sxc.manage.html",
    "title": "Moved to | 2sxc and EAV 10",
    "keywords": "Moved to Manage Everything With the manage Controller"
  },
  "specs/js/quicke.html": {
    "href": "specs/js/quicke.html",
    "title": "Moved | 2sxc and EAV 10",
    "keywords": "Moved Moved to Html & JS: quickE - Quick Edit 2.0"
  },
  "specs/js/overview.html": {
    "href": "specs/js/overview.html",
    "title": "Moved to | 2sxc and EAV 10",
    "keywords": "Moved to JavaScript / HTML API Documentation for DNN / 2sxc"
  },
  "specs/js/2sxc.cms.html": {
    "href": "specs/js/2sxc.cms.html",
    "title": "Moved to | 2sxc and EAV 10",
    "keywords": "Moved to The $2sxc.cms API"
  },
  "specs/input-types/ui-field-string.html": {
    "href": "specs/input-types/ui-field-string.html",
    "title": "Field Input-Type string | 2sxc and EAV 10",
    "keywords": "Field Input-Type string Moved to Field Data Type: String"
  },
  "specs/input-types/ui-field-string-url-path.html": {
    "href": "specs/input-types/ui-field-string-url-path.html",
    "title": "Field Input-Type string-url-path | 2sxc and EAV 10",
    "keywords": "Field Input-Type string-url-path Moved to Field Input-Type string-url-path"
  },
  "specs/input-types/ui-field-string-font-icon-picker.html": {
    "href": "specs/input-types/ui-field-string-font-icon-picker.html",
    "title": "Field Input-Type string-font-icon-picker | 2sxc and EAV 10",
    "keywords": "Field Input-Type string-font-icon-picker Moved to Field Input-Type string-font-icon-picker"
  },
  "specs/input-types/ui-field-entity.html": {
    "href": "specs/input-types/ui-field-entity.html",
    "title": "Field Input-Type entity | 2sxc and EAV 10",
    "keywords": "Field Input-Type entity Moved to Field Data Type: Entity (List of Entity-Items)"
  },
  "specs/input-types/ui-field-entity-query.html": {
    "href": "specs/input-types/ui-field-entity-query.html",
    "title": "Field Input-Type entity-query | 2sxc and EAV 10",
    "keywords": "Field Input-Type entity-query Moved to Field Input-Type entity-query"
  },
  "specs/input-types/ui-field-entity-default.html": {
    "href": "specs/input-types/ui-field-entity-default.html",
    "title": "Field Input-Type entity-default | 2sxc and EAV 10",
    "keywords": "Field Input-Type entity-default Moved to Field Input-Type entity-default"
  },
  "specs/input-types/ui-field-empty.html": {
    "href": "specs/input-types/ui-field-empty.html",
    "title": "Field Input-Type Empty | 2sxc and EAV 10",
    "keywords": "Field Input-Type Empty Moved to Field Data Type: Empty"
  },
  "specs/input-types/ui-field-datetime-default.html": {
    "href": "specs/input-types/ui-field-datetime-default.html",
    "title": "Field Input-Type datetime-default | 2sxc and EAV 10",
    "keywords": "Field Input-Type datetime-default Moved to Field Input-Type datetime-default"
  },
  "specs/input-types/ui-field-boolean.html": {
    "href": "specs/input-types/ui-field-boolean.html",
    "title": "Field Input-Type boolean | 2sxc and EAV 10",
    "keywords": "Field Input-Type boolean Moved to Field Data Type: Boolean"
  },
  "specs/input-types/ui-field-boolean-default.html": {
    "href": "specs/input-types/ui-field-boolean-default.html",
    "title": "Field Input-Type boolean-default | 2sxc and EAV 10",
    "keywords": "Field Input-Type boolean-default Moved to Field Input-Type boolean-default"
  },
  "specs/docs/doc-tags.html": {
    "href": "specs/docs/doc-tags.html",
    "title": "Documentation Tags | 2sxc and EAV 10",
    "keywords": "Documentation Tags If you find such tags in a documentation, this means that whatever you are reading is marked because it's not done, needs more documentation or whatever (or that we forgot to remove the marker). wip This tag means Work-In-Progress. todoc This means that the feature exists, but needs documentation - you could help contribute :). todo This means that something should be done some time."
  },
  "specs/docs/contribute.html": {
    "href": "specs/docs/contribute.html",
    "title": "How to contribute to this documentation | 2sxc and EAV 10",
    "keywords": "How to contribute to this documentation This documentation is a github page created with docfx stored in a github repository. TODO: THIS INFORMATION IS OUT OF DATE - IF YOU WISH TO CONTRIBUTE, PLEASE CONTACT THE iJungleboy. Working with images and asset-files Adding images is very difficult when editing online (there's no upload feature) but it's very easy when editing offline, because you can create folders and push them back. Please use the following structure for now assets (contains all the assets) logos (contains various logos, for re-use) contribute (assets for the page Contribute ) [page-name] (assets for each specific page) If you have any other image/file needs which need different structure, please discuss with Daniel @iJungleboy. About the Markdown Syntax If you're new to wikis or github comments / documentation, you may be a bit lost when it comes to markdown. I think the most important things you need to know are: Headers have 1-6 hashes in front, like ## Header 2 bold uses two * chars around the text, _italic_ uses one _ char, escaping chars uses the \\ slash (so any character right after a \\ is shown and doesn't format) Linking has many options, better read the manuals Lists have many options, better read the manuals Images use a ![alt-text](/assets/path/file.ext) syntax Note that line-breaks usually don't cause a line-break in the result (except in code-samples). You can enforce a simple line break by adding two spaces at the end of a line like \"check out: \" (two spaces after the \":\") Inline code starts and ends with a \"`\" character - like `code` - it will then look like code Multi-line code blocks start with three of these, like ``` var x = 17; // a comment ``` resulting in var x = 17; // a comment Multi-line code with syntax highlighting needs you to specifiy the language c#: ```c# var x = 17; // a comment ``` resulting in var x = 17; // a comment Copyright All docs are licensed as CC-BY . By contributing you agree that your work can be used in this way."
  },
  "specs/datasources/linq-datasource.html": {
    "href": "specs/datasources/linq-datasource.html",
    "title": "Querying Data and Data Sources with code and LINQ | 2sxc and EAV 10",
    "keywords": "Querying Data and Data Sources with code and LINQ This has moved to Querying Data and Data Sources with code and LINQ"
  },
  "specs/datasources/index.html": {
    "href": "specs/datasources/index.html",
    "title": "DataSource and Query | 2sxc and EAV 10",
    "keywords": "DataSource and Query The EAV system has a sophisticated mechanism to provide data from various sources, and filter/sort them as needed. This is what the DataSource and Query things are for. Note This is a slightly advanced topic. So if you're just starting with 2sxc / EAV, this may not be for you yet."
  },
  "specs/datasources/datastream.html": {
    "href": "specs/datasources/datastream.html",
    "title": "DataStreams | 2sxc and EAV 10",
    "keywords": "DataStreams DataStreams are objects which behave like a table, delivering a bunch of content-items. Common examples in Razor-templates are: the Data[\"Default\"] is a data-stream containing all content-items assigned to this template, ready to show the App.Data[\"Tag\"] is a data-stream containing all tag-items in the entire app. How to use The most commen uses will loop through all items in such a stream and show them. Here's an example: <ol> @foreach(var person in Data[\"Default\"]) { <li>@AsDynamic(person).FullName</li> } </ol> The @foreach will go through all the items. Each item is of the type IEntity . To make it easier to template, we convert it to a Dynamic Entity using AsDynamic and then we can just show the name with .FullName . In most cases we will need the loop-item a lot, and would preferr to not write AsDynamic every time. Because of this, we usually write the AsDynamic in the Loop, like this: <ol> @foreach(var person in AsDynamic(Data[\"Default\"])) { <li>@person.FullName - born @person.Birthday and married to @person.SpouseName</li> } </ol> Advanced Use Cases There are some advanced use-cases where you need to know more about the IDataStream object, mostly when using LINQ. This is fairly rare, and if you really need to know more, it's best to consult the EAV DataSource code. Just a few more details you might care about: The stream has a property Source which points to the owning DataSource . a stream might be attached to many targets for further processing or for templating, but the stream doesn't know about this you can always enumerate the stream itself using LINQ, like var blues = Data[\"Default\"].Where(x => AsDynamic(x).Category == \"Blue\")) if you want more control over what you're looping through, there are two properties: the List property which is a IDictionary<int, IEntity> , and also lets you access it directly with your entityId if known, like Data[\"Default\"].List[1753] the LightList which is an IEnumerable<IEntity> of course there's always quite a bit more to it, like auto-caching, but you usually don't need to understand all that. Read also todo: tutorial links you should also read about DataSources todo: api links History Introduced in 2sxc 01.00 Multi-Language since 2sxc 02.00"
  },
  "specs/datasources/datasource.html": {
    "href": "specs/datasources/datasource.html",
    "title": "DataSources | 2sxc and EAV 10",
    "keywords": "DataSources DataSources are IDataSource objects which deliver one or many DataStreams , which contain a bunch of content-items. There are many data-sources, and most of them will... ...either get data from somewhere external like SQL, CSV, REST or the EAV-cache and provide this for further use - then it's a pure IDataSource ...or receive data from another DataSource, then process/filter this and provide the result for further use, in which case it's both an IDataSource as well as an IDataTarget So DataSources can be joined together into a Query to do amazing things, like a CsvDataSource can read a CSV-file and provide the data as a stream on Entities on csvDs[\"Default\"] ... ...and pipe the result it to a CacheDataSource which caches the data for x-minutes ...then pipe it to a ValueFilterDataSource , which only shows the items where the Country matches the Url-parameters country ...then pipe it to a ValueSortDataSource, ordering it by LastName and then FirstName ...then pipe it to another CacheDataSource so that this common filter/sort combination will be kept for 5 minutes and then the result can be used in a Template or streamed as JSON to a JavaScript SPA. Understanding Data-Flow between DataSource Objects Each DataSource has a list of out-streams available on the .Out[\"StreamName\"] property, but usually access directly just with the DataSourceName[\"StreamName\"] . This is what also happens when you use the Data object and write foreach(var item in Data[\"Default\"]) . Aside from consuming data in your your template, most data-sources will simply offer the Out-Stream to other DataSources for further processing. Technically it's mapped like this: Cache.Out[\"Default\"] > ContentTypeFilter.In[\"Default\"] ... then some magic happens inside the ContentTypeFilter ... then the ContentTypeFilter.Out[\"Default\"] has the resulting items, which can again be used as an In on another DataSource, or simply used in your template Most DataSources will only have one In-stream and one Out-stream, but this is very variable depending on your need. Creating your own Custom DataSource short instruction to get started here's docs about the relevant API understanding configuration injection Understanding Configuration of Each DataSource Object The configuration uses a sophisticated token system to provide all necessary information. It is explained here . Common Use Cases of DataSource in C# Code You will usually use DataSource objects in these common cases: when templating in Razor, the Data object is a DataSource, usually having a Default stream ( Data[\"Default\"] ) and sometimes further streams like Data[\"ListContent\"] or Data[\"Categories\"] etc. when templating, the App.Data is also a DataSource providing a stream for each content-type in this app, like App.Data[\"BlogPost\"] or App.Data[\"Tag\"] every query is technically a DataSource, and in the query you define which DataStreams it has - if ever you use it in code, you'll see that App.Query[\"SortedTags\"] would be a DataSource and typically the Default stream would contain all these tags. a query is always a chain of DataSource doing one operation and passing it on to the next DataSource. How to use In your Razor-templates you'll usually work with these three sources: Data App.Data App.Query[...] Please read more about these in links. Creating DataSource Objects in C#/Razor Code Sometimes you want to have full control over what a DataSource does or what parameters it's using. This is easy: // A source which can filter by Content-Type (EntityType) var allAuthors = CreateSource<ToSic.Eav.DataSources.EntityTypeFilter>(); allAuthors.TypeName = \"Authors\"; // access the data and automatically apply the filter/config var authors = allAuthors[\"Default\"]; Creating a Query in Code by Piping / Chaining Data sources What the visual-designer does is configure how DataSources are attached, mapping their in/out streams and adding parameters. You can also do this in code, but it's fairly advanced. You would usually want to do this, if you want to use a filter or something, but need to provide parameters which aren't available in the Visual Query Designer. Here's a simple example: // A source which can filter by Content-Type (EntityType) var allAuthors = CreateSource<EntityTypeFilter>(); allAuthors.TypeName = \"Author\"; // Sort by FullName var sortedAuthors = CreateSource<ValueSort>(allAuthors); sortedAuthors.Attributes = \"FullName\"; // Sort by Fullname descending var sortedAuthorsDesc = CreateSource<ValueSort>(allAuthors); sortedAuthorsDesc.Attributes = \"FullName\"; sortedAuthorsDesc.Directions = \"desc\"; // Sort by 2 fields var sortedAuthorsMult = CreateSource<ValueSort>(allAuthors); sortedAuthorsMult.Attributes = \"Website,FullName\"; sortedAuthorsMult.Directions = \"asc, desc\"; // sort by internal EntityId var sortedAuthorsById = CreateSource<ValueSort>(allAuthors); sortedAuthorsById.Attributes = \"EntityId\"; Because the first allAuthors didn't specify an up-stream in the () empty brackes, it automatically gets attached to the App-Cache with all the data of the current app. So var allAuthors = CreateSource<EntityTypeFilter>(); will initially have all content-items at it's disposal. The most important thing to notice is that each additional data-source uses the first allAuthors DataSource as the default upstream DataSource. So when these sort/filter or do something, they will only receive the data already filtered by the allAuthors. Developing Your Own DataSource Maybe you want to create an XML DataSource or a DNN-Users DataSource. This is easy to do. Best read the blog post about this Read also about Data Streams Dynamic Code CreateSource(...) .net API Demo-App showing some coding of DataSources Blog about creating your own data-source History Introduced in 2sxc 04.00"
  },
  "specs/datasources/api-ensureconfigurationisloaded.html": {
    "href": "specs/datasources/api-ensureconfigurationisloaded.html",
    "title": "DataSource API: EnsureConfigurationIsLoaded | 2sxc and EAV 10",
    "keywords": "DataSource API: EnsureConfigurationIsLoaded If a DataSource is configurable , then the code must parse any configuration tokens before accessing the values. This is done with EnsureConfigurationIsLoaded() . How to use EnsureConfigurationIsLoaded Here's a simple example of the PublishingFilter DataSources : // get the correct stream, depending on ShowDrafts private IEnumerable<IEntity> GetList() { EnsureConfigurationIsLoaded(); Log.Add($\"get incl. draft:{ShowDrafts}\"); var outStreamName = ShowDrafts ? Constants.DraftsStreamName : Constants.PublishedStreamName; return In[outStreamName].List; } This example needs ShowDrafts to be boolean (true/false), but the built-in token-template for it is [Settings:ShowDrafts||false] . This is why EnsureConfigurationIsLoaded() must be called first. Advanced Use Case: Overwrite EnsureConfigurationIsLoaded In some scenarios you may want to overwrite EnsureConfigurationIsLoaded. An example is the SqlDataSource, which has a custom implementation to protect agains Sql-Injection. You can find a good example in the source code of the SqlDataSource . Read also DataSource API - DataSource API overview Demo Code and further links demo data source code FnL DataSource History Introduced in EAV 4.x, 2sxc 07.00"
  },
  "specs/datasources/api-configmask.html": {
    "href": "specs/datasources/api-configmask.html",
    "title": "DataSource API: ConfigMask | 2sxc and EAV 10",
    "keywords": "DataSource API: ConfigMask DataSources often need settings which come from the App or from a settings dialog. The ConfigMask builds a configuration token which will be used to get this setting, and also ensures that cachings mechanims vary the cache based on the result of the configuration. How to use ConfigMask Here's a simple example of the constructor of the DnnFormAndList DataSource , which expects 3 settings: public DnnFormAndList() { // Specify what out-streams this data-source provides. Usually just one, called \"Default\" Provide(GetList); // Register the configurations we want as tokens, so that the values will be injected later on ConfigMask(\"ModuleId\", \"[Settings:ModuleId||0]\"); ConfigMask(\"TitleField\", \"[Settings:TitleFieldName]\"); ConfigMask(\"ContentType\", \"[Settings:ContentTypeName||FnL]\"); } This example adds 3 configuration masks - let's find out what exactly happens. Tokens for Configuration Injection The EAV-System has a sophisticated system to get configuration based on tokens. You can read about configuration injection using tokens here . Registering and Resolving these Tokens with ConfigMask Internally a lot happens, but you just need to know the ConfigMask command. The syntax is: ConfigMask(key, mask) This will do the following Add this mask (using this name) to the configuration list register this key to be cache-relevant Read also Configuration using Tokens Ensuring configuration is parsed Demo App and further links FnL DataSource Demo Code History Introduced in 2sxc 9.13 to aid custom data sources"
  },
  "specs/content/index.html": {
    "href": "specs/content/index.html",
    "title": "Content Data Models | 2sxc and EAV 10",
    "keywords": "Content Data Models Data is just numbers - sometimes assembled together to form text, images or whatever. But to give meaning it must be structured in a way to become Content . Note The smallest piece of Content is an Entity - similar to the idea of a record, object or item. You can read more about Entities here . The term Entity comes from the underlying data model EAV (Entity/Attribute/Value). Tip This information in this document may feel a bit technical. If you're just getting started, you probably don't need this. Content Blocks Content items wouldn't do much - they must be shown to the user in the intended layout. The configuration of such a show these things using this template is handled in a ContentBlock . The data model for these Content Blocks looks like this: So each Content Block has: One reference to a View configuration Zero, one or many references to content items The same amount of Content-Presentation items Zero or one references to Header items The same amount of Header-Presentation items Tip Content Blocks contain a reference to the View and optionally a bunch of Content Items that will be used/shown in that View . But there are actually 4 possible scenarios deciding what is actually shown: The View can show the content-items provided by the Content Block The View can be configured to use a Query and show data from that The Template code could also get data from the App directly and show that Combinations of the three options above are possible Important Since the View can also be configured to get data from other sources, it may show items that are not in the list of the Content Block . Content Blocks in a CMS like DNN When you see 2sxc data in DNN, that's because a module was added to the page pointing to a Content Block . If you want to know more about that, read 2sxc Content in DNN . Inner Content Content Blocks are usually added to pages as DNN Modules . But there is another way: as Inner Content . What this means is that a Content Item like a Blog-Post says \"Show this other content-block right...here\". To help 2sxc keep track of what is used where, this relationship is stored as a Content Block Reference . Inner Content from Another App Usually an App is self-contained, so everything it shows comes from the same App . This also means that exporting/importing an app will result in the same stuff arriving at the destination. The following diagram shows how Content can come from multiple apps Important So if you're using Inner Content and referencing content from another App , this crosses the borders between apps, and you'll need to export/import both Apps to get the same result."
  },
  "specs/content/dnn-integration.html": {
    "href": "specs/content/dnn-integration.html",
    "title": "2sxc Content in DNN | 2sxc and EAV 10",
    "keywords": "2sxc Content in DNN The vision of 2sxc is to be cross-platform, so we hope one day it will also run on NopCommerce and other systems. This is how it's integrated into DNN. What DNN References to Portal to ZoneId Mapping The EAV has a virtual container called a Zone which is similar to a Portal in DNN. The IDs will not match though, so each Portal has a setting called ToSIC_SexyContent_ZoneID which contains the ZoneId for that portal. When 2sxc is used the first time on a portal, it will detect a missing ZoneId, which triggers zone creation and sets this value. Module-Installation to App-Installation Mapping A DNN Module installation corresponds to an App installation. Internally there is no mapping, as it is not necessary. There is an important difference though: in DNN, each installed Module is installed at the System level , so installed Modules are available on all Portals. On the other hand, Apps are installed at the Zone (Portal) level , so each app is only available on that portal. Customizations to the app also only affect that portal, and each Portal could have the same App installed in different versions. Note Technically there are a few ways to share Apps, their data, templates etc. across Portals, but these are fairly advanced scenarios. Module-On-Page to ContentBlock Mapping In DNN each modules has Module Settings to store configuration. 2sxc stores these two pieces of information in the Module Settings: App ID - what app is being shown here Content Block ID - the GUID of the Content Block Entity containing the rest of the configuration Understanding how this ties in helps you make better decisions. Make sure you also read Content Data Models Basic Setup: Content is assigned to the module This is the most common setup - and used in the Content module as well as in many App modules, which rely on the author to manually create content for this specific module. It's not usually used in data-oriented modules like news, blogs, etc. See also [] Here is how it's mapped: Manually Managing this Data Note: you shoudn't usually do this - but sometimes you have to. Check out this short explanation: Note This scerenshot above is from 2sxc 8. In 2sxc 11 you can change scopes in the dropdown below the data table. FAQ If a page or module is deleted, does it also delete the Content Block ? No. Note that if a page or module is deleted, it goes into the DNN trash, so it could always be restored again. If a page or module is deleted from the trash, does it also delete the Content Block ? No. DNN does not inform modules about delete actions, so we can't do clean-up. Are Content Blocks which don't appear on a page orphaned and can I delete them? Maybe. Since they could be used in other apps (see Content Data Models ) as Inner Content , there is no quick way to tell if it's being used elsewhere. Can a Content Block be used on multiple modules / pages? Yes. It's not common, but since a module can be shown on multiple pages or even on other portals, it would show the same Content Block there as well. Also Read about Content Data Model Best also read about Content Data Models in general. Blog about the internals of modules and content History Introduced in 2sxc 6, previously it was handled a bit differently 2sxc 11.02 added a feature to see where views are in use"
  },
  "specs/configuration/features.html": {
    "href": "specs/configuration/features.html",
    "title": "Features API in .net | 2sxc and EAV 10",
    "keywords": "Features API in .net 2sxc / EAV in 9.30+ has a features management . In certain cases it would be good if the razor-view could verify that the feature is enabled - for example to show a warning when it isn't enabled yet. This is what the Features API is for. How To Use This example is taken from Mobius Forms and the code can be found in the Mobius Github Repo . @using ToSic.Eav.Configuration @{ // show warning if the save-attachments in web api isn't activated var reqFeatures = new[]{new Guid(\"ecdab0f6-4692-4544-b1e7-72581f489f6a\")}; FeaturesDisabledException missingException; if(!Features.EnabledOrException(reqFeatures, \"Warning: file upload won't work yet, as it hasn't been enabled.\", out missingException)) { <div class=\"alert alert-warning\"> @missingException.Message </div> } } The code above checks if a feature is enabled, and if not, will show a message to the viewer that this must be enabled first. What you Need To Know The API lies in the namespace ToSic.Eav.Configuration The Features object is static, so you don't need to create it, just use the commands on it ATM the public API has the following commands Enabled(Guid featureId) which checks if a feature is enabled Enabled(IEnumerable<Guid> featureIds) which checks if multiple features are enabled EnabledOrException(IEnumerable<Guid> featIds, string message, out FeaturesDisabledException) which will check and give you an error object back, which you can either throw or show the message of (like in the example above) Finding Feature GUIDs At the moment there is no catalog of feature GUIDs yet, and sometimes you may actually create your own. So for now you'll mainly need this for features of 2sxc / eav, and you can simply look them up in the code, or see them in the features management of the installation you're developing on. Warning: there are constants in the EAV code which have these feature GUIDs, but do not use them, as they will be moved to other places in the code at a later time Read also ... History Introduced in 2sxc 09.30"
  },
  "specs/configuration/features-concept.html": {
    "href": "specs/configuration/features-concept.html",
    "title": "Concept: Features | 2sxc and EAV 10",
    "keywords": "Concept: Features To increase the security of 2sxc, many features are only available if actively enabled . This reduced the security surface and hardens the installation . A feature is a functionality of 2sxc or EAV, which can be enabled/disabled at system level. Each feature is identified by a GUID, and all features are disabled by default. Some examples of features: define permissions by user ( new in 9.30 ) use the new (beta) Angular 5 UI for editing ( new in 9.30 ) use standard 2sxc forms to allow public users to submit data ( new in 9.30 ) let certain users save draft-only data ( new in 9.30 ) enable paste-image-from-clipboard (beta, new in 9.30 ) Behavior if Feature is Disabled If a feature is not enabled and code needs to use the feature, it will either show an error OR simply skip that functionality. This varies from feature to feature. If an error is thrown, the system will include a link to the missing feature as well as instructions to enable. Managing Features This is done through the Apps-Management. This is what it looks like: Read about managing features in the blog about features-management How the Feature-Configurations are Stored Features use a json-file called features.json located in the desktopmodules/tosic_sexycontent/.data-custom/configurations folder. Additional Security Mechanisms For added security, there are two layers of additional protection: The configuration contains a fingerprint of the current installation (so that an attacker cannot simply replace the features-configuration with an own copy). This fingerprint should match the fingerprint of the installation for the configuration to be valid. Read more about fingerprinting in this blog . When the configuration is created, it is signed by the 2sxc.org server using a digital certificate and verified when the features are loaded. Note: the security features are already built into 9.30 but not yet enforced. This is because it's a fairly new setup, and we want to be sure that we don't accidentally disable something if something doesn't work properly. Read also Blog about new security mechanisms in 9.30 History Feature system introduced in 2sxc 9.30"
  },
  "specs/cms/toolbars/toolbar-builder.html": {
    "href": "specs/cms/toolbars/toolbar-builder.html",
    "title": "Moved to | 2sxc and EAV 10",
    "keywords": "Moved to Custom Toolbars - the Easy new Toolbar Building System"
  },
  "specs/cms/toolbars/inpage-toolbars.html": {
    "href": "specs/cms/toolbars/inpage-toolbars.html",
    "title": "Moved to | 2sxc and EAV 10",
    "keywords": "Moved to In-Page Edit-Item Toolbars and Buttons"
  },
  "specs/cms/views.html": {
    "href": "specs/cms/views.html",
    "title": "Moved to | 2sxc and EAV 10",
    "keywords": "Moved to Views and Templates"
  },
  "specs/cms/templates-razor-code-behind.html": {
    "href": "specs/cms/templates-razor-code-behind.html",
    "title": "Razor Templates - Code-Behind | 2sxc and EAV 10",
    "keywords": "Razor Templates - Code-Behind This page has moved to Razor Templates - Code-Behind"
  },
  "js-code/custom-fields/field-wysiwyg.html": {
    "href": "js-code/custom-fields/field-wysiwyg.html",
    "title": "Customizing the WYSIWYG Field in 2sxc 11 | 2sxc and EAV 10",
    "keywords": "Customizing the WYSIWYG Field in 2sxc 11 <!-- Data Highlights --> <!-- ADAM --> <!-- Server --> <!-- Prepare --> <!-- Data Source --> <!-- Optimzers --> <!-- Process / Awesomize --> <!-- Libraries --> <!-- data formats --> <!-- Browser --> <!-- Frameworks --> <!-- App show parts --> <!-- Interact parts --> <!-- Edit parts --> <!-- Edit UI parts --> <!-- SPA parts --> <!-- Custom highlight boxes - can be controlled by in-page CSS --> you are here (click to zoom) - discover the stack .context-box-summary .edit-ui-custom { visibility: visible; } These are the technical specs for reference. Make sure you first read the how to before you start. Since WYSIWYG is so complex, with image-handling, special paste etc. we believe most developers are better of using the existing system, and just reconfiguring it. That's what we'll explain here. Make sure TinyMCE is loaded We must first load the standard WYSIWYG control before we start, otherwise you'll run into timing issues. The best way to do this can be seen in the tutorial , but this is what you need: const builtInWysiwyg = '[System:Path]/system/field-string-wysiwyg/index.js'; /** Our WebComponent which is a custom, lightweight wysiwyg editor */ class StringWysiwygCustom extends HTMLElement { /* connectedCallback() is the standard callback when the component has been attached */ connectedCallback() { // We need to ensure that the standard WYSIWYG is also loaded this.connector.loadScript('tinymce', builtInWysiwyg, (x) => { this.initWysiwygCallback() }) } initWysiwygCallback() { // ... } } This way the form will load the built-in WYSIWYG control and trigger your callback, OR if it has already been loaded, immediately trigger your callback. Configure the TinyMCE WYSIWYG Web Control The control has these public properties: mode - values can be edit and preview , default is preview connector - the object that every form control needs. You must connect this reconfigure a special object that can change the configuration at various points Code Sample: const tagName = 'field-string-wysiwyg-micro'; const builtInWysiwyg = '[System:Path]/system/field-string-wysiwyg/index.js'; /** Our WebComponent which is a custom, lightweight wysiwyg editor */ class StringWysiwygCustom extends HTMLElement { /* connectedCallback() is the standard callback when the component has been attached */ connectedCallback() { // We need to ensure that the standard WYSIWYG is also loaded this.connector.loadScript('tinymce', builtInWysiwyg, (x) => { this.initWysiwygCallback() }) } initWysiwygCallback() { // 1. Create a built-in field-string-wysiwyg control const wysiwyg = document.createElement('field-string-wysiwyg'); // 2. tell it if it should start in preview or edit wysiwyg.mode = 'edit'; // can be 'preview' or 'edit' // 3. attach connector wysiwyg.connector = this.connector; // 4. also attach reconfigure object which can change the TinyMCE as it's initialized wysiwyg.reconfigure = new WysiwygReconfigurator(); // 5. Append it to the DOM. Do this last, as it will trigger connectedCallback() in the wysiwyg this.appendChild(wysiwyg); } } /** The object which helps reconfigure what the editor will do */ class WysiwygReconfigurator { configureOptions(options) { options.toolbar = \"undo redo | bold italic\" return options; } } // Register this web component - if it hasn't been registered yet if (!customElements.get(tagName)) customElements.define(tagName, StringWysiwygCustom); connector Object for the connector object please consult connector API Understanding TinyMCE and Life-Cycle TincMCE has a huge set of options, so let's just get a quick idea of how things work inside it Once loaded, there is a global tinymce object which is like a master-controller for all tinyMCE editors. We call it the Editor Manager Each editor has a personal editor object which has the configuration for just that editor What is configured on tinymce ? The global tinymce controller is responsible for things like Translations options , including plugins which are activated skin and theme custom_elements ...and way more What is configured on an editor ? Buttons (for use in Toolbars) Toolbars ADAM and DNN-Bridge Initialization Process / Life-Cycle This is how the control is loaded / built in the 2sxc/EAV form. Note that for each method explained on the reconfigure object, the initializers will do duck typing to check if that method exists and if detected, will run that. #1 Load Phase The field-string-wysiwyg WebControl is created At this time, the mode , connector and reconfigure must already be set by the parent It will requests that the from loads all the TinyMCE JavaScripts When that has completed, it will fire a callback to start translating / configuring #2 Translation Phase In this phase, translation maps are built, so buttons can show labels in various languages. This map is global, so try to avoid name clashes. First the built-in translations of 2sxc/EAV are added Then reconfigure.addTranslations(editorManager, currentLanguage) is called. In this phase you can add your own translations according to tinyMCE standards or modify prebuilt translations. #3 Manager Configuration Phase At the beginning reconfigure.managerInit(editorManager) is called so you can pre-initialize something. We don't really know why you would need this, but we added it just in case. Then the default options are generated Now reconfigure.optionsInit(options, buttonOptions) is called. Here you can change the objects as you need to add/remove options. the options are the standard tinyMCE options which have been prebuilt The buttonOptions are a special object which affects automatic button definitions. This is still WIP Now the configuration system builds more options based on the environment, features etc. Then it calls reconfigure.optionsReady(options) so you could make some final changes. Now tinymce (the Editor Manager) receives the options to start. This also includes a callback (provided by our form) which will do editor initialization. #4 Editor Configuration Phase When the tinyMCE editor is finally created, a callback or the wysiwyg is triggered. This will attach various events like init , focus , blur , change , undo etc. Once attaching these events is done, it calls reconfigure.editorBuilt(editor) so you could make changes. When init is triggered, it will first call reconfigure.editorInit(editor) so you can make changes or add buttons using the tinyMCE API. It will then run internal code to add all the button definitions like H1 , H2 etc. Then it asks for reconfigure.disablePagePicker and if not true , will attach the DNN page picker It will also ask for reconfigure.disableAdam and if not true, will attach ADAM functionality How to Modify the Behavior Best check out these tutorials Basic tutorial, just providing 4 standard buttons Advanced tutorial adding a custom button History New system in 2sxc 11 using WebComponents (previously this was not possible)"
  },
  "specs/roadmap/roadmap.html": {
    "href": "specs/roadmap/roadmap.html",
    "title": "Roadmap of EAV and 2sxc - Vision of the Future | 2sxc and EAV 10",
    "keywords": "Roadmap of EAV and 2sxc - Vision of the Future The 2sxc roadmap contains the things we think are fairly important to tackle next. Since we're all working for free, there is no commitment to do this in the order you see below. And sometimes a customer will need a feature quickly - and pay for it - then it will appear sooner. You too can sponsor a feature! Next Priorities (2020 Q4) Create an LTS of 2sxc 11 Provide more help UIs for using REST APIs Make the Metadata-System completely discoverable Enable 2sxc run on Oqtane Formula based field calculations and formula based show/hide or required/not-required fields Future / Other [ ] Support for persisting data to the file-system instead of DB [ ] Files DataSource [ ] ADAM DataSource [ ] Pages DataSource [ ] Navigation DataSource [ ] ...or whatever is needed next :)"
  },
  "specs/cms/edit-context.html": {
    "href": "specs/cms/edit-context.html",
    "title": "Moved to | 2sxc and EAV 10",
    "keywords": "Moved to In-Page Editing Context (technical)"
  },
  "specs/app/app-folder-structure.html": {
    "href": "specs/app/app-folder-structure.html",
    "title": "Moved to | 2sxc and EAV 10",
    "keywords": "Moved to Folder structure in the Content App folder"
  },
  "specs/angularJs/angularjs-1-overview.html": {
    "href": "specs/angularJs/angularjs-1-overview.html",
    "title": "AngularJs 1 Overview | 2sxc and EAV 10",
    "keywords": "AngularJs 1 Overview Moved to AngularJs 1 Overview (obsolete)"
  },
  "specs/cms/edit.html": {
    "href": "specs/cms/edit.html",
    "title": "Moved to | 2sxc and EAV 10",
    "keywords": "Moved to Edit Content or Data in DNN / 2sxc"
  },
  "specs/index.html": {
    "href": "specs/index.html",
    "title": "Specifications of EAV and 2sxc | 2sxc and EAV 10",
    "keywords": "Specifications of EAV and 2sxc In the Specifications you'll find things like list of data-types, data-sources etc. They enhance the API and help you understand things better."
  },
  "specs/data-types/number.html": {
    "href": "specs/data-types/number.html",
    "title": "Data Type: Number | 2sxc and EAV 10",
    "keywords": "Data Type: Number Moved to Field Data Type: Number"
  },
  "specs/data-types/index.html": {
    "href": "specs/data-types/index.html",
    "title": "Value Data Types | 2sxc and EAV 10",
    "keywords": "Value Data Types Moved to Content-Type Fields"
  },
  "specs/data-types/hyperlink.html": {
    "href": "specs/data-types/hyperlink.html",
    "title": "Data Type: Hyperlink | 2sxc and EAV 10",
    "keywords": "Data Type: Hyperlink Moved to Field Data Type: Hyperlink"
  },
  "specs/data-types/entity.html": {
    "href": "specs/data-types/entity.html",
    "title": "Data Type: Entity (List of Entity-Items) | 2sxc and EAV 10",
    "keywords": "Data Type: Entity (List of Entity-Items) Moved to Field Data Type: Entity (List of Entity-Items)"
  },
  "specs/data-types/empty.html": {
    "href": "specs/data-types/empty.html",
    "title": "Data Type: Empty | 2sxc and EAV 10",
    "keywords": "Data Type: Empty Moved to Field Data Type: Empty"
  },
  "specs/data-types/datetime.html": {
    "href": "specs/data-types/datetime.html",
    "title": "Data Type: DateTime | 2sxc and EAV 10",
    "keywords": "Data Type: DateTime Moved to Field Data Type: DateTime"
  },
  "specs/input-types/ui-field-hyperlink.html": {
    "href": "specs/input-types/ui-field-hyperlink.html",
    "title": "Field Input-Type hyperlink / files | 2sxc and EAV 10",
    "keywords": "Field Input-Type hyperlink / files Moved to Field Data Type: Hyperlink"
  },
  "specs/web-api/OBSOLETE.html": {
    "href": "specs/web-api/OBSOLETE.html",
    "title": "| 2sxc and EAV 10",
    "keywords": "everything in this file is obsolete since 2020-11-22 and should be deleted early 2021"
  },
  "specs/data-formats/format-json-v1-content-type.html": {
    "href": "specs/data-formats/format-json-v1-content-type.html",
    "title": "JSON Content-Type V1 | 2sxc and EAV 10",
    "keywords": "JSON Content-Type V1 JSON based content-types are type-definitions which are stored as JSON. As of now we're using it to provide system-level types to the application (see Concepts - file provided content-types ) and for various automated testing. Description As of now, it's using a envolope to package everything and includes a minimal header to ensure we know it's V1 . It then contains a ContentType node containing various identification and description content-type metadata (array of entities) attributes (array) the attributes themselves again contain a minimal information + metadata items (entities) note that the attribute order is relevant Example This example is an extract of the Config Content-Type to manage the SqlDataSource (will be releasen in 2sxc 9.8 with more help-text etc.): { \"_\": { \"V\": 1 }, \"ContentType\": { \"Id\": \"|Config ToSic.Eav.DataSources.SqlDataSource\", \"Name\": \"|Config ToSic.Eav.DataSources.SqlDataSource\", \"Scope\": \"System\", \"Description\": \"todo\", \"Attributes\": [ { \"Name\": \"Title\", \"Type\": \"String\", \"IsTitle\": true, \"Metadata\": [ { \"Id\": 0, \"Version\": 1, \"Guid\": \"00000000-0000-0000-0000-000000000000\", \"Type\": { \"Name\": \"@All\", \"Id\": \"@All\" }, \"Attributes\": { \"String\": { \"DefaultValue\": { \"*\": \"Sql Query\" }, \"InputType\": { \"*\": \"string-default\" } }, \"Boolean\": { \"VisibleInEditUI\": { \"*\": true } } } } ] }, { \"Name\": \"ConnectionGroup\", \"Type\": \"Empty\", \"IsTitle\": false, \"Metadata\": [ { \"Id\": 0, \"Version\": 1, \"Guid\": \"00000000-0000-0000-0000-000000000000\", \"Type\": { \"Name\": \"@All\", \"Id\": \"@All\" }, \"Attributes\": { \"String\": { \"DefaultValue\": { \"*\": \"\" }, \"InputType\": { \"*\": \"empty-default\" } }, \"Boolean\": { \"VisibleInEditUI\": { \"*\": true } } } } ] }, { \"Name\": \"ConnectionStringName\", \"Type\": \"String\", \"IsTitle\": false, \"Metadata\": [ { \"Id\": 0, \"Version\": 1, \"Guid\": \"00000000-0000-0000-0000-000000000000\", \"Type\": { \"Name\": \"@All\", \"Id\": \"@All\" }, \"Attributes\": { \"String\": { \"DefaultValue\": { \"*\": \"SiteSqlServer\" }, \"InputType\": { \"*\": \"string-default\" } }, \"Boolean\": { \"VisibleInEditUI\": { \"*\": true } } } } ] }, ... { \"Name\": \"SelectCommand\", \"Type\": \"String\", \"IsTitle\": false, \"Metadata\": [ { \"Id\": 0, \"Version\": 1, \"Guid\": \"00000000-0000-0000-0000-000000000000\", \"Type\": { \"Name\": \"@All\", \"Id\": \"@All\" }, \"Attributes\": { \"String\": { \"DefaultValue\": { \"*\": \"/****** Script for SelectTopNRows command from SSMS ******/\\r\\nSELECT TOP (1000) PortalId as EntityId, HomeDirectory as EntityTitle\\r\\n ,[PortalID]\\r\\n ,[ExpiryDate]\\r\\n ,[AdministratorRoleId]\\r\\n ,[GUID]\\r\\n ,[DefaultLanguage]\\r\\n ,[HomeDirectory]\\r\\n ,[CreatedOnDate]\\r\\n ,[PortalGroupID]\\r\\n FROM [Portals]\\r\\n Where ExpiryDate is null\" }, \"InputType\": { \"*\": \"string-default\" } }, \"Boolean\": { \"VisibleInEditUI\": { \"*\": true } } } }, { \"Id\": 0, \"Version\": 1, \"Guid\": \"00000000-0000-0000-0000-000000000000\", \"Type\": { \"Name\": \"@string-default\", \"Id\": \"@string-default\" }, \"Attributes\": { \"Number\": { \"RowCount\": { \"*\": 10.0 } } } } ] } ... ], \"Metadata\": [] } } Details about the Format The format is currently in version 1, and looks like this: _ this is the header - containing the version, in case we introduce breaking changes in the future - see also format v1 ContentType - this is the content-type Id - internal identifier, also known as the \"static name\" - often a GUID Name - a nicer name, especially when the Id is a GUID Scope - a term which groups types together; mainly for hiding types the user should normally not see Description - a short description for internal use Attributes [array] [item] Name - the field-name Type - the primary type, like string, number, etc. Description - a short description IsTitle - is this the title field (there must always be one title field) Metadata [array] of content-items with more information about this field Metadata [array] of content-items with more information about the content-type Specials about the JSON Content-Types ID is not always a GUID The ID is usually a GUID, but for special system types it is not. This is mostly historic, as all new content-types will have GUIDs, but old types still exist in the system which have a nice name, but that's not ideal for various use cases. Scope is Like a Virtual Group The Scope is a name - usually System or something like that. It's primarily used to group types together, so that the editor doesn't have to see the ca. 50 types in the background which make the solution work. Attributes Have Metadata Each attribute - let's say a field \"Color\" has more information which is needed for scenarios like the edit-UI. These items are standard content-items and also have the very same format as JSON entities - you can read about that in this blog. Content Types Have Metadata Content-types can have a lot of metadata - also mostly for the UI. An example is the help-text which is shown. This too is stored as normal JSON content-items . Limitations As of now (2sxc 9.7) the system will pick up the content-types stored there and everything works. BUT there is no built-in mechanism to edit these. We (2sic) can easily create content-types in a normal 2sxc and export them to json for this purpose, but as of now there is no GUI to do so. This should not affect you, as it's not meant to be managed by anybody else than us as of now. Special Stuff about the JSON Format Content Type Attributes must preserve Sort Order This is important, as it's relevant to the UI. All Attributes are Grouped by Type Because JSON is itself a very loose data-format, and certain types like dates are not auto-detectable, we decided to have the type-specification as a first-class citizen in the format. This allows for automatic, reliable type-checking when materializing objects. Read also JSON Format V1 File-Stored Content-Types Blog post about json content-type definitions History Added in 2sxc 9.7"
  },
  "specs/data/file-provided-content-types.html": {
    "href": "specs/data/file-provided-content-types.html",
    "title": "File-Based Content-Types | 2sxc and EAV 10",
    "keywords": "File-Based Content-Types Moved to File-Stored Content-Types"
  },
  "specs/data/entities.html": {
    "href": "specs/data/entities.html",
    "title": "Entities (Data, Records, Items) | 2sxc and EAV 10",
    "keywords": "Entities (Data, Records, Items) Moved to Entities (Data, Records, Items)"
  },
  "specs/datasources/linq-guide.html": {
    "href": "specs/datasources/linq-guide.html",
    "title": "Guide to Working with LINQ and 2sxc/EAV Data | 2sxc and EAV 10",
    "keywords": "Guide to Working with LINQ and 2sxc/EAV Data This has moved to Querying Data and Data Sources with code and LINQ"
  },
  "specs/datasources/create-custom.html": {
    "href": "specs/datasources/create-custom.html",
    "title": "EAV DataSources: Create Your Custom DataSources | 2sxc and EAV 10",
    "keywords": "EAV DataSources: Create Your Custom DataSources If you want to create your own DataSource and use it in the VisualQuery designer, this is for you Basic Use Case Here's an example of a complete data-source, which just delivers 1 item with the current date: Introtext - then code: using System; using System.Collections.Generic; using ToSic.Eav.DataSources; using ToSic.Eav.DataSources.VisualQuery; using ToSic.Eav.Interfaces; namespace ToSic.Tutorial.DataSource { // additional info so the visual query can provide the correct buttons and infos [VisualQuery( NiceName = \"DateTime-Basic\", GlobalName = \"7aee541c-7188-429f-a4bb-2663a576b19e\", // namespace or guid HelpLink = \"https://github.com/2sic/2sxc/wiki/DotNet-DataSources-Custom\" )] public class DateTimeDataSourceBasic: ExternalDataDataSource { public const string DateFieldName = \"Date\"; /// <summary> /// Constructor to tell the system what out-streams we have /// </summary> public DateTimeDataSourceBasic() { Provide(GetList); // default out, if accessed, will deliver GetList } /// <summary> /// Get-List method, which will load/build the items once requested /// Note that the setup is lazy-loading, /// ...so this code will not execute unless it's really used /// </summary> /// <returns></returns> private IEnumerable<IEntity> GetList() { var values = new Dictionary<string, object> { {DateFieldName, DateTime.Now} }; var entity = AsEntity(values); return new List<IEntity> {entity}; } } } How it works Basically what you need are The ToSic.Eav.DataSources .Query.VisualQueryAttribute attribute, so that this data-source will be shown in VisualQuery The constructor , which tells the source what Out-streams it has, in this case it's just the Default A method which gets the items, if ever requested More on the VisualQuery Attribute This source will only become available in the UI for use, if this attribute is given. You can set many things, in this demo we only set: GlobalName (required) - this is used for lookup/storing a reference to this source), should be unique NiceName (optional) a nice label in the UI HelpLink (optional) a help-link there are more properties, but these are the important ones. See ToSic.Eav.DataSources .Query.VisualQueryAttribute More on the Constructor and Provide The constructor is in charge of wiring up the data-source. It should not get any data - because the data may not be needed and because configuration isn't loaded yet. The important command you need to know is Provide . This will do a few things Ensure that the Out stream offers a stream with a name - if not specified it's going to offer the Default stream. Wire that up to the method (in this case GetList) which will be called if the Out -stream is ever requested More on the GetList Method and AsEntity The first thing you need to know is that it won't be called if nobody requests the Out stream. If the the Out is requested, this method must return a list (actually an enumerable) of Entities. The most common way to build entities is to prepare a Dictionary<string, object> and convert it to an Entity using AsEntity . Note that AsEntity has many more features, which are not in this demo to keep it simpler. Demo App and further links DataSource API: AsEntity Basic DataSources for EAV and 2sxc Blog about this feature History Introduced in 2sxc ca. 4 but with a difficult API API strongly enhanced and simplifield in 2sxc 09.13"
  },
  "specs/datasources/configuration.html": {
    "href": "specs/datasources/configuration.html",
    "title": "DataSource Concept: Configuration Injection using Tokens | 2sxc and EAV 10",
    "keywords": "DataSource Concept: Configuration Injection using Tokens DataSource objects have an sophisticated system to retrieve settings and configuration using tokens and more. A DataSource is usually configurable, meaning that it needs parameters to do it's job. Some examples: a ModuleDataSource needs to know the module ID an Owner-Filter DataSource needs to know who the current user is, to find his items a Paging needs to know what page size it should use and what page it's on A CSV data source needs to know what file it should load As you can see, some of this information depends on the current context (ModuleId, UserId), others on configured settings (page size) and some on Url-parameters (Page number). In addition, we sometimes want to say \"use the page-size configured in the App-Settings\" or even more complex \"use from url, but if not specified, try app-settings, and if that isn't defined, use 10\" . This is what this Token-Configuration-Injection-System is for. Configuration Basics Each configuration of a DataSource is either a fixed string value like 17 or a token like [Settings:PageNumber] . In most cases it's a token. This token is parsed before any data is queried to ensure that in the end the DataSource has a usefull value before actually performing its task. Token Basics A token is a piece of text that looks like [Source:Property] . It is good to understand the full token concept, discussed here . You'll also want to read about fallback and recursion to understand the following content. Shared Token-Suppliers / Token-Sources When a DataSource is configured, it has many token-suppliers like Module , QueryString , App etc. These are shared and are identical for all objects. Advanced Token-Source for Settings The Settings source is a special source which contains all the properties of the settings-item which configures exactly this one data-source. For example the token [Settings:PageNumber] will deliver the number or text in the settings pagenumber field. Advanced Token-Source for In DataSources also have a source called In which is different for each DataSource, as each one has its own In-streams. You can use it in tokens like [In:Default:PageSize] where the term after In: is the stream-name to be consulted. How Tokens are Defined, Settings Edited and Resolved When you're using the visual query designer, the configuration created is saved as an Entity (aka Content-Item) which must be injected into the DataSource configuration automatically. But when you use the object is your code, your code must be able to provide other values. But how does this work? Each DataSource object has a property called Configuration which is a dictionary containing all configuration properties the data source will care about. For example, the EntityIdFilter has a Configuration with only one property which is called EntityIds . The each property is first initialized with a Token-Template. For example, the CsvDataSource has a ConfigMask(DelimiterKey, \"[Settings:Delimiter||\\t]\"); This says that the delimiter should come from the Settings-Entity field Delimiter and if not provided, fall back to \\t (which is a tab character) read about ConfigMask here For the programmer who wants to set a number or whatever, this would be fairly unreliable to access from outside, so the DataSource should also have a real property which internally also modifies the dictionary. For example, the CsvDataSource has a string-property Delimiter which internally will get/set the in the Configuration dictionary. When the DataSource is first sucked from, which happens when something tries to access the Out-Property, it will automatically run a token-engine to resolve the values, then run whatever action the data-source wants. read about ensuring configuration is parsed here So how does each scenario work out? If the programmer overwrote the Delimiter property, then internally the Configuration[\"Delimiter\"] is now not a token any more, but instead just a character like , . So the token-engine won't change anything. If the programmer didn't do anything but the visual query engine gave a settings-entity to the system, then the token is resolved and whatever the user entered is used. if the neither the programmer nor the user provided settings, then the token-engine will resolve to the fallback and use the \\t as was defined. Also Read LookUp & LookUpEngine Placeholder Tokens DataSource API DataSource API: EnsureConfigurationIsLoaded IDataStream History General Tokens introduced in 2sxc 1.0 Most enhancements were in 2sxc 07.00"
  },
  "specs/datasources/api.html": {
    "href": "specs/datasources/api.html",
    "title": "DataSource API | 2sxc and EAV 10",
    "keywords": "DataSource API DataSources are a magic, generic system which can generate new data-items or filter / modify other data. This section explains how they work and the API you need to create your own. Basics DataSources have a few important concepts you must first understand: An item is a data-object of the type IEntity - it can be a person, product, file-informatio etc. A list of items is is a List<IEntity> which contains zero, one or many items A stream is an object which has list of items, and a name A correctly built stream will offer this list, but only build it if it's actually requested Each DataSource has one or many named Out streams Each DataSource can have one or more named In streams coming from other DataSources Each DataSource has a ConfigurationProvider , which gives the DataSource information about the environment (like Portal or Tab information), App-Settings and more Each DataSource can have custom Settings , which the user entered in a dialog. Internally this is also an IEntity object DataSources also have cache-identity mechanism, to inform any up-stream cache what parameters actually caused this result, so that the data could be cached if needed Providing Data To offer data on the Out you will usually use the Provide method. If you're generating new items, you'll usually use the AsEntity method. Docs for these: DataSource.Provide DataSource.AsEntity Receiving Data from In for further processing if your DataSource performs filtering or similar actions on existing data, then this data comes in on the In streams. In such scenarios, you would simply iterate over the In[streamname].List and provide the result in your out-stream again. You can find many examples in the EAV DataSources code. Getting Configuration A DataSource gets the configuration from a configuration provider. To better understand this, you should read: about configuration about tokens ConfigMask(...) . Configuring the UI There is a special attribute called VisualQuery to tell the UI how to show your DataSource and provide help etc. ToSic.Eav.DataSources .Query.VisualQueryAttribute History Introduced in 2sxc 4 or 5 enhanced / simplified in 2sxc 9.13"
  },
  "specs/datasources/api-provide.html": {
    "href": "specs/datasources/api-provide.html",
    "title": "DataSource API: Provide | 2sxc and EAV 10",
    "keywords": "DataSource API: Provide DataSources always provide data on an Out stream. The Provide method makes it very easy to do. How to use Provide In general, you need to have a private method - usually called GetList() that would return a list of items, if it is called use that GetList() to build a stream, which has a name - typically Default attach that stream to the Out so that it's accessible Here's a simple example of the constructor of the DnnFormAndList DataSource , which provides the default stream: public DnnFormAndList() { // Specify what out-streams this data-source provides. Usually just one, called \"Default\" Provide(GetList); // does everything // ... } private IEnumerable<Eav.Interfaces.IEntity> GetList() { // ... } This example ensures that the .Out[\"Default\"] as well as the .List (which is a shorthand for .Out[Constants.DefaultStreamName].List ) are mounted, ready to deliver. Overloads Provide(listfunction) - default version, which provides the \"Default\" stream Provide(name, listfunction) - alternative for named streams when your DataSource has more streams. Providing multiple streams In case you want to offer multiple streams (like one containing products, the other categories), the common pattern is: public SomeConstructor() { Provide(GetProducts); Provide(\"Categories\", GetCategories); // ... } Read also DataSource API - DataSource API overview Ensuring configuration is parsed Demo App and further links todo History Introduced in EAV 4.x, 2sxc 09.13"
  },
  "specs/datasources/api-asentity.html": {
    "href": "specs/datasources/api-asentity.html",
    "title": "DataSource API: AsEntity | 2sxc and EAV 10",
    "keywords": "DataSource API: AsEntity Many data sources generate new content items - either because they deliver some kind of information, or because they convert data from another source into standardized entities. This is where AsEntity helps. How to use AsEntity Here's a simple example of the tutorial DateTime DataSource : // create demo 1 entity with values related to today // first place all values in a dictionary // then convert into an Entity var today = new Dictionary<string, object> { {\"Title\", \"Date Today\"}, {\"Date\", DateTime.Today}, {\"DayOfWeek\", DateTime.Today.DayOfWeek.ToString()}, {\"DayOfWeekNumber\", DateTime.Today.DayOfWeek} }; // ...now convert to an entity, and add to the list of results var basic = AsEntity(today); var recommended = AsEntity(today, \"Title\", \"DateTimeInfo\"); This example shows how an entity-object is build using the basic syntax AsEntity(today) or with more configuration. Concept Behind AsEntity Internally, AsEntity will generate an IEntity object which is a simpler version of the normal Entity, because it's actually an IEntityLight , meaning it's missing some advanced features like multi-language and repository identity (which would be important in edit-scenarios). The simplest way is to just use AsEntity(someDictionary) , more advanced uses also tell the system which field is the title, some numeric or Guid IDs and more. Overloads / Variations The most common use case will be IEntity AsEntity(Dictionary<string, object> values); The full versions with all optional parameters as of 2sxc 9.13 is: // single item IEntity AsEntity( Dictionary<string, object> values, string titleField, string typeName, int id, Guid? guid, DateTime? modified, int? appId ) // many items IEnumerable<IEntity> AsEntity( IEnumerable<Dictionary<string, object>> itemValues, string titleField = null, string typeName = UnspecifiedType, int? appId = null ) All paramaters are optional, except the values. Here's what each one does: string titleField is the title field name, so the entity then also knows which one is the title and can support .EntityTitle property string typeName is a nice name for the type, allowing for type-filtering later in other data sources int id gives a number identity, so .EntityId is usefull and filtering by EntityId (like when having details-pages needing this id) works Guid guidId is a UUID identity, so .EntityGuid is usefull DateTime modified would allow to filter / sort by the .Modified property int appId could be used to pretend it's part of another app. This only affects the AppId property, and ATM there is no important reason to do this. Read also DataSource API - DataSource API overview Demo Code and further links demo data source code FnL DataSource History Introduced in EAV 4.x, 2sxc 09.13"
  },
  "specs/data-types/string.html": {
    "href": "specs/data-types/string.html",
    "title": "Data Type: String | 2sxc and EAV 10",
    "keywords": "Data Type: String Moved to Field Data Type: String"
  },
  "specs/js/toolbar-settings.html": {
    "href": "specs/js/toolbar-settings.html",
    "title": "Moved to | 2sxc and EAV 10",
    "keywords": "Moved to Toolbar Settings"
  },
  "specs/js/toolbar-button.html": {
    "href": "specs/js/toolbar-button.html",
    "title": "Moved to | 2sxc and EAV 10",
    "keywords": "Moved to Toolbar Button Definitions"
  },
  "specs/js/sxcewebapi.html": {
    "href": "specs/js/sxcewebapi.html",
    "title": "Moved to | 2sxc and EAV 10",
    "keywords": "Moved to The WebApi Helpers on the Sxc Controller"
  },
  "specs/js/command-content-items.html": {
    "href": "specs/js/command-content-items.html",
    "title": "Moved to | 2sxc and EAV 10",
    "keywords": "Moved to CMS Command contentitems"
  },
  "specs/cms/quick-edit.html": {
    "href": "specs/cms/quick-edit.html",
    "title": "Moved to | 2sxc and EAV 10",
    "keywords": "Moved to QuickE (Quick Edit)"
  },
  "specs/input-types/ui-field-string-dropdown-query.html": {
    "href": "specs/input-types/ui-field-string-dropdown-query.html",
    "title": "Field Input-Type string-dropdown-query | 2sxc and EAV 10",
    "keywords": "Field Input-Type string-dropdown-query Moved to Field Input-Type string-dropdown-query"
  },
  "specs/input-types/ui-field-hyperlink-library.html": {
    "href": "specs/input-types/ui-field-hyperlink-library.html",
    "title": "Field Input-Type hyperlink-library | 2sxc and EAV 10",
    "keywords": "Field Input-Type hyperlink-library Moved to Field Input-Type hyperlink-library"
  },
  "specs/input-types/ui-field-hyperlink-default.html": {
    "href": "specs/input-types/ui-field-hyperlink-default.html",
    "title": "Field Input-Type hyperlink-default | 2sxc and EAV 10",
    "keywords": "Field Input-Type hyperlink-default Moved to Field Input-Type hyperlink-default"
  },
  "specs/input-types/ui-field-empty-default.html": {
    "href": "specs/input-types/ui-field-empty-default.html",
    "title": "Field Input-Type empty-default | 2sxc and EAV 10",
    "keywords": "Field Input-Type empty-default Moved to Field Input-Type empty-default"
  },
  "specs/app/icons.html": {
    "href": "specs/app/icons.html",
    "title": "Moved to | 2sxc and EAV 10",
    "keywords": "Moved to Icons in Apps"
  },
  "specs/angular/dnn-sxc-angular.html": {
    "href": "specs/angular/dnn-sxc-angular.html",
    "title": "Toolbars in Angular (dnn-sxc-angular) | 2sxc and EAV 10",
    "keywords": "Toolbars in Angular (dnn-sxc-angular) Moved to Toolbars in Angular (dnn-sxc-angular)"
  },
  "specs/input-types/ui-field-all.html": {
    "href": "specs/input-types/ui-field-all.html",
    "title": "Field Input-Type All | 2sxc and EAV 10",
    "keywords": "Field Input-Type All Moved to General Field Settings (Input-Type"
  },
  "how-to/razor/blocks.html": {
    "href": "how-to/razor/blocks.html",
    "title": "Razor: Rendering Content-Blocks | 2sxc and EAV 10",
    "keywords": "Razor: Rendering Content-Blocks This document has been moved to NetCo Razor: Rendering Content-Blocks"
  },
  "how-to/customize-edit-ux/index.html": {
    "href": "how-to/customize-edit-ux/index.html",
    "title": "Moved to | 2sxc and EAV 10",
    "keywords": "Moved to Edit Content or Data in DNN / 2sxc"
  },
  "specs/web-api/intro.html": {
    "href": "specs/web-api/intro.html",
    "title": "| 2sxc and EAV 10",
    "keywords": "This page has moved to 2sxc Web API"
  },
  "specs/style-guides/style-guides.html": {
    "href": "specs/style-guides/style-guides.html",
    "title": "Style Guide for DNN / 2sxc Solutions | 2sxc and EAV 10",
    "keywords": "Style Guide for DNN / 2sxc Solutions Provide a clear, common guideline for DNN and 2sxc development. The current version is the Style Guide 2020 - beta Style Vocabulary Each guideline describes either a good or bad practice, and all have a consistent presentation. The wording of each guideline indicates how strong the recommendation is. + Do is one that should always be followed. Always might be a bit too strong of a word. Guidelines that literally should always be followed are extremely rare. On the other hand, you need a really unusual case for breaking a Do guideline. testing + Consider Consider guidelines should generally be followed. If you fully understand the meaning behind the guideline and have a good reason to deviate, then do so. Please strive to be consistent. - Avoid indicates something you should almost never do. Code examples to avoid have an unmistakeable red header ? Why explains why this is recommended"
  },
  "specs/style-guides/style-guide-2020.html": {
    "href": "specs/style-guides/style-guide-2020.html",
    "title": "2sxc Style Guide - Best Practices v2020 DRAFT | 2sxc and EAV 10",
    "keywords": "2sxc Style Guide - Best Practices v2020 DRAFT This Style Guide should help you create best-practice solutions with 2sxc. It has the version 2017 so that you can reference it as your standard, and if larger recommendation changes are made or if the standard grows, we'll create a new standard. This is the current version How to use This style guide is built according to our role-model the Angular 2 style guide by John Papa . This style guide presents our preferred conventions and, as importantly, explains why. Table Of Contents General Principles Solution Architecture File Structure Content Types Fields Using Items as Content or Data Working with Presentation and Demo-Data Templates in General Token Templates Razor Templates JavaScript Templates Querying Data General Principles Use Visual Studio Code Style 01.11 + Consider use Visual Studio Code and your preferred code editor diff ? Why it's the most agile, best aligned code-editor for modern solutions on the MS-stack it's great for editing all kinds of modern file formats incl. HTML, Razor, Markdown, etc. it's great for quickly opening a single file or an App-folder it offers full Git integration there is a 2sxc code-snippet extension for VS-Code Use Git to Version your Work - In Local Systems as Well Style 21.01 + Do always initialize your solution (both App or Content ) into a local git regularly commit your work into your local git ```diff Consider ``` publish your work to a server git, like github or your company internal git-repo adding a readme.md for everybody who is new to your system diff ? Why if ever you want to undo something later on, you'll be glad you have older versions if ever you want to compare a deployed version with your dev-history, you'll be glad 2sxc supports git and github by placing everything in files, and also exporting the database into a git-versionable XML Use International Naming Strategy Style 11.21 + Do use english words for all content-types, fields, file-names, folder-names and variables ? Why easier to share both code and partial solutions consistent setup, as often other languages will be added and English is the best shared language fewer problems when writing code using English variable names and english property names avoid special characters/words of other languages in code-parts User Nice, Localized Naming for Editor UX Style 11.22 + Do provide localized (translated) names for everything the editor sees, to improve his user experience after creating the english-named items you can translate them into any other culture to improve the end-user experience use nice labels with spaces and more, making it easy to read apply this for all content-types in the main Content (as they are shown in normal drop-downs), view-names both in Content as well as Apps and field-names and help-texts diff ? Why great editor user experience fewer editor mistakes and frustrations Solution Architecture ...to do... File and Folder Structure LIFT Style xx.xx + Do structure the app such that you can Locate code quickly, Identify the code at a glance, keep the Flattest structure you can, and Try to be DRY. place a nice app-icon.png file containing the app-image and place it in the main folder make sure it is square and at least 200x200, ideally 500x500px in size diff ? Why LIFT Provides a consistent structure that scales well, is modular, and makes it easier to increase developer efficiency by finding code quickly. To confirm your intuition about a particular structure, ask: can I quickly open and start work in all of the related files for this feature? consistent with other style guides See also Locate , Identify , Flat and T-DRY of the Angular Style Guide. Provide an app-icon.png in each App folder Style xx.xx + Do create an icon for each app place a nice app-icon.png file containing the app-image and place it in the main folder make sure it is square and at least 200x200, ideally 500x500px in size diff ? Why In a future version, app-choice will also show an icon. Provide one today to be sure that it will look great. Place only Template-Files in the Main Folder Style xx.xx + Do place all templates and sub-templates in the main folder of the App or the Content place all non-template files in sub-folders diff ? Why This provides for a maximum overview when working on solutions It ensures the developer sees all views that exist Note: there are a few system files which will also reside in this folder, especially the app-icon.png . This of course will also be in this folder. Use src and dist folders Style xx.xx + Consider place all original assets incl. images, js, css into the src folder place all runtime files incl. copies of the images, compiled js/css into the dist folder diff ? Why Modern developement uses many source files and much fewer runtime files it's a big help to keep them clearly desingnated the src with dist structure has been very established in the web and JS community Structure the folders by Topic/Component Style xx.xx + Do structure your folders - especially in src - by topic containing all files of that topic, no matter what type place different file types (js/css) belonging to the same topic into the same folder ```diff Avoid ``` organizing your folders by data-type (js, images, etc.) diff ? Why consistently works both for large and simple solutions easier to maintain easier to grow into larger solutions consistent with recommendations of other style guides like the Angular Style-Guide Content-Types ...to do... Use Singular Naming for Content-Types Style 21.01 + Consider Use the singular form to name a content type, so BlogPost instead of BlogPosts , Tag instead of Tags The localized name can be different as your editors need it ? Why Content-Types describe the type of an item, not the collection of all items. So by definition it's not the table-of-Tags but the schema-of-a-tag-item. consistency is key, and it helps to always do things the same way Fields ...to do... Using Items as Content ...to do... Notes and Clarifications TOOD... Read also InstancePurpose - which tells you why the current code is running so you could change the data added CustomizeData Demo App and further links You should find some code examples in this demo App FAQ with Categories More links: Description of the feature on 2sxc docs History Introduced in 2sxc ??.??"
  },
  "specs/js/toolbars-and-buttons-intro.html": {
    "href": "specs/js/toolbars-and-buttons-intro.html",
    "title": "Moved to | 2sxc and EAV 10",
    "keywords": "Moved to In-Page Edit Toolbars and Buttons"
  },
  "specs/input-types/index.html": {
    "href": "specs/input-types/index.html",
    "title": "UI Field Types | 2sxc and EAV 10",
    "keywords": "UI Field Types Moved to Content-Type Fields"
  },
  "specs/architecture/data-flow.html": {
    "href": "specs/architecture/data-flow.html",
    "title": "EAV / 2sxc Data Flow | 2sxc and EAV 10",
    "keywords": "EAV / 2sxc Data Flow 2sxc is simple to use, but to enable that, it's pretty sophisticated on the inside. Let's take a look at how data is accessed, cached, queried, maybe cached again, and provided to the output. Note All the data handling systems come from the EAV . This is then enhanced and customized by Sxc and Sxc.Dnn. Core Paradigms Rule #1: Data is Reactive As you'll soon see, the EAV performs a lot of automatic lookup and caching, but as a first rule, this happens Reactively , only when data is actually accessed. This is similar to how ReactiveX or NgRx work, just much simpler. Rule #2: Data is Read-Only Any data the code receives as IEntity objects is read-only. This allows for a much more robust data model and API which in a CMS environment is usually 99% read, 1% write. Rule #3: Data Always Comes from DataSources Inside the system everything is loosely coupled (think Depedency Injection). So anything requesting data will always use a DataSource provided by some magic, and then use what was given. Rule #4: Data is Managed and Cached per App Once data from an App was requested, the entire app is loaded and cached. Within an app a lot of data can be linked together using Content-Types, Relationships, Sub-Lists, Metadata and more. If we would lazy-load this on-demand from the storage system (SQL), it would result in a ping-pong of requests, which would be very inefficient. This unit of cache is called an AppState . Overall Flow When Creating Html Imagine that your custom Razor template in a DNN module is initialized. Here's what happens: 1. Preparation 2sxc starts with the ModuleId as it's inside a DNN Module. It will then create a Block for this InstanceId (which is the ModuleId). The Block internally will create a CmsBlock DataSource , pass in the InstanceId and then wait for data to pour in. The CmsBlock knows about DNN, and will use the InstanceId to get the ModuleSettings in DNN. This contains only 2 pieces of information: the AppId which it is visualizing, and a ContentBlockId which is the full configuration of the Content-Block which will be shown. The CmsBlock also knows if the user is an editor (which would result in draft-items being included). The CmsBlock DataSource will then ask the underlying EAV for this block configuration (stored as an Entity) which is then loaded from the Cache. When the configuration is found, the CmsBlock then knows what View will be used. The CmsBlock itself is a DataSource and is now configured to deliver the data which the view expects. Note The CmsBlock doesn't know about the internals of the cache, it just asks for it. The cache will auto-initialize the AppState if it hasn't been accessed before. Note The CmsBlock will also not load any data yet. It just knows what would be loaded, should it ever be accessed. Tip When you use views which don't have a content-type configured, then properties like Data , Content or Header will be null. But App.Data will still work. 2. Execution The Block is now ready. 2sxc now consults the View to find out which Engine to use (Razor or Token). It will now load this engine, give it the Block and wait for the resulting Html to be created. The engine loads the template and lets it do what it should. If the template has code accessing Data then the underlying source will retrieve the necessary data. If it's a normal content-view, then the items provided will be the ones which an editor has manually added, since they were referenced in the ContentBlock. If the view relies on a Query, then this query is built and will be waiting to execute if the data is accessed. If the code accesses App . Data then this data source will build up everything necessary so it just works. If the code accesses App . Query then the underlying system will prepare the Query as needed. Note All the data retrieving features like Data do not actually retrieve any data unless accessed. This also means that Content or Header won't use any CPU cycles unless accessed. The same goes for App.Data - nothing is processed unless it's accessed. Note The queries are only provided by the App for immediate use. They won't be built or executed unless they are actually read. Overall Flow when Creating WebAPIs This works just like the Html creation, except that we don't need an engine. The code which inherits from ApiController now works with the data as needed. The same lazy-execution rules apply: neither Data , Content , App.Data or App.Query use any CPU cycles, unless the data is actually pulled by reading it. Read Also Templates Rendering Engines like Token/Razor Content-Blocks Custom WebApi (which is also kind of a dynamic rendering engine)"
  },
  "net-code/dynamic-code/object-edit.html": {
    "href": "net-code/dynamic-code/object-edit.html",
    "title": "Edit / in Dynamic Code | 2sxc and EAV 10",
    "keywords": "Edit / @Edit in Dynamic Code The Edit object tells you if the user is an editor and has a lot of features which are only useful in Razor. Because of this, it's documented here: Edit / Object in Razor / .net"
  },
  "specs/cms/templates.html": {
    "href": "specs/cms/templates.html",
    "title": "Moved to | 2sxc and EAV 10",
    "keywords": "Moved to Template Files"
  },
  "specs/data/content-types.html": {
    "href": "specs/data/content-types.html",
    "title": "Content-Types, aka Schemas/Object-Types | 2sxc and EAV 10",
    "keywords": "Content-Types, aka Schemas/Object-Types This has moved to Content-Type (Schema/Object-Type)"
  },
  "specs/data/app-state.html": {
    "href": "specs/data/app-state.html",
    "title": "App State | 2sxc and EAV 10",
    "keywords": "App State The EAV caches everything in memory, to ensure that everything is super-fast and doesn't require lazy loading. This is because lazy-loading has a dangerous tendancy to ping-pong a lot of requests if the code isn't very optimized - and caching everything solves that problem. Tip Before you start: Remember that you usually don't need this if you are creating Razor templates or WebApi - for that, you want to read How to Use a Dynamic Entity . Once an app is accessed by code, a sophisticated internal system loads everything into the app-state which is then cached. Everything then uses this data, and save-operations usually do a partial update of the cache. This is one of the things that makes 2sxc and the EAV so amazingly fast. Usually you don't care much about the app-state, since you simply use the data provided by the current context. If you want to know more, check out the ToSic.Eav.Apps .AppState. History Introduced in 2sxc 5.0 Partial Updates introduced in 2sxc 9.14"
  },
  "specs/docs/contribute-setup.html": {
    "href": "specs/docs/contribute-setup.html",
    "title": "Contribute to 2sxc / EAV - Setup | 2sxc and EAV 10",
    "keywords": "Contribute to 2sxc / EAV - Setup Important: If you only want to USE 2sxc / EAV, then you do NOT need this . This is meant for people who want to contribute to the source code of 2sxc and EAV. Pre-Requisites Visual Studio 2019 MSBuild Community Tasks 1.4 or newer (required for automatic module packaging if you want to create dnn-module packages of 2sxc to distribute to another dnn) https://github.com/loresoft/msbuildtasks or chec https://www.microsoft.com/en-in/download/details.aspx?id=19372 We also use grunt, gulp and bower so if you want to do some JS you'll also need to install NPM, Gulp and Bower (grunt will auto-install as a dependency) Recommendations: SQL Server 2014, but it also works on older versions like 2008 Basics The full solution pulls together 3 projects, some responsible for server-code, some for UI, some for in-page JS. We separated these to make it easier to contribute to a specific part without worrying about the rest. If you only want to contribute to something small - like the languages / translations - then you only need to download that repository. In the complex scenarios each project can build into the other target, so if you want to work full-stack and use all of the automation, you will want to put everything in C:\\Projects\\2sxc\\ . Contribute with Pull-Requests After you have made changes, you cannot just push the code back to our repo, since you probably won't have write permissions on the main repo. The correct procedure then is to fork the main repo into yours, and push into your own online repo. Then start a pull request, which we can then process. Full Scale Setup The full-scale setup is meant for people, who want to work with all the pieces. As of now (December 2017) you should clone all these projects into the following folders: Start by Installing your DNN Installing DNN Please install a DNN - ideally a 7.4.2 version or similar so you wont use APIs which don't exist in that version in the path above. Steps are approx. like this: Recommended: using NVQuickSite you can easily install DNN 7.4.2 in the C:\\Projects\\2sxc-dnn742\\Website folder. This exact folder is important, because other parts (like js projects) will copy their builds into this folder The domain isn't important, but we recommend 2sxc-dnn742.dnndev.me Manual: Download the minimal DNN version that 2sxc supports and extract it to C:\\Projects\\2sxc-dnn742\\Website (the exact folder is important, because the grunt/gulp tasks refer to this path) Configure the website in IIS (use binding 2sxc.dev) Use a default ASP.NET 4 / 4.5 application pool with Network Service account Add entry to local hosts file: 127.0.0.1 2sxc-dnn742.dnndev.me (could also be different, but this is our recommendation) Setup an empty database in SQL Management Studio Start the website and configure DNN to use the previously created database Installing 2sxc as Code in the DNN Then install 2sxc as a normal installable module (to get all the tables etc. setup) Now you must replace the installed 2sxc with the source-code version, linked to Github. /DesktopModules/ToSIC_SexyContent folder again (required because we clone the git repository there) Use Visual Studio, Git or SourceTree to clone the 2sxc repository at https://github.com/2sic/2sxc to the empty folder ToSIC_SexyContent - eg. in /DesktopModules/ type git clone https://github.com/2sic/2sxc ToSic_SexyContent also run bower install and npm install in the folder (using command-line or visual studio) Note: don't open the 2sxc-solution yet in visual studio - you need to later open the full package which includes the EAV with 2sxc, otherwise project references get \"fixed\" in a wrong way Installing the additional git repositories in a command line, go to c:\\Projects\\ run git clone https://github.com/2sic/eav-server - the EAV server system run git clone https://github.com/2sic/2sxc-ui - the 2sxc / DNN UIs for all of these you may need to run npm install GIT Branches We use the git-flow convention , and you should familiarize yourself with this, to properly work with the branches. As of now, the development-branch is called dev but we'll rename it to develop within the next few days. The EAV / 2sxc Server Solution Basically if you open the solution in the eav-server folder, it will open all the EAV server (C#) code and 2sxc code in Visual Studio. This is very important, because if you build anything extensive and rename anything, it guarantees that everything is correctly updated. The 2sxc UI This extends the EAV-UI with more field types, adds configuration and also adds a lot of other JS. if you run the gulp develop it too will auto-build and copy to the live DNN / 2sxc site. WIP (Work In Progress) At the moment not important yet, but some new features we're working on are in these Repos: git clone https://github.com/2sic/2sxc-inpage git clone https://github.com/2sic/eav-item-dialog-angular"
  },
  "specs/datasources/visual-query.html": {
    "href": "specs/datasources/visual-query.html",
    "title": "VisualQuery | 2sxc and EAV 10",
    "keywords": "VisualQuery Warning Sorry, we don't have enough time to document this yet, please read the blog posts etc. to get familiar with VisualQuery. How to use Usually you'll configure queries in the VisualQuery Designer in the App settings. Here's a Getting Started with Visual Query . There are a lot of Blogs about Visual Query Designer that will help you start. Then you will usually configure a view to use this. Read also Blog Posts about Visual Query Designer DataSources History Introduced in 2sxc 07.00"
  },
  "specs/datasources/query.html": {
    "href": "specs/datasources/query.html",
    "title": "Query Basics | 2sxc and EAV 10",
    "keywords": "Query Basics Queries are special Data-Sources which internally chain various other Data-Sources to query the underlying data. They can be built in two ways: Directly in your code Built from a configuration which is itself stored as a set of entities Such queries are then used to give data to a view, to a JavaScript SPA (throug a simple REST API) or to your code, which can then perform other operations with the data. How to use Usually you'll configure queries in the VisualQuery Designer in the App settings. Here's a Getting Started with Visual Query . There are a lot of Blogs about Visual Query Designer that will help you start. Then you will usually configure a view to use this. Using Queries in your Code In a Razor or WebApi file, you can always write something like this var query = App.Query[\"AllBlogPosts\"]; var posts = query[\"Default\"]; // you could now work with the data, or you could cast all results into dynamic objects, like... var categories = AsList(query[\"Categories\"]); // if all you need is the \"Default\" stream as dynamic, you can write var posts = AsList(query); Now you can loop through the data as you would otherwise, for example: <ol> @foreach(var person in AsList(query[\"Persons\"])) { <li>@person.FullName</li> } </ol> Technical Implementation The data which defines a query is stored as IEntity data. So there is a header IEntity which is read through an QueryDefinition . It contains the name, and a bunch of metadata IEntity items which are read as QueryPartDefinition . It also contains a list of Connections which define how the DataSources pass data from one source to another. There are also test-parameters on such a query, which are only used for testing in the VisualQuery Designer Read also Query Parameters / Tokens Blog Posts about Visual Query Designer DataSources History Introduced in 2sxc 07.00"
  },
  "specs/datasources/query-system.html": {
    "href": "specs/datasources/query-system.html",
    "title": "System Queries | 2sxc and EAV 10",
    "keywords": "System Queries This is a very internal spec - don't use it :). System Queries are stored as json in DesktopModules\\ToSIC_SexyContent\\.data\\queries . List of queries as of 2sxc 9.x through 10.x Eav.Queries.Global.Apps - retrieve all apps Eav.Queries.Global.Attributes - retrieve all the attributes of a content-type Eav.Queries.Global.ContentTypes - retrieve all content-types Eav.Queries.Global.Queries - retrieve all queries Eav.Queries.Global.QueryInfo - retrieve all streams and fields of a query Eav.Queries.Global.Zones - retrieve all zones History Introduced in 2sxc 07.00 In added in 2sxc 07.00 Params added in 2sxc 10.22"
  },
  "specs/datasources/query-params.html": {
    "href": "specs/datasources/query-params.html",
    "title": "Query Parameters / Tokens | 2sxc and EAV 10",
    "keywords": "Query Parameters / Tokens Queries can be parameterized with token placeholders like [QueryString:Id] , [App:Settings:PageSize] or [Params:Sort] (new in v10.22) . To understand these placeholder tokens, best read up on DataSource Concept: Configuration Injection using Tokens and Placeholder Tokens . There you'll read about how tokens work, where they come from, how to use default/fallback values and more. This page explains how Queries have four special types of parameters, namely these: Special LookUp: [Params:...] (new in v10.22) Special LookUp: [In:...] Option to override the values during testing with TestParameters Params LookUp (new in 10.22) The query now has a special LookUp for the source Params . This should help you make nicer, more flexible queries and also allow you to set these query parameters from C# code. Tip You can set these params in the Query configuration dialog TODO: PIC Note Your queries can also use params that you didn't configure - but they will return nothing unless you would set them in your C# code before you run the query. Tip We recommend to always use the Params for everything as it's simpler to see all the parameters your query depends on. So if you have a ValueFilter expecting a value from the url, we recommend that you Create a param FilterLastName=[QueryString:LastName] In your data-source configuration, use [Params:FilterLastName] In LookUp Data Sources in a query can also retrieve values from another data-source which is a source. Use the [In:source-name:attribute-name] syntax. So if you have a Value DataSource which has the Default -in with the data to filter, and a Module -in comes from the Module Settings, you would write [In:Module:Category] to filter by the the category as selected in the module settings. Testing your Query with Test Parameters The VisualQuery Designer also allows you to set test-values for testing the query. The test-values should define all the full tokens to replace. Example: [QueryString:Id]=27 [QueryString:SortOrder]=Desc [Params:FilterLastName]=Mettler [Params:FilterNameSort]=[QueryString:SortOrder||Asc] Tip As you can see in the example, even test params can contain more tokens if you need them. In the above example, Params:FilterNameSort would resolve to Desc because it will first check the QueryString:SortOrder which also has a test-value of Desc . Setting Query Parameters in your Code In a Razor or WebApi file, you can always write something like this var allPosts = App.Query[\"AllBlogPosts\"]; allPosts.Params(\"Category\", \"Web\"); var posts = allPosts[\"Default\"]; var dynPosts = AsList(posts); Warning Query objects are single use - which is an internal optimization for reliable, rapid access. So if you retrieve various streams, the query still only executes once. But if you set a parameter after running the query, you will get an error, unless you call Reset() first. See the next example: var query = App.Query[\"AllBlogPosts\"]; query.Params(\"Category\", \"Web\"); var webPosts = AsList(query); // this would result in an error // allPosts.Params(\"Category\", \"IT\"); // this works query.Reset(); query.Params(\"Category\", \"IT\"); var itPosts = AsList(query); Read also VisualQuery Designer APIs Query QueryDefinition QueryPartDefinition Blog Posts about Visual Query Designer History Introduced in 2sxc 07.00 In added in 2sxc 07.00 Params added in 2sxc 10.22"
  },
  "specs/datasources/list-all.html": {
    "href": "specs/datasources/list-all.html",
    "title": "All DataSource Objects in 2sxc / EAV | 2sxc and EAV 10",
    "keywords": "All DataSource Objects in 2sxc / EAV 2sxc provides a large set of DataSource objects which either get data from somewhere (SQL, CSV, ...) or modify data on the In and passing it to Out . This page will give you an overview and link you to further sources if you need to know more. How to use Many data-sources are simply used in the Visual Query , and if all you want is visual-query, then this reference will give you an overview regarding what things are possible. It will usually look like this: If on the other hand you want to program with these DataSource objects, then it will usually look a bit like this: An example code // A source which can filter by Content-Type (EntityType) var allAuthors = CreateSource<EntityTypeFilter>(); allAuthors.TypeName = \"Author\"; // Sort by FullName var sortedAuthors = CreateSource<ValueSort>(allAuthors); sortedAuthors.Attributes = \"FullName\"; The previous example creates an initial source allAuthors which has all data on the in, then filters to only provide those of type Author to the out. This is then piped to the sortedAuthors , which sorts on the Attributes field. Understanding Data-Flow and Configuration This is explained in the DataSource documentation . All Public DataSources These are all the data sources which are either provided in the default installation of 2sxc, or which are available for you to install (manually). Data Source Purpose Description & Details App Organize Provides each content-type on the out-stream (...) Provides each content-type on the out-stream, so that you can use ds[\"any-type-name\"] as if there was a table for each type. AttributeFilter Modify Removes properties on the entities (...) Removes properties on the entities, typically before you stream it to JSON, so that only the fields you want are transmitted. AttributeRename Modify Renames properties on the entities... Renames properties on the entities and optionally removes the remaining ones. BaseCache (internal) Base class (...) The base class for all system caches (QuickCache, FarmCache, etc.) BaseDataSource (internal) Base class (...) This is just a base class. CacheAllStreams Caching Cache all streams passing through (...) Every stream on this \"In\" are also available on the \"Out\" but cached a certain amount of time or till the upstream source is invalidated. ContentTypeFilter EntityTypeFilter Filter Only items of a specific content-type (...) Returns only items which are of a certain content-type. Note: was previously called EntityTypeFilter. CsvDataSource Get Data Get data from a CSV-file (...) Lets you read a CSV file and provide the data as Entities for further use. not well documented yet, see code here DataTable DataSource Get Data Base class for coding only (...) Lets you convert a .net DataTable object into a DataSource. This is great for when you find it easier to generate a DataTable, and this will auto-provide it as a stream. Deferred Pipeline Query (internal) Internal object to optimize performance (...) This is used internally, because it will auto-generate an entire query-pipeline from configuration and query it, but only if accessed. ToSic.Eav.DataSources.DeferredPipelineQuery Deferred Pipeline Query code Dnn FormAndList Get Data Use old FnL data in 2sxc (...) Will let you access Form-And-List aka UDT (Universal Data Table) data. ToSic.SexyContent.Environment.Dnn7. DataSources.DnnFormAndList Dnn FormAndList code DnnSql DataSource Get Data DNN Sql DataSource (...) Sql which only uses the DNN DB and nothing else, based on the Sql DataSource DnnUserProfile DataSource Get Data Get DNN Users and profiles (...) Get DNN users and profiles to create user directories, details-pages etc. ToSic.SexyContent.Environment.Dnn7. not well documented, check out the source code here DataSources.DnnUserProfileDataSource ExternalData DataSource (internal) Base Class for external data DataSources (...) This is a base-class for all kinds of external data sources (like Csv‚Ä¶) because it provides more information related to enabling cachning etc. ToSic.Eav.DataSources.ExternalDataDataSource ExternalData DataSource code ItemIdFilter EntityIdFilter Filter One or more items with an Id (...) Return only 0, 1 or more items which fit the IDs in the string provided. Previously named EntityIdFilter ItemFilterDuplicates Logic Find and remove OR retrieve duplicate items (...) Use this to remove duplicates or just find them (or both) Module-Instance DataSource Get Data Get current modules data (...) Will get the content-items assigned to a DNN-Module. This is used internally on each view, but can also be used when using module-data to configure a query. OwnerFilter Filter Only items which are \"owned\" by a user (...) Returns only items which are \"owned\" = created by a specific person. Great for tools where the users have their own data / registrations which they can still modify. Paging Logic Page through items (...) Returns only a specific amount of items after skiping another amount; also provides a stream telling you how many items / pages are in the stream, to let you assemble a pager UI element PassThrough (internal) Do-Nothing DataSource (...) This data source doesn't actually do anything - it just lets the data on the in to the out. For (internal) and testing stuff. PublishingFilter Filter Filters items the current user shouldn't see (...) This is part of the \"Unpublished-Data\" concept. Since each item could be either published or draft, this helps you show the correct ones for the current user based on his edit-rights. It's automatically in the default pipeline, unless you explicitly don't want it. QuickCache (internal) Internal cache class (...) The quick and simple cache used by default internally. ToSic.Eav.DataSources.Caches.QuickCache QuickCache code RelationshipFilter Filter Filter items which have a relationship (...) This helps you find items which are related to another item - like \"All Books by Author Daniel Mettler\" New in 8.12: In-Stream \"Fallback\" which is returned if the filter didn't return any hits. Sql Get Data Get SQL data as entities (...) This lets you get data from any SQL data base. It also has powerful script-injection protection, so messy parameters won't hurt it. Shuffle Logic Shuffle/randomize item order (...) This source mixes up the order of the items, typically for things like \"show 3 random quotes\" StreamFallback Logic Returns the first in-stream with results (...) Use this to choose from multiple in-streams which data to show. It will use all the in-streams sorted A-Z, and return the first stream which can deliver data. The remaining streams will not be queried. StreamMerge Logic Merge all in-stream into 1 (...) Use this to merge multiple in-streams into one output stream. StreamPick Logic Pick a stream (...) Use this to pick one of multiple in-streams by name. Often used together with the token [Params:ShowDrafts] ValueFilter Filter Filters by value (...) Returns all items where a specified property matches the filter. Very powerfull, with filters like contains, between, etc. New in 8.12: In-Stream \"Fallback\" which is returned if the filter didn't return any hits. ValueSort Sort Sorts all items (...) Sorts the items in the stream asc/desc based on a property. ViewDataSource (internal) Internal class for view-handling (...) This is technically just the target of a pipeline, which is then routed to the Razor/Token View. Basically just does a full pass-through. ToSic.SexyContent.DataSources.ViewDataSource Demo App and further links You should find some code examples in this demo App ... More links: Description of the feature on 2sxc docs History Introduced in 2sxc ??.??"
  },
  "specs/js/2sxc.html": {
    "href": "specs/js/2sxc.html",
    "title": "Moved to | 2sxc and EAV 10",
    "keywords": "Moved to The $2sxc Root Object"
  },
  "specs/js/2sxc.http.html": {
    "href": "specs/js/2sxc.http.html",
    "title": "Moved to | 2sxc and EAV 10",
    "keywords": "Moved to The $2sxc.http API"
  },
  "specs/js/2sxc.env.html": {
    "href": "specs/js/2sxc.env.html",
    "title": "Moved to | 2sxc and EAV 10",
    "keywords": "Moved to The $2sxc.env API"
  },
  "specs/input-types/ui-field-string-dropdown.html": {
    "href": "specs/input-types/ui-field-string-dropdown.html",
    "title": "Field Input-Type string-dropdown | 2sxc and EAV 10",
    "keywords": "Field Input-Type string-dropdown Moved to Field Input-Type string-dropdown"
  },
  "specs/input-types/ui-field-datetime.html": {
    "href": "specs/input-types/ui-field-datetime.html",
    "title": "Field Input-Type datetime | 2sxc and EAV 10",
    "keywords": "Field Input-Type datetime Moved to Field Data Type: DateTime"
  },
  "specs/input-types/string-wysiwyg.html": {
    "href": "specs/input-types/string-wysiwyg.html",
    "title": "Field Input-Type string-wysiwyg | 2sxc and EAV 10",
    "keywords": "Field Input-Type string-wysiwyg Moved to Field Input-Type string-wysiwyg"
  },
  "specs/architecture/architecture.html": {
    "href": "specs/architecture/architecture.html",
    "title": "EAV / 2sxc / DNN Architecture | 2sxc and EAV 10",
    "keywords": "EAV / 2sxc / DNN Architecture 2sxc is simple to use, but to enable that, it's pretty sophisticated on the inside. We'll give you an overview here, so you can better understand what you are using. Overall Architecture The Storage Systems This is fairly straight forward - data can be stored in SQL (spread across tables or using JSON) and the File System (stored as JSON). Note that assets like images are not handled here, but in the EAV-Apps layer (see below). The EAV Layer The data management system underneath everything is called the EAV - which stands for Entity , Attribute , Value . Anything in that namespace is about internal data models, reading/saving data etc. So anything inside the ToSic.Eav.Data is all about the internals, which you only need in special scenarios. The same applies to ToSic.Eav.Apps which is the sub-system responsible for combining data into virtual bundles called Apps . You can usually ignore this. The SXC Layer On top of the EAV layer we have the Sxc layer. It's responsible for Content Management on top of the App model provided by the EAV . The Sxc layer provides things like IDynamicEntity to let you code like @Content.Title . This is usually more interesting for you, but still fairly generic, because 2sxc is also meant to work with other platforms like NopCommerce, Orchard or Oqtane, but it hasn't been implemented yet. The DNN Layer On top of the Sxc layer we have the Dnn layer. It connects 2sxc with Dnn. Usually when you're writing code and want to know about the API, you'll typically start here, and drill down to the other APIs as needed. Architecture of the EAV Layer Inside the EAV you'll find a whole ecosystem of parts which make the magic happen. Infrastructure This is very internal stuff, to make sure everything happens. You will usually not go here. Most if it is also not public API. Areas of interest may be the ToSic.Eav.Logging or ToSic.Eav.LookUp . Core Data Models This is more interesting and relevant to you, when you want to dive deep into the data model. Again you should note that this is advanced stuff. You'll find it in ToSic.Eav.Data - the most common bit you may care about is IEntity and IContentType . Data Processing This is where things get relevant for you. Check out the ToSic.Eav.DataSources to find all the bits and pieces used to process, filter and cache data. Storage This is still more an internal bit, and as of now you shouldn't use it. App System and Assets Another part that you may want to know more about. Here is where data is clustered together into virtual containers called Apps . These contain all the content-types and items of an App. It also has view-definitions, Content-Blocks (the logical unit usually called a Module in DNN) and way more. You'll find it in ToSic.Eav.Apps . The assets - usually using ADAM - are found in ToSic.Eav.Apps .Assets. Web API This is ATM an internal section, mainly for connecting DNN WebAPIs to the EAV. Not documented as of now. The Fine Line Between Eav.Apps and Sxc.* To keep the architecture clean, it's important to draw a clear line between Apps and what Sxc does. Basically it's this: Eav.Apps are virtual containers bundling things together. This means content-types, data, queries, settings, etc. Sxc is all about (Web) Content Management. So anything related to views, templates, assets, content-blocks is in Sxc. Specifically, these things may not be in Apps, and must be in Sxc Templates Rendering Engines like Token/Razor Content-Blocks Custom WebApi (which is also kind of a dynamic rendering engine)"
  },
  "net-code/razor/razor-component.html": {
    "href": "net-code/razor/razor-component.html",
    "title": "RazorComponent API | 2sxc and EAV 10",
    "keywords": "RazorComponent API As of 2sxc 10.20, all Razor templates should start with a line like @inherits ToSic.Sxc.Dnn.RazorComponent to make sure that it has all the new features. Warning If you don't specify this first line, your code will inherit from a different class, so many features won't work as documented. Discover More in the Razor Tutorials We have an rich series of Razor tutorials . You should really check them out üëç. APIs in Razor Components / Templates Tip Most of these APIs can be seen live in action with source code in the Razor Tutorials Standard Dynamic Code API Razor templates / components have all the objects and APIs of Dynamic Code Additional Razor Component APIs In addition there are a few additional objects & commands which you will usually use, most of which are standard Razor APIs Edit Helper providing you with various edit-functionality like @Edit.TagToolbar(...) Code The object from the Code-Behind Common Standard Razor APIs and Keywords Html.Raw(string) Standard Razor API to output the HTML in a string instead of showing tags in the visible page RenderPage(path, data) Standard Razor API - google it if you need it or read about splitting code in Razor The following keywords are normal in any Razor system, but it's good if you know them. Google them to learn more. @functions @helpers Customizing Data & Search Templates can tell the platform how search results should be treated. This is important for list-details scenarios. It's not documented well, but you can check examples in the Blog App. It needs these evens / properties: CustomizeData - is like a \"before-data-is-used\" of the page, used to change what data is delivered to the page - or to the search. Note that this is an older feature and many things this does can also be done using the visual query designer. But sometimes you will need code, and this is the place to do it. CustomizeSearch Purpose - tells you if the code is running to render into html, or for another reason like populating the search index - so your code can adapt"
  },
  "net-code/razor/edit.toolbar.html": {
    "href": "net-code/razor/edit.toolbar.html",
    "title": "and Methods in Razor / .net | 2sxc and EAV 10",
    "keywords": "@Edit.TagToolbar and @Edit.Toolbar Methods in Razor / .net 2sxc has a cool in-page toolbar system - here you'll find a conceptual overview around the toolbar . These toolbars are usually hover-buttons like this: Technically the entire Edit-UI is JavaScript based, so all the buttons, events etc. are client side scripts. Writing this JS would be complicated to say the least, so the @Edit.TagToolbar(...) and @Edit.Toolbar(...) are your tools of choice for adding toolbars from Razor. Discover More in the Razor Tutorials We have an rich series of Razor tutorials . You should really check them out üëç. How to use Here's a quick example of using the Edit object in a Razor template: <h1 @Edit.TagToolbar(Content)> @Content.Title </h1> This example will output the item title in an h1 tag and add a hidden, appear-on-mouse-over toolbar with editing-buttons for the item named Content . Let's assume you're building the details-page of a news-app and you only want the edit/remove buttons, to improve the UI for your use case. Additionally, you want the mouse-hover to react on the whole article, not just oven the title. Here's how: Warning 2sxc 10.27 introduces a new, simpler API to customize the toolbar. So the instructions below are technically correct, but not recommended any more. Check out the much simpler toolbar customizations @* this will show an \"edit and remove\" button for the current item *@ <div @Edit.TagToolbar(Content, actions: \"edit,remove\")> <h1> @Content.Title </h1> @Html.Raw(Content.Body) </div> Here's a different example, how to create a toolbar with only one button, namely an add new item button to create a new BlogPost-item. @* this will show an \"add\" button if the current user is an editor *@ <h1 @Edit.TagToolbar(actions: \"new\", contentType: \"BlogPost\")> @Content.Title </h1> As you can see, the actions: \"new\" tells the toolbar to only show this one button, while the contentType: \"BlogPost\" says what content-type this new item should be. As this toolbar won't have buttons that modify an existing item, it doesn't need that parameter. How it works This command is part of the Edit object and used in Razor templates. It provides a simple API to generate in-page buttons if the current user is an editor. It also checks if edit should be enabled (based on security specs) and will then generate some HTML/JavaScript at that location. Common Tasks Here are a few snippets that you'll typically need, saving you from reading all the docs in common scenarios: Edit.Toolbar(employee) creates a default toolbar for the content-item employee with all default buttons like edit, change-view, more, etc. Edit.Toolbar(employee, actions: \"edit\") creates a toolbar for the item employee but only with the edit -button. Edit.Toolbar(employee, actions: \"edit,add,remove\") creates a toolbar with three buttons edit , add , remove Edit.Toolbar(actions: \"new\", contentType: \"BlogPost\") creates a toolbar with one button, namely new which will open a new BlogPost form. @Edit.Toolbar(actions: \"new\", contentType: \"BlogPost\", prefill: new { Title = \"Hello\", Color = \"red\" } ) creates a toolbar with one button, namely new which will open a new BlogPost form, and prefills the Title and Color field. The Toolbar Actions Note: at the moment, the buttons are grouped into bundles like initial buttons list buttons template / view buttons app buttons The actions can be a combination of known button-names. Here's the current JavaScript catalog of commands : The following commands all require target to be set, or they only make sense in a List-setup - see also content and not as data . new open a dialog to create a new item, requires a target or a contentType parameter edit to edit the current item publish will optionally show the publish-button, but only if the current item is not published. add opens a dialog to create a new item just like new, but will add it below the current item in the content list remove will remove (not delete) this item from the content list moveup will move the item up one position in the content list movedown will move the item down one position in the content list sort will open the sort dialog of the content list replace will open a dialog to swap the current item in the content list Note: the command metadata - is a bit special, not supported in the actions parameter - use the complex toolbar: instead and read the instructions for the JS Commands . For many more commands you should check the JS Commands ), which covers many more like app-import , layout , develop , contenttype , contentitems , app , zone , more etc. More About the Prefill Basically this is a .net object which will be serialized to JSON and used to prefill a new item. Usually you'll just create a new, anonymous object like new { Title = \"xyz\", Date = ... } . example @Edit.Toolbar(actions: \"new\", contentType: \"BlogPost\", prefill: new { Title = \"Hello\", Color = \"red\", Link = \"page:\" + Dnn.Tab.TabID } ) This example will prefill the title, the color and in the link field add a reference to the current page. Multiple Entities Prefil For this you must simply provide an array of strings, like this: @Edit.Toolbar(actions: \"new\", contentType: \"BlogPost\", prefill: new { Tags = new string[] {\"08387a10-1aac-494a-9eb5-1383e31490eb\",\"b498a694-047a-4e51-a285-50f9a64edda1\"} }) Styling the Toolbar As of now there are only limited stying functions: Floating the Toolbar This happens automatically, if a surrounding HTML-tag has a class \"sc-element\". more... What Really Happens with the toolbar As previously noted, the toolbar actually puts some html/js into the page, which the javascript $2sxc object will pick up and work with. Quite a lot happens on the client, and that will be documented some other day. Here just the short version: js runs, picks up Toolbars jc reviews DOM to see what context it's in (either the module-instance or an inner-content) js generates buttons if a button is clicked, an action-manager then executes the correct action on the correct item Older @Content.Toolbar Syntax Is Deprecated Note : there was an older @SomeContentItem.Toolbar syntax and this still works, but we ran into architecture issues, so we decided to place all advanced functions into the Edit.Toolbar(...) method. This is the way to go from now on, the old syntax will continue to work but is not recommended any more. Read also In-Page Edit Toolbars and Buttons Toolbar Settings Toolbar Button Definitions Demo App and further links FAQ with Categories More links: Description of the feature on 2sxc docs History .Toolbar() Introduced in 2sxc 8.04 .TagToolbar() introduced in 2sxc 9.40"
  },
  "how-to/razor/edit.html": {
    "href": "how-to/razor/edit.html",
    "title": "Edit / Object in Razor / .net | 2sxc and EAV 10",
    "keywords": "Edit / @Edit Object in Razor / .net This document has been moved to NetCo Edit / Object in Razor / .net"
  },
  "specs/data-types/custom.html": {
    "href": "specs/data-types/custom.html",
    "title": "Data Type: Custom | 2sxc and EAV 10",
    "keywords": "Data Type: Custom Moved to Field Data Type: Custom"
  },
  "specs/data-types/boolean.html": {
    "href": "specs/data-types/boolean.html",
    "title": "Data Type: Boolean | 2sxc and EAV 10",
    "keywords": "Data Type: Boolean Moved to Field Data Type: Boolean"
  },
  "specs/data-formats/format-json-v1.html": {
    "href": "specs/data-formats/format-json-v1.html",
    "title": "JSON Format V1 | 2sxc and EAV 10",
    "keywords": "JSON Format V1 JSON based data storage is used to persist data into a text (JSON) format. In 2sxc 9.4 we introduced it to store entities in the history (for version rollback). Since then it has found many new applications. JSON Package The Json format has a minimal header like this: { \"_\": { \"V\": 1 } } which just contains the version. Future non-breaking enhancements will leave the version on 1 and optionally add more header information. In addition to that, the basic package can contain either a ContentType node see specs or an Entity node see specs This could then look like this: { \"_\": { \"V\": 1 }, \"ContentType\": { \"Id\": \"|Config ToSic.Eav.DataSources.SqlDataSource\", \"Name\": \"|Config ToSic.Eav.DataSources.SqlDataSource\", ... } } Special Stuff about the JSON Format All values have language information As we're usually working with real-life content-items, multi-language is always a concern. Because of this, every value is multi-language by default. If the language code is *, that means that this value is the default/fallback value for all languages. Metadata is a Recursive List of Entities 2sxc and the EAV is all about real-life content-management. As such, many pieces of information have more information attached, called Metadata. Metadata-items could themselves have their own Metadata, which is then of course attached as well. Limitations As of now (2sxc 9.7) such a package can only contain 1 root item (a content-type or an entity). Future versions may enhance this. Read also Format: Json V1 Content-types Concepts: file provided content-types History Added in 2sxc 9.7"
  },
  "specs/data-formats/format-json-v1-entity.html": {
    "href": "specs/data-formats/format-json-v1-entity.html",
    "title": "JSON Entity V1 | 2sxc and EAV 10",
    "keywords": "JSON Entity V1 JSON based entities are items which are stored as JSON. This is used in the history, in dynamic-entities in the DB and more. Description As of now, it's using a envolope to package everything and includes a minimal header to ensure we know it's V1 . It then contains a ContentType node containing various identification and description content-type metadata (array of entities) attributes (array) the attributes themselves again contain a minimal information + metadata items (entities) note that the attribute order is relevant Example This example is an extract of the Config Content-Type to manage the SqlDataSource (will be releasen in 2sxc 9.8 with more help-text etc.): { \"_\": { \"V\": 1 }, \"Entity\": { \"Id\": 42900, \"Version\": 6, \"Guid\": \"e8a702d2-eccd-4b0f-83bd-600d8a8449d9\", \"Type\": { \"Name\": \"DataPipeline\", \"Id\": \"DataPipeline\" }, \"Attributes\": { \"String\": { \"Description\": { \"*\": \"Retrieve full list of all zones\" }, \"Name\": { \"*\": \"Zones\" }, \"StreamsOut\": { \"*\": \"ListContent,Default\" }, \"StreamWiring\": { \"*\": \"3cef3168-5fe8-4417-8ee0-c47642181a1e:Default>Out:Default\" }, \"TestParameters\": { \"*\": \"[Module:ModuleID]=6936\" } }, \"Boolean\": { \"AllowEdit\": { \"*\": true } } }, \"Owner\": \"dnn:userid=1\", \"Metadata\": [ ] } } Format Explained _ (header) mainly storing the version, in case we have to introduce a breaking change - see also format v1 Entity - this marks an entity - at the moment a json package should only have 1, but later it could contain more Id - the identity as a number Guid - the identity as a guid Type - type information Name - the type name Id - the type identity - usually a guid, but special types can also use a specific string Attributes - the values of this entity String - all the string values [the field name] [the languages this value applies to] [the value] [more languages / values] [more fields / languages / values] Boolean - all the boolean values Number - ... [more types] Owner a special string identifying the owner of this item Metadata (optional, array of more entities) - a list of items which further describe this entity [item 1] Id Guid [more properties] [next items] Read also JSON Format V1 Blog post about the entity json format History Added in 2sxc 9.4"
  },
  "specs/data/relationships.html": {
    "href": "specs/data/relationships.html",
    "title": "Entity Relationships | 2sxc and EAV 10",
    "keywords": "Entity Relationships Moved to Entity Relationships"
  },
  "specs/data/metadata.html": {
    "href": "specs/data/metadata.html",
    "title": "Metadata - WIP | 2sxc and EAV 10",
    "keywords": "Metadata - WIP moved to Metadata - WIP (not well documented)"
  },
  "specs/data/index.html": {
    "href": "specs/data/index.html",
    "title": "Data Models in the EAV | 2sxc and EAV 10",
    "keywords": "Data Models in the EAV Tip Before you start: Remember that you usually don't need this if you are creating Razor templates or WebApi - for that, you want to read How to Use a Dynamic Entity . Zones (Tenants) The EAV is multi-tenant, and each tenant is called a Zone . This corresponds to a Portal in DNN. Each Zone contains at least 1 default app called Content and additional Apps as configured. Note The ZoneId is usually different than the DNN PortalId, so DNN has a PortalSetting for this . Apps and Data in Apps Every App contains Content-Types and Entities - like this: Content Types are the schema, they define what fields an entity has. read more about it in Content-Type (Schema/Object-Type) Entities are the data-items, they contain the content. read more about it in Entities (Data, Records, Items)"
  },
  "specs/cms/fields.html": {
    "href": "specs/cms/fields.html",
    "title": "Fields in 2sxc | 2sxc and EAV 10",
    "keywords": "Fields in 2sxc Fields are configured at the content-type level. These specs are not complete, but should mention a few special cases. Regular Expression Field Validation As of 2sxc 10.23 there are two kinds of field validations Invalid field - preventing the user from saving the data Warnings - showing a warning but allowing save Read also todo History Introduced in 2sxc 1.0 Field Validation added in 2sxc 2.0 Field Warnings added in 2sxc 10.23"
  },
  "specs/cms/field-validation.html": {
    "href": "specs/cms/field-validation.html",
    "title": "Field Validation in 2sxc TODO | 2sxc and EAV 10",
    "keywords": "Field Validation in 2sxc TODO This is still incomplete Regular Expression Field Validation As of 2sxc 10.23 there are two kinds of field validations Invalid field - preventing the user from saving the data Warnings - showing a warning but allowing save Read also todo History Introduced in 2sxc 1.0 Field Validation added in 2sxc 2.0 Field Warnings added in 2sxc 10.23"
  },
  "js-code/2sxc-api/index.html": {
    "href": "js-code/2sxc-api/index.html",
    "title": "JavaScript / HTML API Documentation for DNN / 2sxc | 2sxc and EAV 10",
    "keywords": "JavaScript / HTML API Documentation for DNN / 2sxc <!-- Data Highlights --> <!-- ADAM --> <!-- Server --> <!-- Prepare --> <!-- Data Source --> <!-- Optimzers --> <!-- Process / Awesomize --> <!-- Libraries --> <!-- data formats --> <!-- Browser --> <!-- Frameworks --> <!-- App show parts --> <!-- Interact parts --> <!-- Edit parts --> <!-- Edit UI parts --> <!-- SPA parts --> <!-- Custom highlight boxes - can be controlled by in-page CSS --> you are here (click to zoom) - discover the stack .context-box-summary .interact-2sxc, .context-box-summary .edit-custom { visibility: visible; } You can create awesome solutions, customizing the edit-experience and working with 2sxc-data in your javascript. The Core JavaScript Helper Objects $2sxc Manager which is the page-scope manager for everything sxc Controller with is the module-specific controller (TODO ca. 70% documented) The Editing Experience Overview to Editing Content Customize the edit experience (buttons, toolbars...) with the manage controller Toolbars, Buttons and Commands In-page edit toolbars for html or javascript with settings internals of a command (with full list) , of buttons and creating custom buttons The quickE (Quick Edit) experience customizing the quickE (quick edit) experience Using 2sxc with Popular JS Libraries (TODO) Angular / dnn-sxc-angular"
  },
  "index.html": {
    "href": "index.html",
    "title": "EAV & 2sxc Docs v11.12.01 | 2sxc and EAV 10",
    "keywords": "EAV & 2sxc Docs v11.12.01 This is the documentation for EAV and 2sxc APIs. It's fairly advanced, so if you're new to 2sxc, best start with 2sxc.org . 2sxc - The CMS / CMF of DNN (DotNetNuke) 2sxc is a CMS-Plugin for DNN/DotNetNuke . It makes content editing easier than Wordpress. It's also a CMF like Drupal. And a very cool EAV data-management system. And an online REST JSON database. And a lot more. 2sxc is basically used to provide web-site-builder functionality to DNN, both in a simple Content mode (where users just add images, designed text/image blocks, links etc.) or in App mode, where user add standalone functional apps like blogs, galleries and more. Most apps are on github and can be downloaded from the app-catalog . Where to Start 2sxc is an easy to use dynamic content system for .net Platforms like DNN. If you are just getting started, then this is probably not where you should be looking. Focus first on: Content on 2sxc.org like the learn section Apps on 2sxc Catalog which contains many ready-to-use apps like blogs and news, as well as tutorials The DNN Tutorials on 2sxc.org With that knowledge, you can already create amazing stuff. Everything you find here is very advanced and you won't need it for normal everyday work. Overview and Links to Other Documentations 2sxc is very flexible and can be used for almost any kind of content-management needs or app development needs. Because of this, different documentations help you work with different things. Here's the overview: 2sxc.org Getting started tutorials are found in the Learn section of 2sxc.org includes installation, basic instructions, creating your first content-type and similar tutorials & it also include instructions how to export/import data, working with the image resizer and more. A list of features , concepts and examples can be found in the Docs section of 2sxc.org, including things not specifically code related Many solutions and recommendations are found in the Blog on 2sxc.org Many demo, template and tutorial Apps are found in the App Catalog on 2sxc.org 2sxc / EAV Roadmap App folder structure and special files Style Guide 2020 (beta) best-practices draft If you want to know more, then check out... The Specs which tells you about Architecture, Data Models and more The C# .net API Docs Documentation Version Generated for EAV/2sxc 11.12.01 Pending Work / Tasks Next to document Finish metadata documentation These topics are not or insufficiently documented... URL and REST API for retrieving / changing data (todo) Enhancing 2sxc with custom extensions Custom input field-types Custom data-types ... Future topics, lower priority Angular2-9 and 2sxc (todo) React and 2sxc (todo) jQuery with 2sxc (todo) Super Basic stuff How razor templates get their data (content, list, app.data, app.query, etc.) etc. These topics are already documented elsewhere, but should become part of these docs View-switching based on url-params Security protecting views like admin-views creating custom DataSource objects"
  },
  "how-to/customize-edit-ux/toolbars.html": {
    "href": "how-to/customize-edit-ux/toolbars.html",
    "title": "Moved to | 2sxc and EAV 10",
    "keywords": "Moved to How To Customize the Toolbars"
  },
  "js-code/toolbars/simple.html": {
    "href": "js-code/toolbars/simple.html",
    "title": "How To Customize the Toolbars | 2sxc and EAV 10",
    "keywords": "How To Customize the Toolbars <!-- Data Highlights --> <!-- ADAM --> <!-- Server --> <!-- Prepare --> <!-- Data Source --> <!-- Optimzers --> <!-- Process / Awesomize --> <!-- Libraries --> <!-- data formats --> <!-- Browser --> <!-- Frameworks --> <!-- App show parts --> <!-- Interact parts --> <!-- Edit parts --> <!-- Edit UI parts --> <!-- SPA parts --> <!-- Custom highlight boxes - can be controlled by in-page CSS --> you are here (click to zoom) - discover the stack .context-box-summary .edit-custom { visibility: visible; } A lot in 2sxc is fully automatic. But sometimes you want to customize how the content editor can work. Note 2sxc 10.27 introduces a much simpler system, which is what is shown here. Previously everything was possible, but quite complicated. So if you find examples out there which look very different - they work as well, but here's the simple system. Live Examples The DNN Tutorials have a live demo of toolbar customization . Head over there while reading these docs to see all this in action. Overview - What You can Customize You can customize just about everything: hover-behavior - you may want hover, maybe not, and maybe to the right | left colors using color names, hex-codes or CSS classes of the entire toolbar or just of individual buttons you can just enhance/change the default toolbar or create a custom one with just your buttons you can change the button groups - add, remove etc. you can add/remove buttons as you need you can create buttons with custom icons you can even call custom code from your custom buttons Tip This overview will get you started, anything more advanced will need the specs . Important This will show you how to do things in Razor, but the same principles apply to plain HTML-Toolbars. We assume that 99% of all toolbars will be initiated from razor, so that's what we'll be showing here. Getting Started with Custom Toolbars Usually your code will look a bit like this: <div @Edit.TagToolbar(Content)> ... </div> This will create a standard hover-toolbar with some buttons and the more ellipsis button. Note that the exact combination of buttons is auto-detected. So you may just have an edit but you may also have an add etc. depending on the template and the data it receives. It looks approx. like this: Add our First Button Let's add an extra new button to create an item of the content-type Category . Note This code will make the button appear, but on click you may see an error, because you probably don't have a ContentType Category in your app. <div @Edit.TagToolbar(Content, toolbar: \"+new?contentType=Category\")> ... </div> You should now have an extra + button like this: Let's emphasize it, because for whatever reason it's a super important button. We'll also drop the leading + since it's optional and defaulted to: <div @Edit.TagToolbar(Content, toolbar: \"new&color=red?contentType=Category\")> ... </div> You should now have a red + button like this: Important The term new in this example means we want a button of type new which will open the dialog to create new entities. We could also write app&color=red which would add a button to manage the app. So new ‚â† 'new button' but 'button to add a new entity'. The full list of button names can be found in the CMS Commands list . Adding more Buttons Now we want to add another button - maybe to add a Tag . The toolbar attribute on the Edit.TagToolbar can take various kinds of objects, but for the new simple API it only accepts string objects or string[] arrays. So to make multiple changes to the toolbar, we'll have to give it a string[] array like this (note that we can use line-breaks, to make the code easier to read): <div @Edit.TagToolbar(Content, toolbar: new [] { \"new&color=red?contentType=Category\", \"new&color=teal?contentType=Tag\" })> ... </div> You should now see this: Tip When creating new items you can also add prefill default values. This is great for News-Apps where you want to prefill the date or for list of something where you want to prefill the category. Check out the specs . Removing Buttons with - Now maybe you don't like to allow your editors to change the view - so let's do the same but remove the view-switch button as well using the remove - prefix: <div @Edit.TagToolbar(Content, toolbar: new [] { \"-layout\", \"new&color=red?contentType=Category\", \"new&color=teal?contentType=Tag\" })> ... </div> So you can add / remove any button you want. You can find a full list of button names (command names) . Modifying Existing Buttons with % But what if we want to modify an existing button? Let's change the icon and both colors of the layout (view) button using the modify % prefix: <div @Edit.TagToolbar(Content, toolbar: new [] { \"%layout&icon=icon-sxc-replace&color=white,maroon\", \"new&color=red?contentType=Category\", \"new&color=teal?contentType=Tag\" })> ... </div> As you can see, we just used % to modify a button, set the icon and 2 colors. Show Only Our Buttons But maybe we would prefer to have a toolbar with only the two add buttons, and nothing else. By default, the toolbar uses a template called default which contains all these buttons. But you can always start with an empty template. You'll find the full list of templates here . <div @Edit.TagToolbar(Content, toolbar: new [] { \"toolbar=empty\", \"new&color=red?contentType=Category\", \"new&color=teal?contentType=Tag\" })> ... </div> Tip As you can see, the principle is to use a toolbar template and make modifications to it. Showing the Delete Button Warning A special case in modifying buttons is also to force-show the delete button which is hidden by default. The reason it's hidden is because in most content-editing scenarios the editor should be able to remove content, but not delete it - in case it's re-used elsewhere. But let's say you created a News App and want to allow the editor to also delete the news-items. Here's how: <div @Edit.TagToolbar(Content, toolbar: \"%delete&show=true\")> ... </div> The delete button is in the third group of buttons, so you'll have to hit the ellipsis a few times to see it. You'll then see: Adding Custom Groups Let's assume you understand the principle of adding, removing and changing buttons. Let's add a custom button group with only the buttons you want - followed by the normal ellipsis-button with the standard functionality: <div @Edit.TagToolbar(Content, toolbar: new [] { \"group=add-buttons\", \"new&color=red&group=add-buttons?contentType=Category\", \"new&color=teal&group=add-buttons?contentType=Tag\" })> ... </div> You'll get this result, and hitting the ellipsis will show you the default buttons as you can see in the second image: Note We had to give our new group a name - in this case add-buttons and told the new buttons that they should go inside that group. Tip A new group can also go after the default group of buttons. If you add a &pos=1 or another number the group will be placed later on in the sequence. You can also use &pos=-0 or &pos=-1 or similar to place it counting from the end of the list. Warning When using position like pos=# you may have unexpected results, because the button is added to the list before some buttons decide to hide themselves. So you may think you're adding it to pos=1 but if the edit button (which would be at position 0) shouldn't be shown, your button will still appear to be the first one. There is also a hidden group called edit-advanced - you can find the list of groups here. As of now, it only contains the delete button which is hidden by default. Attaching Custom JavaScript Code to a Button Now you may want to call your own code when you create a button. This is very advanced stuff, but here's how: <div class=\"demobox\" @Edit.TagToolbar(Content, toolbar: \"custom&title=Message?call=myMessage&id=17\") > This demonstrates a custom button with the call-name in the parameters. </div> <script> function myMessage(context, event) { console.log(context, event); alert('hello from my Message - got this id:' + context.button.command.params.id); } </script> You'll then see this toolbar, and on click this message: You'll notice that we have a ?call=functionName and also an id=17 just to show how additional information is passed around. Your function also gets an event from the browser, so you can check the event.target and other things to see what was actually clicked. Warning This is very advanced stuff, you may run into difficulties to get this to fly üòâ. Debugging Custom Toolbars In most cases if your problems will be caused by invalid syntax. It's easy to forget a closing quote \" or a comma , to separate values. So always check that first. If you really want to do deep debugging, you should use the $2sxc.insights() command in the console to see what whas processed and how. If you add ?debug=true to the url of the page, it will also log way more intermediate data for you to review. Read More Basically you have what it takes. To go further: review the specs . check out the list of commands/buttons"
  },
  "js-code/2sxc-api/sxc.html": {
    "href": "js-code/2sxc-api/sxc.html",
    "title": "The Module-Instance Sxc Controller | 2sxc and EAV 10",
    "keywords": "The Module-Instance Sxc Controller <!-- Data Highlights --> <!-- ADAM --> <!-- Server --> <!-- Prepare --> <!-- Data Source --> <!-- Optimzers --> <!-- Process / Awesomize --> <!-- Libraries --> <!-- data formats --> <!-- Browser --> <!-- Frameworks --> <!-- App show parts --> <!-- Interact parts --> <!-- Edit parts --> <!-- Edit UI parts --> <!-- SPA parts --> <!-- Custom highlight boxes - can be controlled by in-page CSS --> you are here (click to zoom) - discover the stack .context-box-summary .interact-2sxc { visibility: visible; } The module-specific sxc -controller is the core JavaScript object helping you in these advanced cases: if you want full control over the edit-experience with custom buttons etc. when you want to use view-data as an asyc-JS call if you wish to work with WebAPI REST calls - of your own App-WebApi, 2sxc-WebApi or DNN-WebApi How to use First you must ensure that you have the $2sxc manager on your page, which will get you a module-specific sxc controller. Read about the $2sxc manager here. Here's a simple example (assuming you have the $2sxc manager): <a onclick=\"var sxc = $2sxc(this); alert(sxc.isEditMode())\"> click me </a> The code above shows how the sxc-object is retrieved using the $2sxc(...) manager, based on the current context this how to ask if we're in edit-mode Here's another quick example, calling a C# web-api endpoint: var sxc = $2sxc(27); sxc.webApi.post(\"Form/ProcessForm\") .success(function(result) { // .... }); How to Get the Current Context's sxc Controller Before you continue, make sure you know how to resolve/get your sxc -controller, as it is unique for each DNN-Module. This is because each action needs to know which module it belongs to. Read about the 3 ways to get this in the $2sxc Manager docs . The API of an Initialized Module sxc Controller .data object : todo... .id int : the id of this sxc-controller, usually the module-id ~~ .cbid int : internal use ~~ .isEditMode() bool : looks up if this module is editable - this can vary on each module .webApi... object : helpers to call server side WebApis and REST resources ~~ .showDetailedHttpError(...) void : internal use ~~ .manage... object - to create your own buttons, toolbars or run CMS commands Custom Toolbars, Buttons and Commands Read the manage documentation to discover more about the getToolbar(...) , getButton(...) or run(...) methods which let you customize the toolbars, buttons and use other UI elements like links to run commands like \"show layout selector\". Working with the JSON Data of the Current Module (TODO) The data object and how-to use, probably using the example of TimeLineJS Using the load-event, reload, and the \"one\" event The structure of the returned data Short note: The data is loaded using jQuery and when it's returned and processed, a callback will be executed. This is different from modern promise-implementations but easy to use anyhow. We haven't changed this, because it's trivial and we don't want to break existing code. Till we find time to document more, please consult the $2sxc API Working with REST Api to Read/Write content-items Read about it in the Sxc WebApi page. Using App-Queries with $2sxc Read about it in the Sxc WebApi page. Working with Custom C# App WebAPIs Read about it in the Sxc WebApi page. Additional Properties of a Module Controller TODO - must document more about properties like isLoaded, lastRefresh, etc. that these are all internal-use and not guaranteed to stay stable in future versions Till we find time to document more, please consult the $2sxc API Demo App and further links You should find some code examples in this demo App TimeLineJS all the JS-apps including AngularJS in the app-catalog More links: Description of the feature on 2sxc docs History Introduced in 2sxc 04.00"
  },
  "api/dot-net/ToSic.Sxc.Context.ICmsCulture.html": {
    "href": "api/dot-net/ToSic.Sxc.Context.ICmsCulture.html",
    "title": "Interface ICmsCulture | 2sxc and EAV 10",
    "keywords": "Interface ICmsCulture Information about the cultures/languages used. Namespace : ToSic.Sxc.Context Assembly : ToSic.Sxc.dll Syntax [PublicApi] public interface ICmsCulture Properties | Improve this Doc View Source CurrentCode The current culture / language code like \"de-ch\". It's the language-code used by the translation environment. Declaration string CurrentCode { get; } Property Value Type Description System.String Remarks It's always lower-case. In the case of DNN, this corresponds to PortalSettings.CurrentAlias.CultureCode | Improve this Doc View Source DefaultCode The default language code like \"en-us\" or \"\" (empty string). If the system is single-language, it will often just be an empty string \"\". Declaration string DefaultCode { get; } Property Value Type Description System.String Remarks It's always lower-case. In the case of DNN, this corresponds to PortalSettings.DefaultCulture"
  },
  "api/dot-net/ToSic.Sxc.Context.ICmsModule.html": {
    "href": "api/dot-net/ToSic.Sxc.Context.ICmsModule.html",
    "title": "Interface ICmsModule | 2sxc and EAV 10",
    "keywords": "Interface ICmsModule Information about the module context the code is running in. Namespace : ToSic.Sxc.Context Assembly : ToSic.Sxc.dll Syntax [PublicApi] public interface ICmsModule Remarks Note that the module context is the module for which the code is currently running. In some scenarios (like Web-API scenarios) the code is running for this module but not on this module, as it would then be running on a WebApi. Properties | Improve this Doc View Source Id The module id on the page. Corresponds to the Dnn ModuleId or the Oqtane Module Id. Declaration int Id { get; } Property Value Type Description System.Int32 The ID, unless unknown, in which case it's a negative number Remarks In some systems a module can be re-used on multiple pages, and possibly have different settings for re-used modules. 2sxc doesn't use that, so the module id corresponds to the Dnn ModuleId and not the PageModuleId."
  },
  "api/dot-net/ToSic.Sxc.Dnn.Run.DnnSite.html": {
    "href": "api/dot-net/ToSic.Sxc.Dnn.Run.DnnSite.html",
    "title": "Class DnnSite | 2sxc and EAV 10",
    "keywords": "Class DnnSite This is a DNN implementation of a Tenant-object. Inheritance System.Object ToSic.Eav.Context.Site < DotNetNuke.Entities.Portals.PortalSettings > DnnSite Implements IZoneIdentity IWrapper < DotNetNuke.Entities.Portals.PortalSettings > ICmsSite Namespace : ToSic.Sxc.Dnn.Run Assembly : ToSic.Sxc.Dnn.dll Syntax [InternalApi_DoNotUse_MayChangeWithoutNotice(\"this is just fyi\")] public sealed class DnnSite : Site<PortalSettings>, ISite, IZoneIdentity, IZoneCultureResolver, IWrapper<PortalSettings>, ICmsSite Constructors | Improve this Doc View Source DnnSite() DI Constructor, will get the current portal settings TodoDI not ideal yet, as PortalSettings.current is still retrieved from global Declaration public DnnSite() Properties | Improve this Doc View Source ContentPath Declaration public override string ContentPath { get; } Property Value Type Description System.String Overrides ToSic.Eav.Context.Site<DotNetNuke.Entities.Portals.PortalSettings>.ContentPath | Improve this Doc View Source CurrentCultureCode Declaration public override string CurrentCultureCode { get; } Property Value Type Description System.String Overrides ToSic.Eav.Context.Site<DotNetNuke.Entities.Portals.PortalSettings>.CurrentCultureCode | Improve this Doc View Source DefaultCultureCode Declaration public override string DefaultCultureCode { get; } Property Value Type Description System.String Overrides ToSic.Eav.Context.Site<DotNetNuke.Entities.Portals.PortalSettings>.DefaultCultureCode | Improve this Doc View Source Id The Id of the site in systems like DNN and Oqtane. In DNN this is the same as the PortalId Declaration public override int Id { get; } Property Value Type Description System.Int32 Overrides ToSic.Eav.Context.Site<DotNetNuke.Entities.Portals.PortalSettings>.Id | Improve this Doc View Source Name Declaration public override string Name { get; } Property Value Type Description System.String Overrides ToSic.Eav.Context.Site<DotNetNuke.Entities.Portals.PortalSettings>.Name | Improve this Doc View Source Url Declaration public override string Url { get; } Property Value Type Description System.String Overrides ToSic.Eav.Context.Site<DotNetNuke.Entities.Portals.PortalSettings>.Url Remarks Important special case: if the PortalSettings are not from the PortalSettings.Current, then the PortalAlias are null!!! I believe this should only matter in very special cases Like when showing a module from another portal - in which case we don't need that alias but the current one. Just keep this in mind in case anything ever breaks. | Improve this Doc View Source ZoneId Declaration public override int ZoneId { get; } Property Value Type Description System.Int32 Overrides ToSic.Eav.Context.Site<DotNetNuke.Entities.Portals.PortalSettings>.ZoneId Methods | Improve this Doc View Source Init(Int32) Declaration public override ISite Init(int siteId) Parameters Type Name Description System.Int32 siteId Returns Type Description ToSic.Eav.Context.ISite Overrides ToSic.Eav.Context.Site<DotNetNuke.Entities.Portals.PortalSettings>.Init(System.Int32) | Improve this Doc View Source Swap(PortalSettings) Declaration public DnnSite Swap(PortalSettings settings) Parameters Type Name Description DotNetNuke.Entities.Portals.PortalSettings settings Returns Type Description DnnSite | Improve this Doc View Source TrySwap(ModuleInfo) Declaration public DnnSite TrySwap(ModuleInfo module) Parameters Type Name Description DotNetNuke.Entities.Modules.ModuleInfo module Returns Type Description DnnSite Implements IZoneIdentity IWrapper<T> ICmsSite"
  },
  "api/dot-net/ToSic.Sxc.Dnn.Run.DnnValueConverter.html": {
    "href": "api/dot-net/ToSic.Sxc.Dnn.Run.DnnValueConverter.html",
    "title": "Class DnnValueConverter | 2sxc and EAV 10",
    "keywords": "Class DnnValueConverter The DNN implementation of the IValueConverter which converts \"file:22\" or \"page:5\" to the url, Inheritance System.Object DnnValueConverter Implements IValueConverter Namespace : ToSic.Sxc.Dnn.Run Assembly : ToSic.Sxc.Dnn.dll Syntax [InternalApi_DoNotUse_MayChangeWithoutNotice(\"this is just fyi\")] public class DnnValueConverter : IValueConverter Constructors | Improve this Doc View Source DnnValueConverter(ISite) Declaration public DnnValueConverter(ISite site) Parameters Type Name Description ToSic.Eav.Context.ISite site Methods | Improve this Doc View Source ToReference(String) Resolve a value to a reference which is managed by the environment Declaration public string ToReference(string value) Parameters Type Name Description System.String value the full value, like \"image/logo.jpg\" Returns Type Description System.String The reference, like \"file:22\". | Improve this Doc View Source ToValue(String, Guid) Resolve a reference to a value using the environment resolver Declaration public string ToValue(string reference, Guid itemGuid = default(Guid)) Parameters Type Name Description System.String reference Reference code (or something else) - if not a code, will not resolve System.Guid itemGuid Guid of the item/entity which was using the reference. The Guid is used when security setting only allow resolving within the own item. This ensures that external requests cannot just number through all possible IDs. If you use Guid.Empty or don't supply it, it will usually work, except on systems where the security has been extra-hardened. Returns Type Description System.String The value, like the url. Implements IValueConverter"
  },
  "api/dot-net/ToSic.Eav.Apps.AppState.html": {
    "href": "api/dot-net/ToSic.Eav.Apps.AppState.html",
    "title": "Class AppState | 2sxc and EAV 10",
    "keywords": "Class AppState A complete App state - usually cached in memory. Has many internal features for partial updates etc. But the primary purpose is to make sure the whole app is always available with everything. It also manages and caches relationships between entities of the same app. Inheritance System.Object HasLog AppBase AppState Implements IHasLog IAppIdentity IZoneIdentity IAppIdentityLight IEntitiesSource IMetadataSource ICacheExpiring ITimestamped Inherited Members AppBase.ZoneId AppBase.AppId AppBase.Init(IAppIdentity, CodeRef, ILog) HasLog.Log HasLog.InitLog(String, ILog, String) HasLog.InitLog(String, ILog, String, CodeRef) Namespace : ToSic.Eav.Apps Assembly : ToSic.Eav.Core.dll Syntax [InternalApi_DoNotUse_MayChangeWithoutNotice(\"this is just fyi\")] public class AppState : AppBase, IHasLog, IAppIdentity, IZoneIdentity, IAppIdentityLight, IEntitiesSource, IHasMetadataSource, IMetadataSource, ICacheExpiring, ITimestamped Fields | Improve this Doc View Source DynamicUpdatesCount Show how many times the app has been Dynamically updated - in case we run into cache rebuild problems. Declaration public int DynamicUpdatesCount Field Value Type Description System.Int32 | Improve this Doc View Source FirstLoadCompleted Shows that the initial load has completed Declaration protected bool FirstLoadCompleted Field Value Type Description System.Boolean | Improve this Doc View Source Loading Shows that the app is loading / building up the data. Declaration protected bool Loading Field Value Type Description System.Boolean Properties | Improve this Doc View Source CacheTimestamp System time-stamp of when the data in this cached thing was initialized or updated. Depending on the implementation, this may go up-stream and return an up-stream value. Declaration public long CacheTimestamp { get; } Property Value Type Description System.Int64 A timestamp as a long number | Improve this Doc View Source ContentTypes All ContentTypes in this App Declaration public IEnumerable<IContentType> ContentTypes { get; } Property Value Type Description System.Collections.Generic.IEnumerable < IContentType > | Improve this Doc View Source Folder The app-folder, which is pre-initialized very early on. Needed to pre-load file based content-types Declaration public string Folder { get; set; } Property Value Type Description System.String | Improve this Doc View Source List The simple list of all entities, used everywhere Declaration public IImmutableList<IEntity> List { get; } Property Value Type Description System.Collections.Immutable.IImmutableList < IEntity > | Improve this Doc View Source Name The app-folder, which is pre-initialized very early on. Needed to pre-load file based content-types Declaration public string Name { get; set; } Property Value Type Description System.String | Improve this Doc View Source Relationships Manages all relationships between Entities Declaration public AppRelationshipManager Relationships { get; } Property Value Type Description ToSic.Eav.Apps.AppRelationshipManager Methods | Improve this Doc View Source CacheChanged(Int64) Detect if the cache has old data, by comparing it to a timestamp which may be newer. This is implemented in each object, because sometimes it compares its own timestamp, sometimes that of another underlying object. Declaration public bool CacheChanged(long newCacheTimeStamp) Parameters Type Name Description System.Int64 newCacheTimeStamp New time stamp to compare with Returns Type Description System.Boolean True if the timestamps differ, false if it's the same | Improve this Doc View Source DoInLock(ILog, Action) Experiment to try to ensure the same entity cannot be created twice Declaration public void DoInLock(ILog parentLog, Action transaction) Parameters Type Name Description ILog parentLog System.Action transaction | Improve this Doc View Source Get<TMetadataKey>(Int32, TMetadataKey, String) Declaration public IEnumerable<IEntity> Get<TMetadataKey>(int targetType, TMetadataKey key, string contentTypeName = null) Parameters Type Name Description System.Int32 targetType TMetadataKey key System.String contentTypeName Returns Type Description System.Collections.Generic.IEnumerable < IEntity > Type Parameters Name Description TMetadataKey | Improve this Doc View Source GetContentType(Int32) Get a content-type by number / id. Will also check global types if needed. Declaration public IContentType GetContentType(int contentTypeId) Parameters Type Name Description System.Int32 contentTypeId id of the type as stored in the repository Returns Type Description IContentType a type object or null if not found | Improve this Doc View Source GetContentType(String) Get a content-type by name. Will also check global types if needed. Declaration public IContentType GetContentType(string name) Parameters Type Name Description System.String name name of the type Returns Type Description IContentType a type object or null if not found | Improve this Doc View Source GetMetadata<TMetadataKey>(Int32, TMetadataKey, String) Declaration public IEnumerable<IEntity> GetMetadata<TMetadataKey>(int targetType, TMetadataKey key, string contentTypeName = null) Parameters Type Name Description System.Int32 targetType TMetadataKey key System.String contentTypeName Returns Type Description System.Collections.Generic.IEnumerable < IEntity > Type Parameters Name Description TMetadataKey Explicit Interface Implementations | Improve this Doc View Source IEntitiesSource.List Declaration IEnumerable<IEntity> IEntitiesSource.List { get; } Returns Type Description System.Collections.Generic.IEnumerable < IEntity > Implements IHasLog IAppIdentity IZoneIdentity IAppIdentityLight IEntitiesSource IMetadataSource ICacheExpiring ITimestamped"
  },
  "api/dot-net/ToSic.Eav.Apps.html": {
    "href": "api/dot-net/ToSic.Eav.Apps.html",
    "title": "Namespace ToSic.Eav.Apps | 2sxc and EAV 10",
    "keywords": "Namespace ToSic.Eav.Apps The EAV App System. It's responsible for taking data and bundling it into virtual segments called Apps , and providing nice APIs to work with the apps. Classes App A single-use app-object providing quick simple api to access name, folder, data, metadata etc. AppBase Base object for things that have a full app-identity (app-id and zone-id) and can also log their state. AppData The Data object on an App. It's also a data-source of type App , so it has many streams, one for each content-type so you can use it in combination with other DataSources. The special feature is that it also has methods for data-manipulation, including Create, Update and Delete AppIdentity A full App-Identity. This is either used to pass identities around, or as a base class for more extensive objects which know their full identity. AppState A complete App state - usually cached in memory. Has many internal features for partial updates etc. But the primary purpose is to make sure the whole app is always available with everything. It also manages and caches relationships between entities of the same app. State This provides access to the in-memory state, to retrieve App catalog information from the cache or system (zones) to retrieve app states (or automatically load them if accessed the first time) Zone Contains all the basic infos about a Zone - usually cached Interfaces IApp An App in memory - for quickly getting things done with the app data, queries etc. IAppData An App-DataSource which also provides direct commands to edit/update/delete data. IAppDataConfiguration The configuration of an app-data - usually relevant so the source will auto-filter out unpublished data for normal viewers. IAppIdentity Marks thing which belongs to an App and a Zone and know their full identity. IAppIdentityLight Marks things which belongs to an App - but it may only know about the app, not about the zone. For a full identity, see IAppIdentity . IZoneIdentity Marks things which belongs to a Zone"
  },
  "api/dot-net/ToSic.Eav.Conversion.IEntitiesTo-1.html": {
    "href": "api/dot-net/ToSic.Eav.Conversion.IEntitiesTo-1.html",
    "title": "Interface IEntitiesTo<T> | 2sxc and EAV 10",
    "keywords": "Interface IEntitiesTo<T> Convert an entity into another format Namespace : ToSic.Eav.Conversion Assembly : ToSic.Eav.Core.dll Syntax [InternalApi_DoNotUse_MayChangeWithoutNotice] public interface IEntitiesTo<out T> Type Parameters Name Description T The target format we'll convert into Properties | Improve this Doc View Source Languages Languages to prefer when looking up the values Declaration string[] Languages { get; set; } Property Value Type Description System.String [] | Improve this Doc View Source WithGuid Include the entity Guid in the conversion Declaration bool WithGuid { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source WithMetadataFor Include metadata for-information Declaration bool WithMetadataFor { get; } Property Value Type Description System.Boolean | Improve this Doc View Source WithPublishing Include publishing information (draft etc.) in the conversion Declaration bool WithPublishing { get; } Property Value Type Description System.Boolean | Improve this Doc View Source WithTitle Include the title in a special field _Title Declaration bool WithTitle { get; } Property Value Type Description System.Boolean Methods | Improve this Doc View Source ConfigureForAdminUse() Ensure all settings are so it includes guids etc. This is so the serializable information is useful for admin UIs Declaration void ConfigureForAdminUse() | Improve this Doc View Source Convert(IEnumerable<IEntity>) Return an list of converted entities, ready to serialize Declaration IEnumerable<T> Convert(IEnumerable<IEntity> entities) Parameters Type Name Description System.Collections.Generic.IEnumerable < IEntity > entities Returns Type Description System.Collections.Generic.IEnumerable <T> Remarks note that this could be in use on webAPIs and scripts so even if it looks un-used, it must stay available | Improve this Doc View Source Convert(IEntity) Return an converted, serializable entity Declaration T Convert(IEntity entity) Parameters Type Name Description IEntity entity Returns Type Description T"
  },
  "api/dot-net/ToSic.Eav.DataSources.DataSourceBase.html": {
    "href": "api/dot-net/ToSic.Eav.DataSources.DataSourceBase.html",
    "title": "Class DataSourceBase | 2sxc and EAV 10",
    "keywords": "Class DataSourceBase The base class, which should always be inherited. Already implements things like Get One / Get many, Caching and a lot more. Inheritance System.Object HasLog DataSourceBase App AppRoot AttributeFilter AttributeRename CacheAllStreams EntityIdFilter EntityTypeFilter ExternalData ItemFilterDuplicates OwnerFilter Paging PassThrough PublishingFilter Query QueryRun RelationshipFilter Shuffle StreamFallback StreamMerge StreamPick Apps Attributes ContentTypes QueryInfo Zones ValueFilter ValueSort CmsBlock Implements IDataSource IAppIdentity IZoneIdentity IAppIdentityLight ICacheKey ICacheExpiring ITimestamped ICanPurgeListCache IHasLog IDataTarget Inherited Members HasLog.Log HasLog.InitLog(String, ILog, String) HasLog.InitLog(String, ILog, String, CodeRef) Namespace : ToSic.Eav.DataSources Assembly : ToSic.Eav.DataSources.dll Syntax [PublicApi_Stable_ForUseInYourCode] public abstract class DataSourceBase : HasLog, IDataSource, IAppIdentity, IZoneIdentity, IAppIdentityLight, ICacheInfo, ICacheKey, ICacheExpiring, ITimestamped, ICanPurgeListCache, IHasLog, IDataTarget Constructors | Improve this Doc View Source DataSourceBase() Constructor - must be without parameters, otherwise the DI can't construct it. Declaration protected DataSourceBase() Properties | Improve this Doc View Source AppId The app id as used internally Declaration public virtual int AppId { get; set; } Property Value Type Description System.Int32 The App ID this thing belongs to | Improve this Doc View Source CacheFullKey Combination of the current key and all keys of upstream cached items, to create a long unique key for this context. Declaration public virtual string CacheFullKey { get; } Property Value Type Description System.String Full key containing own partial key and upstream keys. | Improve this Doc View Source CachePartialKey Unique key-id for this specific situation - could be the same for all instances, or could vary by some parameter. Declaration public virtual string CachePartialKey { get; } Property Value Type Description System.String A string which is specific to this cache-item. | Improve this Doc View Source CacheRelevantConfigurations Some configuration of the data source is cache-relevant, others are not. This list contains the names of all configuration items which are cache relevant. It will be used when generating a unique ID for caching the data. Declaration public List<string> CacheRelevantConfigurations { get; set; } Property Value Type Description System.Collections.Generic.List < System.String > | Improve this Doc View Source CacheTimestamp System time-stamp of when the data in this cached thing was initialized or updated. Depending on the implementation, this may go up-stream and return an up-stream value. Declaration public virtual long CacheTimestamp { get; } Property Value Type Description System.Int64 A timestamp as a long number | Improve this Doc View Source Configuration The configuration system of this data source. Keeps track of all values which the data source will need, and manages the LookUp engine which provides these values. Declaration public IDataSourceConfiguration Configuration { get; } Property Value Type Description IDataSourceConfiguration | Improve this Doc View Source Guid Internal ID usually from persisted configurations IF the configuration was build from an pre-stored query. Declaration public Guid Guid { get; set; } Property Value Type Description System.Guid The guid of this data source which identifies the configuration IEntity of the data source. | Improve this Doc View Source In List of all In connections Declaration public IDictionary<string, IDataStream> In { get; } Property Value Type Description System.Collections.Generic.IDictionary < System.String , IDataStream > | Improve this Doc View Source Item[String] Gets the Out-Stream with specified Name. Declaration public IDataStream this[string outName] { get; } Parameters Type Name Description System.String outName Property Value Type Description IDataStream an IDataStream of the desired name Exceptions Type Condition System.NullReferenceException if the stream does not exist | Improve this Doc View Source List The items in the data-source - to be exact, the ones in the Default stream. Declaration public IEnumerable<IEntity> List { get; } Property Value Type Description System.Collections.Generic.IEnumerable < IEntity > A list of IEntity items in the Default stream. | Improve this Doc View Source Name Name of this DataSource - not usually relevant. Declaration public string Name { get; } Property Value Type Description System.String Name of this source. | Improve this Doc View Source Out Gets the Dictionary of Out-Streams. This is the internal accessor, as usually you'll use this[\"name\"] instead. In rare cases you need the Out, for example to list the stream names in the data source. Declaration public virtual IDictionary<string, IDataStream> Out { get; protected set; } Property Value Type Description System.Collections.Generic.IDictionary < System.String , IDataStream > A dictionary of named IDataStream objects | Improve this Doc View Source ZoneId ID of the zone (EAV Tenant) Declaration public virtual int ZoneId { get; set; } Property Value Type Description System.Int32 The zone ID this thing belongs to Methods | Improve this Doc View Source Attach(String, IDataSource) Add a single named stream to the In Declaration public void Attach(string streamName, IDataSource dataSource) Parameters Type Name Description System.String streamName In-name of the stream IDataSource dataSource The data source - will use it's default out | Improve this Doc View Source Attach(String, IDataStream) Add a single named stream to the In Declaration public void Attach(string streamName, IDataStream dataStream) Parameters Type Name Description System.String streamName In-name of the stream IDataStream dataStream The data stream to attach | Improve this Doc View Source Attach(IDataSource) Attach a DataSource to In - replaces all existing in-streams. Declaration public void Attach(IDataSource dataSource) Parameters Type Name Description IDataSource dataSource DataSource to attach | Improve this Doc View Source CacheChanged(Int64) Detect if the cache has old data, by comparing it to a timestamp which may be newer. This is implemented in each object, because sometimes it compares its own timestamp, sometimes that of another underlying object. Declaration public virtual bool CacheChanged(long newCacheTimeStamp) Parameters Type Name Description System.Int64 newCacheTimeStamp New time stamp to compare with Returns Type Description System.Boolean True if the timestamps differ, false if it's the same | Improve this Doc View Source PurgeList(Boolean) Remove the current data from the cache, optionally also purge everything upstream Declaration public virtual void PurgeList(bool cascade = false) Parameters Type Name Description System.Boolean cascade true to purge all sources as well, default is false Implements IDataSource IAppIdentity IZoneIdentity IAppIdentityLight ICacheKey ICacheExpiring ITimestamped ICanPurgeListCache IHasLog IDataTarget"
  },
  "api/dot-net/ToSic.Eav.DataSources.Queries.DataSourceType.html": {
    "href": "api/dot-net/ToSic.Eav.DataSources.Queries.DataSourceType.html",
    "title": "Enum DataSourceType | 2sxc and EAV 10",
    "keywords": "Enum DataSourceType Describes what a DataSource is for in the visual query (for logical grouping) Namespace : ToSic.Eav.DataSources.Queries Assembly : ToSic.Eav.DataSources.dll Syntax [PublicApi_Stable_ForUseInYourCode] public enum DataSourceType Fields Name Description Cache Filter Logic Lookup Modify Security Sort Source Target"
  },
  "api/dot-net/ToSic.Eav.DataSources.System.ContentTypes.html": {
    "href": "api/dot-net/ToSic.Eav.DataSources.System.ContentTypes.html",
    "title": "Class ContentTypes | 2sxc and EAV 10",
    "keywords": "Class ContentTypes A DataSource that all content-types of an app. Inheritance System.Object HasLog DataSourceBase ContentTypes Implements IDataSource IAppIdentity IZoneIdentity IAppIdentityLight ICacheKey ICacheExpiring ITimestamped ICanPurgeListCache IHasLog IDataTarget Inherited Members DataSourceBase.Name DataSourceBase.CacheRelevantConfigurations DataSourceBase.CachePartialKey DataSourceBase.CacheFullKey DataSourceBase.CacheTimestamp DataSourceBase.CacheChanged(Int64) DataSourceBase.AppId DataSourceBase.ZoneId DataSourceBase.Guid DataSourceBase.In DataSourceBase.Out DataSourceBase.Item[String] DataSourceBase.List DataSourceBase.Configuration DataSourceBase.Attach(IDataSource) DataSourceBase.Attach(String, IDataSource) DataSourceBase.Attach(String, IDataStream) DataSourceBase.PurgeList(Boolean) HasLog.Log HasLog.InitLog(String, ILog, String) HasLog.InitLog(String, ILog, String, CodeRef) Namespace : ToSic.Eav.DataSources.System Assembly : ToSic.Eav.Apps.dll Syntax [InternalApi_DoNotUse_MayChangeWithoutNotice] [VisualQuery(GlobalName = \"ToSic.Eav.DataSources.System.ContentTypes, ToSic.Eav.Apps\", Type = DataSourceType.Source, Difficulty = DifficultyBeta.Advanced, DynamicOut = false, ExpectsDataOfType = \"37b25044-29bb-4c78-85e4-7b89f0abaa2c\", PreviousNames = new string[]{\"ToSic.Eav.DataSources.System.ContentTypes, ToSic.Eav.Apps\", \"ToSic.Eav.DataSources.ContentTypes, ToSic.Eav.Apps\"}, HelpLink = \"https://github.com/2sic/2sxc/wiki/DotNet-DataSource-ContentTypes\")] public sealed class ContentTypes : DataSourceBase, IDataSource, IAppIdentity, IZoneIdentity, IAppIdentityLight, ICacheInfo, ICacheKey, ICacheExpiring, ITimestamped, ICanPurgeListCache, IHasLog, IDataTarget Remarks Technically many things could just identify the app they belong to, and let the system look up the zone. But this would be inefficient, so for optimization, many items identify themselves with both the app and zone Ids Properties | Improve this Doc View Source LogId Declaration public override string LogId { get; } Property Value Type Description System.String Overrides ToSic.Eav.DataSources.DataSourceBase.LogId | Improve this Doc View Source OfAppId The app id Declaration public int OfAppId { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source OfScope The content-type name Declaration public string OfScope { get; set; } Property Value Type Description System.String Implements IDataSource IAppIdentity IZoneIdentity IAppIdentityLight ICacheKey ICacheExpiring ITimestamped ICanPurgeListCache IHasLog IDataTarget"
  },
  "api/dot-net/ToSic.Eav.LookUp.LookUpEngine.html": {
    "href": "api/dot-net/ToSic.Eav.LookUp.LookUpEngine.html",
    "title": "Class LookUpEngine | 2sxc and EAV 10",
    "keywords": "Class LookUpEngine Takes a list of configuration masks (list of tokens) and resolves them with a bunch of LookUps. Read more about this in LookUp & LookUpEngine Inheritance System.Object HasLog LookUpEngine Implements ILookUpEngine IHasLog Inherited Members HasLog.Log HasLog.InitLog(String, ILog, String) HasLog.InitLog(String, ILog, String, CodeRef) Namespace : ToSic.Eav.LookUp Assembly : ToSic.Eav.Core.dll Syntax [InternalApi_DoNotUse_MayChangeWithoutNotice(\"this is just fyi, use Interface in your code ILookupEngine\")] public class LookUpEngine : HasLog, ILookUpEngine, IHasLog Constructors | Improve this Doc View Source LookUpEngine(ILog) Declaration public LookUpEngine(ILog parentLog) Parameters Type Name Description ILog parentLog | Improve this Doc View Source LookUpEngine(ILookUpEngine, ILog, Boolean) Cloning another LookUpEngine and keep the sources. Declaration public LookUpEngine(ILookUpEngine original, ILog parentLog, bool makeOwnCopyOfSources = false) Parameters Type Name Description ILookUpEngine original ILog parentLog System.Boolean makeOwnCopyOfSources Methods | Improve this Doc View Source Add(ILookUp) Add (or replace) a value provider in the source list Declaration public void Add(ILookUp lookUp) Parameters Type Name Description ILookUp lookUp An source to add to this configuration provider. The name will be taken from this object. | Improve this Doc View Source AddOverride(IEnumerable<ILookUp>) Add many overriding sources. This is used when the underlying configuration provider is shared, and this instance needs a few custom configurations. Declaration public void AddOverride(IEnumerable<ILookUp> lookUps) Parameters Type Name Description System.Collections.Generic.IEnumerable < ILookUp > lookUps list of ILookUp which should override the original configuration | Improve this Doc View Source AddOverride(ILookUp) Add an overriding source. This is used when the underlying configuration provider is shared, and this instance needs a few custom configurations. Declaration public void AddOverride(ILookUp lookUp) Parameters Type Name Description ILookUp lookUp a ILookUp which should override the original configuration | Improve this Doc View Source Link(ILookUpEngine) Declaration public void Link(ILookUpEngine downstream) Parameters Type Name Description ILookUpEngine downstream | Improve this Doc View Source LookUp(IDictionary<String, String>, IDictionary<String, ILookUp>, Int32) Declaration public IDictionary<string, string> LookUp(IDictionary<string, string> values, IDictionary<string, ILookUp> overrides, int depth = 4) Parameters Type Name Description System.Collections.Generic.IDictionary < System.String , System.String > values System.Collections.Generic.IDictionary < System.String , ILookUp > overrides System.Int32 depth Returns Type Description System.Collections.Generic.IDictionary < System.String , System.String > | Improve this Doc View Source LookUp(IDictionary<String, String>, Int32) Declaration public IDictionary<string, string> LookUp(IDictionary<string, string> values, int depth = 4) Parameters Type Name Description System.Collections.Generic.IDictionary < System.String , System.String > values System.Int32 depth Returns Type Description System.Collections.Generic.IDictionary < System.String , System.String > Implements ILookUpEngine IHasLog"
  },
  "api/dot-net/ToSic.Sxc.Engines.EngineBase.html": {
    "href": "api/dot-net/ToSic.Sxc.Engines.EngineBase.html",
    "title": "Class EngineBase | 2sxc and EAV 10",
    "keywords": "Class EngineBase The foundation for engines - must be inherited by other engines Inheritance System.Object HasLog EngineBase RazorEngine TokenEngine Implements IHasLog IEngine Inherited Members HasLog.Log HasLog.InitLog(String, ILog, String) HasLog.InitLog(String, ILog, String, CodeRef) Namespace : ToSic.Sxc.Engines Assembly : ToSic.Sxc.dll Syntax [InternalApi_DoNotUse_MayChangeWithoutNotice(\"this is just fyi\")] public abstract class EngineBase : HasLog, IHasLog, IEngine Constructors | Improve this Doc View Source EngineBase(EngineBaseDependencies) Empty constructor, so it can be used in dependency injection Declaration protected EngineBase(EngineBaseDependencies helpers) Parameters Type Name Description ToSic.Sxc.Engines.EngineBaseDependencies helpers Fields | Improve this Doc View Source Helpers Declaration protected readonly EngineBaseDependencies Helpers Field Value Type Description ToSic.Sxc.Engines.EngineBaseDependencies Methods | Improve this Doc View Source CustomizeData() Mechanism which allows the view to change data it will show in a stream-based way. This helps to ensure that other parts like JSON-Streams or Search have the same information as the view itself. Declaration public virtual void CustomizeData() | Improve this Doc View Source CustomizeSearch(Dictionary<String, List<ISearchItem>>, IModule, DateTime) Declaration public virtual void CustomizeSearch(Dictionary<string, List<ISearchItem>> searchInfos, IModule moduleInfo, DateTime beginDate) Parameters Type Name Description System.Collections.Generic.Dictionary < System.String , System.Collections.Generic.List < ISearchItem >> searchInfos ToSic.Sxc.Context.IModule moduleInfo System.DateTime beginDate | Improve this Doc View Source Init(IBlock, Purpose, ILog) Initialize the Engine (pass everything needed for Render to it). This is not in the constructor, because IEngines usually get constructed with DI, so the constructor is off-limits. Declaration public void Init(IBlock block, Purpose purpose, ILog parentLog) Parameters Type Name Description IBlock block block within the cms Purpose purpose Purpose of the engine (show in web, search-index, etc.). The custom code may adapt its behavior depending on the purpose ILog parentLog Log to chain with | Improve this Doc View Source Render() Renders a template, returning a string with the rendered template. Declaration public string Render() Returns Type Description System.String The string - usually HTML - which the engine created. Implements IHasLog IEngine"
  },
  "api/dot-net/ToSic.Sxc.Engines.IEngine.html": {
    "href": "api/dot-net/ToSic.Sxc.Engines.IEngine.html",
    "title": "Interface IEngine | 2sxc and EAV 10",
    "keywords": "Interface IEngine The sub-system in charge of taking a configuration for an instance (aka Module) a template and using all that to produce an html-string for the browser. Namespace : ToSic.Sxc.Engines Assembly : ToSic.Sxc.dll Syntax [InternalApi_DoNotUse_MayChangeWithoutNotice(\"this is just fyi\")] public interface IEngine Properties | Improve this Doc View Source Assets Declaration List<ClientAssetInfo> Assets { get; } Property Value Type Description System.Collections.Generic.List < ToSic.Sxc.Web.ClientAssetInfo > Methods | Improve this Doc View Source CustomizeData() Mechanism which allows the view to change data it will show in a stream-based way. This helps to ensure that other parts like JSON-Streams or Search have the same information as the view itself. Declaration void CustomizeData() | Improve this Doc View Source Init(IBlock, Purpose, ILog) Initialize the Engine (pass everything needed for Render to it). This is not in the constructor, because IEngines usually get constructed with DI, so the constructor is off-limits. Declaration void Init(IBlock block, Purpose purpose, ILog parentLog) Parameters Type Name Description IBlock block block within the cms Purpose purpose Purpose of the engine (show in web, search-index, etc.). The custom code may adapt its behavior depending on the purpose ILog parentLog Log to chain with | Improve this Doc View Source Render() Renders a template, returning a string with the rendered template. Declaration string Render() Returns Type Description System.String The string - usually HTML - which the engine created."
  },
  "api/dot-net/ToSic.Eav.Apps.IAppData.html": {
    "href": "api/dot-net/ToSic.Eav.Apps.IAppData.html",
    "title": "Interface IAppData | 2sxc and EAV 10",
    "keywords": "Interface IAppData An App-DataSource which also provides direct commands to edit/update/delete data. Inherited Members IDataSource.Guid IDataSource.Out IDataSource.Item[String] IDataSource.List IDataSource.Configuration IDataSource.LogId IDataSource.Name IDataSource.CacheRelevantConfigurations IDataSource.CacheKey IZoneIdentity.ZoneId IAppIdentityLight.AppId ICacheKey.CachePartialKey ICacheKey.CacheFullKey ICacheExpiring.CacheChanged(Int64) ITimestamped.CacheTimestamp ICanPurgeListCache.PurgeList(Boolean) IHasLog.Log IDataTarget.In IDataTarget.Attach(IDataSource) IDataTarget.Attach(String, IDataSource) IDataTarget.Attach(String, IDataStream) Namespace : ToSic.Eav.Apps Assembly : ToSic.Eav.Apps.dll Syntax [PublicApi_Stable_ForUseInYourCode] public interface IAppData : IDataSource, IAppIdentity, IZoneIdentity, IAppIdentityLight, ICacheInfo, ICacheKey, ICacheExpiring, ITimestamped, ICanPurgeListCache, IHasLog, IDataTarget Properties | Improve this Doc View Source Metadata Metadata is an important feature of apps. So the App DataSource automatically provides direct access to the metadata system. This allows users of the App to query metadata directly through this object. Declaration IMetadataSource Metadata { get; } Property Value Type Description IMetadataSource Methods | Improve this Doc View Source Create(String, Dictionary<String, Object>, String, ITarget) Create a new entity in the storage. Declaration IEntity Create(string contentTypeName, Dictionary<string, object> values, string userName = null, ITarget target = null) Parameters Type Name Description System.String contentTypeName The type name System.Collections.Generic.Dictionary < System.String , System.Object > values a dictionary of values to be stored System.String userName the current user name - will be logged as the author ITarget target information if this new item is to be metadata for something Returns Type Description IEntity Remarks Changed in 2sxc 10.30 - now returns the id of the created items | Improve this Doc View Source Create(String, IEnumerable<Dictionary<String, Object>>, String) Create a bunch of new entities in one single call (much faster, because cache doesn't need to repopulate in the mean time). Declaration IEnumerable<IEntity> Create(string contentTypeName, IEnumerable<Dictionary<string, object>> multiValues, string userName = null) Parameters Type Name Description System.String contentTypeName The type name System.Collections.Generic.IEnumerable < System.Collections.Generic.Dictionary < System.String , System.Object >> multiValues many dictionaries, each will become an own item when stored System.String userName the current user name - will be logged as the author Returns Type Description System.Collections.Generic.IEnumerable < IEntity > Remarks You can't create items which are metadata with this, for that, please use the Create-one overload Changed in 2sxc 10.30 - now returns the id of the created items | Improve this Doc View Source Delete(Int32, String) Delete an existing item Declaration void Delete(int entityId, string userName = null) Parameters Type Name Description System.Int32 entityId The item ID System.String userName the current user name - will be logged as the author of the change | Improve this Doc View Source Update(Int32, Dictionary<String, Object>, String) Update an existing item. Declaration void Update(int entityId, Dictionary<string, object> values, string userName = null) Parameters Type Name Description System.Int32 entityId The item ID System.Collections.Generic.Dictionary < System.String , System.Object > values a dictionary of values to be updated System.String userName the current user name - will be logged as the author of the change"
  },
  "api/dot-net/ToSic.Eav.Apps.State.html": {
    "href": "api/dot-net/ToSic.Eav.Apps.State.html",
    "title": "Class State | 2sxc and EAV 10",
    "keywords": "Class State This provides access to the in-memory state, to retrieve App catalog information from the cache or system (zones) to retrieve app states (or automatically load them if accessed the first time) Inheritance System.Object State Namespace : ToSic.Eav.Apps Assembly : ToSic.Eav.Core.dll Syntax [InternalApi_DoNotUse_MayChangeWithoutNotice(\"the name of this class is not final, may change\")] public class State Properties | Improve this Doc View Source Zones Declaration [InternalApi_DoNotUse_MayChangeWithoutNotice] public static IReadOnlyDictionary<int, Zone> Zones { get; } Property Value Type Description System.Collections.Generic.IReadOnlyDictionary < System.Int32 , Zone > Methods | Improve this Doc View Source Get(Int32) Declaration [InternalApi_DoNotUse_MayChangeWithoutNotice] public static AppState Get(int appId) Parameters Type Name Description System.Int32 appId Returns Type Description AppState | Improve this Doc View Source Get(IAppIdentity) Declaration [InternalApi_DoNotUse_MayChangeWithoutNotice] public static AppState Get(IAppIdentity app) Parameters Type Name Description IAppIdentity app Returns Type Description AppState | Improve this Doc View Source Identity(Nullable<Int32>, Nullable<Int32>) Declaration [InternalApi_DoNotUse_MayChangeWithoutNotice] public static IAppIdentity Identity(int? zoneId, int? appId) Parameters Type Name Description System.Nullable < System.Int32 > zoneId System.Nullable < System.Int32 > appId Returns Type Description IAppIdentity"
  },
  "api/dot-net/ToSic.Eav.Conversion.EntitiesToDictionaryBase.html": {
    "href": "api/dot-net/ToSic.Eav.Conversion.EntitiesToDictionaryBase.html",
    "title": "Class EntitiesToDictionaryBase | 2sxc and EAV 10",
    "keywords": "Class EntitiesToDictionaryBase A helper to serialize various combinations of entities, lists of entities etc Inheritance System.Object HasLog ToSic.Eav.Logging.HasLog < EntitiesToDictionaryBase > EntitiesToDictionaryBase EntitiesToDictionary Implements IHasLog IEntitiesTo < System.Collections.Generic.Dictionary < System.String , System.Object >> Inherited Members HasLog.Log HasLog.InitLog(String, ILog, String) HasLog.InitLog(String, ILog, String, CodeRef) Namespace : ToSic.Eav.Conversion Assembly : ToSic.Eav.Core.dll Syntax [InternalApi_DoNotUse_MayChangeWithoutNotice] public abstract class EntitiesToDictionaryBase : HasLog<EntitiesToDictionaryBase>, IHasLog<EntitiesToDictionaryBase>, IHasLog, IEntitiesTo<Dictionary<string, object>> Constructors | Improve this Doc View Source EntitiesToDictionaryBase(IValueConverter, IZoneCultureResolver, String) Declaration protected EntitiesToDictionaryBase(IValueConverter valueConverter, IZoneCultureResolver cultureResolver, string logName) Parameters Type Name Description IValueConverter valueConverter ToSic.Eav.Context.IZoneCultureResolver cultureResolver System.String logName Properties | Improve this Doc View Source Languages Declaration public string[] Languages { get; set; } Property Value Type Description System.String [] | Improve this Doc View Source ValueConverter Declaration protected IValueConverter ValueConverter { get; } Property Value Type Description IValueConverter | Improve this Doc View Source WithGuid Declaration public bool WithGuid { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source WithMetadataFor Declaration public bool WithMetadataFor { get; } Property Value Type Description System.Boolean | Improve this Doc View Source WithPublishing Declaration public bool WithPublishing { get; } Property Value Type Description System.Boolean | Improve this Doc View Source WithTitle Declaration public bool WithTitle { get; } Property Value Type Description System.Boolean Methods | Improve this Doc View Source ConfigureForAdminUse() Declaration public void ConfigureForAdminUse() | Improve this Doc View Source Convert(IEnumerable<IEntity>) Declaration public IEnumerable<Dictionary<string, object>> Convert(IEnumerable<IEntity> entities) Parameters Type Name Description System.Collections.Generic.IEnumerable < IEntity > entities Returns Type Description System.Collections.Generic.IEnumerable < System.Collections.Generic.Dictionary < System.String , System.Object >> | Improve this Doc View Source Convert(IEntity) Declaration public Dictionary<string, object> Convert(IEntity entity) Parameters Type Name Description IEntity entity Returns Type Description System.Collections.Generic.Dictionary < System.String , System.Object > Implements IHasLog IEntitiesTo<T>"
  },
  "api/dot-net/ToSic.Eav.Apps.IAppIdentity.html": {
    "href": "api/dot-net/ToSic.Eav.Apps.IAppIdentity.html",
    "title": "Interface IAppIdentity | 2sxc and EAV 10",
    "keywords": "Interface IAppIdentity Marks thing which belongs to an App and a Zone and know their full identity. Inherited Members IZoneIdentity.ZoneId IAppIdentityLight.AppId Namespace : ToSic.Eav.Apps Assembly : ToSic.Eav.Core.dll Syntax [PublicApi_Stable_ForUseInYourCode] public interface IAppIdentity : IZoneIdentity, IAppIdentityLight Remarks Technically many things could just identify the app they belong to, and let the system look up the zone. But this would be inefficient, so for optimization, many items identify themselves with both the app and zone Ids"
  },
  "api/dot-net/ToSic.Eav.Configuration.html": {
    "href": "api/dot-net/ToSic.Eav.Configuration.html",
    "title": "Namespace ToSic.Eav.Configuration | 2sxc and EAV 10",
    "keywords": "Namespace ToSic.Eav.Configuration Everything related to how the EAV is configured. As of now the documented API is primarily about using features. Classes Features The Features lets your code find out what features are currently enabled/disabled in the environment. It's important to detect if the admin must activate certain features to let your code do it's work. Fingerprint System to provide unique fingerprints (IDs) for certain parts of the EAV"
  },
  "api/dot-net/ToSic.Eav.Data.AttributeBase.html": {
    "href": "api/dot-net/ToSic.Eav.Data.AttributeBase.html",
    "title": "Class AttributeBase | 2sxc and EAV 10",
    "keywords": "Class AttributeBase Represents an Attribute Definition. Used in Content-Types and IEntities. Inheritance System.Object AttributeBase Attribute<T> ContentTypeAttribute Implements IAttributeBase Namespace : ToSic.Eav.Data Assembly : ToSic.Eav.Core.dll Syntax [InternalApi_DoNotUse_MayChangeWithoutNotice(\"this is just fyi, use Interface IAttributeBase\")] public class AttributeBase : IAttributeBase Remarks We recommend you read about the Data Models in the EAV Properties | Improve this Doc View Source Name Name of the Attribute Declaration public string Name { get; set; } Property Value Type Description System.String | Improve this Doc View Source Type Type of the Attribute like 'string', 'decimal' etc. Declaration public string Type { get; set; } Property Value Type Description System.String Implements IAttributeBase"
  },
  "api/dot-net/ToSic.Eav.Data.IEntitiesSource.html": {
    "href": "api/dot-net/ToSic.Eav.Data.IEntitiesSource.html",
    "title": "Interface IEntitiesSource | 2sxc and EAV 10",
    "keywords": "Interface IEntitiesSource This marks something which can give a list of entities. Usually used for lazy-loading data, where the source is attached, but the data isn't loaded yet. Inherited Members ICacheExpiring.CacheChanged(Int64) ITimestamped.CacheTimestamp Namespace : ToSic.Eav.Data Assembly : ToSic.Eav.Core.dll Syntax [InternalApi_DoNotUse_MayChangeWithoutNotice(\"this is just fyi\")] public interface IEntitiesSource : ICacheExpiring, ITimestamped Properties | Improve this Doc View Source List Declaration IEnumerable<IEntity> List { get; } Property Value Type Description System.Collections.Generic.IEnumerable < IEntity >"
  },
  "api/dot-net/ToSic.Sxc.Web.IHttp.html": {
    "href": "api/dot-net/ToSic.Sxc.Web.IHttp.html",
    "title": "Interface IHttp | 2sxc and EAV 10",
    "keywords": "Interface IHttp Goal is that anything on this will be able to provide HttpContext operations as needed To abstract .net451 and .net core Namespace : ToSic.Sxc.Web Assembly : ToSic.Sxc.dll Syntax [InternalApi_DoNotUse_MayChangeWithoutNotice] public interface IHttp Properties | Improve this Doc View Source Current The standardized HttpContext. It's type changes depending on the framework it's running in Declaration HttpContext Current { get; } Property Value Type Description System.Web.HttpContext | Improve this Doc View Source QueryStringParams The standardized QueryString parameters so it works on all platforms Declaration NameValueCollection QueryStringParams { get; } Property Value Type Description System.Collections.Specialized.NameValueCollection | Improve this Doc View Source Request The standardized\" HttpRequest object. It's type changes depending on the framework it's running in. Declaration HttpRequest Request { get; } Property Value Type Description System.Web.HttpRequest Methods | Improve this Doc View Source QueryStringKeyValuePairs() QueryString params as KeyValue Pairs. We don't use a dictionary, because sometimes the same key can occur twice. Declaration List<KeyValuePair<string, string>> QueryStringKeyValuePairs() Returns Type Description System.Collections.Generic.List < System.Collections.Generic.KeyValuePair < System.String , System.String >>"
  },
  "api/dot-net/ToSic.Eav.Apps.IApp.html": {
    "href": "api/dot-net/ToSic.Eav.Apps.IApp.html",
    "title": "Interface IApp | 2sxc and EAV 10",
    "keywords": "Interface IApp An App in memory - for quickly getting things done with the app data, queries etc. Inherited Members IZoneIdentity.ZoneId IAppIdentityLight.AppId Namespace : ToSic.Eav.Apps Assembly : ToSic.Eav.Apps.dll Syntax [PublicApi_Stable_ForUseInYourCode] public interface IApp : IAppIdentityWithPublishingState, IAppIdentity, IZoneIdentity, IAppIdentityLight, IHasMetadata Properties | Improve this Doc View Source AppGuid GUID of the App as string. Declaration string AppGuid { get; } Property Value Type Description System.String The internal GUID of the app. | Improve this Doc View Source Data Data of the app Declaration IAppData Data { get; } Property Value Type Description IAppData | Improve this Doc View Source Folder App Folder Declaration string Folder { get; } Property Value Type Description System.String The folder as configured in the app configuration. | Improve this Doc View Source Hidden If the app should be hidden from the normal app-picker. Important to configure apps once and then hide from normal users. Declaration bool Hidden { get; } Property Value Type Description System.Boolean The hidden-state as configured in the app configuration. | Improve this Doc View Source Metadata The app metadata - like settings, resources etc. Declaration IMetadataOf Metadata { get; } Property Value Type Description IMetadataOf A metadata provider for the app | Improve this Doc View Source Name App Name Declaration string Name { get; } Property Value Type Description System.String The name as configured in the app configuration. | Improve this Doc View Source Query All queries of the app, to access like App.Query[\"name\"] Declaration IDictionary<string, IQuery> Query { get; } Property Value Type Description System.Collections.Generic.IDictionary < System.String , IQuery > A dictionary with all queries. Internally the dictionary will not be built unless accessed."
  },
  "api/dot-net/ToSic.Eav.Data.IValueConverter.html": {
    "href": "api/dot-net/ToSic.Eav.Data.IValueConverter.html",
    "title": "Interface IValueConverter | 2sxc and EAV 10",
    "keywords": "Interface IValueConverter Marks objects that can convert values - like \"file:22\" to \"/images/logo.jpg\" and back. Namespace : ToSic.Eav.Data Assembly : ToSic.Eav.Core.dll Syntax [InternalApi_DoNotUse_MayChangeWithoutNotice] public interface IValueConverter Methods | Improve this Doc View Source ToReference(String) Resolve a value to a reference which is managed by the environment Declaration string ToReference(string value) Parameters Type Name Description System.String value the full value, like \"image/logo.jpg\" Returns Type Description System.String The reference, like \"file:22\". | Improve this Doc View Source ToValue(String, Guid) Resolve a reference to a value using the environment resolver Declaration string ToValue(string reference, Guid itemGuid = default(Guid)) Parameters Type Name Description System.String reference Reference code (or something else) - if not a code, will not resolve System.Guid itemGuid Guid of the item/entity which was using the reference. The Guid is used when security setting only allow resolving within the own item. This ensures that external requests cannot just number through all possible IDs. If you use Guid.Empty or don't supply it, it will usually work, except on systems where the security has been extra-hardened. Returns Type Description System.String The value, like the url."
  },
  "api/dot-net/ToSic.Eav.DataSources.Caching.html": {
    "href": "api/dot-net/ToSic.Eav.DataSources.Caching.html",
    "title": "Namespace ToSic.Eav.DataSources.Caching | 2sxc and EAV 10",
    "keywords": "Namespace ToSic.Eav.DataSources.Caching DataSources need various kinds of caching mechanisms, like... to cache the AppState once loaded to cache resulting streams in a cpu intensive query The Caching system is in charge of all this, and will also take care of clearing caches as well as updating downstream caches if an underlying source has been updated. History Introduced in 2sxc 04.00 Classes CacheAllStreams Special DataSource which automatically caches everything it's given. It's Used to optimize queries, so that heavier calculations don't need to be repeated if another request with the same signature is used. Internally it asks all up-stream DataSources what factors would determine their caching. So if part of the supplying DataSources would have a changed parameter (like a different filter), it will still run the full query and cache the results again. ListCache Responsible for caching lists / streams. Usually used in queries or sources which have an intensive loading or querying time. ListCacheItem Cache Item in the List-Cache. Interfaces ICanPurgeListCache Marks objects which can purge it's own cache, and also force upstream caches to be purged. This helps in scenarios where the code knows that the cache should be cleaned, but needs to rely on the whole tree to be cleaned. Without this, a cache would be cleared but the next-upstream would still be cached, so the next access would still return the same results. IListCache Marks objects that can cache lists based on certain rules - including retention time and if up-stream changes should refresh the cache."
  },
  "api/dot-net/ToSic.Eav.DataSources.System.Apps.html": {
    "href": "api/dot-net/ToSic.Eav.DataSources.System.Apps.html",
    "title": "Class Apps | 2sxc and EAV 10",
    "keywords": "Class Apps A DataSource that gets all Apps of a zone. Inheritance System.Object HasLog DataSourceBase Apps Implements IDataSource IAppIdentity IZoneIdentity IAppIdentityLight ICacheKey ICacheExpiring ITimestamped ICanPurgeListCache IHasLog IDataTarget Inherited Members DataSourceBase.Name DataSourceBase.CacheRelevantConfigurations DataSourceBase.CachePartialKey DataSourceBase.CacheFullKey DataSourceBase.CacheTimestamp DataSourceBase.CacheChanged(Int64) DataSourceBase.AppId DataSourceBase.ZoneId DataSourceBase.Guid DataSourceBase.In DataSourceBase.Out DataSourceBase.Item[String] DataSourceBase.List DataSourceBase.Configuration DataSourceBase.Attach(IDataSource) DataSourceBase.Attach(String, IDataSource) DataSourceBase.Attach(String, IDataStream) DataSourceBase.PurgeList(Boolean) HasLog.Log HasLog.InitLog(String, ILog, String) HasLog.InitLog(String, ILog, String, CodeRef) Namespace : ToSic.Eav.DataSources.System Assembly : ToSic.Eav.Apps.dll Syntax [InternalApi_DoNotUse_MayChangeWithoutNotice] [VisualQuery(GlobalName = \"ToSic.Eav.DataSources.System.Apps, ToSic.Eav.Apps\", Type = DataSourceType.Source, DynamicOut = false, Difficulty = DifficultyBeta.Advanced, ExpectsDataOfType = \"fabc849e-b426-42ea-8e1c-c04e69facd9b\", PreviousNames = new string[]{\"ToSic.Eav.DataSources.System.Apps, ToSic.Eav.Apps\", \"ToSic.Eav.DataSources.Apps, ToSic.Eav.Apps\"}, HelpLink = \"https://github.com/2sic/2sxc/wiki/DotNet-DataSource-Apps\")] public sealed class Apps : DataSourceBase, IDataSource, IAppIdentity, IZoneIdentity, IAppIdentityLight, ICacheInfo, ICacheKey, ICacheExpiring, ITimestamped, ICanPurgeListCache, IHasLog, IDataTarget Remarks Technically many things could just identify the app they belong to, and let the system look up the zone. But this would be inefficient, so for optimization, many items identify themselves with both the app and zone Ids Properties | Improve this Doc View Source LogId Declaration public override string LogId { get; } Property Value Type Description System.String Overrides ToSic.Eav.DataSources.DataSourceBase.LogId | Improve this Doc View Source OfZoneId The attribute whose value will be filtered Declaration public int OfZoneId { get; set; } Property Value Type Description System.Int32 Implements IDataSource IAppIdentity IZoneIdentity IAppIdentityLight ICacheKey ICacheExpiring ITimestamped ICanPurgeListCache IHasLog IDataTarget"
  },
  "api/dot-net/ToSic.Eav.LookUp.ILookUpEngine.html": {
    "href": "api/dot-net/ToSic.Eav.LookUp.ILookUpEngine.html",
    "title": "Interface ILookUpEngine | 2sxc and EAV 10",
    "keywords": "Interface ILookUpEngine Resolves Configurations from LookUps. Common use is for configurable DataSources Inherited Members IHasLog.Log Namespace : ToSic.Eav.LookUp Assembly : ToSic.Eav.Core.dll Syntax [PublicApi_Stable_ForUseInYourCode] public interface ILookUpEngine : IHasLog Methods | Improve this Doc View Source Add(ILookUp) Add (or replace) a value provider in the source list Declaration void Add(ILookUp lookUp) Parameters Type Name Description ILookUp lookUp An source to add to this configuration provider. The name will be taken from this object. | Improve this Doc View Source AddOverride(IEnumerable<ILookUp>) Add many overriding sources. This is used when the underlying configuration provider is shared, and this instance needs a few custom configurations. Declaration void AddOverride(IEnumerable<ILookUp> lookUps) Parameters Type Name Description System.Collections.Generic.IEnumerable < ILookUp > lookUps list of ILookUp which should override the original configuration | Improve this Doc View Source AddOverride(ILookUp) Add an overriding source. This is used when the underlying configuration provider is shared, and this instance needs a few custom configurations. Declaration void AddOverride(ILookUp lookUp) Parameters Type Name Description ILookUp lookUp a ILookUp which should override the original configuration | Improve this Doc View Source LookUp(IDictionary<String, String>, IDictionary<String, ILookUp>, Int32) This will go through a dictionary of strings (usually configuration values) and replace all tokens in that string with whatever the token-resolver delivers. It's usually needed to initialize a DataSource. Declaration IDictionary<string, string> LookUp(IDictionary<string, string> values, IDictionary<string, ILookUp> overrides = null, int depth = 4) Parameters Type Name Description System.Collections.Generic.IDictionary < System.String , System.String > values Dictionary of configuration strings. System.Collections.Generic.IDictionary < System.String , ILookUp > overrides Optional override LookUps which would be consulted first. System.Int32 depth Max recursion when looking up tokens which return other tokens. Returns Type Description System.Collections.Generic.IDictionary < System.String , System.String >"
  },
  "api/dot-net/ToSic.Sxc.Apps.AppConfiguration.html": {
    "href": "api/dot-net/ToSic.Sxc.Apps.AppConfiguration.html",
    "title": "Class AppConfiguration | 2sxc and EAV 10",
    "keywords": "Class AppConfiguration The configuration of the app, as you can set it in the app-package definition. Inheritance System.Object EntityBasedType EntityBasedWithLog AppConfiguration Implements IEntityBasedType IEntityWrapper IHasLog Inherited Members EntityBasedWithLog.Log EntityBasedType.Entity EntityBasedType.Title EntityBasedType.Id EntityBasedType.Guid EntityBasedType.Get<T>(String, T) Namespace : ToSic.Sxc.Apps Assembly : ToSic.Sxc.dll Syntax [PublicApi_Stable_ForUseInYourCode] public class AppConfiguration : EntityBasedWithLog, IEntityBasedType, IEntityWrapper, IHasLog Properties | Improve this Doc View Source Description Declaration public string Description { get; } Property Value Type Description System.String | Improve this Doc View Source EnableAjax Declaration public bool EnableAjax { get; } Property Value Type Description System.Boolean | Improve this Doc View Source EnableRazor Declaration public bool EnableRazor { get; } Property Value Type Description System.Boolean | Improve this Doc View Source EnableToken Declaration public bool EnableToken { get; } Property Value Type Description System.Boolean | Improve this Doc View Source Folder Declaration public string Folder { get; } Property Value Type Description System.String | Improve this Doc View Source IsHidden Declaration public bool IsHidden { get; } Property Value Type Description System.Boolean | Improve this Doc View Source Name Declaration public string Name { get; } Property Value Type Description System.String | Improve this Doc View Source OriginalId Declaration public Guid OriginalId { get; } Property Value Type Description System.Guid | Improve this Doc View Source RequiredDnn Declaration public Version RequiredDnn { get; } Property Value Type Description System.Version | Improve this Doc View Source RequiredSxc Declaration public Version RequiredSxc { get; } Property Value Type Description System.Version | Improve this Doc View Source Version Declaration public Version Version { get; } Property Value Type Description System.Version Implements IEntityBasedType IEntityWrapper IHasLog"
  },
  "api/dot-net/ToSic.Sxc.Apps.IApp.html": {
    "href": "api/dot-net/ToSic.Sxc.Apps.IApp.html",
    "title": "Interface IApp | 2sxc and EAV 10",
    "keywords": "Interface IApp An app-object as is available in a razor template or WebApi Inherited Members IApp.Name IApp.Folder IApp.Hidden IApp.AppGuid IApp.Data IApp.Query IApp.Metadata IZoneIdentity.ZoneId IAppIdentityLight.AppId Namespace : ToSic.Sxc.Apps Assembly : ToSic.Sxc.dll Syntax [PublicApi_Stable_ForUseInYourCode] public interface IApp : IApp, IApp, IAppIdentityWithPublishingState, IAppIdentity, IZoneIdentity, IAppIdentityLight, IHasMetadata Properties | Improve this Doc View Source Configuration Configuration object as a DynamicEntity. This contains things like app version, path etc. Declaration AppConfiguration Configuration { get; } Property Value Type Description AppConfiguration An IDynamicEntity object | Improve this Doc View Source Path The path to the current app, for linking JS/CSS files and images in the app folder. Declaration string Path { get; } Property Value Type Description System.String Path usually starting with /portals/... | Improve this Doc View Source PhysicalPath The path on the server hard disk for the current app. Declaration string PhysicalPath { get; } Property Value Type Description System.String Path usually starting with c:... | Improve this Doc View Source Resources All the app resources (usually used for multi-language labels etc.) Declaration dynamic Resources { get; } Property Value Type Description System.Object An IDynamicEntity object | Improve this Doc View Source Settings All the app settings which are custom for each app. Declaration dynamic Settings { get; } Property Value Type Description System.Object An IDynamicEntity object | Improve this Doc View Source Thumbnail The thumbnail path for the current app. Declaration string Thumbnail { get; } Property Value Type Description System.String path + app-icon.png if there is an icon there."
  },
  "api/dot-net/ToSic.Eav.DataSources.Queries.IQuery.html": {
    "href": "api/dot-net/ToSic.Eav.DataSources.Queries.IQuery.html",
    "title": "Interface IQuery | 2sxc and EAV 10",
    "keywords": "Interface IQuery Marks a special IDataSource which is a query. It has an underlying QueryDefinition and Params which can be modified by code before running the query. Inherited Members IDataSource.Guid IDataSource.Out IDataSource.Item[String] IDataSource.List IDataSource.Configuration IDataSource.LogId IDataSource.Name IDataSource.CacheRelevantConfigurations IDataSource.CacheKey IZoneIdentity.ZoneId IAppIdentityLight.AppId ICacheKey.CachePartialKey ICacheKey.CacheFullKey ICacheExpiring.CacheChanged(Int64) ITimestamped.CacheTimestamp ICanPurgeListCache.PurgeList(Boolean) IHasLog.Log Namespace : ToSic.Eav.DataSources.Queries Assembly : ToSic.Eav.DataSources.dll Syntax [PublicApi_Stable_ForUseInYourCode] public interface IQuery : IDataSource, IAppIdentity, IZoneIdentity, IAppIdentityLight, ICacheInfo, ICacheKey, ICacheExpiring, ITimestamped, ICanPurgeListCache, IHasLog Properties | Improve this Doc View Source Definition The underlying definition for the current query so you can check what's inside. Declaration QueryDefinition Definition { get; } Property Value Type Description QueryDefinition Methods | Improve this Doc View Source Params() Get the current list of params. Declaration IDictionary<string, string> Params() Returns Type Description System.Collections.Generic.IDictionary < System.String , System.String > The list of params as they are configured in this moment. | Improve this Doc View Source Params(IDictionary<String, String>) Add/Set a parameter for the query, which will be used by the [Params:Xxx] tokens. Declaration void Params(IDictionary<string, string> values) Parameters Type Name Description System.Collections.Generic.IDictionary < System.String , System.String > values dictionary with values Remarks If you set a param after accessing the query, an exception will occur unless you call Reset() first. | Improve this Doc View Source Params(String) Add/Set a parameter for the query, which will be used by the [Params:Xxx] tokens. Declaration void Params(string list) Parameters Type Name Description System.String list list of key=value on many lines Remarks If you set a param after accessing the query, an exception will occur unless you call Reset() first. | Improve this Doc View Source Params(String, String) Add/Set a parameter for the query, which will be used by the [Params:Xxx] tokens. Declaration void Params(string key, string value) Parameters Type Name Description System.String key Key - the part used in [Params:key] System.String value The value it will resolve to. Can also be another token. Remarks If you set a param after accessing the query, an exception will occur unless you call Reset() first. | Improve this Doc View Source Reset() Reset the query, so it can be run again. Requires all params to be set again. Declaration void Reset()"
  },
  "api/dot-net/ToSic.Eav.DataSources.System.html": {
    "href": "api/dot-net/ToSic.Eav.DataSources.System.html",
    "title": "Namespace ToSic.Eav.DataSources.System | 2sxc and EAV 10",
    "keywords": "Namespace ToSic.Eav.DataSources.System These DataSources look up internal System information like \"what apps are installed\" and provide the data as DataStreams. It's for internal work and dropdown which let you choose an App, Content-Type etc. History Introduced in 2sxc 08.00 Classes Apps A DataSource that gets all Apps of a zone. Attributes A DataSource that returns the attributes of a content-type ContentTypes A DataSource that all content-types of an app. QueryInfo A DataSource that returns infos about a query. For example, it says how many out-streams are available and what fields can be used on each stream. This is used in fields which let you pick a query, stream and field from that stream. Zones A DataSource that gets all zones in the system."
  },
  "api/dot-net/ToSic.Eav.LookUp.LookUpInEntity.html": {
    "href": "api/dot-net/ToSic.Eav.LookUp.LookUpInEntity.html",
    "title": "Class LookUpInEntity | 2sxc and EAV 10",
    "keywords": "Class LookUpInEntity Get Values from an IEntity . Read more about this in LookUp & LookUpEngine Inheritance System.Object LookUpBase LookUpIn < IEntity > LookUpInEntity LookUpInMetadata Implements ILookUp Inherited Members LookUpIn<IEntity>.Data LookUpBase.Name LookUpBase.Get(String) LookUpBase.Format(Boolean) LookUpBase.Format(DateTime) Namespace : ToSic.Eav.LookUp Assembly : ToSic.Eav.Core.dll Syntax [PublicApi_Stable_ForUseInYourCode] public class LookUpInEntity : LookUpIn<IEntity>, ILookUp Constructors | Improve this Doc View Source LookUpInEntity(String, IEntity, String[]) Constructs a new Entity LookUp Declaration public LookUpInEntity(string name, IEntity source, string[] dimensions) Parameters Type Name Description System.String name Name of the LookUp, e.g. Settings IEntity source System.String [] dimensions the languages / dimensions to use Methods | Improve this Doc View Source Get(String, String) Special lookup command with format-provider. Declaration public override string Get(string key, string format) Parameters Type Name Description System.String key System.String format Returns Type Description System.String Overrides LookUpBase.Get(String, String) Implements ILookUp"
  },
  "api/dot-net/ToSic.Eav.LookUp.LookUpInLookUps.html": {
    "href": "api/dot-net/ToSic.Eav.LookUp.LookUpInLookUps.html",
    "title": "Class LookUpInLookUps | 2sxc and EAV 10",
    "keywords": "Class LookUpInLookUps This Value Provider chains two or more LookUps and tries one after another to deliver a result It's mainly used to override values which are given, by a special situation. Read more about this in LookUp & LookUpEngine Inheritance System.Object LookUpBase LookUpInLookUps Implements ILookUp Inherited Members LookUpBase.Name LookUpBase.Get(String) LookUpBase.Format(Boolean) LookUpBase.Format(DateTime) Namespace : ToSic.Eav.LookUp Assembly : ToSic.Eav.Core.dll Syntax [PublicApi_Stable_ForUseInYourCode] public class LookUpInLookUps : LookUpBase, ILookUp Constructors | Improve this Doc View Source LookUpInLookUps(String, ILookUp, ILookUp, ILookUp, ILookUp) Generate a lookup-of-lookups. Declaration public LookUpInLookUps(string name, ILookUp first, ILookUp second, ILookUp third = null, ILookUp fourth = null) Parameters Type Name Description System.String name Name to use - if stored in a list ILookUp first First LookUp source ILookUp second Second LookUp source ILookUp third Optional third ILookUp fourth Optional fourth Methods | Improve this Doc View Source Get(String, String) Gets a value by Name/key and tries to format it in a special way (like for dates) Declaration public override string Get(string key, string format) Parameters Type Name Description System.String key Name of the Property System.String format Format String Returns Type Description System.String Overrides LookUpBase.Get(String, String) Implements ILookUp"
  },
  "api/dot-net/ToSic.Sxc.Dnn.LookUp.html": {
    "href": "api/dot-net/ToSic.Sxc.Dnn.LookUp.html",
    "title": "Namespace ToSic.Sxc.Dnn.LookUp | 2sxc and EAV 10",
    "keywords": "Namespace ToSic.Sxc.Dnn.LookUp This extends the abilities of ToSic.Eav.LookUp with more look-up objects for things that are either DNN specific. For example, DnnLookUpEngineResolver retrieves all the LookUps relevant for the current module, to resolve Module:ModuleId etc. Classes DnnLookUpEngineResolver Retrieves the current engine for a specific module. Internally it asks DNN for the current Property-Access objects and prepares them for use in EAV. LookUpInDnnPropertyAccess Translator component which creates a LookUp object and internally accesses DNN PropertyAccess objects (which DNN uses for the same concept as LookUp)"
  },
  "api/dot-net/ToSic.Sxc.Dnn.RazorComponent.html": {
    "href": "api/dot-net/ToSic.Sxc.Dnn.RazorComponent.html",
    "title": "Class RazorComponent | 2sxc and EAV 10",
    "keywords": "Class RazorComponent The base class for Razor-Components in 2sxc 10+ Provides context infos like the Dnn object, helpers like Edit and much more. To use this, create cshtml files like _person-list.cshtml in your app-folder. By default, they will be typed the old way - which continues to work for compatibility. We recommend to use this from now on. To do it, your code file must begin with an @inherits statement, like this: @inherits ToSic.Sxc.Dnn.RazorComponent <h1>hello from RazorComponent</h1> Inheritance System.Object System.Web.WebPages.WebPageExecutingBase System.Web.WebPages.WebPageRenderingBase System.Web.WebPages.WebPageBase ToSic.Sxc.Web.RazorComponentBase ToSic.Sxc.Hybrid.Razor.RazorComponent RazorComponent RazorComponentCode Implements IRazorComponent IDnnDynamicCode IDynamicCode ICreateInstance ICompatibilityLevel IHasLog Namespace : ToSic.Sxc.Dnn Assembly : ToSic.SexyContent.Razor.dll Syntax [PublicApi_Stable_ForUseInYourCode] public abstract class RazorComponent : RazorComponent, ITemplateFile, IHasDynCodeContext, INeedsDynCodeContext, ICoupledDynamicCode, IRazorComponent, IDnnDynamicCode, IDynamicCode, ICreateInstance, ICompatibilityLevel, IHasLog Properties | Improve this Doc View Source Dnn The DNN context. Declaration public IDnnContext Dnn { get; } Property Value Type Description IDnnContext The DNN context. Implements IRazorComponent IDnnDynamicCode IDynamicCode ICreateInstance ICompatibilityLevel IHasLog"
  },
  "api/dot-net/ToSic.Eav.Apps.AppIdentity.html": {
    "href": "api/dot-net/ToSic.Eav.Apps.AppIdentity.html",
    "title": "Class AppIdentity | 2sxc and EAV 10",
    "keywords": "Class AppIdentity A full App-Identity. This is either used to pass identities around, or as a base class for more extensive objects which know their full identity. Inheritance System.Object AppIdentity Implements IAppIdentity IZoneIdentity IAppIdentityLight Namespace : ToSic.Eav.Apps Assembly : ToSic.Eav.Core.dll Syntax [PublicApi_Stable_ForUseInYourCode] public class AppIdentity : IAppIdentity, IZoneIdentity, IAppIdentityLight Constructors | Improve this Doc View Source AppIdentity(Int32, Int32) App identity containing zone/app combination Declaration public AppIdentity(int zoneId, int appId) Parameters Type Name Description System.Int32 zoneId System.Int32 appId | Improve this Doc View Source AppIdentity(IAppIdentity) Declaration public AppIdentity(IAppIdentity parent) Parameters Type Name Description IAppIdentity parent Properties | Improve this Doc View Source AppId The app id as used internally Declaration public int AppId { get; } Property Value Type Description System.Int32 The App ID this thing belongs to | Improve this Doc View Source ZoneId ID of the zone (EAV Tenant) Declaration public int ZoneId { get; } Property Value Type Description System.Int32 The zone ID this thing belongs to Implements IAppIdentity IZoneIdentity IAppIdentityLight"
  },
  "api/dot-net/ToSic.Eav.Caching.ITimestamped.html": {
    "href": "api/dot-net/ToSic.Eav.Caching.ITimestamped.html",
    "title": "Interface ITimestamped | 2sxc and EAV 10",
    "keywords": "Interface ITimestamped Provides a time stamp when something was created / updated for caching. Namespace : ToSic.Eav.Caching Assembly : ToSic.Eav.Core.dll Syntax [InternalApi_DoNotUse_MayChangeWithoutNotice(\"this is just fyi\")] public interface ITimestamped Properties | Improve this Doc View Source CacheTimestamp System time-stamp of when the data in this cached thing was initialized or updated. Depending on the implementation, this may go up-stream and return an up-stream value. Declaration long CacheTimestamp { get; } Property Value Type Description System.Int64 A timestamp as a long number"
  },
  "api/dot-net/ToSic.Eav.DataSources.Queries.Query.html": {
    "href": "api/dot-net/ToSic.Eav.DataSources.Queries.Query.html",
    "title": "Class Query | 2sxc and EAV 10",
    "keywords": "Class Query Provides a data-source to a query, but won't assemble/compile the query unless accessed (lazy). Inheritance System.Object HasLog DataSourceBase Query Implements IDataTarget IQuery IDataSource IAppIdentity IZoneIdentity IAppIdentityLight ICacheKey ICacheExpiring ITimestamped ICanPurgeListCache IHasLog Inherited Members DataSourceBase.Name DataSourceBase.CacheRelevantConfigurations DataSourceBase.CachePartialKey DataSourceBase.CacheFullKey DataSourceBase.CacheTimestamp DataSourceBase.CacheChanged(Int64) DataSourceBase.AppId DataSourceBase.ZoneId DataSourceBase.Guid DataSourceBase.In DataSourceBase.Item[String] DataSourceBase.List DataSourceBase.Configuration DataSourceBase.Attach(IDataSource) DataSourceBase.Attach(String, IDataSource) DataSourceBase.Attach(String, IDataStream) HasLog.Log HasLog.InitLog(String, ILog, String) HasLog.InitLog(String, ILog, String, CodeRef) Namespace : ToSic.Eav.DataSources.Queries Assembly : ToSic.Eav.DataSources.dll Syntax [PublicApi_Stable_ForUseInYourCode] public sealed class Query : DataSourceBase, IDataTarget, IQuery, IDataSource, IAppIdentity, IZoneIdentity, IAppIdentityLight, ICacheInfo, ICacheKey, ICacheExpiring, ITimestamped, ICanPurgeListCache, IHasLog Properties | Improve this Doc View Source Definition The underlying definition for the current query so you can check what's inside. Declaration public QueryDefinition Definition { get; } Property Value Type Description QueryDefinition | Improve this Doc View Source Out Standard out. Note that the Out is not prepared until accessed the first time, when it will auto-assembles the query Declaration public override IDictionary<string, IDataStream> Out { get; } Property Value Type Description System.Collections.Generic.IDictionary < System.String , IDataStream > Overrides DataSourceBase.Out Methods | Improve this Doc View Source Params() Get the current list of params. Declaration public IDictionary<string, string> Params() Returns Type Description System.Collections.Generic.IDictionary < System.String , System.String > The list of params as they are configured in this moment. | Improve this Doc View Source Params(IDictionary<String, String>) Add/Set a parameter for the query, which will be used by the [Params:Xxx] tokens. Declaration public void Params(IDictionary<string, string> values) Parameters Type Name Description System.Collections.Generic.IDictionary < System.String , System.String > values dictionary with values Remarks If you set a param after accessing the query, an exception will occur unless you call Reset() first. | Improve this Doc View Source Params(String) Add/Set a parameter for the query, which will be used by the [Params:Xxx] tokens. Declaration public void Params(string list) Parameters Type Name Description System.String list list of key=value on many lines Remarks If you set a param after accessing the query, an exception will occur unless you call Reset() first. | Improve this Doc View Source Params(String, String) Add/Set a parameter for the query, which will be used by the [Params:Xxx] tokens. Declaration public void Params(string key, string value) Parameters Type Name Description System.String key Key - the part used in [Params:key] System.String value The value it will resolve to. Can also be another token. Remarks If you set a param after accessing the query, an exception will occur unless you call Reset() first. | Improve this Doc View Source PurgeList(Boolean) Override PurgeList, because we don't really have In streams, unless we use parameters. Declaration public override void PurgeList(bool cascade = false) Parameters Type Name Description System.Boolean cascade Overrides DataSourceBase.PurgeList(Boolean) | Improve this Doc View Source Reset() Reset the query, so it can be run again. Requires all params to be set again. Declaration public void Reset() Implements IDataTarget IQuery IDataSource IAppIdentity IZoneIdentity IAppIdentityLight ICacheKey ICacheExpiring ITimestamped ICanPurgeListCache IHasLog"
  },
  "api/dot-net/ToSic.Eav.DataSources.System.QueryInfo.html": {
    "href": "api/dot-net/ToSic.Eav.DataSources.System.QueryInfo.html",
    "title": "Class QueryInfo | 2sxc and EAV 10",
    "keywords": "Class QueryInfo A DataSource that returns infos about a query. For example, it says how many out-streams are available and what fields can be used on each stream. This is used in fields which let you pick a query, stream and field from that stream. Inheritance System.Object HasLog DataSourceBase QueryInfo Implements IDataSource IAppIdentity IZoneIdentity IAppIdentityLight ICacheKey ICacheExpiring ITimestamped ICanPurgeListCache IHasLog IDataTarget Inherited Members DataSourceBase.Name DataSourceBase.CacheRelevantConfigurations DataSourceBase.CachePartialKey DataSourceBase.CacheFullKey DataSourceBase.CacheTimestamp DataSourceBase.CacheChanged(Int64) DataSourceBase.AppId DataSourceBase.ZoneId DataSourceBase.Guid DataSourceBase.In DataSourceBase.Out DataSourceBase.Item[String] DataSourceBase.List DataSourceBase.Configuration DataSourceBase.Attach(IDataSource) DataSourceBase.Attach(String, IDataSource) DataSourceBase.Attach(String, IDataStream) DataSourceBase.PurgeList(Boolean) HasLog.Log HasLog.InitLog(String, ILog, String) HasLog.InitLog(String, ILog, String, CodeRef) Namespace : ToSic.Eav.DataSources.System Assembly : ToSic.Eav.DataSources.dll Syntax [InternalApi_DoNotUse_MayChangeWithoutNotice] [VisualQuery(GlobalName = \"ToSic.Eav.DataSources.System.QueryInfo, ToSic.Eav.DataSources\", Type = DataSourceType.Source, Difficulty = DifficultyBeta.Advanced, DynamicOut = false, ExpectsDataOfType = \"4638668f-d506-4f5c-ae37-aa7fdbbb5540\", HelpLink = \"https://docs.2sxc.org/api/dot-net/ToSic.Eav.DataSources.System.QueryInfo.html\")] public sealed class QueryInfo : DataSourceBase, IDataSource, IAppIdentity, IZoneIdentity, IAppIdentityLight, ICacheInfo, ICacheKey, ICacheExpiring, ITimestamped, ICanPurgeListCache, IHasLog, IDataTarget Remarks Technically many things could just identify the app they belong to, and let the system look up the zone. But this would be inefficient, so for optimization, many items identify themselves with both the app and zone Ids Constructors | Improve this Doc View Source QueryInfo(Lazy<QueryManager>, QueryBuilder, Lazy<GlobalQueries>) Constructs a new Attributes DS Declaration public QueryInfo(Lazy<QueryManager> queryManagerLazy, QueryBuilder queryBuilder, Lazy<GlobalQueries> globalQueriesLazy) Parameters Type Name Description System.Lazy < ToSic.Eav.DataSources.Queries.QueryManager > queryManagerLazy ToSic.Eav.DataSources.Queries.QueryBuilder queryBuilder System.Lazy < ToSic.Eav.DataSources.Queries.GlobalQueries > globalQueriesLazy Properties | Improve this Doc View Source LogId Declaration public override string LogId { get; } Property Value Type Description System.String Overrides ToSic.Eav.DataSources.DataSourceBase.LogId | Improve this Doc View Source QueryBuilder Declaration public QueryBuilder QueryBuilder { get; } Property Value Type Description ToSic.Eav.DataSources.Queries.QueryBuilder | Improve this Doc View Source QueryName The content-type name Declaration public string QueryName { get; set; } Property Value Type Description System.String | Improve this Doc View Source StreamName Declaration public string StreamName { get; set; } Property Value Type Description System.String Implements IDataSource IAppIdentity IZoneIdentity IAppIdentityLight ICacheKey ICacheExpiring ITimestamped ICanPurgeListCache IHasLog IDataTarget"
  },
  "api/dot-net/ToSic.Eav.LookUp.LookUpInDataTarget.html": {
    "href": "api/dot-net/ToSic.Eav.LookUp.LookUpInDataTarget.html",
    "title": "Class LookUpInDataTarget | 2sxc and EAV 10",
    "keywords": "Class LookUpInDataTarget Look up stuff in a DataSource. It will take the first IEntity in a source and look up properties/attributes in that. Normally this is used in Queries, where you want to get a parameter from the In stream. Inheritance System.Object LookUpBase LookUpInDataTarget Implements ILookUp Inherited Members LookUpBase.Name LookUpBase.Get(String) LookUpBase.Format(Boolean) LookUpBase.Format(DateTime) Namespace : ToSic.Eav.LookUp Assembly : ToSic.Eav.DataSources.dll Syntax [PublicApi_Stable_ForUseInYourCode] public class LookUpInDataTarget : LookUpBase, ILookUp Constructors | Improve this Doc View Source LookUpInDataTarget(IDataTarget) Constructor expecting the data-target, of which it will use the In-Stream Declaration public LookUpInDataTarget(IDataTarget dataTarget) Parameters Type Name Description IDataTarget dataTarget Fields | Improve this Doc View Source InStreamName The stream name to read when finding the entity which is the source of this. Declaration public const string InStreamName = \"In\" Field Value Type Description System.String Methods | Improve this Doc View Source Get(String, String) Will check if any streams in In matches the requested next key-part and will retrieve the first entity in that stream to deliver the required sub-key (or even sub-sub-key) Declaration public override string Get(string key, string format) Parameters Type Name Description System.String key Name of the Property System.String format Format String Returns Type Description System.String Overrides LookUpBase.Get(String, String) Implements ILookUp"
  },
  "api/dot-net/ToSic.Eav.LookUp.LookUpInDictionary.html": {
    "href": "api/dot-net/ToSic.Eav.LookUp.LookUpInDictionary.html",
    "title": "Class LookUpInDictionary | 2sxc and EAV 10",
    "keywords": "Class LookUpInDictionary Look Up values from a .net dictionary. Case-Insensitive. Read more about this in LookUp & LookUpEngine Inheritance System.Object LookUpBase LookUpInDictionary Implements ILookUp Inherited Members LookUpBase.Name LookUpBase.Get(String) LookUpBase.Format(Boolean) LookUpBase.Format(DateTime) Namespace : ToSic.Eav.LookUp Assembly : ToSic.Eav.Core.dll Syntax [PublicApi_Stable_ForUseInYourCode] public class LookUpInDictionary : LookUpBase, ILookUp Constructors | Improve this Doc View Source LookUpInDictionary(String, IDictionary<String, String>) Constructor, can optionally take a dictionary to reference with, otherwise creates a new one Declaration public LookUpInDictionary(string name, IDictionary<string, string> valueList = null) Parameters Type Name Description System.String name Name to use System.Collections.Generic.IDictionary < System.String , System.String > valueList value list (dictionary) to reference Properties | Improve this Doc View Source Properties List with static properties and Test-Values Declaration public IDictionary<string, string> Properties { get; } Property Value Type Description System.Collections.Generic.IDictionary < System.String , System.String > Methods | Improve this Doc View Source Get(String, String) Gets a value by Name/key and tries to format it in a special way (like for dates) Declaration public override string Get(string key, string format) Parameters Type Name Description System.String key Name of the Property System.String format Format String Returns Type Description System.String Overrides LookUpBase.Get(String, String) Implements ILookUp"
  },
  "api/dot-net/ToSic.Sxc.Dnn.DataSources.DnnUserProfile.html": {
    "href": "api/dot-net/ToSic.Sxc.Dnn.DataSources.DnnUserProfile.html",
    "title": "Class DnnUserProfile | 2sxc and EAV 10",
    "keywords": "Class DnnUserProfile Get DNN user profiles as IEntity objects of one or many users. Inheritance System.Object HasLog DataSourceBase ExternalData DnnUserProfile Implements IDataSource IAppIdentity IZoneIdentity IAppIdentityLight ICacheKey ICacheExpiring ITimestamped ICanPurgeListCache IHasLog IDataTarget Inherited Members ExternalData.CacheTimestamp DataSourceBase.Name DataSourceBase.CacheRelevantConfigurations DataSourceBase.CachePartialKey DataSourceBase.CacheFullKey DataSourceBase.CacheChanged(Int64) DataSourceBase.AppId DataSourceBase.ZoneId DataSourceBase.Guid DataSourceBase.In DataSourceBase.Out DataSourceBase.Item[String] DataSourceBase.List DataSourceBase.Configuration DataSourceBase.Attach(IDataSource) DataSourceBase.Attach(String, IDataSource) DataSourceBase.Attach(String, IDataStream) DataSourceBase.PurgeList(Boolean) HasLog.Log HasLog.InitLog(String, ILog, String) HasLog.InitLog(String, ILog, String, CodeRef) Namespace : ToSic.Sxc.Dnn.DataSources Assembly : ToSic.Sxc.Dnn.dll Syntax [PublicApi_Stable_ForUseInYourCode] [VisualQuery(GlobalName = \"ToSic.Sxc.Dnn.DataSources.DnnUserProfile, ToSic.Sxc.Dnn\", Type = DataSourceType.Source, DynamicOut = true, ExpectsDataOfType = \"|Config ToSic.SexyContent.DataSources.DnnUserProfileDataSource\", PreviousNames = new string[]{\"ToSic.SexyContent.Environment.Dnn7.DataSources.DnnUserProfileDataSource, ToSic.SexyContent\"})] public class DnnUserProfile : ExternalData, IDataSource, IAppIdentity, IZoneIdentity, IAppIdentityLight, ICacheInfo, ICacheKey, ICacheExpiring, ITimestamped, ICanPurgeListCache, IHasLog, IDataTarget Constructors | Improve this Doc View Source DnnUserProfile(ISite, IZoneMapper) Declaration public DnnUserProfile(ISite site, IZoneMapper zoneMapper) Parameters Type Name Description ToSic.Eav.Context.ISite site ToSic.Eav.Run.IZoneMapper zoneMapper Properties | Improve this Doc View Source ContentType Gets or sets the Name of the ContentType to simulate Declaration public string ContentType { get; set; } Property Value Type Description System.String | Improve this Doc View Source Properties List of profile-properties to retrieve, comma-separated Declaration public string Properties { get; set; } Property Value Type Description System.String | Improve this Doc View Source TitleField Gets or sets the Name of the Title Attribute of the DNN-UserInfo Declaration public string TitleField { get; set; } Property Value Type Description System.String | Improve this Doc View Source UserIds The user id list of users to retrieve, comma-separated Declaration public string UserIds { get; set; } Property Value Type Description System.String Implements IDataSource IAppIdentity IZoneIdentity IAppIdentityLight ICacheKey ICacheExpiring ITimestamped ICanPurgeListCache IHasLog IDataTarget"
  },
  "api/dot-net/ToSic.Sxc.Dnn.DataSources.html": {
    "href": "api/dot-net/ToSic.Sxc.Dnn.DataSources.html",
    "title": "Namespace ToSic.Sxc.Dnn.DataSources | 2sxc and EAV 10",
    "keywords": "Namespace ToSic.Sxc.Dnn.DataSources This contains new DataSources for EAV, which only DNN can provide. It extends the standard EAV Data-Sources . Classes DnnSql Retrieves data from SQL, specifically using the DNN Connection String DnnUserProfile Get DNN user profiles as IEntity objects of one or many users."
  },
  "api/dot-net/ToSic.Sxc.Web.ILinkHelper.html": {
    "href": "api/dot-net/ToSic.Sxc.Web.ILinkHelper.html",
    "title": "Interface ILinkHelper | 2sxc and EAV 10",
    "keywords": "Interface ILinkHelper Helpers to create links with parameters or base-tag links (important for SPAs) Namespace : ToSic.Sxc.Web Assembly : ToSic.Sxc.dll Syntax [PublicApi_Stable_ForUseInYourCode] public interface ILinkHelper : ILinkHelper Methods | Improve this Doc View Source Base() A base url for the current page, for use in html-base tags Declaration string Base() Returns Type Description System.String | Improve this Doc View Source To(String, Nullable<Int32>, String) returns a link to the current page with parameters resolved in a way that DNN wants it Declaration string To(string requiresNamedParameters = null, int? pageId = default(int? ), string parameters = null) Parameters Type Name Description System.String requiresNamedParameters a helper to ensure that you must use named parameters. You shouldn't give it anything, but you must use all others like parameters: \"id=47&name=42\" System.Nullable < System.Int32 > pageId optional page ID (TabId) - if not supplied, will use current page System.String parameters the parameters either as \"/id/47/name/daniel\" or \"id=47&name=daniel\" Returns Type Description System.String"
  },
  "api/dot-net/ToSic.Eav.Run.html": {
    "href": "api/dot-net/ToSic.Eav.Run.html",
    "title": "Namespace ToSic.Eav.Run | 2sxc and EAV 10",
    "keywords": "Namespace ToSic.Eav.Run Run is all about Runtime / Execution of the EAV. It contains things that describe the environment it's running in and has base material for specific implementations. For example, the ITenant and ITenant<T> are inherited by the DnnTenant . Interfaces ICompatibilityLevel Carries information about what compatibility level to use. Important for components that have an older and newer API. IFingerprint Defines all classes which can provide fingerprints - to delegate fingerprint-creation to the environment."
  },
  "api/dot-net/ToSic.Eav.Security.IHasPermissions.html": {
    "href": "api/dot-net/ToSic.Eav.Security.IHasPermissions.html",
    "title": "Interface IHasPermissions | 2sxc and EAV 10",
    "keywords": "Interface IHasPermissions Anything that uses IHasPermissions can have custom permissions. This interface provides access to the information stored in the custom permissions. Namespace : ToSic.Eav.Security Assembly : ToSic.Eav.Core.dll Syntax [InternalApi_DoNotUse_MayChangeWithoutNotice(\"this is just fyi\")] public interface IHasPermissions Properties | Improve this Doc View Source Permissions Permissions are also stored as entity items. Declaration IEnumerable<Permission> Permissions { get; } Property Value Type Description System.Collections.Generic.IEnumerable < Permission > List of permission entities for an item Remarks Currently still a private API, because the type could change to be a typed permission object"
  },
  "api/dot-net/ToSic.Sxc.Conversion.html": {
    "href": "api/dot-net/ToSic.Sxc.Conversion.html",
    "title": "Namespace ToSic.Sxc.Conversion | 2sxc and EAV 10",
    "keywords": "Namespace ToSic.Sxc.Conversion Classes DataToDictionary Convert various types of entities (standalone, dynamic, in streams, etc.) to Dictionaries Mainly used for serialization scenarios, like in WebApis"
  },
  "api/dot-net/ToSic.Sxc.Data.DynamicEntity.html": {
    "href": "api/dot-net/ToSic.Sxc.Data.DynamicEntity.html",
    "title": "Class DynamicEntity | 2sxc and EAV 10",
    "keywords": "Class DynamicEntity A dynamic entity object - the main object you use when templating things in RazorComponent objects Note that it will provide many things not listed here, usually things like .Image , .FirstName etc. based on your ContentType. Inheritance System.Object System.Dynamic.DynamicObject DynamicEntity DynamicEntityWithList Implements System.Dynamic.IDynamicMetaObjectProvider IDynamicEntity IEntityWrapper ICompatibilityLevel System.IEquatable < IEntityWrapper > Namespace : ToSic.Sxc.Data Assembly : ToSic.Sxc.dll Syntax [PublicApi_Stable_ForUseInYourCode] public class DynamicEntity : DynamicObject, IDynamicMetaObjectProvider, IDynamicEntity, IDynamicEntity, IEntityWrapper, ICompatibilityLevel, IEquatable<IEntityWrapper> Properties | Improve this Doc View Source AnyBooleanProperty A Dynamic Entity always contains an item of your data - a book, person, blog-post or a piece of content. Since the object is dynamic, you can just use .IsFemale or whatever other property your item has. If it's a true/false, it will just magically work and return a bool . If it doesn't exist, it will return null. Declaration public bool AnyBooleanProperty { get; } Property Value Type Description System.Boolean | Improve this Doc View Source AnyChildrenProperty A Dynamic Entity always contains an item of your data - a book, person, blog-post or a piece of content. Since the object is dynamic, you can just use .Tags or whatever other property your item has. If it's contains relationships, it will just magically work and return a list of further DynamicEntity objects. If it doesn't exist, it will return null. Declaration public IEnumerable<DynamicEntity> AnyChildrenProperty { get; } Property Value Type Description System.Collections.Generic.IEnumerable < DynamicEntity > Remarks Very often you'll want to use LINQ to further sort or query these items. But the Razor compiler cannot know that it got a list, so using .Any() or similar fails. To fix this, put an AsList around it - a bit like AsList(myThing.Tags) . Sometimes you'll also need to help a bit more with AsList(myThings.Tags as object) . Now you can do things like var tags = AsList(myThings.Tags as object); if (myTags.Any()) {...} Read more about this in the Dnn LINQ Tutorials | Improve this Doc View Source AnyDateTimeProperty A Dynamic Entity always contains an item of your data - a book, person, blog-post or a piece of content. Since the object is dynamic, you can just use .Birthday or whatever other property your item has. If it's a date/time, it will just magically work and return a DateTime . If it doesn't exist, it will return null. Declaration public DateTime AnyDateTimeProperty { get; } Property Value Type Description System.DateTime | Improve this Doc View Source AnyJsonProperty A Dynamic Entity always contains an item of your data - a book, person, blog-post or a piece of content. Since the object is dynamic, you can just use .Gps or whatever other property your item has. If the field contains JSON, it will just magically work and return a string . If it doesn't exist, it will return null. Declaration public string AnyJsonProperty { get; } Property Value Type Description System.String Remarks Very often you'll want to use the Json as a dynamic object again. Just pass the result through AsDynamic and it will work. Example: var gps = AsDynamic(myThing.Gps); var lat = gps.Lat; Read more about this in the Dnn JSON Tutorials | Improve this Doc View Source AnyLinkOrFileProperty A Dynamic Entity always contains an item of your data - a book, person, blog-post or a piece of content. Since the object is dynamic, you can just use .Image or whatever other property your item has. If it's a link, it will just magically work and return a string . If it doesn't exist, it will return null. Declaration public string AnyLinkOrFileProperty { get; } Property Value Type Description System.String Remarks Note that many internal references in the CMS use file:2742 or similar. This will automatically be resolved to the real link which your output needs. | Improve this Doc View Source AnyNumberProperty A Dynamic Entity always contains an item of your data - a book, person, blog-post or a piece of content. Since the object is dynamic, you can just use .Length or whatever other property your item has. If it's a number, it will just magically work and return a double . If it doesn't exist, it will return null. Declaration public double AnyNumberProperty { get; } Property Value Type Description System.Double | Improve this Doc View Source AnyStringProperty A Dynamic Entity always contains an item of your data - a book, person, blog-post or a piece of content. Since the object is dynamic, you can just use .FirstName or whatever other property your item has. If it's a string, it will just magically work. If it doesn't exist, it will return null. Declaration public string AnyStringProperty { get; } Property Value Type Description System.String Remarks Remember to use @Html.Raw(...) if you want the html to be preserved and not cleaned when placed in the page. | Improve this Doc View Source EntityGuid The guid of the underlying entity. Declaration public Guid EntityGuid { get; } Property Value Type Description System.Guid Remarks If the entity doesn't exist, it will return an empty guid | Improve this Doc View Source EntityId The ID of the underlying entity. Use it for edit-functionality or just to have a unique number for this item. Declaration public int EntityId { get; } Property Value Type Description System.Int32 Remarks If the entity doesn't exist, it will return 0 | Improve this Doc View Source EntityTitle The title of this item. This is always available no matter what the underlying field for the title is. Declaration public object EntityTitle { get; } Property Value Type Description System.Object The title of the underlying entity. In rare cases where no title-field is known, it can be null. It can also be null if there is no underlying entity. | Improve this Doc View Source EntityType The type name of the current entity. This provides the nice name like \"Person\" and not the technical internal StaticName Declaration public string EntityType { get; } Property Value Type Description System.String | Improve this Doc View Source IsDemoItem Many templates show demo data. If the template code must know if it's the demo item or real data, use IsDemoItem. Declaration public bool IsDemoItem { get; } Property Value Type Description System.Boolean True if this is the item configured in the view-settings, false if not. Remarks New in 10.07 | Improve this Doc View Source IsPublished Tells us if this data item is published or still draft. Default is true. Declaration public bool IsPublished { get; } Property Value Type Description System.Boolean | Improve this Doc View Source Presentation Contains presentation settings for an item - if they exist. This is a functionality of the CMS, where an instance of an item can be configured to show in a specific way. Normally it's used when something like an address has various show-settings (like how the map should visualize this address). The presentation-info is therefor not-null IF the content belongs to this module instance the view-configuration of this module is configured to have presentation items there is either a default presentation configured in the view, or the user has manually edited the presentation settings Declaration public dynamic Presentation { get; } Property Value Type Description System.Object An IDynamicEntity with the presentation item (or the demo-presentation), otherwise null. Methods | Improve this Doc View Source Children(String, String) A dynamic list of sub-items. Important for LINQ style querying or just working with various lists. Note that for getting child items of this item you can just use the properties, like content.Authors. But using Children(\"Authors\", typeName) gives you the ability to restrict to a type. Please check the tutorials on 2sxc.org/dnn-tutorials/ for more info. Declaration public List<IDynamicEntity> Children(string field = null, string type = null) Parameters Type Name Description System.String field Optional field filter - would only return items that point to the current item in a specific field name. System.String type Optional type filter - would only return items of this type. Returns Type Description System.Collections.Generic.List < IDynamicEntity > A list of all items pointing here (filtered), converted to DynamicEntity for convenience. Remarks New in 10.21.00 - note also that the parameter-order is reversed to the Parents() | Improve this Doc View Source Get(String) Get a property using the string name. Only needed in special situations, as most cases can use the object.name directly Declaration public dynamic Get(string name) Parameters Type Name Description System.String name the property name. Returns Type Description System.Object a dynamically typed result, can be string, bool, etc. | Improve this Doc View Source Get(String, String, String, Boolean) Get a property using the string name. Only needed in special situations, as most cases can use the object.name directly Declaration public dynamic Get(string name, string dontRelyOnParameterOrder = \"all params must be named, like 'enable: true, language: ''de-ch''\", string language = null, bool convertLinks = true) Parameters Type Name Description System.String name the property name. System.String dontRelyOnParameterOrder This should enforce the convention that all following parameters (which are optional) must explicitly use the parameter name. So Get(&quot;FirstName&quot;, &quot;en&quot;) won't work, you must use Get(&quot;FirstName&quot;, language: &quot;en&quot;) and similar System.String language Optional language code - like \"de-ch\" to prioritize that language System.Boolean convertLinks Optionally turn off if links like file:72 are looked up to a real link. Default is true. Returns Type Description System.Object a dynamically typed result, can be string, bool, etc. | Improve this Doc View Source GetDraft() Get the draft item of this item if this is a content-item which is published, and has a draft. Declaration public dynamic GetDraft() Returns Type Description System.Object Returns a dynamic entity if there is a draft, or null if there is no draft. | Improve this Doc View Source GetPublished() Get the published item of this item if this is a content-item which is draft, and has a published. Declaration public dynamic GetPublished() Returns Type Description System.Object Returns a dynamic entity if there is a draft, or null if there is no draft. | Improve this Doc View Source Parents(String, String) A dynamic list of entities which point to this item. Important for LINQ style querying or just working with various lists. Note that for getting child items of this item you can just use the properties, like content.Authors. Please check the tutorials on 2sxc.org/dnn-tutorials/ for more info. Declaration public List<IDynamicEntity> Parents(string type = null, string field = null) Parameters Type Name Description System.String type Optional type filter - would only return items of this type. System.String field Optional field filter - would only return items that point to the current item in a specific field name. Returns Type Description System.Collections.Generic.List < IDynamicEntity > A list of all items pointing here (filtered), converted to DynamicEntity for convenience. Remarks New in 9.42 - note also that the parameter-order is reversed to the Children() Implements System.Dynamic.IDynamicMetaObjectProvider IDynamicEntity IEntityWrapper ICompatibilityLevel System.IEquatable<T>"
  },
  "api/dot-net/ToSic.Sxc.Dnn.Web.IHtmlHelper.html": {
    "href": "api/dot-net/ToSic.Sxc.Dnn.Web.IHtmlHelper.html",
    "title": "Interface IHtmlHelper | 2sxc and EAV 10",
    "keywords": "Interface IHtmlHelper helper to quickly \"raw\" some html Namespace : ToSic.Sxc.Dnn.Web Assembly : ToSic.SexyContent.Razor.dll Syntax [PublicApi_Stable_ForUseInYourCode] public interface IHtmlHelper Methods | Improve this Doc View Source Raw(Object) Returns a HtmlString which Razor will output as Raw Html. Declaration HtmlString Raw(object stringHtml) Parameters Type Name Description System.Object stringHtml Returns Type Description System.Web.HtmlString An HtmlString object which will be not be html-encoded when added to a page with @Html.Raw(...)"
  },
  "api/dot-net/ToSic.Eav.Caching.ICacheKeyManager.html": {
    "href": "api/dot-net/ToSic.Eav.Caching.ICacheKeyManager.html",
    "title": "Interface ICacheKeyManager | 2sxc and EAV 10",
    "keywords": "Interface ICacheKeyManager Generates cache-keys for certain objects and combines them with CacheKeys of parent-objects which this object relies on. Inherited Members ICacheKey.CachePartialKey ICacheKey.CacheFullKey Namespace : ToSic.Eav.Caching Assembly : ToSic.Eav.Core.dll Syntax [InternalApi_DoNotUse_MayChangeWithoutNotice(\"this is just fyi\")] public interface ICacheKeyManager : ICacheKey Properties | Improve this Doc View Source SubKeys Declaration string[] SubKeys { get; } Property Value Type Description System.String []"
  },
  "api/dot-net/ToSic.Eav.Data.EntityBasedWithLog.html": {
    "href": "api/dot-net/ToSic.Eav.Data.EntityBasedWithLog.html",
    "title": "Class EntityBasedWithLog | 2sxc and EAV 10",
    "keywords": "Class EntityBasedWithLog A strongly typed object which gets its data from an entity, and also logs what it does. Inheritance System.Object EntityBasedType EntityBasedWithLog QueryDefinition AppConfiguration Implements IEntityBasedType IEntityWrapper IHasLog Inherited Members EntityBasedType.Entity EntityBasedType.Title EntityBasedType.Id EntityBasedType.Guid EntityBasedType.Get<T>(String, T) Namespace : ToSic.Eav.Data Assembly : ToSic.Eav.Core.dll Syntax [PublicApi_Stable_ForUseInYourCode] public abstract class EntityBasedWithLog : EntityBasedType, IEntityBasedType, IEntityWrapper, IHasLog Constructors | Improve this Doc View Source EntityBasedWithLog(IEntity, String, ILog, String) An entity based type which also logs what it does Declaration protected EntityBasedWithLog(IEntity entity, string languageCode, ILog parentLog, string logName) Parameters Type Name Description IEntity entity entity which will be the foundation of this type System.String languageCode language to prefer in value lookups ILog parentLog parent log to chain System.String logName Name for the logger | Improve this Doc View Source EntityBasedWithLog(IEntity, String[], ILog, String) An entity based type which also logs what it does Declaration protected EntityBasedWithLog(IEntity entity, string[] languageCodes, ILog parentLog, string logName) Parameters Type Name Description IEntity entity entity which will be the foundation of this type System.String [] languageCodes languages to prefer in value lookups ILog parentLog parent log to chain System.String logName Name for the logger | Improve this Doc View Source EntityBasedWithLog(IEntity, ILog, String) An entity based type which also logs what it does Declaration protected EntityBasedWithLog(IEntity entity, ILog parentLog, string logName) Parameters Type Name Description IEntity entity entity which will be the foundation of this type ILog parentLog parent log to chain System.String logName Name for the logger Properties | Improve this Doc View Source Log The log object which contains the log and can add more logs to the list. Declaration public ILog Log { get; } Property Value Type Description ILog Implements IEntityBasedType IEntityWrapper IHasLog"
  },
  "api/dot-net/ToSic.Eav.Data.IValue.html": {
    "href": "api/dot-net/ToSic.Eav.Data.IValue.html",
    "title": "Interface IValue | 2sxc and EAV 10",
    "keywords": "Interface IValue Represents a Value in the EAV system. Values belong to an attribute and can belong to multiple languages. Namespace : ToSic.Eav.Data Assembly : ToSic.Eav.Core.dll Syntax [PublicApi_Stable_ForUseInYourCode] public interface IValue Properties | Improve this Doc View Source Languages Gets the Language ( ILanguage ) assigned to this Value. Can be one or many. Declaration IList<ILanguage> Languages { get; set; } Property Value Type Description System.Collections.Generic.IList < ILanguage > | Improve this Doc View Source SerializableObject Returns the inner value in a form that can be serialized, for JSON serialization etc. Declaration object SerializableObject { get; } Property Value Type Description System.Object"
  },
  "api/dot-net/ToSic.Sxc.Blocks.IView.html": {
    "href": "api/dot-net/ToSic.Sxc.Blocks.IView.html",
    "title": "Interface IView | 2sxc and EAV 10",
    "keywords": "Interface IView Defines a view configuration which is loaded from an EntityBasedType . Inherited Members IEntityBasedType.Title IEntityBasedType.Id IEntityBasedType.Guid IEntityWrapper.Entity Namespace : ToSic.Sxc.Blocks Assembly : ToSic.Sxc.dll Syntax [PublicApi_Stable_ForUseInYourCode] public interface IView : IEntityBasedType, IEntityWrapper Properties | Improve this Doc View Source IsHidden Determine if we should hide this view/template from the pick-UI. Declaration bool IsHidden { get; } Property Value Type Description System.Boolean | Improve this Doc View Source IsShared Translates the location to tell us if it's a shared view (the template is in a shared location) Declaration bool IsShared { get; } Property Value Type Description System.Boolean | Improve this Doc View Source Location Location of the template - in the current tenant/portal or global/shared location. Declaration string Location { get; } Property Value Type Description System.String | Improve this Doc View Source Name The name, localized in the current UI language. Declaration string Name { get; } Property Value Type Description System.String | Improve this Doc View Source Path Path to the template Declaration string Path { get; } Property Value Type Description System.String | Improve this Doc View Source Query The query attached to this view (if one was specified) Declaration QueryDefinition Query { get; } Property Value Type Description QueryDefinition A query object or null | Improve this Doc View Source Type The underlying type name of the template, ATM they are unfortunately hard-coded as \"C# Razor\" and \"Token\" Declaration string Type { get; } Property Value Type Description System.String"
  },
  "api/dot-net/ToSic.Eav.DataSources.EntityIdFilter.html": {
    "href": "api/dot-net/ToSic.Eav.DataSources.EntityIdFilter.html",
    "title": "Class EntityIdFilter | 2sxc and EAV 10",
    "keywords": "Class EntityIdFilter A DataSource that filters Entities by Ids The ItemIdFilter DataSource is part of the Standard EAV Data Sources . It will only return the items with the id specified. Warning: You should always use it in combination with a Content-Type filter , as you want to be sure nobody can just crawl any entity you have in your system! How to use with the Visual Query When using the Visual Query you can just drag it into your query. This is what it usually looks like: You can also use multiple values: Or URL-parameters: Programming With The ItemIdFilter DataSource We recommend to use the Visual Query where possible, as it's easier to understand and is identical for C# and JavaScript. It's also better because it separates data-retrieval from visualization. Read also datasource / data stream List of all EAV Data Sources query / visual query Demo App and further links You should find some examples in this demo App Demo App with examples for most DataSources History Introduced in EAV 4.x, 2sxc ? API Documentation Inheritance System.Object HasLog DataSourceBase EntityIdFilter Implements IDataSource IAppIdentity IZoneIdentity IAppIdentityLight ICacheKey ICacheExpiring ITimestamped ICanPurgeListCache IHasLog IDataTarget Inherited Members DataSourceBase.Name DataSourceBase.CacheRelevantConfigurations DataSourceBase.CachePartialKey DataSourceBase.CacheFullKey DataSourceBase.CacheTimestamp DataSourceBase.CacheChanged(Int64) DataSourceBase.AppId DataSourceBase.ZoneId DataSourceBase.Guid DataSourceBase.In DataSourceBase.Out DataSourceBase.Item[String] DataSourceBase.List DataSourceBase.Configuration DataSourceBase.Attach(IDataSource) DataSourceBase.Attach(String, IDataSource) DataSourceBase.Attach(String, IDataStream) DataSourceBase.PurgeList(Boolean) HasLog.Log HasLog.InitLog(String, ILog, String) HasLog.InitLog(String, ILog, String, CodeRef) Namespace : ToSic.Eav.DataSources Assembly : ToSic.Eav.DataSources.dll Syntax [PublicApi_Stable_ForUseInYourCode] [VisualQuery(GlobalName = \"ToSic.Eav.DataSources.EntityIdFilter, ToSic.Eav.DataSources\", Type = DataSourceType.Filter, DynamicOut = false, NiceName = \"Item Id Filter\", UiHint = \"Find items based on the ID\", ExpectsDataOfType = \"|Config ToSic.Eav.DataSources.EntityIdFilter\", HelpLink = \"https://r.2sxc.org/DsIdFilter\")] public class EntityIdFilter : DataSourceBase, IDataSource, IAppIdentity, IZoneIdentity, IAppIdentityLight, ICacheInfo, ICacheKey, ICacheExpiring, ITimestamped, ICanPurgeListCache, IHasLog, IDataTarget Remarks Technically many things could just identify the app they belong to, and let the system look up the zone. But this would be inefficient, so for optimization, many items identify themselves with both the app and zone Ids Properties | Improve this Doc View Source EntityIds A string containing one or more entity-ids. like \"27\" or \"27,40,3063,30306\" Declaration public string EntityIds { get; set; } Property Value Type Description System.String Implements IDataSource IAppIdentity IZoneIdentity IAppIdentityLight ICacheKey ICacheExpiring ITimestamped ICanPurgeListCache IHasLog IDataTarget"
  },
  "api/dot-net/ToSic.Sxc.Context.ICmsUser.html": {
    "href": "api/dot-net/ToSic.Sxc.Context.ICmsUser.html",
    "title": "Interface ICmsUser | 2sxc and EAV 10",
    "keywords": "Interface ICmsUser The user context of your code - so it's information about the user your code is using. Namespace : ToSic.Sxc.Context Assembly : ToSic.Sxc.dll Syntax [PublicApi] public interface ICmsUser Properties | Improve this Doc View Source Id User Id as int. Works in DNN and Oqtane Declaration int Id { get; } Property Value Type Description System.Int32"
  },
  "api/dot-net/ToSic.Sxc.Context.PlatformType.html": {
    "href": "api/dot-net/ToSic.Sxc.Context.PlatformType.html",
    "title": "Enum PlatformType | 2sxc and EAV 10",
    "keywords": "Enum PlatformType The types of platforms which 2sxc could be running on Namespace : ToSic.Sxc.Context Assembly : ToSic.Sxc.dll Syntax [PublicApi] public enum PlatformType Fields Name Description Dnn None Oqtane Other Testing Unknown"
  },
  "api/dot-net/ToSic.Sxc.Dnn.Run.IDnnContext.html": {
    "href": "api/dot-net/ToSic.Sxc.Dnn.Run.IDnnContext.html",
    "title": "Interface IDnnContext | 2sxc and EAV 10",
    "keywords": "Interface IDnnContext Provides information about the current context within DNN. This only applies to 2sxc running inside DNN, not inside another platform. Namespace : ToSic.Sxc.Dnn.Run Assembly : ToSic.Sxc.Dnn.dll Syntax [InternalApi_DoNotUse_MayChangeWithoutNotice(\"this is just fyi\")] public interface IDnnContext Properties | Improve this Doc View Source Module The current DNN ModuleInfo. Declaration ModuleInfo Module { get; } Property Value Type Description DotNetNuke.Entities.Modules.ModuleInfo | Improve this Doc View Source Portal The current DNN Portal Settings Declaration PortalSettings Portal { get; } Property Value Type Description DotNetNuke.Entities.Portals.PortalSettings | Improve this Doc View Source Tab The current DNN TabInfo (page). We also don't like the name Tab, but that's the DNN convention. Declaration TabInfo Tab { get; } Property Value Type Description DotNetNuke.Entities.Tabs.TabInfo | Improve this Doc View Source User The current DNN User. Declaration UserInfo User { get; } Property Value Type Description DotNetNuke.Entities.Users.UserInfo"
  },
  "api/dot-net/ToSic.Sxc.Dnn.Run.html": {
    "href": "api/dot-net/ToSic.Sxc.Dnn.Run.html",
    "title": "Namespace ToSic.Sxc.Dnn.Run | 2sxc and EAV 10",
    "keywords": "Namespace ToSic.Sxc.Dnn.Run Run is all about Runtime / Execution of the EAV. It contains things that describe the environment it's running in and has base material for specific implementations. For example, the ITenant and ITenant<T> are inherited by the DnnTenant . Note All the things starting with Dnn... are DNN specific implementations of EAV or 2sxc features. We've documented them so you know how things work, but you usually won't care about them. The DNN prefix helps us better detect in our code when we're using DNN stuff vs. generic stuff. Classes DnnModule The DNN implementation of a Block Container (a Module). DnnSite This is a DNN implementation of a Tenant-object. DnnValueConverter The DNN implementation of the IValueConverter which converts \"file:22\" or \"page:5\" to the url, Interfaces IDnnContext Provides information about the current context within DNN. This only applies to 2sxc running inside DNN, not inside another platform."
  },
  "api/dot-net/ToSic.Eav.Apps.IZoneIdentity.html": {
    "href": "api/dot-net/ToSic.Eav.Apps.IZoneIdentity.html",
    "title": "Interface IZoneIdentity | 2sxc and EAV 10",
    "keywords": "Interface IZoneIdentity Marks things which belongs to a Zone Namespace : ToSic.Eav.Apps Assembly : ToSic.Eav.Core.dll Syntax [PublicApi_Stable_ForUseInYourCode] public interface IZoneIdentity Properties | Improve this Doc View Source ZoneId ID of the zone (EAV Tenant) Declaration int ZoneId { get; } Property Value Type Description System.Int32 The zone ID this thing belongs to"
  },
  "api/dot-net/ToSic.Eav.Caching.ICacheExpiring.html": {
    "href": "api/dot-net/ToSic.Eav.Caching.ICacheExpiring.html",
    "title": "Interface ICacheExpiring | 2sxc and EAV 10",
    "keywords": "Interface ICacheExpiring Marks objects which are cache-based, and which may contain obsolete cached data. Inherited Members ITimestamped.CacheTimestamp Namespace : ToSic.Eav.Caching Assembly : ToSic.Eav.Core.dll Syntax [InternalApi_DoNotUse_MayChangeWithoutNotice(\"this is just fyi\")] public interface ICacheExpiring : ITimestamped Methods | Improve this Doc View Source CacheChanged(Int64) Detect if the cache has old data, by comparing it to a timestamp which may be newer. This is implemented in each object, because sometimes it compares its own timestamp, sometimes that of another underlying object. Declaration bool CacheChanged(long newCacheTimeStamp) Parameters Type Name Description System.Int64 newCacheTimeStamp New time stamp to compare with Returns Type Description System.Boolean True if the timestamps differ, false if it's the same"
  },
  "api/dot-net/ToSic.Eav.Data.EntityBasedType.html": {
    "href": "api/dot-net/ToSic.Eav.Data.EntityBasedType.html",
    "title": "Class EntityBasedType | 2sxc and EAV 10",
    "keywords": "Class EntityBasedType Foundation for a class which gets its data from an Entity. This is used for more type safety - because some internal objects need entities for data-storage, but when programming they should use typed objects to not accidentally access invalid properties. Inheritance System.Object EntityBasedType EntityBasedWithLog QueryPartDefinition Permission Implements IEntityBasedType IEntityWrapper Namespace : ToSic.Eav.Data Assembly : ToSic.Eav.Core.dll Syntax [PublicApi_Stable_ForUseInYourCode] public abstract class EntityBasedType : IEntityBasedType, IEntityWrapper Constructors | Improve this Doc View Source EntityBasedType(IEntity) Create a EntityBasedType and wrap the entity provided Declaration protected EntityBasedType(IEntity entity) Parameters Type Name Description IEntity entity | Improve this Doc View Source EntityBasedType(IEntity, String) Declaration protected EntityBasedType(IEntity entity, string languageCode) Parameters Type Name Description IEntity entity System.String languageCode | Improve this Doc View Source EntityBasedType(IEntity, String[]) Declaration protected EntityBasedType(IEntity entity, string[] languageCodes) Parameters Type Name Description IEntity entity System.String [] languageCodes Properties | Improve this Doc View Source Entity The underlying entity. Declaration public IEntity Entity { get; protected set; } Property Value Type Description IEntity The entity, or null if not provided | Improve this Doc View Source Guid The entity guid, as quick, nice accessor. Declaration public Guid Guid { get; } Property Value Type Description System.Guid The guid, or an empty-guid of no entity available | Improve this Doc View Source Id The entity id, as quick, nice accessor. Declaration public int Id { get; } Property Value Type Description System.Int32 The id, or 0 if no entity available | Improve this Doc View Source Title The title as string. Declaration public virtual string Title { get; } Property Value Type Description System.String The title, or an empty string if not available or not string-able Remarks Can be overriden by other parts, if necessary. Methods | Improve this Doc View Source Get<T>(String, T) Get a value from the underlying entity. Declaration protected T Get<T>(string fieldName, T fallback) Parameters Type Name Description System.String fieldName field name T fallback fallback value Returns Type Description T The value. If the Entity is missing, will return the fallback result. Type Parameters Name Description T type, should only be string, decimal, bool Implements IEntityBasedType IEntityWrapper"
  },
  "api/dot-net/ToSic.Eav.Data.IRelationshipManager.html": {
    "href": "api/dot-net/ToSic.Eav.Data.IRelationshipManager.html",
    "title": "Interface IRelationshipManager | 2sxc and EAV 10",
    "keywords": "Interface IRelationshipManager Manages relationships of an entity - to it's children and parents. Namespace : ToSic.Eav.Data Assembly : ToSic.Eav.Core.dll Syntax [InternalApi_DoNotUse_MayChangeWithoutNotice(\"this is just fyi\")] public interface IRelationshipManager Properties | Improve this Doc View Source AllChildren Get all Child Entities Declaration IEnumerable<IEntity> AllChildren { get; } Property Value Type Description System.Collections.Generic.IEnumerable < IEntity > List of all Entities referenced by this Entity. | Improve this Doc View Source AllParents Get all Parent Entities Declaration IEnumerable<IEntity> AllParents { get; } Property Value Type Description System.Collections.Generic.IEnumerable < IEntity > List of all Entities referencing this Entity. Methods | Improve this Doc View Source FindChildren(String, String, ILog) Find the children with optional criteria. Declaration List<IEntity> FindChildren(string field = null, string type = null, ILog log = null) Parameters Type Name Description System.String field Get only the children of a specific field System.String type Restrict the results to a specific ContentType ILog log Optional logger, to debug what happens internally Returns Type Description System.Collections.Generic.List < IEntity > Always returns a list - empty or containing results | Improve this Doc View Source FindParents(String, String, ILog) Find the parents with optional criteria. Declaration List<IEntity> FindParents(string type = null, string field = null, ILog log = null) Parameters Type Name Description System.String type Restrict the results to a specific ContentType System.String field Get only the children of a specific field ILog log Optional logger, to debug what happens internally Returns Type Description System.Collections.Generic.List < IEntity > Always returns a list - empty or containing results"
  },
  "api/dot-net/ToSic.Eav.DataSources.EntityTypeFilter.html": {
    "href": "api/dot-net/ToSic.Eav.DataSources.EntityTypeFilter.html",
    "title": "Class EntityTypeFilter | 2sxc and EAV 10",
    "keywords": "Class EntityTypeFilter Return only entities of a specific content-type Data Source: ContentType EntityType Filter Note this data source used to be called EntityTypeFilter, we renamed it in 2sxc 9.8 for consistency The ContentTypeFilter DataSource is part of the Standard EAV Data Sources . It will only let items pass through, which are of a specific type. How to use with the Visual Query When using the Visual Query you can just drag it into your query. In the settings you'll specify the type-name. The resulting query will usually be a bit like this: The above example shows: a two content-type filters, each filtering a different type Programming With The ContentTypeFilter DataSource We recommend to use the Visual Query where possible, as it's easier to understand and is identical for C# and JavaScript. It's also better because it separates data-retrieval from visualization. // A source which can filter by Content-Type (EntityType) var allAuthors = CreateSource<EntityTypeFilter>(); allAuthors.TypeName = \"Author\"; Read also datasource / data stream List of all EAV Data Sources query / visual query Demo App and further links You should find some examples in this demo App Demo App with examples for most DataSources History Introduced in EAV 3.x, 2sxc ? API Documentation Inheritance System.Object HasLog DataSourceBase EntityTypeFilter Implements IDataSource IAppIdentity IZoneIdentity IAppIdentityLight ICacheKey ICacheExpiring ITimestamped ICanPurgeListCache IHasLog IDataTarget Inherited Members DataSourceBase.Name DataSourceBase.CacheRelevantConfigurations DataSourceBase.CachePartialKey DataSourceBase.CacheFullKey DataSourceBase.CacheTimestamp DataSourceBase.CacheChanged(Int64) DataSourceBase.AppId DataSourceBase.ZoneId DataSourceBase.Guid DataSourceBase.In DataSourceBase.Out DataSourceBase.Item[String] DataSourceBase.List DataSourceBase.Configuration DataSourceBase.Attach(IDataSource) DataSourceBase.Attach(String, IDataSource) DataSourceBase.Attach(String, IDataStream) DataSourceBase.PurgeList(Boolean) HasLog.Log HasLog.InitLog(String, ILog, String) HasLog.InitLog(String, ILog, String, CodeRef) Namespace : ToSic.Eav.DataSources Assembly : ToSic.Eav.DataSources.dll Syntax [PublicApi_Stable_ForUseInYourCode] [VisualQuery(GlobalName = \"ToSic.Eav.DataSources.EntityTypeFilter, ToSic.Eav.DataSources\", Type = DataSourceType.Filter, DynamicOut = false, NiceName = \"ContentType-Filter\", ExpectsDataOfType = \"|Config ToSic.Eav.DataSources.EntityTypeFilter\", HelpLink = \"https://r.2sxc.org/DsTypeFilter\")] public class EntityTypeFilter : DataSourceBase, IDataSource, IAppIdentity, IZoneIdentity, IAppIdentityLight, ICacheInfo, ICacheKey, ICacheExpiring, ITimestamped, ICanPurgeListCache, IHasLog, IDataTarget Remarks Technically many things could just identify the app they belong to, and let the system look up the zone. But this would be inefficient, so for optimization, many items identify themselves with both the app and zone Ids Properties | Improve this Doc View Source TypeName The name of the type to filter for. Either the normal name or the 'StaticName' which is usually a GUID. Declaration public string TypeName { get; set; } Property Value Type Description System.String Implements IDataSource IAppIdentity IZoneIdentity IAppIdentityLight ICacheKey ICacheExpiring ITimestamped ICanPurgeListCache IHasLog IDataTarget"
  },
  "api/dot-net/ToSic.Eav.DataSources.Queries.QueryDefinition.html": {
    "href": "api/dot-net/ToSic.Eav.DataSources.Queries.QueryDefinition.html",
    "title": "Class QueryDefinition | 2sxc and EAV 10",
    "keywords": "Class QueryDefinition This contains the structure / definition of a query, which was originally stored in an IEntity Inheritance System.Object EntityBasedType EntityBasedWithLog QueryDefinition Implements IEntityBasedType IEntityWrapper IHasLog Inherited Members EntityBasedWithLog.Log EntityBasedType.Entity EntityBasedType.Title EntityBasedType.Id EntityBasedType.Guid EntityBasedType.Get<T>(String, T) Namespace : ToSic.Eav.DataSources.Queries Assembly : ToSic.Eav.DataSources.dll Syntax [InternalApi_DoNotUse_MayChangeWithoutNotice(\"this is just fyi\")] public class QueryDefinition : EntityBasedWithLog, IEntityBasedType, IEntityWrapper, IHasLog Fields | Improve this Doc View Source AppId The appid inside which the query will run, not where it is stored! This can differ, because certain global queries (stored in the global app) will run in a specific app - for example to retrieve all ContentTypes of that app. Declaration public int AppId Field Value Type Description System.Int32 | Improve this Doc View Source ParamRegex Regex to detect key=value. Keys must always be the first thing optionally followed by a = and then anything till a newline. Anything that doesn't match will be ignored. Comments should start with a // Declaration public static Regex ParamRegex Field Value Type Description System.Text.RegularExpressions.Regex Properties | Improve this Doc View Source Connections Connections used in the query to map various DataSource Out-Streams to various other DataTarget In-Streams Declaration public IList<Connection> Connections { get; } Property Value Type Description System.Collections.Generic.IList < Connection > | Improve this Doc View Source Params The param-dictionary used for the LookUp. All keys will be available in the token [Params:key] Declaration public IDictionary<string, string> Params { get; } Property Value Type Description System.Collections.Generic.IDictionary < System.String , System.String > | Improve this Doc View Source ParamsLookUp The ILookUp for the params of this query - based on the Params. Declaration public ILookUp ParamsLookUp { get; } Property Value Type Description ILookUp Always returns a valid ILookup, even if no params found. | Improve this Doc View Source ParamsRaw The raw Params used in this query, as stored in the IEntity Declaration public string ParamsRaw { get; } Property Value Type Description System.String | Improve this Doc View Source Parts The parts of the query Declaration public List<QueryPartDefinition> Parts { get; } Property Value Type Description System.Collections.Generic.List < QueryPartDefinition > | Improve this Doc View Source TestParameters The test parameters as stored in the IEntity Declaration public string TestParameters { get; } Property Value Type Description System.String Methods | Improve this Doc View Source Reset() Will reset all the parameters so you can run the query again with different parameters. Declaration public void Reset() Implements IEntityBasedType IEntityWrapper IHasLog"
  },
  "api/dot-net/ToSic.Eav.DataSources.System.Zones.html": {
    "href": "api/dot-net/ToSic.Eav.DataSources.System.Zones.html",
    "title": "Class Zones | 2sxc and EAV 10",
    "keywords": "Class Zones A DataSource that gets all zones in the system. Inheritance System.Object HasLog DataSourceBase Zones Implements IDataSource IAppIdentity IZoneIdentity IAppIdentityLight ICacheKey ICacheExpiring ITimestamped ICanPurgeListCache IHasLog IDataTarget Inherited Members DataSourceBase.Name DataSourceBase.CacheRelevantConfigurations DataSourceBase.CachePartialKey DataSourceBase.CacheFullKey DataSourceBase.CacheTimestamp DataSourceBase.CacheChanged(Int64) DataSourceBase.AppId DataSourceBase.ZoneId DataSourceBase.Guid DataSourceBase.In DataSourceBase.Out DataSourceBase.Item[String] DataSourceBase.List DataSourceBase.Configuration DataSourceBase.Attach(IDataSource) DataSourceBase.Attach(String, IDataSource) DataSourceBase.Attach(String, IDataStream) DataSourceBase.PurgeList(Boolean) HasLog.Log HasLog.InitLog(String, ILog, String) HasLog.InitLog(String, ILog, String, CodeRef) Namespace : ToSic.Eav.DataSources.System Assembly : ToSic.Eav.Apps.dll Syntax [InternalApi_DoNotUse_MayChangeWithoutNotice] [VisualQuery(GlobalName = \"ToSic.Eav.DataSources.System.Zones, ToSic.Eav.Apps\", Type = DataSourceType.Source, Difficulty = DifficultyBeta.Advanced, DynamicOut = false, PreviousNames = new string[]{\"ToSic.Eav.DataSources.System.Zones, ToSic.Eav.Apps\", \"ToSic.Eav.DataSources.Zones, ToSic.Eav.Apps\"}, HelpLink = \"https://github.com/2sic/2sxc/wiki/DotNet-DataSource-Zones\")] public sealed class Zones : DataSourceBase, IDataSource, IAppIdentity, IZoneIdentity, IAppIdentityLight, ICacheInfo, ICacheKey, ICacheExpiring, ITimestamped, ICanPurgeListCache, IHasLog, IDataTarget Remarks Technically many things could just identify the app they belong to, and let the system look up the zone. But this would be inefficient, so for optimization, many items identify themselves with both the app and zone Ids Properties | Improve this Doc View Source LogId Declaration public override string LogId { get; } Property Value Type Description System.String Overrides ToSic.Eav.DataSources.DataSourceBase.LogId Implements IDataSource IAppIdentity IZoneIdentity IAppIdentityLight ICacheKey ICacheExpiring ITimestamped ICanPurgeListCache IHasLog IDataTarget"
  },
  "api/dot-net/ToSic.Eav.LookUp.LookUpInMetadata.html": {
    "href": "api/dot-net/ToSic.Eav.LookUp.LookUpInMetadata.html",
    "title": "Class LookUpInMetadata | 2sxc and EAV 10",
    "keywords": "Class LookUpInMetadata LookUp things from metadata. This uses EAV Metadata system and will look up Metadata for something. As of now it's hardwired to look up Metadata of Entities. Read more about this in LookUp & LookUpEngine Inheritance System.Object LookUpBase LookUpIn < IEntity > LookUpInEntity LookUpInMetadata Implements ILookUp Inherited Members LookUpIn<IEntity>.Data LookUpBase.Name LookUpBase.Get(String) LookUpBase.Format(Boolean) LookUpBase.Format(DateTime) Namespace : ToSic.Eav.LookUp Assembly : ToSic.Eav.Core.dll Syntax [PublicApi_Stable_ForUseInYourCode] public class LookUpInMetadata : LookUpInEntity, ILookUp Constructors | Improve this Doc View Source LookUpInMetadata(String, Guid, IMetadataSource) Constructs the object with pre-filled parameters. It won't access the entity yet, because it's possible that the data-source wouldn't be ready yet. The access to the entity will only occur if it's really needed. Declaration [Obsolete(\"Should not be used, as it doesn't have dimensions included.\")] public LookUpInMetadata(string name, Guid objectId, IMetadataSource metaDataSource) Parameters Type Name Description System.String name Name of the PropertyAccess, e.g. PipelineSettings System.Guid objectId EntityGuid of the Entity to get assigned Entities of IMetadataSource metaDataSource DataSource that provides MetaData | Improve this Doc View Source LookUpInMetadata(String, IEntity, String[]) Alternate constructor where the entity with attached metadata is already known. The attached metadata will be used as source for the look-up Declaration public LookUpInMetadata(string name, IEntity entityWithMetadata, string[] dimensions) Parameters Type Name Description System.String name Source name IEntity entityWithMetadata Entity whose metadata we'll use System.String [] dimensions language / dimension data for lookup Methods | Improve this Doc View Source Get(String, String) Special lookup command with format-provider. Declaration public override string Get(string key, string format) Parameters Type Name Description System.String key System.String format Returns Type Description System.String Overrides LookUpInEntity.Get(String, String) Implements ILookUp"
  },
  "api/dot-net/ToSic.Eav.LookUp.LookUpInNameValueCollection.html": {
    "href": "api/dot-net/ToSic.Eav.LookUp.LookUpInNameValueCollection.html",
    "title": "Class LookUpInNameValueCollection | 2sxc and EAV 10",
    "keywords": "Class LookUpInNameValueCollection Look-Up helper to get something from a standard .net NameValueCollection. Read more about this in LookUp & LookUpEngine Inheritance System.Object LookUpBase LookUpInNameValueCollection Implements ILookUp Inherited Members LookUpBase.Name LookUpBase.Get(String) LookUpBase.Format(Boolean) LookUpBase.Format(DateTime) Namespace : ToSic.Eav.LookUp Assembly : ToSic.Eav.Core.dll Syntax [PublicApi_Stable_ForUseInYourCode] public class LookUpInNameValueCollection : LookUpBase, ILookUp Constructors | Improve this Doc View Source LookUpInNameValueCollection(String, NameValueCollection) Declaration public LookUpInNameValueCollection(string name, NameValueCollection list) Parameters Type Name Description System.String name System.Collections.Specialized.NameValueCollection list Methods | Improve this Doc View Source Get(String, String) Gets a value by Name/key and tries to format it in a special way (like for dates) Declaration public override string Get(string key, string format) Parameters Type Name Description System.String key Name of the Property System.String format Format String Returns Type Description System.String Overrides LookUpBase.Get(String, String) Implements ILookUp"
  },
  "api/dot-net/ToSic.Sxc.Context.ICmsContext.html": {
    "href": "api/dot-net/ToSic.Sxc.Context.ICmsContext.html",
    "title": "Interface ICmsContext | 2sxc and EAV 10",
    "keywords": "Interface ICmsContext This is the runtime context of your code in the CMS. It can tell you about the site, page, module etc. that you're on. Note that it it Platform Agnostic so it's the same on Dnn, Oqtane etc. CMS Context in your Code All your Razor and WebApi code will have a property CmsContext which provides you information about the environment you're running in. Here's a Code Snippet for Razor, showing you what page etc. your code is running on: ModuleId: @CmsContext.Module.Id History Added in 2sxc 11.11 Namespace : ToSic.Sxc.Context Assembly : ToSic.Sxc.dll Syntax [PublicApi] public interface ICmsContext Properties | Improve this Doc View Source Culture Information about languages / culture of the current request Declaration ICmsCulture Culture { get; } Property Value Type Description ICmsCulture | Improve this Doc View Source Module Information about the Module / Container which holds an 2sxc content block in the CMS Declaration ICmsModule Module { get; } Property Value Type Description ICmsModule | Improve this Doc View Source Page Information about the Page (called Tab in DNN) Declaration ICmsPage Page { get; } Property Value Type Description ICmsPage | Improve this Doc View Source Platform Information about the platform that's currently running. Declaration ICmsPlatform Platform { get; } Property Value Type Description ToSic.Sxc.Context.ICmsPlatform | Improve this Doc View Source Site Information about the Site (called Portal in DNN) Declaration ICmsSite Site { get; } Property Value Type Description ICmsSite | Improve this Doc View Source User Information about the current user Declaration ICmsUser User { get; } Property Value Type Description ICmsUser"
  },
  "how-to/dynamic-code/use-named-parameters.html": {
    "href": "how-to/dynamic-code/use-named-parameters.html",
    "title": "Convention: Named Parameters | 2sxc and EAV 10",
    "keywords": "Convention: Named Parameters This document has been moved to NetCo Convention: Named Parameters"
  },
  "how-to/dynamic-code/errors/dynamicentity-not-be-found.html": {
    "href": "how-to/dynamic-code/errors/dynamicentity-not-be-found.html",
    "title": "Error: The type or namespace name 'DynamicEntity' could not be found | 2sxc and EAV 10",
    "keywords": "Error: The type or namespace name 'DynamicEntity' could not be found This document has been moved to NetCo Error: The type or namespace name 'DynamicEntity' could not be found"
  },
  "how-to/dotnet-razor-csharp-overview.html": {
    "href": "how-to/dotnet-razor-csharp-overview.html",
    "title": "DotNet / C# / Razor API Documentation for DNN / 2sxc | 2sxc and EAV 10",
    "keywords": "DotNet / C# / Razor API Documentation for DNN / 2sxc This page has moved to C#, Razor & Dynamic Code"
  },
  "how-to/dynamic-code/object-app.html": {
    "href": "how-to/dynamic-code/object-app.html",
    "title": "App / object in Razor | 2sxc and EAV 10",
    "keywords": "App / @App object in Razor This document has been moved to App / object Dynamic Code"
  },
  "how-to/dynamic-code/object-data.html": {
    "href": "how-to/dynamic-code/object-data.html",
    "title": "in Razor Template | 2sxc and EAV 10",
    "keywords": "@Data in Razor Template This document has been moved to Data / in Dynamic Code"
  },
  "how-to/dynamic-code/object-dnn.html": {
    "href": "how-to/dynamic-code/object-dnn.html",
    "title": "Link / Object in Razor / .net | 2sxc and EAV 10",
    "keywords": "Link / @Dnn Object in Razor / .net This document has been moved to Dnn / Object in Dynamic Code"
  },
  "how-to/dynamic-code/object-link.html": {
    "href": "how-to/dynamic-code/object-link.html",
    "title": "Link / Object in Razor / .net | 2sxc and EAV 10",
    "keywords": "Link / @Link Object in Razor / .net This document has been moved to Link / Object in Dynamic Code"
  },
  "how-to/dynamic-code/errors/linq-cannot-use-lambda.html": {
    "href": "how-to/dynamic-code/errors/linq-cannot-use-lambda.html",
    "title": "Error Cannot use a lambda expression | 2sxc and EAV 10",
    "keywords": "Error Cannot use a lambda expression This document has been moved to NetCo Error Cannot use a lambda expression"
  },
  "how-to/external/dotnet-external-use.html": {
    "href": "how-to/external/dotnet-external-use.html",
    "title": "Use 2sxc Instances or App-Data from External C# Code | 2sxc and EAV 10",
    "keywords": "Use 2sxc Instances or App-Data from External C# Code Moved to Use 2sxc Instances or App-Data from External C# Code"
  },
  "how-to/output/assets.html": {
    "href": "how-to/output/assets.html",
    "title": "Moved to | 2sxc and EAV 10",
    "keywords": "Moved to Optimizing Template Assets / Client Dependencies (JS & CSS)"
  },
  "how-to/razor/edit.toolbar.html": {
    "href": "how-to/razor/edit.toolbar.html",
    "title": "and Methods in Razor / .net | 2sxc and EAV 10",
    "keywords": "@Edit.TagToolbar and @Edit.Toolbar Methods in Razor / .net This document has been moved to NetCo and Methods in Razor / .net"
  },
  "how-to/razor/organize-code.html": {
    "href": "how-to/razor/organize-code.html",
    "title": "How To Organize your Code in Razor | 2sxc and EAV 10",
    "keywords": "How To Organize your Code in Razor This document has been moved to How To Organize your Code in Razor"
  },
  "web-api/help-admin-ui-content-rest.html": {
    "href": "web-api/help-admin-ui-content-rest.html",
    "title": "Built-in WebApi Help in the Admin-Dialogs (new in v11.10) | 2sxc and EAV 10",
    "keywords": "Built-in WebApi Help in the Admin-Dialogs (new in v11.10) In 2sxc 11.10 we added dialogs in the Admin-UI so it's easier to figure out the endpoints. These UIs also show sample code and everything. Tip In 2sxc 11.10 this dialog was introduced for the Data section, and we'll add similar sections for Query and WebApi . History Introduced in 2sxc 11.10"
  },
  "web-api/query-rest-web-api.html": {
    "href": "web-api/query-rest-web-api.html",
    "title": "Query REST Web API | 2sxc and EAV 10",
    "keywords": "Query REST Web API <!-- Data Highlights --> <!-- ADAM --> <!-- Server --> <!-- Prepare --> <!-- Data Source --> <!-- Optimzers --> <!-- Process / Awesomize --> <!-- Libraries --> <!-- data formats --> <!-- Browser --> <!-- Frameworks --> <!-- App show parts --> <!-- Interact parts --> <!-- Edit parts --> <!-- Edit UI parts --> <!-- SPA parts --> <!-- Custom highlight boxes - can be controlled by in-page CSS --> you are here (click to zoom) - discover the stack .context-box-summary .browser-interact, .context-box-summary .process-headless { visibility: visible; } Every Visual Query you create has a REST URL. If you set the permissions, you can then read from the Query through REST. You can also pass query-parameters in the URL. Queries are Read APIs. The Query endpoint can be accessed on .../app/auto/query/[your-query-name] when you're accessing a query of the current App (from a dnn-page with this module), as then 2sxc uses auto-detect .../app/[app-folder]/query/[your-query-name] using this endpoint from external (other module, other page, other website) as then auto-detect can't work. Note that Query endpoints only support the http-verb GET. Setting Security querying a query requires read-permissions on that query TODO: CONTINUE HERE History TODO Introduced Content-REST API in 2sxc 5.x Enhanced with Polymorph Editions in 2sxc 9.35 (allowing subfolder/api)"
  },
  "net-code/errors/ientity-not-found.html": {
    "href": "net-code/errors/ientity-not-found.html",
    "title": "Error IEntity does not exist in the Namespace | 2sxc and EAV 10",
    "keywords": "Error IEntity does not exist in the Namespace If you see an error like this: error CS0234: The type or namespace name 'IEntity' does not exist in the namespace 'ToSic.Eav It usually means that you have code using IEntity which had to be moved to another namespace for consistency. We're sorry about the breaking change. Background: IEntity was moved To create the public documentation we had to make sure our API was consistent, and IEntity was one of the exceptions. Before 2sxc 10.20 it was in the namespace ToSic.Eav and later in ToSic.Eav.Interfaces . We standardized it now to ToSic.Eav.Data so the full name is ToSic.Eav.Data.IEntity . Solution: Change the namespace Your code probably has a @using ToSic.Eav or @using ToSic.Eav.Interfaces . You should change this to @using ToSic.Eav.Data; And everything should work."
  },
  "net-code/errors/index.html": {
    "href": "net-code/errors/index.html",
    "title": "Solving typical Errors in Dynamic Code | 2sxc and EAV 10",
    "keywords": "Solving typical Errors in Dynamic Code Here we strive to provide you with quick help to solve common problems in your dynamic code."
  },
  "api/index.html": {
    "href": "api/index.html",
    "title": "PLACEHOLDER | 2sxc and EAV 10",
    "keywords": "PLACEHOLDER TODO: Add .NET projects to src folder and run docfx to generate a REAL API Documentation !"
  },
  "net-code/dynamic-code/get-service.html": {
    "href": "net-code/dynamic-code/get-service.html",
    "title": "GetService<T>() Command new in v11.11 | 2sxc and EAV 10",
    "keywords": "GetService<T>() Command new in v11.11 If you want to do advanced stuff, you will want to ask for other global Services to help your code. 2sxc uses Depedency Injection to do this. Use GetService<T>() to get this service. ‚ö° The official API docs . Discover More in the Razor Tutorials We have an rich series of Razor tutorials . You should really check them out üëç. Also Read TODO: These docs are incomplete, as the feature is still new. History Introduced in 2sxc 11.11"
  },
  "how-to/debug/index.html": {
    "href": "how-to/debug/index.html",
    "title": "Debugging 2sxc | 2sxc and EAV 10",
    "keywords": "Debugging 2sxc Moved to 2sxc Insights for Debugging Server-Code"
  },
  "how-to/dynamic-code/as-dynamic.html": {
    "href": "how-to/dynamic-code/as-dynamic.html",
    "title": "AsDynamic(...) - Magic Objects | 2sxc and EAV 10",
    "keywords": "AsDynamic(...) - Magic Objects This document has been moved to AsDynamic(...) - Magic Objects"
  },
  "how-to/dynamic-code/as-list.html": {
    "href": "how-to/dynamic-code/as-list.html",
    "title": "AsList(...) - Magic Lists | 2sxc and EAV 10",
    "keywords": "AsList(...) - Magic Lists This document has been moved to AsList(...) - Magic Lists"
  },
  "how-to/dynamic-code/dynamic-entity.html": {
    "href": "how-to/dynamic-code/dynamic-entity.html",
    "title": "How to Use a Dynamic Entity | 2sxc and EAV 10",
    "keywords": "How to Use a Dynamic Entity This document has been moved to How to Use a Dynamic Entity"
  },
  "how-to/dynamic-code/entity.html": {
    "href": "how-to/dynamic-code/entity.html",
    "title": "IEntity / Entity Content-Item | 2sxc and EAV 10",
    "keywords": "IEntity / Entity Content-Item This document has been moved to Dynamic Data"
  },
  "api/dot-net/ToSic.Sxc.Data.html": {
    "href": "api/dot-net/ToSic.Sxc.Data.html",
    "title": "Namespace ToSic.Sxc.Data | 2sxc and EAV 10",
    "keywords": "Namespace ToSic.Sxc.Data The dynamic data system used in 2sxc. It's primary purpose is to ensure that you can easily use dynamic objects to write templates, tokens and more. we have two different topics covered: Dynamic Entities to simplify code using IEntity objects - IDynamicEntity and DynamicEntity Dynamic Jackets to simplify code using JSON - DynamicJacket s and DynamicJacketList s Classes DynamicEntity A dynamic entity object - the main object you use when templating things in RazorComponent objects Note that it will provide many things not listed here, usually things like .Image , .FirstName etc. based on your ContentType. DynamicEntityWithList This is a List of IDynamicEntity , which also behaves as an IDynamicEntity itself. So if it has any elements you can enumerate it (foreach). You can also do things like .EntityId or .SomeProperty just like a DynamicEntity. DynamicJacket Case insensitive dynamic read-object for JSON. Used in various cases where you start with JSON and want to provide the contents to custom code without having to mess with JS/C# code style differences. You will usually do things like AsDynamic(jsonString).FirstName etc. DynamicJacketBase<T> Base class for DynamicJackets. You won't use this, just included in the docs. To check if something is an array or an object, use \"IsArray\" DynamicJacketList This is a DynamicJacket for JSON arrays. You can enumerate through it. Interfaces IDynamicEntity This is a wrapper for IEntity objects. It provides nicer access to underlying properties and automatically handles things like multi-language etc. The underlying IEntity IEntity is in the Entity property. Normally you will use it without caring about these internals. Please check @HowTo.DynamicCode.DynamicEntity"
  },
  "api/dot-net/ToSic.Eav.Data.IAttribute.html": {
    "href": "api/dot-net/ToSic.Eav.Data.IAttribute.html",
    "title": "Interface IAttribute | 2sxc and EAV 10",
    "keywords": "Interface IAttribute Represents an Attribute with Values - without knowing what data type is in the value. Usually we'll extend this and use IAttribute<T> instead. Inherited Members IAttributeBase.Name IAttributeBase.Type IAttributeBase.ControlledType Namespace : ToSic.Eav.Data Assembly : ToSic.Eav.Core.dll Syntax [PublicApi_Stable_ForUseInYourCode] public interface IAttribute : IAttributeBase Remarks We recommend you read about the Data Models in the EAV Properties | Improve this Doc View Source Values Gets a list of all IValue s of this Entity's Attribute. To get the typed objects, use the Typed Declaration IList<IValue> Values { get; set; } Property Value Type Description System.Collections.Generic.IList < IValue >"
  },
  "api/dot-net/ToSic.Eav.Data.Language.html": {
    "href": "api/dot-net/ToSic.Eav.Data.Language.html",
    "title": "Class Language | 2sxc and EAV 10",
    "keywords": "Class Language Represents a Dimension / Language Assignment Inheritance System.Object Language Implements ILanguage IDimension Namespace : ToSic.Eav.Data Assembly : ToSic.Eav.Core.dll Syntax [PublicApi_Stable_ForUseInYourCode] public class Language : ILanguage, IDimension Properties | Improve this Doc View Source DimensionId Gets the internal DimensionId as it is stored in the DB. This is only used for scenarios where the dimensions are defined in relational data. Declaration public int DimensionId { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source Key Gets the dimension Key. For languages it's usually values like en-US or de-DE Declaration public string Key { get; set; } Property Value Type Description System.String | Improve this Doc View Source ReadOnly Gets whether Dimension is assigned read only. This affects the UI, so that the value cannot be edited in these dimensions. Declaration public bool ReadOnly { get; set; } Property Value Type Description System.Boolean Implements ILanguage IDimension"
  },
  "api/dot-net/ToSic.Eav.LookUp.LookUpIn-1.html": {
    "href": "api/dot-net/ToSic.Eav.LookUp.LookUpIn-1.html",
    "title": "Class LookUpIn<T> | 2sxc and EAV 10",
    "keywords": "Class LookUpIn<T> Inheritance System.Object LookUpBase LookUpIn<T> LookUpInEntity Implements ILookUp Inherited Members LookUpBase.Name LookUpBase.Get(String, String) LookUpBase.Get(String) LookUpBase.Format(Boolean) LookUpBase.Format(DateTime) Namespace : ToSic.Eav.LookUp Assembly : ToSic.Eav.Core.dll Syntax [PublicApi_Stable_ForUseInYourCode] public abstract class LookUpIn<T> : LookUpBase, ILookUp Type Parameters Name Description T Constructors | Improve this Doc View Source LookUpIn(T, String) Declaration protected LookUpIn(T data, string name = \"source without name\") Parameters Type Name Description T data System.String name Properties | Improve this Doc View Source Data Declaration public T Data { get; protected set; } Property Value Type Description T Implements ILookUp"
  },
  "api/dot-net/ToSic.Sxc.Blocks.Purpose.html": {
    "href": "api/dot-net/ToSic.Sxc.Blocks.Purpose.html",
    "title": "Enum Purpose | 2sxc and EAV 10",
    "keywords": "Enum Purpose These are the purposes of a block as it's being built. It can be built to generate a web-view, juts for indexing or possibly also for json publishing. Namespace : ToSic.Sxc.Blocks Assembly : ToSic.Sxc.dll Syntax [PublicApi_Stable_ForUseInYourCode] public enum Purpose Fields Name Description IndexingForSearch The purpose is for the search-indexer to build the index. PublishData The purpose is to publish data as a JSON stream. This is a special use case and not documented well ATM. WebView This is a normal use case, web-view."
  },
  "api/dot-net/ToSic.Sxc.Dnn.DataSources.DnnSql.html": {
    "href": "api/dot-net/ToSic.Sxc.Dnn.DataSources.DnnSql.html",
    "title": "Class DnnSql | 2sxc and EAV 10",
    "keywords": "Class DnnSql Retrieves data from SQL, specifically using the DNN Connection String Data Source: DnnSql The DnnSql DataSource is part of the Standard DNN Data Sources . It lets you use data from the DNN SQL databases as if they were entities. This is what it looks like: How to use Internally the DnnSqlDataSource is exactly the same as the Sql DataSource just with fewer options, because you cannot choose most of the settings. Please consult the Sql DataSource documentation to see how you can use it. We recommend to use the Visual Query where possible, as it's easier to understand and is identical for C# and JavaScript. It's also better because it separates data-retrieval from visualization. Read also datasource / data stream List of all EAV Data Sources query / visual query Demo App and further links You should find some examples in this demo App Demo App with examples for most DataSources History Introduced in EAV 3.x, in 2sxc ? API Documentation Inheritance System.Object HasLog DataSourceBase ExternalData Sql DnnSql Implements IDataSource IAppIdentity IZoneIdentity IAppIdentityLight ICacheKey ICacheExpiring ITimestamped ICanPurgeListCache IHasLog IDataTarget Inherited Members Sql.ConnectionStringName Sql.ConnectionString Sql.SelectCommand Sql.ContentType Sql.TitleField Sql.EntityIdField ExternalData.CacheTimestamp DataSourceBase.Name DataSourceBase.CacheRelevantConfigurations DataSourceBase.CachePartialKey DataSourceBase.CacheFullKey DataSourceBase.CacheChanged(Int64) DataSourceBase.AppId DataSourceBase.ZoneId DataSourceBase.Guid DataSourceBase.In DataSourceBase.Out DataSourceBase.Item[String] DataSourceBase.List DataSourceBase.Configuration DataSourceBase.Attach(IDataSource) DataSourceBase.Attach(String, IDataSource) DataSourceBase.Attach(String, IDataStream) DataSourceBase.PurgeList(Boolean) HasLog.Log HasLog.InitLog(String, ILog, String) HasLog.InitLog(String, ILog, String, CodeRef) Namespace : ToSic.Sxc.Dnn.DataSources Assembly : ToSic.Sxc.Dnn.dll Syntax [PublicApi_Stable_ForUseInYourCode] [VisualQuery(GlobalName = \"ToSic.Sxc.Dnn.DataSources.DnnSql, ToSic.Sxc.Dnn\", Type = DataSourceType.Source, DynamicOut = false, Icon = \"database\", PreviousNames = new string[]{\"ToSic.SexyContent.DataSources.DnnSqlDataSource, ToSic.SexyContent\", \"ToSic.SexyContent.Environment.Dnn7.DataSources.DnnSqlDataSource, ToSic.SexyContent\"}, HelpLink = \"https://github.com/2sic/2sxc/wiki/DotNet-DataSource-DnnSqlDataSource\", ExpectsDataOfType = \"|Config ToSic.SexyContent.DataSources.DnnSqlDataSource\")] public class DnnSql : Sql, IDataSource, IAppIdentity, IZoneIdentity, IAppIdentityLight, ICacheInfo, ICacheKey, ICacheExpiring, ITimestamped, ICanPurgeListCache, IHasLog, IDataTarget Constructors | Improve this Doc View Source DnnSql() Declaration public DnnSql() Implements IDataSource IAppIdentity IZoneIdentity IAppIdentityLight ICacheKey ICacheExpiring ITimestamped ICanPurgeListCache IHasLog IDataTarget"
  },
  "api/dot-net/ToSic.Sxc.Search.html": {
    "href": "api/dot-net/ToSic.Sxc.Search.html",
    "title": "Namespace ToSic.Sxc.Search | 2sxc and EAV 10",
    "keywords": "Namespace ToSic.Sxc.Search The things here enable searching. They basically ensure that the CMS can ask for data to then index however the CMS wants to. Classes SearchIndexException Special search exception, so these exceptions can be handled in a special way if necessary. SearchItem A search item which is passed around before handed over to the indexing system Interfaces ISearchItem Defines an item in the search system - which is prepared by Sxc, and can be customized as needed"
  },
  "api/dot-net/ToSic.Eav.Caching.IAppsCache.html": {
    "href": "api/dot-net/ToSic.Eav.Caching.IAppsCache.html",
    "title": "Interface IAppsCache | 2sxc and EAV 10",
    "keywords": "Interface IAppsCache Marks the objects which are responsible for caching AppState in memory. This is a very powerful system ensuring performance and more. Namespace : ToSic.Eav.Caching Assembly : ToSic.Eav.Core.dll Syntax [InternalApi_DoNotUse_MayChangeWithoutNotice(\"this is just fyi\")] public interface IAppsCache Properties | Improve this Doc View Source Zones The list of zones, which internally contains the list of apps. Declaration IReadOnlyDictionary<int, Zone> Zones { get; } Property Value Type Description System.Collections.Generic.IReadOnlyDictionary < System.Int32 , Zone > Methods | Improve this Doc View Source Get(Int32) Retrieve an app from the cache Declaration AppState Get(int appId) Parameters Type Name Description System.Int32 appId App id if zone unknown. Returns Type Description AppState The AppState of the app. | Improve this Doc View Source Get(IAppIdentity) Retrieve an app from the cache Declaration AppState Get(IAppIdentity app) Parameters Type Name Description IAppIdentity app App identifier. Returns Type Description AppState The AppState of the app. | Improve this Doc View Source GetIdentity(Nullable<Int32>, Nullable<Int32>) Get/Resolve ZoneId and AppId for specified ZoneId and/or AppId. If both are null, default ZoneId with it's default App is returned. Declaration IAppIdentity GetIdentity(int? zoneId = default(int? ), int? appId = default(int? )) Parameters Type Name Description System.Nullable < System.Int32 > zoneId System.Nullable < System.Int32 > appId Returns Type Description IAppIdentity An IAppIdentity with the correct IDs | Improve this Doc View Source Has(IAppIdentity) Check if something is already in the cache Declaration bool Has(IAppIdentity app) Parameters Type Name Description IAppIdentity app App identifier. Returns Type Description System.Boolean | Improve this Doc View Source Load(IAppIdentity, String) Load an app into cache, specifying the primary language. This is used in scenarios, where the primary language cannot be auto-detected, so it's set explicitly. Declaration void Load(IAppIdentity app, string primaryLanguage) Parameters Type Name Description IAppIdentity app App identifier. System.String primaryLanguage Primary language, lower case. | Improve this Doc View Source Purge(IAppIdentity) Clean cache for specific Zone and App Declaration void Purge(IAppIdentity app) Parameters Type Name Description IAppIdentity app | Improve this Doc View Source PurgeZones() Clean entire global cache, which includes the List of Zones and Apps as well as all the apps. Declaration void PurgeZones() | Improve this Doc View Source Update(IAppIdentity, IEnumerable<Int32>, ILog) Tell the cache that an app has done a partial update. Only relevant for farm scenarios, where other nodes must be informed. Declaration AppState Update(IAppIdentity app, IEnumerable<int> entities, ILog log) Parameters Type Name Description IAppIdentity app App identifier. System.Collections.Generic.IEnumerable < System.Int32 > entities List of entities which need to be updates. ILog log Log object to log what's happening. Returns Type Description AppState The updated AppState or null, if it wasn't in the cache so didn't need updating."
  },
  "api/dot-net/ToSic.Eav.Data.EntityRelationship.html": {
    "href": "api/dot-net/ToSic.Eav.Data.EntityRelationship.html",
    "title": "Class EntityRelationship | 2sxc and EAV 10",
    "keywords": "Class EntityRelationship Represents a Relation between two entities, connecting a parent to a child. Inheritance System.Object EntityRelationship Namespace : ToSic.Eav.Data Assembly : ToSic.Eav.Core.dll Syntax [PublicApi_Stable_ForUseInYourCode] public class EntityRelationship Constructors | Improve this Doc View Source EntityRelationship(IEntity, IEntity) Initializes a new instance of the EntityRelationshipItem class. Declaration public EntityRelationship(IEntity parent, IEntity child) Parameters Type Name Description IEntity parent Parent Entity IEntity child Child Entity Properties | Improve this Doc View Source Child The child item, which is referenced by the parent Declaration public IEntity Child { get; } Property Value Type Description IEntity | Improve this Doc View Source Parent The parent item, which has a reference to the child Declaration public IEntity Parent { get; } Property Value Type Description IEntity"
  },
  "net-code/razor/organize-code.html": {
    "href": "net-code/razor/organize-code.html",
    "title": "How To Organize your Code in Razor | 2sxc and EAV 10",
    "keywords": "How To Organize your Code in Razor In simple scenarios you have some Razor files containing a bit of HTML and some code. As your solution grows, you'll want to organize your work better to ensure that you can maintain it. 2sxc offers various ways to do this: Use the @helper syntax in Razor Reuse a Partial-View Razor file with @RenderPage() You can have a shared razor file which is used as a library (v9) You can have a shared .cs file as a library (v10) You can split a Razor file into a Template and Code-Behind Discover More in the Razor Tutorials We have an rich series of Razor tutorials . You should really check them out üëç. Reuse Snippets with @helper in Razor Razor has a @helper syntax which allows you to create fragments and re-use them. Discover this in the tutorials . Reuse a Partial View with @RenderPage() Razor templates can include other razor files with more Razor code inside them, using RenderPage(...) . This is a standard asp.net function to render another Razor file where you need it. You usually use it to make small component Razor files which might just show a button or something, and then call that file. You can find examples in the tutorials Share a .cshtml File as Library of Sub-Templates When you have a lot of components it may be easier to create a library of @helper commands. This library is just a normal .cshtml file - usually in a folder called shared or something, and you can then call these snippets and helpers from all your template files. To use it, you need something like: @{ var helper = CreateInstance(\"_Helper.cshtml\"); } See examples in the tutorials Share a .cs File as Library Sometimes you want to share C# code which isn't meant for HTML-output. For example, a security check. You can do this using CreateInstance(...) . If you: need to share code with razor and Webapi don't need razor specific features like @helper You can create a .cs class file and share this across razor files AND WebAPI files. To use it, you need something like: @{ var helper = CreateInstance(\"_Helper.cs\"); } Tip The helper file should ideally inherit from ToSic.Sxc.Dnn.DynamicCode , in which case it will have have the same full APIs incl. the App and Content object just like the main file. See examples in the tutorials Razor Code-Behind If your Razor file is getting kind of large because of C# functions, best place it in a Razor Code-Behind . History RenderPage has always been part of Razor so part of 2sxc v2 CreateInstance for .cshtml was introduced ca. v6 CreateInstance for .cs was introduced in 2sxc v10.01 Code-Behind Introduced in 2sxc 11.0"
  },
  "net-code/razor/purpose.html": {
    "href": "net-code/razor/purpose.html",
    "title": "Property Purpose on a Razor page | 2sxc and EAV 10",
    "keywords": "Property Purpose on a Razor page To let your code know, if it's running to produce HTML or if it's running to fill the search-index. Discover More in the Razor Tutorials We have an rich series of Razor tutorials . You should really check them out üëç. How to use in most cases you'll use this within the CustomizeData event, in case you want to provide different data to the template than to the search. In most cases you'll also want to override CustomizeSearch . Note that it's of the type Purposes which is an enum containing WebView, IndexingForSearch, PublishData @using ToSic.Sxc.Blocks; @if(Purpose == Purposes.IndexingForSearch){ // code which should only run when indexing } Not run code, which can't run while indexing Sometimes you also have code which requires a user to be visiting a page - like a permission check. Since the indexer doesn't have an HTTP session or a user, this will fail. So you could do something like: @using ToSic.Sxc.Blocks; @if(Purpose != Purposes.IndexingForSearch){ // code which should only run when really viewing // like something if(userIsLoggedIn) { ... } } Demo App or further links Docs on 2sxc.org History 2sxc 10.20 - changed to Purpose from InstancePurpose - old code still works"
  },
  "api/dot-net/ToSic.Eav.Conversion.IStreamsTo-1.html": {
    "href": "api/dot-net/ToSic.Eav.Conversion.IStreamsTo-1.html",
    "title": "Interface IStreamsTo<T> | 2sxc and EAV 10",
    "keywords": "Interface IStreamsTo<T> Marks objects which can convert entire DataStreams or DataSources to another format. Usually used in serialization scenarios. Namespace : ToSic.Eav.Conversion Assembly : ToSic.Eav.WebApi.dll Syntax [InternalApi_DoNotUse_MayChangeWithoutNotice] public interface IStreamsTo<T> Type Parameters Name Description T Methods | Improve this Doc View Source Convert(IDataSource, IEnumerable<String>) Returns an converted IDataSource, but is serializable. Declaration Dictionary<string, IEnumerable<T>> Convert(IDataSource source, IEnumerable<string> streams = null) Parameters Type Name Description IDataSource source the source System.Collections.Generic.IEnumerable < System.String > streams names of streams to publish. if null, will return all streams Returns Type Description System.Collections.Generic.Dictionary < System.String , System.Collections.Generic.IEnumerable <T>> | Improve this Doc View Source Convert(IDataSource, String) Returns an converted IDataSource, but is serializable. Declaration Dictionary<string, IEnumerable<T>> Convert(IDataSource source, string streams) Parameters Type Name Description IDataSource source the source System.String streams names of streams to publish. if null, will return all streams Returns Type Description System.Collections.Generic.Dictionary < System.String , System.Collections.Generic.IEnumerable <T>> | Improve this Doc View Source Convert(IDataStream) Returns an converted IDataStream, but is serializable. Declaration IEnumerable<T> Convert(IDataStream stream) Parameters Type Name Description IDataStream stream the source Returns Type Description System.Collections.Generic.IEnumerable <T>"
  },
  "api/dot-net/ToSic.Eav.Data.IContentType.html": {
    "href": "api/dot-net/ToSic.Eav.Data.IContentType.html",
    "title": "Interface IContentType | 2sxc and EAV 10",
    "keywords": "Interface IContentType Represents a Content Type information (the schema) used for IEntity objects. Inherited Members IAppIdentityLight.AppId Namespace : ToSic.Eav.Data Assembly : ToSic.Eav.Core.dll Syntax [PublicApi_Stable_ForUseInYourCode] public interface IContentType : IAppIdentityLight, IHasMetadata Properties | Improve this Doc View Source Attributes Dictionary with all Attribute Definitions Declaration IList<IContentTypeAttribute> Attributes { get; set; } Property Value Type Description System.Collections.Generic.IList < IContentTypeAttribute > | Improve this Doc View Source ContentTypeId Get the id of the Content Type - you usually don't need this! Declaration int ContentTypeId { get; } Property Value Type Description System.Int32 | Improve this Doc View Source Description The content-type description Declaration string Description { get; } Property Value Type Description System.String | Improve this Doc View Source IsDynamic Determines if the data for this type is dynamic (spontaneously created) or real an EAV (split into sql-tables) or json somewhere To detect if it's just a global json-type, find out what repository the type is from (RepositoryType) Declaration bool IsDynamic { get; } Property Value Type Description System.Boolean | Improve this Doc View Source Item[String] A simple indexer to get an attribute Declaration IContentTypeAttribute this[string fieldName] { get; } Parameters Type Name Description System.String fieldName Property Value Type Description IContentTypeAttribute The IContentTypeAttribute of the field name | Improve this Doc View Source Metadata Get the metadata for this content-type Declaration ContentTypeMetadata Metadata { get; } Property Value Type Description ContentTypeMetadata Remarks The metadata is either already prepared, from the same app, or from a remote app | Improve this Doc View Source Name Gets the Display Name of the Content Type Declaration string Name { get; } Property Value Type Description System.String | Improve this Doc View Source RepositoryAddress Information / ID / URL to this content-type where it was stored in the repository Declaration string RepositoryAddress { get; } Property Value Type Description System.String | Improve this Doc View Source RepositoryType Information where the Content-Type was stored (file system, DB, etc.) Declaration RepositoryTypes RepositoryType { get; } Property Value Type Description ToSic.Eav.Repositories.RepositoryTypes | Improve this Doc View Source Scope Get the scope of the Content Type (like sections in a DB) Declaration string Scope { get; } Property Value Type Description System.String | Improve this Doc View Source StaticName Static name - can be a GUID or a system-term for special types Declaration string StaticName { get; } Property Value Type Description System.String Methods | Improve this Doc View Source Is(String) Check if this type is the same as a name given. Will check both the name and the static name Declaration bool Is(string name) Parameters Type Name Description System.String name Returns Type Description System.Boolean"
  },
  "api/dot-net/ToSic.Eav.Data.ValueTypes.html": {
    "href": "api/dot-net/ToSic.Eav.Data.ValueTypes.html",
    "title": "Enum ValueTypes | 2sxc and EAV 10",
    "keywords": "Enum ValueTypes Attribute Type Enum Namespace : ToSic.Eav.Data Assembly : ToSic.Eav.Core.dll Syntax [PublicApi_Stable_ForUseInYourCode] public enum ValueTypes Fields Name Description Boolean Boolean Attribute Type Custom Custom data-type - for custom serialization, will store string DateTime DateTime Attribute Type Empty Empty for titles etc. Entity Entity Attribute Type Hyperlink Hyperlink Attribute Type Number Number Attribute Type String String Attribute Type Undefined Used for unknown cases, where you would otherwise use null"
  },
  "api/dot-net/ToSic.Eav.Apps.App.html": {
    "href": "api/dot-net/ToSic.Eav.Apps.App.html",
    "title": "Class App | 2sxc and EAV 10",
    "keywords": "Class App A single-use app-object providing quick simple api to access name, folder, data, metadata etc. Inheritance System.Object HasLog AppBase App App Implements IHasLog IApp IAppIdentity IZoneIdentity IAppIdentityLight IHasMetadata IHasPermissions Inherited Members AppBase.ZoneId AppBase.AppId AppBase.Init(IAppIdentity, CodeRef, ILog) HasLog.Log HasLog.InitLog(String, ILog, String) HasLog.InitLog(String, ILog, String, CodeRef) Namespace : ToSic.Eav.Apps Assembly : ToSic.Eav.Apps.dll Syntax [PublicApi_Stable_ForUseInYourCode] public class App : AppBase, IHasLog, IApp, IAppIdentityWithPublishingState, IAppIdentity, IZoneIdentity, IAppIdentityLight, IHasMetadata, IHasPermissions Constructors | Improve this Doc View Source App(App.AppDependencies, String) Declaration public App(App.AppDependencies dependencies, string logName) Parameters Type Name Description ToSic.Eav.Apps.App.AppDependencies dependencies System.String logName Fields | Improve this Doc View Source AppConfiguration Declaration protected IEntity AppConfiguration Field Value Type Description IEntity | Improve this Doc View Source AppResources Declaration protected IEntity AppResources Field Value Type Description IEntity | Improve this Doc View Source AppSettings Declaration protected IEntity AppSettings Field Value Type Description IEntity Properties | Improve this Doc View Source AppGuid GUID of the App as string. Declaration public string AppGuid { get; } Property Value Type Description System.String The internal GUID of the app. | Improve this Doc View Source Data Data of the app Declaration public IAppData Data { get; } Property Value Type Description IAppData | Improve this Doc View Source Folder App Folder Declaration public string Folder { get; } Property Value Type Description System.String The folder as configured in the app configuration. | Improve this Doc View Source Hidden If the app should be hidden from the normal app-picker. Important to configure apps once and then hide from normal users. Declaration public bool Hidden { get; } Property Value Type Description System.Boolean The hidden-state as configured in the app configuration. | Improve this Doc View Source Metadata The app metadata - like settings, resources etc. Declaration public IMetadataOf Metadata { get; } Property Value Type Description IMetadataOf A metadata provider for the app | Improve this Doc View Source Name App Name Declaration public string Name { get; } Property Value Type Description System.String The name as configured in the app configuration. | Improve this Doc View Source Permissions Permissions of this app Declaration public IEnumerable<Permission> Permissions { get; } Property Value Type Description System.Collections.Generic.IEnumerable < Permission > | Improve this Doc View Source Query Accessor to queries. Use like: App.Query.Count App.Query.ContainsKey(...) App.Query[\"One Event\"].List Declaration public IDictionary<string, IQuery> Query { get; } Property Value Type Description System.Collections.Generic.IDictionary < System.String , IQuery > A dictionary with all queries. Internally the dictionary will not be built unless accessed. | Improve this Doc View Source ShowDrafts Declaration public bool ShowDrafts { get; } Property Value Type Description System.Boolean Methods | Improve this Doc View Source GetQuery(String) Declaration public Query GetQuery(string name) Parameters Type Name Description System.String name Returns Type Description Query | Improve this Doc View Source Init(IAppIdentity, Func<App, IAppDataConfiguration>, ILog) Declaration protected App Init(IAppIdentity appIdentity, Func<App, IAppDataConfiguration> buildConfiguration, ILog parentLog) Parameters Type Name Description IAppIdentity appIdentity System.Func < App , IAppDataConfiguration > buildConfiguration ILog parentLog Returns Type Description App | Improve this Doc View Source InitializeResourcesSettingsAndMetadata() Assign all kinds of metadata / resources / settings (App-Mode only) Declaration protected void InitializeResourcesSettingsAndMetadata() Implements IHasLog IApp IAppIdentity IZoneIdentity IAppIdentityLight IHasMetadata IHasPermissions"
  },
  "api/dot-net/ToSic.Eav.Apps.Zone.html": {
    "href": "api/dot-net/ToSic.Eav.Apps.Zone.html",
    "title": "Class Zone | 2sxc and EAV 10",
    "keywords": "Class Zone Contains all the basic infos about a Zone - usually cached Inheritance System.Object Zone Implements IZoneIdentity Namespace : ToSic.Eav.Apps Assembly : ToSic.Eav.Core.dll Syntax [InternalApi_DoNotUse_MayChangeWithoutNotice(\"this is just fyi\")] public class Zone : IZoneIdentity Constructors | Improve this Doc View Source Zone(Int32, Int32, Dictionary<Int32, String>, List<DimensionDefinition>) Declaration public Zone(int zoneId, int defAppId, Dictionary<int, string> apps, List<DimensionDefinition> languages) Parameters Type Name Description System.Int32 zoneId System.Int32 defAppId System.Collections.Generic.Dictionary < System.Int32 , System.String > apps System.Collections.Generic.List < DimensionDefinition > languages Properties | Improve this Doc View Source Apps All Apps in this Zone with Id and Name Declaration public Dictionary<int, string> Apps { get; } Property Value Type Description System.Collections.Generic.Dictionary < System.Int32 , System.String > | Improve this Doc View Source DefaultAppId AppId of the default App in this Zone Declaration public int DefaultAppId { get; } Property Value Type Description System.Int32 | Improve this Doc View Source Languages Languages available in this Zone Declaration public List<DimensionDefinition> Languages { get; } Property Value Type Description System.Collections.Generic.List < DimensionDefinition > | Improve this Doc View Source ZoneId ID of the zone (EAV Tenant) Declaration public int ZoneId { get; } Property Value Type Description System.Int32 The zone ID this thing belongs to Implements IZoneIdentity"
  },
  "api/dot-net/ToSic.Eav.Conversion.EntitiesToDictionary.html": {
    "href": "api/dot-net/ToSic.Eav.Conversion.EntitiesToDictionary.html",
    "title": "Class EntitiesToDictionary | 2sxc and EAV 10",
    "keywords": "Class EntitiesToDictionary A helper to serialize various combinations of entities, lists of entities etc Inheritance System.Object HasLog ToSic.Eav.Logging.HasLog < EntitiesToDictionaryBase > EntitiesToDictionaryBase EntitiesToDictionary DataToDictionary Implements IHasLog IEntitiesTo < System.Collections.Generic.Dictionary < System.String , System.Object >> IStreamsTo < System.Collections.Generic.Dictionary < System.String , System.Object >> Inherited Members EntitiesToDictionaryBase.ValueConverter EntitiesToDictionaryBase.WithGuid EntitiesToDictionaryBase.WithPublishing EntitiesToDictionaryBase.WithMetadataFor EntitiesToDictionaryBase.WithTitle EntitiesToDictionaryBase.ConfigureForAdminUse() EntitiesToDictionaryBase.Languages EntitiesToDictionaryBase.Convert(IEnumerable<IEntity>) EntitiesToDictionaryBase.Convert(IEntity) HasLog.Log HasLog.InitLog(String, ILog, String) HasLog.InitLog(String, ILog, String, CodeRef) Namespace : ToSic.Eav.Conversion Assembly : ToSic.Eav.WebApi.dll Syntax [PublicApi_Stable_ForUseInYourCode] public class EntitiesToDictionary : EntitiesToDictionaryBase, IHasLog<EntitiesToDictionaryBase>, IHasLog, IEntitiesTo<Dictionary<string, object>>, IStreamsTo<Dictionary<string, object>> Constructors | Improve this Doc View Source EntitiesToDictionary() Declaration public EntitiesToDictionary() Methods | Improve this Doc View Source Convert(IDataSource, IEnumerable<String>) Declaration public Dictionary<string, IEnumerable<Dictionary<string, object>>> Convert(IDataSource source, IEnumerable<string> streams = null) Parameters Type Name Description IDataSource source System.Collections.Generic.IEnumerable < System.String > streams Returns Type Description System.Collections.Generic.Dictionary < System.String , System.Collections.Generic.IEnumerable < System.Collections.Generic.Dictionary < System.String , System.Object >>> | Improve this Doc View Source Convert(IDataSource, String) Declaration public Dictionary<string, IEnumerable<Dictionary<string, object>>> Convert(IDataSource source, string streams) Parameters Type Name Description IDataSource source System.String streams Returns Type Description System.Collections.Generic.Dictionary < System.String , System.Collections.Generic.IEnumerable < System.Collections.Generic.Dictionary < System.String , System.Object >>> | Improve this Doc View Source Convert(IDataStream) Declaration public IEnumerable<Dictionary<string, object>> Convert(IDataStream stream) Parameters Type Name Description IDataStream stream Returns Type Description System.Collections.Generic.IEnumerable < System.Collections.Generic.Dictionary < System.String , System.Object >> Implements IHasLog IEntitiesTo<T> IStreamsTo<T>"
  },
  "web-api/custom/custom-web-api-dotnet-saveinadam.html": {
    "href": "web-api/custom/custom-web-api-dotnet-saveinadam.html",
    "title": "SaveInAdam(...) Command in ApiController | 2sxc and EAV 10",
    "keywords": "SaveInAdam(...) Command in ApiController The SaveInAdam command helps your WebApi to upload files so they are in an ADAM container of an item. The API is documented here and on this page we'll explain how to use it. How to use Here's a simple example, taken from mobius forms SaveInAdam(stream: dataStream, fileName: fileNameInForm, contentType: \"Advertisement\", guid: guid, field: \"Images\"); Here's what the parameters are: stream contains a stream of bytes with the file fileName contain the file name contentType is the content-type of the entity we're saving to guid is the entity-guid which receives this item field is the field we're saving to Example The following example is also from mobius forms and assumes that the html form encoded the data in JavaScript for sending to the WebApi: // Save files to Adam var files = ((Newtonsoft.Json.Linq.JArray)contactFormRequest[\"Files\"]) .ToObject<IEnumerable<Dictionary<string, string>>>(); foreach(var file in files) { var data = Convert.FromBase64String((file[\"Encoded\"]).Split(',')[1]); SaveInAdam(stream: new MemoryStream(data), fileName: file[\"Name\"], contentType: type.Name, guid: guid, field: file[\"Field\"]); } Notes and Clarifications all parameters ( stream , fileName , ...) must be named by convention the uploaded files are placed in the container of the field... ...and not added as a link to the file, so you will usually use library fields the field must be a field of type hyperlink, library or wysiwyg, other fields cannot receive files Difference in Field-Library and Field-Link-Default Note that the form has two different ways the field can behave. In hyperlink-Library mode nothing is really stored in the field name, the UI will simply load all the files in a folder that belong to that field. SaveInAdam will simply add files to this folder, so the most common way to use it is that the entity will have a link-library field to browse one or more files uploaded. If you really only want 1 file to be uploaded, and want to put it into the field as if it's linked directly, then choose a hyperlink-default field. SaveInAdam will give you a IFile object which has an Id . Use that to create a file:72 kind of link and add it to data you just created. Read also, Demo App and further links You should find some code examples in these apps C# API Documentation of SaveInAdam Mobius Forms v2 in App Catalog Mobius Forms v2 on Github Blog Recipe for uploading into ADAM in your WebAPI History Introduced in 2sxc 9.30"
  },
  "net-code/external/dotnet-external-use.html": {
    "href": "net-code/external/dotnet-external-use.html",
    "title": "Use 2sxc Instances or App-Data from External C# Code | 2sxc and EAV 10",
    "keywords": "Use 2sxc Instances or App-Data from External C# Code Sometimes you want to leverage 2sxc to create a solution, provide data input etc. but want to output or re-use the data in your own Module, Skin, Script or something else. This is easy to do. Simple Example Imagine this was your C# code in your WebForms Code-Behind: // the app id var appId = 42; // create a simple app object to then access data var appSimple = ToSic.Sxc.Dnn.Factory.App(appId); // example getting all data of content type Tag var tags = appSimple.Data[\"Tag\"]; // example accessing a query var tagsSorted = appSimple.Query[\"Tags sorted\"]; // Creating an entity var vals = new Dictionary<string, object>(); vals.Add(\"Tag\", \"test-tag\"); vals.Add(\"Label\", \"Test Tag\"); App.Data.Create(\"Tag\", vals); Read also DNN Factory API To dive deeper, you must check the blog post History Introduced in 2sxc 08.03"
  },
  "net-code/razor/code-behind.html": {
    "href": "net-code/razor/code-behind.html",
    "title": "Razor Templates - Code-Behind | 2sxc and EAV 10",
    "keywords": "Razor Templates - Code-Behind 2sxc 11 introduces a new way to split out most of the C# code from the main template Razor file. We call this code-behind. Best watch the video to get the idea. You can also see a live demo in the DNN Tutorials . Discover More in the Razor Tutorials We have an rich series of Razor tutorials . You should really check them out üëç. How Code Behind Works Just create another file with the identical name as your main Razor file, but with .code.cshtml as the extension. So you'll then have something like: _My Message.cshtml (the Razor file) Inherits ToSic.Sxc.Dnn.RazorComponent _My Message.code.cshtml (the new code ) The code file looks just like a normal razor file. Must inherit from ToSic.Sxc.Dnn.RazorComponentCode . Here's an example of such a _My Message.code.cshtml : @inherits ToSic.Sxc.Dnn.RazorComponentCode @functions { public string Hello() { return \"Hello from inner code\"; } } @helper ShowDiv(string message) { <div>@message</div> } @helper AppName() { <div>App Name is: @App.Name</div> } This is automatically compiled for you and provided to the _My Message.cshtml on the object Code so you can write this code: @inherits ToSic.Sxc.Dnn.RazorComponent <h1>Demo Code Use</h1> <div @Edit.TagToolbar(Content)> Something in it: @Code.Hello() </div> @Code.ShowDiv(\"test helper!\") That's all there is to it üòâ Tip Why would you do this? The main reason is to keep template-html separate from most of the code. This is common when designers like to modify the html but don't like all that programming stuff. Events on Code Behind Files The code-behind also has same methods/events which are automatically called. These methods can be overriden CustomizeData() This has the same effect as overriding CustomizeData in the template file CustomizeSearch(Dictionary<string, List<ISearchItem>> searchInfos, IContainer moduleInfo, DateTime beginDate) This has the same effect as overriding CustomizeSearch in the template file Tip Why would you use this? These methods could always be created in the main Razor file, but it looks daunting to have so much code there. A typical CustomizeSearch is very technical and feels scary to people who just want to change the look and feel. Important: Passing Around Anonymous Objects One of the advanced things you may want to do is have helper functions looking up multiple things, and returning a complex object like this example in the code-behind: @inherits ToSic.Sxc.Dnn.RazorComponentCode @functions { public dynamic Hello() { return new { Title = \"title\", Message = \"msg\"}; } } Which is used like this @inherits ToSic.Sxc.Dnn.RazorComponent <h1>Demo Code Use</h1> <div @Edit.TagToolbar(Content)> @{ var hello = Code.Hello(); } Something in it: @hello.Title <br> </div> This works and is no big deal, but there are known cases where this breaks, usually with a message like somehing not found on object . The reason is bugs in the .net caching of compiled code, specifically if methods exists in various places with the same name. You can resolve this in 3 ways Restart iis (uncool) Rename the method (ok, bun not sexy) Return a typed object instead of untyped (recommended). In the above example, change to this: @inherits ToSic.Sxc.Dnn.RazorComponentCode @functions { public class TitleAndMessage { public string Title; public string Message; } public dynamic Hello() { return new TitleAndMessage { Title = \"title\", Message = \"msg\"}; } } History Introduced in 2sxc 11.0"
  },
  "how-to/razor/purpose.html": {
    "href": "how-to/razor/purpose.html",
    "title": "Property Purpose / InstancePurpose on a Razor page | 2sxc and EAV 10",
    "keywords": "Property Purpose / InstancePurpose on a Razor page This document has been moved to Property Purpose on a Razor page"
  },
  "web-api/custom/issue-http-response-message.html": {
    "href": "web-api/custom/issue-http-response-message.html",
    "title": "Common Issue: Missing HttpResponseMessage | 2sxc and EAV 10",
    "keywords": "Common Issue: Missing HttpResponseMessage The WebApi sometimes needs to return an HttpResponseMessage , for example to trigger redirects. In some cases you simply cannot get the code to run, with an error similar to this 2sxc Api Controller Finder: Error while selecting / compiling a controller for the request. Pls check the event-log and the code. See the inner exception for more details.\", \"ExceptionMessage\": \"[Some-Path]\\Portals\\0\\2sxc\\[Some-App]\\api\\InstallController.cs(23): error CS0012: The type 'System.Net.Http.HttpRequestMessage' is defined in an assembly that is not referenced. You must add a reference to assembly 'System.Net.Http, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.\", \"ExceptionType\": \"System.Web.HttpCompileException\", \"StackTrace\": \" at System.Web.Compilation.AssemblyBuilder.Compile() at System.Web.Compilation.BuildProvidersCompiler.PerformBuild() at System.Web.Compilation.BuildManager.CompileWebFile(VirtualPath virtualPath) at System.Web.Compilation.BuildManager.GetVPathBuildResultInternal(VirtualPath virtualPath, Boolean noBuild, Boolean allowCrossApp, Boolean allowBuildInPrecompile, Boolean throwIfNotFound, Boolean ensureIsUpToDate) at System.Web.Compilation.BuildManager.GetVPathBuildResultWithNoAssert(HttpContext context, VirtualPath virtualPath, Boolean noBuild, Boolean allowCrossApp, Boolean allowBuildInPrecompile, Boolean throwIfNotFound, Boolean ensureIsUpToDate) at System.Web.Compilation.BuildManager.GetVPathBuildResult(HttpContext context, VirtualPath virtualPath, Boolean noBuild, Boolean allowCrossApp, Boolean allowBuildInPrecompile, Boolean ensureIsUpToDate) at System.Web.Compilation.BuildManager.GetCompiledAssembly(String virtualPath) at ToSic.SexyContent.WebApi.AppApiControllerSelector.SelectController(HttpRequestMessage request) in C:\\Projects\\2SexyContent\\Web\\DesktopModules\\ToSIC_SexyContent\\Sxc WebApi\\AppApiControllerSelector.cs:line 77 The reason is that the compiler has a hard time figuring out where to locate this class. We believe it's because Dnn has gone through various .net versions and that makes these things a bit harder. The solution is to tell the Compiler that you're using System.Net.Http in the desired version. Add the add tag to the web.config in the location below: <configuration> <system.web> <compilation> <assemblies> <add assembly=\"System.Net.Http, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\" /> ... Note: you shouldn't add the whole block - it should just show you where it must go History Reported in 2017"
  },
  "net-code/dynamic-code/as-dynamic-string.html": {
    "href": "net-code/dynamic-code/as-dynamic-string.html",
    "title": "AsDynamic({ \"Some\": \"Json-String\"}) - Magic Objects | 2sxc and EAV 10",
    "keywords": "AsDynamic({ \"Some\": \"Json-String\"}) - Magic Objects 2sxc v10.20 introduced another cool helper. It takes any JSON string and gives you a dynamic object to use in your code. The most common use is in GPS fields, where the data is stored as {\"Lat\": 0.0, \"Long\": 0.0} . But you can use it for so much more. ‚ö° The official API docs . Discover More in the Razor Tutorials We have an rich series of Razor tutorials . You should really check them out üëç. Example // assume Address is a Dynamic Entity with a Gps property var coords = AsDynamic(Address.Gps); var lat = coords.Lat; var long = coord.Long; Read more: Check out the API Docs of IDynamicCode History Introduced in 2sxc 10.20"
  },
  "net-code/dynamic-code/as-dynamic.html": {
    "href": "net-code/dynamic-code/as-dynamic.html",
    "title": "AsDynamic(...) - Magic Objects | 2sxc and EAV 10",
    "keywords": "AsDynamic(...) - Magic Objects To make a complex system like the EAV work, the real objects like the IEntity must very very smart and complicated. This would not be fun to use in razor, where you would prefer a simple @Something.Property syntax. This is where AsDynamic(...) comes in. ‚ö° The official API docs . Discover More in the Razor Tutorials We have an rich series of Razor tutorials . You should really check them out üëç. How to Use If you have an IEntity or you're not sure if it's either an IEntity or a IDynamicEntity , just pass it through AsDynamic(...) and the result will be a IDynamicEntity . You can then access the properties with the simple thing.Property syntax. @inherits ToSic.Sxc.Dnn.RazorComponent @{ var unknown = App.Data[\"Default\"].List.First(); // this will be an IEntity var myThing = AsDynamic(unknown); } <div>@myThing.FirstName</div> Note Results of AsDynamic are dynamically typed, so you can write .Anything behind it. But the data coming out of it is strongly typed, so Content.Birthday is a real date object. Tip IDynamicEntity objects also have some additional properties like EntityId or Parents(...) . Check out the API docs. How it works AsDynamic has many signatures accepting a variety of input values. It then returns an dynamic object which is either a IDynamicEntity . These are the things AsDynamic can process: a IEntity - this will return a single IDynamicEntity IDynamicEntity - will return the same IDynamicEntity this option exists just so you don't have to pre-check what you pass in, making it easier to code for you a string containing JSON - will return a dynamic object DynamicJacket added in 2sxc 10.20.06 Tip To use the latest features of 2sxc 10.20+, make sure your razor file begins with the line @inherits ToSic.Sxc.Dnn.RazorComponent Otherwise your Razor templates is based on the default, older component code. Reversing AsDynamic with AsEntity Check out these docs: AsEntity(...) - Get the Underlying Data Obsolete use of AsDynamic() for Lists Warning In previous versions of 2sxc you'll find AsDynamic(...) also used to convert lists (IEnumerable or DataStreams) into lists. This caused a lot of issues with dynamic code compilation, so in 2sxc 10.20 we introduced AsList(...) for that use case. So if you find that kind of code, it works because... without @inherits ToSic.Sxc.Dnn.RazorComponent in the header, the old calls still work with @inherits ToSic.Sxc.Dnn.RazorComponent in the header, you must use AsList(...) History Introduced ca. in 2sxc 1 Modified/added signatures in 2sxc 7 Added the string and DataSource signature in 2sxc 10.20"
  },
  "net-code/dynamic-code/as-entity.html": {
    "href": "net-code/dynamic-code/as-entity.html",
    "title": "AsEntity(...) - Get the Underlying Data | 2sxc and EAV 10",
    "keywords": "AsEntity(...) - Get the Underlying Data In most Razor and WebAPIs you will prefer to use Dynamic Entities allowing you to easily write code like @Content.FirstName . But in rare cases where you have a IDynamicEntity and want to access the real underlying IEntity in it's full complexity. This is where AsEntity(...) is used. ‚ö° The official API docs . Tip AsEntity(...) reverses what AsDynamic(...) does. If you have an object or you're not sure if it's either an IEntity or a IDynamicEntity , just pass it to AsEntity(...) and it will detect either one. Discover More in the Razor Tutorials We have an rich series of Razor tutorials . You should really check them out üëç. Example: Type Information The Dynamic Entity has a property EntityType but this will only return a name like Person . If you need the full Content-Type definition , this is what you would do: // assume that person is a Dynamic Entity var personTypeName = person.EntityType; // string var personType = AsEntity(person).Type; // Will return the IContentType Example: Language Information If you want to really check in the code, what languages have been translated. This is very sophisticated, but this is kind of how you would do it: var personEntity = AsEntity(person); var attrName = personEntity[\"Name\"]; // this will return an IAttribute<string> object History Introduced ca. in 2sxc 1 Modified/added signatures in 2sxc 7"
  },
  "net-code/dynamic-code/as-list.html": {
    "href": "net-code/dynamic-code/as-list.html",
    "title": "AsList(...) - Magic Lists | 2sxc and EAV 10",
    "keywords": "AsList(...) - Magic Lists In razor you prefer a simple @Something.Property syntax. If you only have one item, you'll use AsDynamic(...) - Magic Objects . When you need a list to go through, you use AsList(...) . ‚ö° The official API docs . Discover More in the Razor Tutorials We have an rich series of Razor tutorials . You should really check them out üëç. How it works AsList has various signatures accepting a variety of input values. It then returns an IEnumerable<dynamic> object which is a List of IDynamicEntity objects. These are the things AsList can process: a List<IEntity> or IEnumerable<IEntity> - will return a List/IEnumerable of IDynamicEntity a List<DynamicEntity> or IEnumerable<IDynamicEntity> - will return the same thing again this option exists just so you don't have to pre-check what you pass in, making it easier to code for you a IDataStream - will return a List/IEnumerable of IDynamicEntity a IDataSource - will return a List/IEnumerable of IDynamicEntity of the \"Default\" stream a Tip To use the latest features of 2sxc 10.20+, make sure your razor file begins with the line @inherits ToSic.Sxc.Dnn.RazorComponent Otherwise your Razor templates is based on the default, older component code. History Introduced in 2sxc 10.20"
  },
  "net-code/dynamic-code/content.html": {
    "href": "net-code/dynamic-code/content.html",
    "title": "Content / Object | 2sxc and EAV 10",
    "keywords": "Content / @Content Object The Content is a Dynamic Entity in all Dynamic Code (Razor and WebAPI). It contains the content-item assigned to this template. If the View is a list, then Content contains the first item in the list. Note that if the View is configured to be a list, then it may also have a Header . ‚ö° The official API docs . Since it's a Dynamic Entity it carries all values as properties, like Content.Link etc. Discover More in the Razor Tutorials We have an rich series of Razor tutorials . You should really check them out üëç. Example Razor Code <div> @Content.Name </div> Content.Presentation Depending on the view configuration the Content can carry additional presentation information, for example how to format the title etc. This is available on Content.Presentation . The Presentation object is also a Dynamic Entity . <div class=\"@Content.Presentation.Highlight\"> @Content.Name </div> Demo Data Note that the View can be configured to contain demo data for both the Content as well as the Content.Presentation . In this case your template will receive data to show even if the editor has not added anything. History Introduced in 2sxc 1.0 Presentation added in this documented form ca. 2sxc 8"
  },
  "net-code/dynamic-code/create-instance.html": {
    "href": "net-code/dynamic-code/create-instance.html",
    "title": "CreateInstance(...) Command | 2sxc and EAV 10",
    "keywords": "CreateInstance(...) Command If you have external code you want to import you can use CreateInstance . ‚ö° The official API docs . Discover More in the Razor Tutorials We have an rich series of Razor tutorials . You should really check them out üëç. Example @inherits ToSic.Sxc.Dnn.RazorComponent @{ var helper = CreateInstance(\"_helpers.cshtml\"); var businessLogic = CreateInstance(\"BusinessLogic.cs\"); } @helper.ShowIntroduction <div> @businessLogic.CalculateSecretHash() </div> The code you will import is either another Razor page ( _*.cshtml ) or a C# code file ( *.cs ). Also Read Tutorial: Reuse Shared Code Apps Catalog - we suggest you check out some apps - almost all use this. History General Tokens introduced in 2sxc 8.0 Added extra security switch in 2sxc 9.32"
  },
  "net-code/dynamic-code/create-source.html": {
    "href": "net-code/dynamic-code/create-source.html",
    "title": "CreateSource<T>() Command | 2sxc and EAV 10",
    "keywords": "CreateSource<T>() Command If you need to use a DataSource object in your code use CreateSource<T>() ‚ö° The official API docs . Discover More in the Razor Tutorials We have an rich series of Razor tutorials . You should really check them out üëç. Simple Example @inherits ToSic.Sxc.Dnn.RazorComponent @{ // A source which can filter by Content-Type (EntityType) var allAuthors = CreateSource<ToSic.Eav.DataSources.EntityTypeFilter>(); allAuthors.TypeName = \"Authors\"; // access the data and automatically apply the filter/config var authors = allAuthors[\"Default\"]; } Example Chaining DataSources @inherits ToSic.Sxc.Dnn.RazorComponent @{ // A source which can filter by Content-Type (EntityType) var allAuthors = CreateSource<ToSic.Eav.DataSources.EntityTypeFilter>(); allAuthors.TypeName = \"Authors\"; // Sort by Fullname descending var sortedAuthorsDesc = CreateSource<ValueSort>(allAuthors); sortedAuthorsDesc.Attributes = \"FullName\"; sortedAuthorsDesc.Directions = \"desc\"; // access the data and automatically apply the filter/config var authors = sortedAuthorsDesc[\"Default\"]; } Read more about this in DataSources Note The type T mentioned above must be an IDataSource . The built in ones are usually in these namespaces: ToSic.Eav.DataSources ToSic.Sxc.DataSources ToSic.Sxc.Dnn.DataSources You can also create and compile your own DataSources, and then deploy the DLL to use in your code. Tip In most cases you will prefer to use Visual Query to work with data, but sometimes this approach is neecssary. We suggest you check out some apps - almost all use this. Also Read Discover More in the Razor Tutorials We have an rich series of Razor tutorials . You should really check them out üëç. History General Tokens introduced in 2sxc 8.0 Added extra security switch in 2sxc 9.32"
  },
  "web-api/custom/custom-web-api-dotnet-api.html": {
    "href": "web-api/custom/custom-web-api-dotnet-api.html",
    "title": "C# APIs in ApiController | 2sxc and EAV 10",
    "keywords": "C# APIs in ApiController The following gives you an overview to the APIs you get when you inherit from ToSic.Sxc.Dnn.ApiController . APIs in Razor Components / Templates Tip Most of these APIs can be seen live in action with source code in the Web API Tutorials Standard Dynamic Code API Razor templates / components have all the objects and APIs of Dynamic Code The .net Code Docs for ApiController . Common Standard ASP.net Controller APIs and Keywords Request Standard object in ASP.net giving you http-request information. Special Object / Commands in ApiController The ApiController provides additional commands productive: SaveInAdam(...) new in 9.30 History A first base controller (not recommended any more) was added v6.05 The ToSic.Sxc.Dnn.ApiController was introduced in 2sxc v10.25"
  },
  "api/dot-net/ToSic.Eav.Configuration.Fingerprint.html": {
    "href": "api/dot-net/ToSic.Eav.Configuration.Fingerprint.html",
    "title": "Class Fingerprint | 2sxc and EAV 10",
    "keywords": "Class Fingerprint System to provide unique fingerprints (IDs) for certain parts of the EAV Inheritance System.Object Fingerprint Namespace : ToSic.Eav.Configuration Assembly : ToSic.Eav.Core.dll Syntax [InternalApi_DoNotUse_MayChangeWithoutNotice(\"this is just fyi\")] public static class Fingerprint Properties | Improve this Doc View Source System The system fingerprint of the current execution environment. Used for signing data that should be tamper-proof Declaration public static string System { get; } Property Value Type Description System.String"
  },
  "api/dot-net/ToSic.Eav.DataSources.ValueSort.html": {
    "href": "api/dot-net/ToSic.Eav.DataSources.ValueSort.html",
    "title": "Class ValueSort | 2sxc and EAV 10",
    "keywords": "Class ValueSort Sort Entity by values in specified Attributes The ValueSort DataSource is part of the Standard EAV Data Sources . It will reorder items passing through A-Z or Z-A based on a value of each item. How to use with the Visual Query When using the Visual Query you can just drag it into your query. This is what it usually looks like: The above example shows the same items being sorted in two different ways and delivered to the target. Example Using Multi-Sort You can also sort multiple fields, so \"first sort by xyz, then by xyz\" and use different sort-orders.: Example Using URL Parameters ...and of course you can also use url parameters to specify field-names or sort order: Sorting Direction For sorting direction you can use either words or numbers asc/desc 1/0 Programming With The ValueSort DataSource We recommend to use the Visual Query where possible, as it's easier to understand and is identical for C# and JavaScript. It's also better because it separates data-retrieval from visualization. // A source which can filter by Content-Type (EntityType) var allAuthors = CreateSource<EntityTypeFilter>(); allAuthors.TypeName = \"Author\"; // Sort by FullName var sortedAuthors = CreateSource<ValueSort>(allAuthors); sortedAuthors.Attributes = \"FullName\"; Read also datasource / data stream List of all EAV Data Sources query / visual query Demo App and further links You should find some examples in this demo App Demo App with examples for most DataSources History Introduced in EAV 3.x, 2sxc ? API Documentation Inheritance System.Object HasLog DataSourceBase ValueSort Implements IDataSource IAppIdentity IZoneIdentity IAppIdentityLight ICacheKey ICacheExpiring ITimestamped ICanPurgeListCache IHasLog IDataTarget Inherited Members DataSourceBase.Name DataSourceBase.CacheRelevantConfigurations DataSourceBase.CachePartialKey DataSourceBase.CacheFullKey DataSourceBase.CacheTimestamp DataSourceBase.CacheChanged(Int64) DataSourceBase.AppId DataSourceBase.ZoneId DataSourceBase.Guid DataSourceBase.In DataSourceBase.Out DataSourceBase.Item[String] DataSourceBase.List DataSourceBase.Configuration DataSourceBase.Attach(IDataSource) DataSourceBase.Attach(String, IDataSource) DataSourceBase.Attach(String, IDataStream) DataSourceBase.PurgeList(Boolean) HasLog.Log HasLog.InitLog(String, ILog, String) HasLog.InitLog(String, ILog, String, CodeRef) Namespace : ToSic.Eav.DataSources Assembly : ToSic.Eav.DataSources.dll Syntax [PublicApi_Stable_ForUseInYourCode] [VisualQuery(GlobalName = \"ToSic.Eav.DataSources.ValueSort, ToSic.Eav.DataSources\", Type = DataSourceType.Sort, DynamicOut = false, ExpectsDataOfType = \"|Config ToSic.Eav.DataSources.ValueSort\", HelpLink = \"https://r.2sxc.org/DsValueSort\")] public sealed class ValueSort : DataSourceBase, IDataSource, IAppIdentity, IZoneIdentity, IAppIdentityLight, ICacheInfo, ICacheKey, ICacheExpiring, ITimestamped, ICanPurgeListCache, IHasLog, IDataTarget Remarks Technically many things could just identify the app they belong to, and let the system look up the zone. But this would be inefficient, so for optimization, many items identify themselves with both the app and zone Ids Properties | Improve this Doc View Source Attributes The attribute whose value will be sorted by. Declaration public string Attributes { get; set; } Property Value Type Description System.String | Improve this Doc View Source Directions The sorting direction like 'asc' or 'desc', can also be 0, 1 Declaration public string Directions { get; set; } Property Value Type Description System.String | Improve this Doc View Source Languages Language to filter for. At the moment it is not used, or it is trying to find \"any\" Declaration public string Languages { get; set; } Property Value Type Description System.String Implements IDataSource IAppIdentity IZoneIdentity IAppIdentityLight ICacheKey ICacheExpiring ITimestamped ICanPurgeListCache IHasLog IDataTarget"
  },
  "api/dot-net/ToSic.Eav.DataSources.App.html": {
    "href": "api/dot-net/ToSic.Eav.DataSources.App.html",
    "title": "Class App | 2sxc and EAV 10",
    "keywords": "Class App All the data inside an App. For example, it has a variable amount of Out-streams, one for each content-type in the app. The App DataSource is part of the Standard EAV Data Sources . It provides all items of the current App or of another App if needed. How to use with the Visual Query When using the Visual Query you can just drag it into your query. Now you can create out-connections with the names of the types you need - which looks like this: There are three common use cases: 1. Using App With The Current App You can either just use it without any In stream, then it will just deliver the published items. This is because without an In , the App will automatically build an In providing published only. If you do provide any kind of in, it will use that as the source. So if you provide a Publishing-Source on the in, which will cause the App DataSource to differ the result based on the user who is looking at it. So editors would see unpublished as well: 2. Using App with Other App The App-DataSource can also be configured to deliver data from another app. For this, to configure and set the ZoneId and AppId: You can also deliver data from different Apps by using multiple App sources: Programming With The App DataSource We recommend to use the Visual Query where possible, as it's easier to understand and is identical for C# and JavaScript. It's also better because it separates data-retrieval from visualization. Important: to access data of the current App, please use the App.Data as it's a pre-build object with the same streams. For example, use App.Data[\"BlogPost\"] to get all the BlogPost items. An example code @{ var blog = CreateSource<ToSic.Eav.DataSources.App>(); blog.ZoneSwitch = 2; // go to Zone 2 blog.AppSwitch = 403; // go to App 403 } @foreach(var post in AsDynamic(blog[\"BlogPost\"])) { <div>@post.EntityTitle</div> } The previous example creates an App source to the zone 2, app 403 and retrieves all items of type BolgPost to show in a loop. Important When Coding Note that data sources only retrieve data once, and then ignore any further configuration. So you must set Zone/App before accessing the data. Read also datasource / data stream List of all EAV Data Sources query / visual query Razor examples using App.Data Demo App and further links You should find some examples in this demo App Demo App with examples for most DataSources History Introduced in EAV 3.x, in ca. 2sxc 6.x API Documentation Inheritance System.Object HasLog DataSourceBase App AppData Implements IDataSource IAppIdentity IZoneIdentity IAppIdentityLight ICacheKey ICacheExpiring ITimestamped ICanPurgeListCache IHasLog IDataTarget Inherited Members DataSourceBase.Name DataSourceBase.CacheRelevantConfigurations DataSourceBase.CachePartialKey DataSourceBase.CacheFullKey DataSourceBase.CacheTimestamp DataSourceBase.CacheChanged(Int64) DataSourceBase.AppId DataSourceBase.ZoneId DataSourceBase.Guid DataSourceBase.In DataSourceBase.Item[String] DataSourceBase.List DataSourceBase.Configuration DataSourceBase.Attach(IDataSource) DataSourceBase.Attach(String, IDataSource) DataSourceBase.Attach(String, IDataStream) DataSourceBase.PurgeList(Boolean) HasLog.Log HasLog.InitLog(String, ILog, String) HasLog.InitLog(String, ILog, String, CodeRef) Namespace : ToSic.Eav.DataSources Assembly : ToSic.Eav.DataSources.dll Syntax [PublicApi_Stable_ForUseInYourCode] [VisualQuery(GlobalName = \"ToSic.Eav.DataSources.App, ToSic.Eav.DataSources\", Type = DataSourceType.Source, Icon = \"app\", DynamicOut = true, NiceName = \"App\", UiHint = \"with streams for each Content Type\", ExpectsDataOfType = \"|Config ToSic.Eav.DataSources.App\", HelpLink = \"https://r.2sxc.org/DsApp\")] public class App : DataSourceBase, IDataSource, IAppIdentity, IZoneIdentity, IAppIdentityLight, ICacheInfo, ICacheKey, ICacheExpiring, ITimestamped, ICanPurgeListCache, IHasLog, IDataTarget Fields | Improve this Doc View Source RequiresRebuildOfOut Declaration protected bool RequiresRebuildOfOut Field Value Type Description System.Boolean Properties | Improve this Doc View Source AppSwitch Use this to re-target the app-source to another app. Note that this can only be done before ever accessing the app - once the object has started reading data, switching has no more effect. Declaration public int AppSwitch { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source Metadata Metadata is an important feature of apps. The App DataSource automatically provides direct access to the metadata system. This allows users of the App to query metadata directly through this object. Declaration public IMetadataSource Metadata { get; } Property Value Type Description IMetadataSource An initialized IMetadataSource for this app | Improve this Doc View Source Out Gets the Dictionary of Out-Streams. This is the internal accessor, as usually you'll use this[\"name\"] instead. In rare cases you need the Out, for example to list the stream names in the data source. Declaration public override IDictionary<string, IDataStream> Out { get; } Property Value Type Description System.Collections.Generic.IDictionary < System.String , IDataStream > A dictionary of named IDataStream objects Overrides DataSourceBase.Out | Improve this Doc View Source ZoneSwitch Use this to re-target the app-source to another zone. Note that this can only be done before ever accessing the app - once the object has started reading data, switching has no more effect. Declaration public int ZoneSwitch { get; set; } Property Value Type Description System.Int32 Implements IDataSource IAppIdentity IZoneIdentity IAppIdentityLight ICacheKey ICacheExpiring ITimestamped ICanPurgeListCache IHasLog IDataTarget"
  },
  "api/dot-net/ToSic.Eav.DataSources.Queries.VisualQueryAttribute.html": {
    "href": "api/dot-net/ToSic.Eav.DataSources.Queries.VisualQueryAttribute.html",
    "title": "Class VisualQueryAttribute | 2sxc and EAV 10",
    "keywords": "Class VisualQueryAttribute Custom Attribute for DataSources and usage in Pipeline Designer. Will add information about help, configuration-content-types etc. Only DataSources which have this attribute will be listed in the designer-tool DataSource API: VisualQuery Attribute To help the Visual Query Designer properly guide the user, there is a C# Attribute called VisualQuery to configure everything. How to use VisualQuery Here's a simple example of the FormAndList DataSource : [VisualQuery( GlobalName = \"0a0924a5-ca2f-4db5-8fc7-1a21fdbb2fbb\", NiceName = \"Dnn FormAndList\", Type = DataSourceType.Source, ExpectsDataOfType = \"d98db323-7c33-4f2a-b173-ef91c0875124\", HelpLink = \"https://github.com/2sic/dnn-datasource-form-and-list/wiki\")] This example shows how the the FormAndList DataSource tells the UI things like: the global name the nice name to use in the UI that it's a source (and not a filter) - affecting the icon shown that it has a content-type which should be used for the UI to configure it the help-link in the UI Read also DataSource API - DataSource API overview Demo Code and further links FnL DataSource History Introduced in EAV 4.x, 2sxc 09.13 Inheritance System.Object System.Attribute VisualQueryAttribute Implements System.Runtime.InteropServices._Attribute Namespace : ToSic.Eav.DataSources.Queries Assembly : ToSic.Eav.DataSources.dll Syntax [PublicApi_Stable_ForUseInYourCode] [AttributeUsage(AttributeTargets.Class | AttributeTargets.Interface)] public class VisualQueryAttribute : Attribute, _Attribute Properties | Improve this Doc View Source DynamicOut Determine if this data sources can have many out-streams with custom names Declaration public bool DynamicOut { get; set; } Property Value Type Description System.Boolean True if this data source can also provide other named out-streams, false if it only has the defined list of out-streams. | Improve this Doc View Source EnableConfig Should configuration be enabled in the VisualQuery designer? Declaration public bool EnableConfig { get; } Property Value Type Description System.Boolean True if we have a known configuration content-type | Improve this Doc View Source ExpectsDataOfType Name of the content-type used to configure this data-source in the visual-query designer. The UI will then open an edit-dialog for this content type. Should be a GUID. Older data sources have a name like \"|Config ToSic.Eav.DataSources.App\", but that's deprecated. Declaration public string ExpectsDataOfType { get; set; } Property Value Type Description System.String | Improve this Doc View Source GlobalName required this should be a unique id, ideally a GUID. important: old code use string names like a.net namespace. This should not be done any more and will be deprecated in future. Declaration public string GlobalName { get; set; } Property Value Type Description System.String | Improve this Doc View Source HelpLink The help-link to get help for this data source. The UI will offer a help-button if provided. Declaration public string HelpLink { get; set; } Property Value Type Description System.String | Improve this Doc View Source Icon Optional custom icon, based on the icon-names from the FontAwesome 4 library. Declaration public string Icon { get; set; } Property Value Type Description System.String | Improve this Doc View Source In List of in-streams expected by this data-source - will be shown in the UI. Default is empty. Declaration public string[] In { get; set; } Property Value Type Description System.String [] | Improve this Doc View Source NiceName Nice name - usually an override to an internal class-name which shouldn't change any more but is not correct from the current wording - like ContentTypeFilter instead of EntityTypeFilter. If not specified, the UI will use the normal name instead. Declaration public string NiceName { get; set; } Property Value Type Description System.String | Improve this Doc View Source PreviousNames Names this DataSource may have had previously. This was introduced when we standardized the names, and still had historic data using old names or old namespaces. Declaration public string[] PreviousNames { get; set; } Property Value Type Description System.String [] | Improve this Doc View Source Type A primary type of this source, which determines a default icon + some standard help-text Declaration public DataSourceType Type { get; set; } Property Value Type Description DataSourceType The type, from the DataSourceType enum | Improve this Doc View Source UiHint A hint to help the user better understand what this does - in case the nice name isn't enough. Declaration public string UiHint { get; set; } Property Value Type Description System.String Implements System.Runtime.InteropServices._Attribute"
  },
  "api/dot-net/ToSic.Eav.Apps.Assets.IAsset.html": {
    "href": "api/dot-net/ToSic.Eav.Apps.Assets.IAsset.html",
    "title": "Interface IAsset | 2sxc and EAV 10",
    "keywords": "Interface IAsset Any asset (file/folder) of the EAV App System. This interface contains properties which both IFolder and IFile have in common Namespace : ToSic.Eav.Apps.Assets Assembly : ToSic.Eav.Apps.dll Syntax [PublicApi_Stable_ForUseInYourCode] public interface IAsset Properties | Improve this Doc View Source Created The creation date of the item, as reported by the environment. Declaration DateTime Created { get; set; } Property Value Type Description System.DateTime The date-time when the file was created. | Improve this Doc View Source Id The ID of the item, if the underlying environment uses int IDs Declaration int Id { get; } Property Value Type Description System.Int32 an int with the id used by the environment to track this item | Improve this Doc View Source Modified The modified date of the file, as reported by the environment. Declaration DateTime Modified { get; set; } Property Value Type Description System.DateTime The date-time when the file was modified last. | Improve this Doc View Source Name The asset name typically the folder or the file name Declaration string Name { get; } Property Value Type Description System.String | Improve this Doc View Source ParentId The folder ID of the file, or parent-folder of a folder, if the underlying environment uses int IDs Declaration int ParentId { get; } Property Value Type Description System.Int32 an int with the id used by the environment to track this item | Improve this Doc View Source Path The path of the item in the file system of the environment. Declaration string Path { get; set; } Property Value Type Description System.String The full path of this item"
  },
  "api/dot-net/ToSic.Eav.Caching.AppsCacheBase.html": {
    "href": "api/dot-net/ToSic.Eav.Caching.AppsCacheBase.html",
    "title": "Class AppsCacheBase | 2sxc and EAV 10",
    "keywords": "Class AppsCacheBase The Apps Cache is the main cache for App States. This is just the abstract base implementation. The real cache must implement this and also provide platform specific adjustments so that the caching is in sync with the Environment. Inheritance System.Object AppsCacheBase AppsCache Implements IAppsCache Namespace : ToSic.Eav.Caching Assembly : ToSic.Eav.Core.dll Syntax [InternalApi_DoNotUse_MayChangeWithoutNotice(\"this is just fyi\")] public abstract class AppsCacheBase : IAppsCache Properties | Improve this Doc View Source Zones The list of zones, which internally contains the list of apps. Declaration public abstract IReadOnlyDictionary<int, Zone> Zones { get; } Property Value Type Description System.Collections.Generic.IReadOnlyDictionary < System.Int32 , Zone > Methods | Improve this Doc View Source Get(Int32) Retrieve an app from the cache Declaration public AppState Get(int appId) Parameters Type Name Description System.Int32 appId App id if zone unknown. Returns Type Description AppState The AppState of the app. | Improve this Doc View Source Get(IAppIdentity) Retrieve an app from the cache Declaration public AppState Get(IAppIdentity app) Parameters Type Name Description IAppIdentity app App identifier. Returns Type Description AppState The AppState of the app. | Improve this Doc View Source GetIdentity(Nullable<Int32>, Nullable<Int32>) Get/Resolve ZoneId and AppId for specified ZoneId and/or AppId. If both are null, default ZoneId with it's default App is returned. Declaration public IAppIdentity GetIdentity(int? zoneId = default(int? ), int? appId = default(int? )) Parameters Type Name Description System.Nullable < System.Int32 > zoneId System.Nullable < System.Int32 > appId Returns Type Description IAppIdentity An IAppIdentity with the correct IDs | Improve this Doc View Source Has(IAppIdentity) Check if something is already in the cache Declaration public bool Has(IAppIdentity app) Parameters Type Name Description IAppIdentity app App identifier. Returns Type Description System.Boolean | Improve this Doc View Source Load(IAppIdentity, String) Load an app into cache, specifying the primary language. This is used in scenarios, where the primary language cannot be auto-detected, so it's set explicitly. Declaration public void Load(IAppIdentity app, string primaryLanguage) Parameters Type Name Description IAppIdentity app App identifier. System.String primaryLanguage Primary language, lower case. | Improve this Doc View Source Purge(IAppIdentity) Clean cache for specific Zone and App Declaration public void Purge(IAppIdentity app) Parameters Type Name Description IAppIdentity app | Improve this Doc View Source PurgeZones() Clean entire global cache, which includes the List of Zones and Apps as well as all the apps. Declaration public abstract void PurgeZones() | Improve this Doc View Source Update(IAppIdentity, IEnumerable<Int32>, ILog) Tell the cache that an app has done a partial update. Only relevant for farm scenarios, where other nodes must be informed. Declaration public virtual AppState Update(IAppIdentity app, IEnumerable<int> entities, ILog log) Parameters Type Name Description IAppIdentity app App identifier. System.Collections.Generic.IEnumerable < System.Int32 > entities List of entities which need to be updates. ILog log Log object to log what's happening. Returns Type Description AppState The updated AppState or null, if it wasn't in the cache so didn't need updating. Implements IAppsCache"
  },
  "api/dot-net/ToSic.Eav.Conversion.html": {
    "href": "api/dot-net/ToSic.Eav.Conversion.html",
    "title": "Namespace ToSic.Eav.Conversion | 2sxc and EAV 10",
    "keywords": "Namespace ToSic.Eav.Conversion Classes EntitiesToDictionary A helper to serialize various combinations of entities, lists of entities etc EntitiesToDictionaryBase A helper to serialize various combinations of entities, lists of entities etc Interfaces IEntitiesTo<T> Convert an entity into another format IStreamsTo<T> Marks objects which can convert entire DataStreams or DataSources to another format. Usually used in serialization scenarios."
  },
  "api/dot-net/ToSic.Eav.Data.IContentTypeAttribute.html": {
    "href": "api/dot-net/ToSic.Eav.Data.IContentTypeAttribute.html",
    "title": "Interface IContentTypeAttribute | 2sxc and EAV 10",
    "keywords": "Interface IContentTypeAttribute Represents an Attribute definition in a ContentType. This is the base for attributes in IContentType Inherited Members IAttributeBase.Name IAttributeBase.Type IAttributeBase.ControlledType IHasPermissions.Permissions IAppIdentityLight.AppId IHasMetadata.Metadata Namespace : ToSic.Eav.Data Assembly : ToSic.Eav.Core.dll Syntax [PublicApi_Stable_ForUseInYourCode] public interface IContentTypeAttribute : IAttributeBase, IHasPermissions, IAppIdentityLight, IHasMetadata Properties | Improve this Doc View Source AttributeId additional info for the persistence layer Declaration int AttributeId { get; } Property Value Type Description System.Int32 | Improve this Doc View Source IsTitle tells us if this attribute is the title Declaration bool IsTitle { get; } Property Value Type Description System.Boolean | Improve this Doc View Source SortOrder position of this attribute in the list of attributes Declaration int SortOrder { get; } Property Value Type Description System.Int32"
  },
  "api/dot-net/ToSic.Eav.Data.html": {
    "href": "api/dot-net/ToSic.Eav.Data.html",
    "title": "Namespace ToSic.Eav.Data | 2sxc and EAV 10",
    "keywords": "Namespace ToSic.Eav.Data The EAV Data system underlying 2sxc is the core data management system, in charge of Entities and such. For long term stability, we only use interfaces in the API. To better understand this stuff, best read about the Data Models in the EAV . In most cases you only care about the IEntity interface and things below that. Classes Attribute<T> Represents an Attribute / Property of an Entity with Values of a Generic Type AttributeBase Represents an Attribute Definition. Used in Content-Types and IEntities. ContentType Represents a ContentType ContentTypeAttribute Defines an attribute with name and the type this attribute has. Part of of a IContentType definition. ContentTypeMetadata Provides metadata for a content type. This can be very special, because ContentTypes can be shared (ghosts), in which case the metadata must be retrieved from another \"remote\" location (where the original is defined). DimensionDefinition The definition of a dimension / language Entity A basic unit / item of data. Has many IAttribute<T> s which then contains IValue<T> s which are multi-language. EntityBasedType Foundation for a class which gets its data from an Entity. This is used for more type safety - because some internal objects need entities for data-storage, but when programming they should use typed objects to not accidentally access invalid properties. EntityBasedWithLog A strongly typed object which gets its data from an entity, and also logs what it does. EntityLight Represents a light Entity, which is a very basic entity without multi-language capabilities, versions or publishing. For the more powerful Entity, use IEntity . EntityRelationship Represents a Relation between two entities, connecting a parent to a child. Language Represents a Dimension / Language Assignment LazyEntities Delivers entities which are needed. It's lazy, because on initialization it only knows the Ids (int/guid) of the items to pick up, and only retrieves them when needed. Once retrieved, it will cache the result, until the up-stream reports changes. An additional optimization: in special cases where we just need the IDs for saving, it won't actually query the cache if the IDs are already known. Value<T> Represents a typed Value object in the memory model Interfaces IAttribute Represents an Attribute with Values - without knowing what data type is in the value. Usually we'll extend this and use IAttribute<T> instead. IAttribute<T> Represents an Attribute (Property), but strongly typed IAttributeBase Represents properties we should know about Attributes. This is the base for both IContentTypeAttribute (in the IContentType) attribute with values-list (in the IEntity) IContentType Represents a Content Type information (the schema) used for IEntity objects. IContentTypeAttribute Represents an Attribute definition in a ContentType. This is the base for attributes in IContentType IDimension Represents a Dimension to assign values to. Dimensions are usually languages ( ILanguage ), but in future they could also be multi-dimensional, like values which are mapped to a language and to a specific edition, use case, etc. IEntitiesSource This marks something which can give a list of entities. Usually used for lazy-loading data, where the source is attached, but the data isn't loaded yet. IEntity The primary data-item in the system, IEntity is a generic data-item for any kind of information. Note that it inherits IEntityLight which is the basic definition without languages, versioning, publishing etc. We recommend you read about the Data Models in the EAV IEntityBasedType Foundation for interfaces which will enhance EntityBasedType which gets its data from an Entity. This is used for more type safety - so you base your interfaces - like IPerson on this, otherwise you're IPerson would be missing the Title, Id, Guid IEntityLight Represents a light Entity, which is a very basic entity without multi-language capabilities, versions or publishing. For the more powerful Entity, use IEntity . IEntityWrapper A interface to ensure all things that carry an IEntity can be compared based on the Entity they carry. ILanguage Represents a Language Dimension. It's identical to an IDimension for now. IRelationshipManager Manages relationships of an entity - to it's children and parents. IValue Represents a Value in the EAV system. Values belong to an attribute and can belong to multiple languages. IValue<T> Represents a Value with a specific type (string, decimal, etc.). IValueConverter Marks objects that can convert values - like \"file:22\" to \"/images/logo.jpg\" and back. IWrapper<T> This is for any object which does something, but caries with it an original object which is the type of the hosting system (environment) Enums ValueTypes Attribute Type Enum"
  },
  "api/dot-net/ToSic.Sxc.Dnn.Run.DnnModule.html": {
    "href": "api/dot-net/ToSic.Sxc.Dnn.Run.DnnModule.html",
    "title": "Class DnnModule | 2sxc and EAV 10",
    "keywords": "Class DnnModule The DNN implementation of a Block Container (a Module). Inheritance System.Object HasLog ToSic.Sxc.Context.Module < DotNetNuke.Entities.Modules.ModuleInfo > DnnModule Implements ICmsModule IWrapper < DotNetNuke.Entities.Modules.ModuleInfo > IHasLog Inherited Members HasLog.Log HasLog.InitLog(String, ILog, String) HasLog.InitLog(String, ILog, String, CodeRef) Namespace : ToSic.Sxc.Dnn.Run Assembly : ToSic.Sxc.Dnn.dll Syntax [InternalApi_DoNotUse_MayChangeWithoutNotice(\"this is just fyi\")] public class DnnModule : Module<ModuleInfo>, IModule, ICmsModule, IContainer, IWrapper<ModuleInfo>, IHasLog Constructors | Improve this Doc View Source DnnModule(Lazy<IZoneMapper>) Declaration public DnnModule(Lazy<IZoneMapper> zoneMapperLazy) Parameters Type Name Description System.Lazy < ToSic.Eav.Run.IZoneMapper > zoneMapperLazy Properties | Improve this Doc View Source BlockIdentifier Declaration public override IBlockIdentifier BlockIdentifier { get; } Property Value Type Description ToSic.Eav.Apps.Run.IBlockIdentifier Overrides ToSic.Sxc.Context.Module<DotNetNuke.Entities.Modules.ModuleInfo>.BlockIdentifier | Improve this Doc View Source Id Declaration public override int Id { get; } Property Value Type Description System.Int32 Overrides ToSic.Sxc.Context.Module<DotNetNuke.Entities.Modules.ModuleInfo>.Id | Improve this Doc View Source IsPrimary Declaration public override bool IsPrimary { get; } Property Value Type Description System.Boolean Overrides ToSic.Sxc.Context.Module<DotNetNuke.Entities.Modules.ModuleInfo>.IsPrimary Methods | Improve this Doc View Source Init(ModuleInfo, ILog) We don't use a Constructor because of DI So you must always call Init Declaration public DnnModule Init(ModuleInfo item, ILog parentLog) Parameters Type Name Description DotNetNuke.Entities.Modules.ModuleInfo item ILog parentLog Returns Type Description DnnModule | Improve this Doc View Source Init(Int32, ILog) We don't use a Constructor because of DI So you must always call Init Declaration public override IModule Init(int instanceId, ILog parentLog) Parameters Type Name Description System.Int32 instanceId ILog parentLog Returns Type Description ToSic.Sxc.Context.IModule Overrides ToSic.Sxc.Context.Module<DotNetNuke.Entities.Modules.ModuleInfo>.Init(System.Int32, ToSic.Eav.Logging.ILog) Implements ICmsModule IWrapper<T> IHasLog"
  },
  "api/dot-net/ToSic.Eav.DataSources.Caching.ListCacheItem.html": {
    "href": "api/dot-net/ToSic.Eav.DataSources.Caching.ListCacheItem.html",
    "title": "Class ListCacheItem | 2sxc and EAV 10",
    "keywords": "Class ListCacheItem Cache Item in the List-Cache. Inheritance System.Object ListCacheItem Implements ICacheExpiring ITimestamped Namespace : ToSic.Eav.DataSources.Caching Assembly : ToSic.Eav.DataSources.dll Syntax [InternalApi_DoNotUse_MayChangeWithoutNotice(\"this is just fyi\")] public class ListCacheItem : ICacheExpiring, ITimestamped Constructors | Improve this Doc View Source ListCacheItem(IImmutableList<IEntity>, Int64) Initialize the object - ready to cache Declaration public ListCacheItem(IImmutableList<IEntity> list, long cacheTimestamp) Parameters Type Name Description System.Collections.Immutable.IImmutableList < IEntity > list The list of items to put into the cache. System.Int64 cacheTimestamp The timestamp of the source at the moment of cache-buildup, to later detect changes in the source. Properties | Improve this Doc View Source CacheTimestamp The age of the data - to see if it needs refreshing if the new source has a newer date Declaration public long CacheTimestamp { get; set; } Property Value Type Description System.Int64 | Improve this Doc View Source List The items which we're caching. Declaration public IImmutableList<IEntity> List { get; set; } Property Value Type Description System.Collections.Immutable.IImmutableList < IEntity > Methods | Improve this Doc View Source CacheChanged(Int64) Detect if the cache has old data, by comparing it to a timestamp which may be newer. This is implemented in each object, because sometimes it compares its own timestamp, sometimes that of another underlying object. Declaration public bool CacheChanged(long newCacheTimeStamp) Parameters Type Name Description System.Int64 newCacheTimeStamp New time stamp to compare with Returns Type Description System.Boolean True if the timestamps differ, false if it's the same Implements ICacheExpiring ITimestamped"
  },
  "api/dot-net/ToSic.Sxc.Engines.html": {
    "href": "api/dot-net/ToSic.Sxc.Engines.html",
    "title": "Namespace ToSic.Sxc.Engines | 2sxc and EAV 10",
    "keywords": "Namespace ToSic.Sxc.Engines The Engines are the part of 2sxc that create output based on data. It's basically the part that takes a full configuration, consisting of... What App What View What Template What Data - could be from a query or from the instance ...and then generates an HTML using Razor or Tokens or whatever engine may come in future. Classes EngineBase The foundation for engines - must be inherited by other engines RazorEngine The razor engine, which compiles / runs engine templates TokenEngine Rendering Engine for Token based templates (html using [Content:Title] kind of placeholders. Interfaces IEngine The sub-system in charge of taking a configuration for an instance (aka Module) a template and using all that to produce an html-string for the browser."
  },
  "api/dot-net/ToSic.Sxc.LookUp.LookUpForTokenTemplate.html": {
    "href": "api/dot-net/ToSic.Sxc.LookUp.LookUpForTokenTemplate.html",
    "title": "Class LookUpForTokenTemplate | 2sxc and EAV 10",
    "keywords": "Class LookUpForTokenTemplate LookUp for creating token based templates. In addition to retrieving values, it also resolves special tokens like repeater:index repeater:isfirst etc. Inheritance System.Object LookUpForTokenTemplate Implements ILookUp Namespace : ToSic.Sxc.LookUp Assembly : ToSic.Sxc.dll Syntax [InternalApi_DoNotUse_MayChangeWithoutNotice(\"this is just fyi\")] public class LookUpForTokenTemplate : ILookUp Remarks Only use this for Token templates, do not use for normal lookups which end up in data-sources. The reason is that this tries to respect culture formatting, which will cause trouble (numbers with comma etc.) when trying to use in other systems. Fields | Improve this Doc View Source KeyAlternator2 Declaration public const string KeyAlternator2 = \"alternator2\" Field Value Type Description System.String | Improve this Doc View Source KeyAlternator3 Declaration public const string KeyAlternator3 = \"alternator3\" Field Value Type Description System.String | Improve this Doc View Source KeyAlternator4 Declaration public const string KeyAlternator4 = \"alternator4\" Field Value Type Description System.String | Improve this Doc View Source KeyAlternator5 Declaration public const string KeyAlternator5 = \"alternator5\" Field Value Type Description System.String | Improve this Doc View Source KeyCount Declaration public const string KeyCount = \"count\" Field Value Type Description System.String | Improve this Doc View Source KeyIndex Declaration public const string KeyIndex = \"index\" Field Value Type Description System.String | Improve this Doc View Source KeyIndex1 Declaration public const string KeyIndex1 = \"index1\" Field Value Type Description System.String | Improve this Doc View Source KeyIsFirst Declaration public const string KeyIsFirst = \"isfirst\" Field Value Type Description System.String | Improve this Doc View Source KeyIsLast Declaration public const string KeyIsLast = \"islast\" Field Value Type Description System.String | Improve this Doc View Source TokenRepeater Declaration public const string TokenRepeater = \"Repeater\" Field Value Type Description System.String Properties | Improve this Doc View Source Name Declaration public string Name { get; } Property Value Type Description System.String Methods | Improve this Doc View Source Get(String) Gets a value by Name/key, will simply return the string or an empty string, in rare cases a null-value. Declaration public virtual string Get(string key) Parameters Type Name Description System.String key Returns Type Description System.String The resolved value, or an empty string if not found. Note that it could also resolve to an empty string if found - use Has to check for that case. Implements ILookUp"
  },
  "api/dot-net/ToSic.Sxc.Blocks.IBlock.html": {
    "href": "api/dot-net/ToSic.Sxc.Blocks.IBlock.html",
    "title": "Interface IBlock | 2sxc and EAV 10",
    "keywords": "Interface IBlock A unit / block of output in a CMS. Inherited Members IZoneIdentity.ZoneId IAppIdentityLight.AppId IHasLog.Log Namespace : ToSic.Sxc.Blocks Assembly : ToSic.Sxc.dll Syntax [InternalApi_DoNotUse_MayChangeWithoutNotice(\"this is just fyi\")] public interface IBlock : IAppIdentity, IZoneIdentity, IAppIdentityLight, IHasLog Properties | Improve this Doc View Source App The app this block is running in Declaration IApp App { get; } Property Value Type Description IApp | Improve this Doc View Source Context The context we're running in, with tenant, container etc. Declaration IContextOfBlock Context { get; } Property Value Type Description ToSic.Sxc.Context.IContextOfBlock | Improve this Doc View Source Data The IBlockDataSource which delivers data for this block (will be used by the IEngine together with the View) Declaration IBlockDataSource Data { get; } Property Value Type Description IBlockDataSource | Improve this Doc View Source View The view which will be used to render this block Declaration IView View { get; set; } Property Value Type Description IView"
  },
  "api/dot-net/ToSic.Sxc.Dnn.LookUp.DnnLookUpEngineResolver.html": {
    "href": "api/dot-net/ToSic.Sxc.Dnn.LookUp.DnnLookUpEngineResolver.html",
    "title": "Class DnnLookUpEngineResolver | 2sxc and EAV 10",
    "keywords": "Class DnnLookUpEngineResolver Retrieves the current engine for a specific module. Internally it asks DNN for the current Property-Access objects and prepares them for use in EAV. Inheritance System.Object HasLog ToSic.Eav.Logging.HasLog < ILookUpEngineResolver > DnnLookUpEngineResolver Implements ILookUpEngineResolver IHasLog Inherited Members HasLog.Log HasLog.InitLog(String, ILog, String) HasLog.InitLog(String, ILog, String, CodeRef) Namespace : ToSic.Sxc.Dnn.LookUp Assembly : ToSic.Sxc.Dnn.dll Syntax [InternalApi_DoNotUse_MayChangeWithoutNotice(\"this is just fyi\")] public class DnnLookUpEngineResolver : HasLog<ILookUpEngineResolver>, ILookUpEngineResolver, IHasLog<ILookUpEngineResolver>, IHasLog Constructors | Improve this Doc View Source DnnLookUpEngineResolver(IZoneCultureResolver) Declaration public DnnLookUpEngineResolver(IZoneCultureResolver cultureResolver) Parameters Type Name Description ToSic.Eav.Context.IZoneCultureResolver cultureResolver Methods | Improve this Doc View Source GetLookUpEngine(Int32) Get the engine for the current execution instance. Declaration public ILookUpEngine GetLookUpEngine(int instanceId) Parameters Type Name Description System.Int32 instanceId The instance ID - should be 0 if unknown Returns Type Description ILookUpEngine Implements ILookUpEngineResolver IHasLog"
  },
  "api/dot-net/ToSic.Sxc.Dnn.LookUp.LookUpInDnnPropertyAccess.html": {
    "href": "api/dot-net/ToSic.Sxc.Dnn.LookUp.LookUpInDnnPropertyAccess.html",
    "title": "Class LookUpInDnnPropertyAccess | 2sxc and EAV 10",
    "keywords": "Class LookUpInDnnPropertyAccess Translator component which creates a LookUp object and internally accesses DNN PropertyAccess objects (which DNN uses for the same concept as LookUp) Inheritance System.Object LookUpBase LookUpInDnnPropertyAccess Implements ILookUp Inherited Members LookUpBase.Name LookUpBase.Get(String) LookUpBase.Format(Boolean) LookUpBase.Format(DateTime) Namespace : ToSic.Sxc.Dnn.LookUp Assembly : ToSic.Sxc.Dnn.dll Syntax [InternalApi_DoNotUse_MayChangeWithoutNotice(\"this is just fyi\")] public class LookUpInDnnPropertyAccess : LookUpBase, ILookUp Constructors | Improve this Doc View Source LookUpInDnnPropertyAccess(String, IPropertyAccess, UserInfo, CultureInfo) Declaration public LookUpInDnnPropertyAccess(string name, IPropertyAccess source, UserInfo user, CultureInfo localization) Parameters Type Name Description System.String name DotNetNuke.Services.Tokens.IPropertyAccess source DotNetNuke.Entities.Users.UserInfo user System.Globalization.CultureInfo localization Methods | Improve this Doc View Source Get(String, String) Declaration public override string Get(string key, string format) Parameters Type Name Description System.String key System.String format Returns Type Description System.String Overrides LookUpBase.Get(String, String) Implements ILookUp"
  },
  "api/dot-net/ToSic.Sxc.Apps.App.html": {
    "href": "api/dot-net/ToSic.Sxc.Apps.App.html",
    "title": "Class App | 2sxc and EAV 10",
    "keywords": "Class App A single-use app-object providing quick simple api to access name, folder, data, metadata etc. Inheritance System.Object HasLog AppBase App App Implements IHasLog IHasPermissions IApp IApp IAppIdentity IZoneIdentity IAppIdentityLight IHasMetadata Inherited Members App.Name App.Folder App.Hidden App.AppGuid App.ShowDrafts App.Init(IAppIdentity, Func<App, IAppDataConfiguration>, ILog) App.Data App.Metadata App.Permissions App.AppConfiguration App.AppSettings App.AppResources App.InitializeResourcesSettingsAndMetadata() App.Query App.GetQuery(String) AppBase.ZoneId AppBase.AppId AppBase.Init(IAppIdentity, CodeRef, ILog) HasLog.Log HasLog.InitLog(String, ILog, String) HasLog.InitLog(String, ILog, String, CodeRef) Namespace : ToSic.Sxc.Apps Assembly : ToSic.Sxc.dll Syntax [PublicApi_Stable_ForUseInYourCode] public class App : App, IHasLog, IHasPermissions, IApp, IApp, IApp, IAppIdentityWithPublishingState, IAppIdentity, IZoneIdentity, IAppIdentityLight, IHasMetadata Constructors | Improve this Doc View Source App(App.AppDependencies, ILinkPaths) Declaration public App(App.AppDependencies dependencies, ILinkPaths linkPaths) Parameters Type Name Description ToSic.Eav.Apps.App.AppDependencies dependencies ToSic.Sxc.Run.ILinkPaths linkPaths Properties | Improve this Doc View Source Configuration Configuration object as a DynamicEntity. This contains things like app version, path etc. Declaration public AppConfiguration Configuration { get; } Property Value Type Description AppConfiguration An IDynamicEntity object | Improve this Doc View Source Path The path to the current app, for linking JS/CSS files and images in the app folder. Declaration public string Path { get; } Property Value Type Description System.String Path usually starting with /portals/... | Improve this Doc View Source Resources All the app resources (usually used for multi-language labels etc.) Declaration public dynamic Resources { get; } Property Value Type Description System.Object An IDynamicEntity object | Improve this Doc View Source Settings All the app settings which are custom for each app. Declaration public dynamic Settings { get; } Property Value Type Description System.Object An IDynamicEntity object | Improve this Doc View Source Thumbnail The thumbnail path for the current app. Declaration public string Thumbnail { get; } Property Value Type Description System.String path + app-icon.png if there is an icon there. Methods | Improve this Doc View Source InitNoData(IAppIdentity, ILog) Quick init - won't provide data but can access properties, metadata etc. Declaration public App InitNoData(IAppIdentity appIdentity, ILog parentLog) Parameters Type Name Description IAppIdentity appIdentity ILog parentLog Returns Type Description App | Improve this Doc View Source PreInit(ISite) Declaration public App PreInit(ISite site) Parameters Type Name Description ToSic.Eav.Context.ISite site Returns Type Description App Implements IHasLog IHasPermissions IApp IApp IAppIdentity IZoneIdentity IAppIdentityLight IHasMetadata"
  },
  "api/dot-net/ToSic.Sxc.Search.SearchIndexException.html": {
    "href": "api/dot-net/ToSic.Sxc.Search.SearchIndexException.html",
    "title": "Class SearchIndexException | 2sxc and EAV 10",
    "keywords": "Class SearchIndexException Special search exception, so these exceptions can be handled in a special way if necessary. Inheritance System.Object System.Exception SearchIndexException Implements System.Runtime.Serialization.ISerializable System.Runtime.InteropServices._Exception Inherited Members System.Exception.GetBaseException() System.Exception.ToString() System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext) System.Exception.GetType() System.Exception.Message System.Exception.Data System.Exception.InnerException System.Exception.TargetSite System.Exception.StackTrace System.Exception.HelpLink System.Exception.Source System.Exception.HResult System.Exception.SerializeObjectState Namespace : ToSic.Sxc.Search Assembly : ToSic.Sxc.Dnn.dll Syntax [InternalApi_DoNotUse_MayChangeWithoutNotice(\"this is just fyi\")] public class SearchIndexException : Exception, ISerializable, _Exception Constructors | Improve this Doc View Source SearchIndexException(ModuleInfo, Exception, String, Int32, Int32) Declaration public SearchIndexException(ModuleInfo module, Exception innerException, string source, int count, int max) Parameters Type Name Description DotNetNuke.Entities.Modules.ModuleInfo module System.Exception innerException System.String source System.Int32 count System.Int32 max Implements System.Runtime.Serialization.ISerializable System.Runtime.InteropServices._Exception"
  },
  "api/dot-net/ToSic.Eav.Data.ContentType.html": {
    "href": "api/dot-net/ToSic.Eav.Data.ContentType.html",
    "title": "Class ContentType | 2sxc and EAV 10",
    "keywords": "Class ContentType Represents a ContentType Inheritance System.Object ContentType Implements IContentType IAppIdentityLight IHasMetadata Namespace : ToSic.Eav.Data Assembly : ToSic.Eav.Core.dll Syntax [PublicApi_Stable_ForUseInYourCode] public class ContentType : IContentType, IAppIdentityLight, IHasMetadata, IContentTypeShared Constructors | Improve this Doc View Source ContentType(Int32, String, String) Basic initializer of ContentType class Declaration public ContentType(int appId, string name, string staticName = null) Parameters Type Name Description System.Int32 appId System.String name System.String staticName Remarks Overload for in-memory entities | Improve this Doc View Source ContentType(Int32, String, String, Int32, String, String, Nullable<Int32>, Int32, Int32, Boolean, IHasMetadataSource) Initializes a new ContentType - usually when building the cache Declaration public ContentType(int appId, string name, string staticName, int attributeSetId, string scope, string description, int? usesConfigurationOfAttributeSet, int configZoneId, int configAppId, bool configurationIsOmnipresent, IHasMetadataSource metaProviderOfThisApp) Parameters Type Name Description System.Int32 appId System.String name System.String staticName System.Int32 attributeSetId System.String scope System.String description System.Nullable < System.Int32 > usesConfigurationOfAttributeSet System.Int32 configZoneId System.Int32 configAppId System.Boolean configurationIsOmnipresent ToSic.Eav.Metadata.IHasMetadataSource metaProviderOfThisApp Properties | Improve this Doc View Source AlwaysShareConfiguration Declaration public bool AlwaysShareConfiguration { get; } Property Value Type Description System.Boolean | Improve this Doc View Source AppId The app id as used internally Declaration public int AppId { get; } Property Value Type Description System.Int32 The App ID this thing belongs to | Improve this Doc View Source Attributes Dictionary with all Attribute Definitions Declaration public IList<IContentTypeAttribute> Attributes { get; set; } Property Value Type Description System.Collections.Generic.IList < IContentTypeAttribute > | Improve this Doc View Source ContentTypeId Get the id of the Content Type - you usually don't need this! Declaration public int ContentTypeId { get; } Property Value Type Description System.Int32 | Improve this Doc View Source Description The content-type description Declaration public string Description { get; protected set; } Property Value Type Description System.String | Improve this Doc View Source IsDynamic Determines if the data for this type is dynamic (spontaneously created) or real an EAV (split into sql-tables) or json somewhere To detect if it's just a global json-type, find out what repository the type is from (RepositoryType) Declaration public bool IsDynamic { get; } Property Value Type Description System.Boolean | Improve this Doc View Source Item[String] A simple indexer to get an attribute Declaration public IContentTypeAttribute this[string fieldName] { get; } Parameters Type Name Description System.String fieldName Property Value Type Description IContentTypeAttribute The IContentTypeAttribute of the field name | Improve this Doc View Source Metadata Get the metadata for this content-type Declaration public ContentTypeMetadata Metadata { get; } Property Value Type Description ContentTypeMetadata Remarks The metadata is either already prepared, from the same app, or from a remote app | Improve this Doc View Source Name Gets the Display Name of the Content Type Declaration public string Name { get; } Property Value Type Description System.String | Improve this Doc View Source ParentAppId Declaration public int ParentAppId { get; } Property Value Type Description System.Int32 | Improve this Doc View Source ParentId Declaration public int? ParentId { get; } Property Value Type Description System.Nullable < System.Int32 > | Improve this Doc View Source ParentZoneId Declaration public int ParentZoneId { get; } Property Value Type Description System.Int32 | Improve this Doc View Source RepositoryAddress Information / ID / URL to this content-type where it was stored in the repository Declaration public string RepositoryAddress { get; } Property Value Type Description System.String | Improve this Doc View Source RepositoryType Information where the Content-Type was stored (file system, DB, etc.) Declaration public RepositoryTypes RepositoryType { get; } Property Value Type Description ToSic.Eav.Repositories.RepositoryTypes | Improve this Doc View Source Scope Get the scope of the Content Type (like sections in a DB) Declaration public string Scope { get; protected set; } Property Value Type Description System.String | Improve this Doc View Source StaticName Static name - can be a GUID or a system-term for special types Declaration public string StaticName { get; } Property Value Type Description System.String Methods | Improve this Doc View Source Is(String) Check if this type is the same as a name given. Will check both the name and the static name Declaration public bool Is(string name) Parameters Type Name Description System.String name Returns Type Description System.Boolean Explicit Interface Implementations | Improve this Doc View Source IHasMetadata.Metadata Declaration IMetadataOf IHasMetadata.Metadata { get; } Returns Type Description IMetadataOf Implements IContentType IAppIdentityLight IHasMetadata"
  },
  "api/dot-net/ToSic.Eav.Data.IEntity.html": {
    "href": "api/dot-net/ToSic.Eav.Data.IEntity.html",
    "title": "Interface IEntity | 2sxc and EAV 10",
    "keywords": "Interface IEntity The primary data-item in the system, IEntity is a generic data-item for any kind of information. Note that it inherits IEntityLight which is the basic definition without languages, versioning, publishing etc. We recommend you read about the Data Models in the EAV Inherited Members IEntityLight.EntityId IEntityLight.EntityGuid IEntityLight.MetadataFor IEntityLight.Type IEntityLight.Modified IEntityLight.Created IEntityLight.Relationships IEntityLight.GetBestTitle() IEntityLight.Owner IAppIdentityLight.AppId IHasPermissions.Permissions Namespace : ToSic.Eav.Data Assembly : ToSic.Eav.Core.dll Syntax [PublicApi_Stable_ForUseInYourCode] public interface IEntity : IEntity, IEntityLight, IAppIdentityLight, IPublish<IEntity>, IHasPermissions Properties | Improve this Doc View Source Attributes All the attributes of the current Entity. Declaration Dictionary<string, IAttribute> Attributes { get; } Property Value Type Description System.Collections.Generic.Dictionary < System.String , IAttribute > | Improve this Doc View Source Item[String] Gets an Attribute using its StaticName Declaration IAttribute this[string attributeName] { get; } Parameters Type Name Description System.String attributeName StaticName of the Attribute Property Value Type Description IAttribute A typed Attribute Object | Improve this Doc View Source Metadata Get the metadata for this item Declaration IMetadataOf Metadata { get; } Property Value Type Description IMetadataOf A typed Metadata provider for this Entity Remarks The metadata is either already prepared, from the same app, or from a remote app | Improve this Doc View Source Title Gets the \"official\" Title-Attribute IAttribute<T> Declaration IAttribute Title { get; } Property Value Type Description IAttribute The title of this Entity. The field used is determined in the IContentType . If you need a string, use GetBestTitle() instead. | Improve this Doc View Source Version version of this entity in the repository Declaration int Version { get; } Property Value Type Description System.Int32 The version number. Methods | Improve this Doc View Source Children(String, String) Get all the children IEntity items - optionally only of a specific field and/or type Declaration List<IEntity> Children(string field = null, string type = null) Parameters Type Name Description System.String field Optional field name to access System.String type Optional type to filter for Returns Type Description System.Collections.Generic.List < IEntity > List of children, or empty list if not found | Improve this Doc View Source GetBestTitle(String[]) Best way to get the current entities title Declaration string GetBestTitle(string[] dimensions) Parameters Type Name Description System.String [] dimensions Array of dimensions/languages to use in the lookup Returns Type Description System.String The entity title as a string | Improve this Doc View Source GetBestValue(String, String[]) Retrieves the best possible value for an attribute or virtual attribute (like EntityTitle) Automatically resolves the language-variations as well based on the list of preferred languages Declaration object GetBestValue(string attributeName, string[] languages) Parameters Type Name Description System.String attributeName Name of the attribute or virtual attribute System.String [] languages list of languages to search in Returns Type Description System.Object An object OR a null - for example when retrieving the title and no title exists the object is string, int or even a EntityRelationship | Improve this Doc View Source GetBestValue(String, String[], Boolean) Retrieves the best possible value for an attribute or virtual attribute (like EntityTitle) Automatically resolves the language-variations as well based on the list of preferred languages Declaration [Obsolete] object GetBestValue(string attributeName, string[] languages, bool resolveHyperlinks) Parameters Type Name Description System.String attributeName Name of the attribute or virtual attribute System.String [] languages list of languages to search in System.Boolean resolveHyperlinks If true, will try to resolve links in the value. Default is false. Returns Type Description System.Object An object OR a null - for example when retrieving the title and no title exists the object is string, int or even a EntityRelationship | Improve this Doc View Source GetBestValue<T>(String, String[]) Retrieves the best possible value for an attribute or virtual attribute (like EntityTitle) Automatically resolves the language-variations as well based on the list of preferred languages. Will cast/convert to the expected type, or return null / default value for that type if not possible. Declaration T GetBestValue<T>(string attributeName, string[] languages) Parameters Type Name Description System.String attributeName Name of the attribute or virtual attribute System.String [] languages list of languages to search in Returns Type Description T An object OR a null - for example when retrieving the title and no title exists the object is string, int or even a EntityRelationship Type Parameters Name Description T | Improve this Doc View Source GetBestValue<T>(String, String[], Boolean) Retrieves the best possible value for an attribute or virtual attribute (like EntityTitle) Automatically resolves the language-variations as well based on the list of preferred languages. Will cast/convert to the expected type, or return null / default value for that type if not possible. Declaration [Obsolete] T GetBestValue<T>(string attributeName, string[] languages, bool resolveHyperlinks) Parameters Type Name Description System.String attributeName Name of the attribute or virtual attribute System.String [] languages list of languages to search in System.Boolean resolveHyperlinks If true, will try to resolve links in the value. Default is false. Returns Type Description T An object OR a null - for example when retrieving the title and no title exists the object is string, int or even a EntityRelationship Type Parameters Name Description T | Improve this Doc View Source Parents(String, String) Get all the parent IEntity items - optionally only of a specific type and/or referenced in a specific field Declaration List<IEntity> Parents(string type = null, string field = null) Parameters Type Name Description System.String type The type name to filter for System.String field The field name where a parent references this item Returns Type Description System.Collections.Generic.List < IEntity > List of children, or empty list if not found | Improve this Doc View Source Value(String) Get the value of this field as an object. This overload without languages will always return the first value it finds, so if the data is multi-lingual, it's not reliable. This is preferred for internal work for configuration objects and similar which are not multi-language. Declaration object Value(string fieldName) Parameters Type Name Description System.String fieldName Returns Type Description System.Object The value or null if not found Remarks In addition to the fields this Entity has (like FirstName, etc.) you can also use known terms like EntityId, Modified etc. | Improve this Doc View Source Value<T>(String) Get the value of this field in a type-safe way. This overload without languages will always return the first value it finds, so if the data is multi-lingual, it's not reliable. This is preferred for internal work for configuration objects and similar which are not multi-language. Declaration T Value<T>(string fieldName) Parameters Type Name Description System.String fieldName Returns Type Description T The typed value or the (default) value - so a null for strings, false for boolean etc. Type Parameters Name Description T The type, usually string, int, bool, etc. Remarks In addition to the fields this Entity has (like FirstName, etc.) you can also use known terms like EntityId, Modified etc."
  },
  "api/dot-net/ToSic.Eav.Apps.AppData.html": {
    "href": "api/dot-net/ToSic.Eav.Apps.AppData.html",
    "title": "Class AppData | 2sxc and EAV 10",
    "keywords": "Class AppData The Data object on an App. It's also a data-source of type App , so it has many streams, one for each content-type so you can use it in combination with other DataSources. The special feature is that it also has methods for data-manipulation, including Create, Update and Delete Inheritance System.Object HasLog DataSourceBase App AppData Implements IAppData IDataSource IAppIdentity IZoneIdentity IAppIdentityLight ICacheKey ICacheExpiring ITimestamped ICanPurgeListCache IHasLog IDataTarget Inherited Members App.AppSwitch App.ZoneSwitch App.Metadata App.RequiresRebuildOfOut App.Out DataSourceBase.Name DataSourceBase.CacheRelevantConfigurations DataSourceBase.CachePartialKey DataSourceBase.CacheFullKey DataSourceBase.CacheTimestamp DataSourceBase.CacheChanged(Int64) DataSourceBase.AppId DataSourceBase.ZoneId DataSourceBase.Guid DataSourceBase.In DataSourceBase.Item[String] DataSourceBase.List DataSourceBase.Configuration DataSourceBase.Attach(IDataSource) DataSourceBase.Attach(String, IDataSource) DataSourceBase.Attach(String, IDataStream) DataSourceBase.PurgeList(Boolean) HasLog.Log HasLog.InitLog(String, ILog, String) HasLog.InitLog(String, ILog, String, CodeRef) Namespace : ToSic.Eav.Apps Assembly : ToSic.Eav.Apps.dll Syntax [PublicApi_Stable_ForUseInYourCode] public sealed class AppData : App, IAppData, IDataSource, IAppIdentity, IZoneIdentity, IAppIdentityLight, ICacheInfo, ICacheKey, ICacheExpiring, ITimestamped, ICanPurgeListCache, IHasLog, IDataTarget Constructors | Improve this Doc View Source AppData(Lazy<SimpleDataController>, Lazy<IUser>) Declaration public AppData(Lazy<SimpleDataController> dataController, Lazy<IUser> userLazy) Parameters Type Name Description System.Lazy < ToSic.Eav.Api.Api01.SimpleDataController > dataController System.Lazy < ToSic.Eav.Context.IUser > userLazy Methods | Improve this Doc View Source Create(String, Dictionary<String, Object>, String, ITarget) Create a new entity in the storage. Declaration public IEntity Create(string contentTypeName, Dictionary<string, object> values, string userName = null, ITarget target = null) Parameters Type Name Description System.String contentTypeName The type name System.Collections.Generic.Dictionary < System.String , System.Object > values a dictionary of values to be stored System.String userName the current user name - will be logged as the author ITarget target information if this new item is to be metadata for something Returns Type Description IEntity Remarks Changed in 2sxc 10.30 - now returns the id of the created items | Improve this Doc View Source Create(String, IEnumerable<Dictionary<String, Object>>, String) Create a bunch of new entities in one single call (much faster, because cache doesn't need to repopulate in the mean time). Declaration public IEnumerable<IEntity> Create(string contentTypeName, IEnumerable<Dictionary<string, object>> multiValues, string userName = null) Parameters Type Name Description System.String contentTypeName The type name System.Collections.Generic.IEnumerable < System.Collections.Generic.Dictionary < System.String , System.Object >> multiValues many dictionaries, each will become an own item when stored System.String userName the current user name - will be logged as the author Returns Type Description System.Collections.Generic.IEnumerable < IEntity > Remarks You can't create items which are metadata with this, for that, please use the Create-one overload Changed in 2sxc 10.30 - now returns the id of the created items | Improve this Doc View Source Delete(Int32, String) Delete an existing item Declaration public void Delete(int entityId, string userName = null) Parameters Type Name Description System.Int32 entityId The item ID System.String userName the current user name - will be logged as the author of the change | Improve this Doc View Source Init(IZoneMapper, ISite) Declaration public AppData Init(IZoneMapper zoneMapper, ISite site) Parameters Type Name Description ToSic.Eav.Run.IZoneMapper zoneMapper ToSic.Eav.Context.ISite site Returns Type Description AppData | Improve this Doc View Source Update(Int32, Dictionary<String, Object>, String) Update an existing item. Declaration public void Update(int entityId, Dictionary<string, object> values, string userName = null) Parameters Type Name Description System.Int32 entityId The item ID System.Collections.Generic.Dictionary < System.String , System.Object > values a dictionary of values to be updated System.String userName the current user name - will be logged as the author of the change Implements IAppData IDataSource IAppIdentity IZoneIdentity IAppIdentityLight ICacheKey ICacheExpiring ITimestamped ICanPurgeListCache IHasLog IDataTarget"
  },
  "api/dot-net/ToSic.Eav.DataSources.Queries.Connection.html": {
    "href": "api/dot-net/ToSic.Eav.DataSources.Queries.Connection.html",
    "title": "Struct Connection | 2sxc and EAV 10",
    "keywords": "Struct Connection Represent a connection which connects two DataSources in a Query Inherited Members System.ValueType.Equals(System.Object) System.ValueType.GetHashCode() System.ValueType.ToString() Namespace : ToSic.Eav.DataSources.Queries Assembly : ToSic.Eav.DataSources.dll Syntax [InternalApi_DoNotUse_MayChangeWithoutNotice(\"this is just fyi\")] public struct Connection Properties | Improve this Doc View Source From The DataSource ID which has data, an IDataSource Declaration public string From { get; set; } Property Value Type Description System.String | Improve this Doc View Source In The In-stream name on the target DataSource Declaration public string In { get; set; } Property Value Type Description System.String | Improve this Doc View Source Out The Out-stream name of the Source DataSource Declaration public string Out { get; set; } Property Value Type Description System.String | Improve this Doc View Source To The DataSource ID which receives data, an IDataTarget Declaration public string To { get; set; } Property Value Type Description System.String"
  },
  "api/dot-net/ToSic.Eav.DataSources.System.Attributes.html": {
    "href": "api/dot-net/ToSic.Eav.DataSources.System.Attributes.html",
    "title": "Class Attributes | 2sxc and EAV 10",
    "keywords": "Class Attributes A DataSource that returns the attributes of a content-type Inheritance System.Object HasLog DataSourceBase Attributes Implements IDataSource IAppIdentity IZoneIdentity IAppIdentityLight ICacheKey ICacheExpiring ITimestamped ICanPurgeListCache IHasLog IDataTarget Inherited Members DataSourceBase.Name DataSourceBase.CacheRelevantConfigurations DataSourceBase.CachePartialKey DataSourceBase.CacheFullKey DataSourceBase.CacheTimestamp DataSourceBase.CacheChanged(Int64) DataSourceBase.AppId DataSourceBase.ZoneId DataSourceBase.Guid DataSourceBase.In DataSourceBase.Out DataSourceBase.Item[String] DataSourceBase.List DataSourceBase.Configuration DataSourceBase.Attach(IDataSource) DataSourceBase.Attach(String, IDataSource) DataSourceBase.Attach(String, IDataStream) DataSourceBase.PurgeList(Boolean) HasLog.Log HasLog.InitLog(String, ILog, String) HasLog.InitLog(String, ILog, String, CodeRef) Namespace : ToSic.Eav.DataSources.System Assembly : ToSic.Eav.DataSources.dll Syntax [InternalApi_DoNotUse_MayChangeWithoutNotice] [VisualQuery(GlobalName = \"ToSic.Eav.DataSources.System.Attributes, ToSic.Eav.DataSources\", Type = DataSourceType.Source, Difficulty = DifficultyBeta.Advanced, DynamicOut = false, ExpectsDataOfType = \"5461d34d-7dc6-4d38-9250-a0729cc8ead3\", HelpLink = \"https://github.com/2sic/2sxc/wiki/DotNet-DataSource-Attributes\")] public sealed class Attributes : DataSourceBase, IDataSource, IAppIdentity, IZoneIdentity, IAppIdentityLight, ICacheInfo, ICacheKey, ICacheExpiring, ITimestamped, ICanPurgeListCache, IHasLog, IDataTarget Remarks Technically many things could just identify the app they belong to, and let the system look up the zone. But this would be inefficient, so for optimization, many items identify themselves with both the app and zone Ids Constructors | Improve this Doc View Source Attributes() Constructs a new Attributes DS Declaration public Attributes() Properties | Improve this Doc View Source ContentTypeName The content-type name Declaration public string ContentTypeName { get; set; } Property Value Type Description System.String | Improve this Doc View Source LogId Declaration public override string LogId { get; } Property Value Type Description System.String Overrides ToSic.Eav.DataSources.DataSourceBase.LogId Implements IDataSource IAppIdentity IZoneIdentity IAppIdentityLight ICacheKey ICacheExpiring ITimestamped ICanPurgeListCache IHasLog IDataTarget"
  },
  "net-code/data/linq-datasource.html": {
    "href": "net-code/data/linq-datasource.html",
    "title": "Querying Data and Data Sources with code and LINQ | 2sxc and EAV 10",
    "keywords": "Querying Data and Data Sources with code and LINQ To get started, we recommend you read the LINQ Guide and play around with the Razor Tutorial App These common (extension) methods can be used on lists from 2sxc data streams (they all inherit from types implementing IEnumerable ): .Where() - filter a list (IEnumerable) based on a specific criteria .Any() - returns true if any of the elements matches a criteria .OrderBy() / .OrderByDescending() - order a list (IEnumerable) by a specific field .First() / .Last() - get first or last element in the list .Select() - transform list into a new list, selecting specific field(s) .Take() / .Skip() - paging functions .Count() - count number of elements .IndexOf() - find index of a specific element in the list For a full list of all System.Linq methods, check out the methods of IEnumerable Discover More in the Razor Tutorials We have an rich series of Razor tutorials . You should really check them out üëç. Using Statements As explained in the guide we recommend the following using statements in Razor: @using System.Linq; @using Dynlist = System.Collections.Generic.IEnumerable<dynamic>; Where Filter a list (IEnumerable) based on a criteria. Example: Basic filter of a list by string var items = AsDynamic(Data[\"Default\"]); items = items.Where(p => p.Name == \"Chuck Norris\"); // items now contains only items which have \"Chuck Norris\" as name property Any Returns true if any of the elements matches a criteria. var items = AsDynamic(Data[\"Default\"]); var containsChuckNorris = items.Any(p => p.Name == \"Chuck Norris\"); // if containsChuckNorris is true, at least one element has name \"Chuck Norris\" Here's another Any - to see if a relationship contains something. It's a bit more complex, because Razor needs to know what it's working with: // filter - keep only those that have this Category // note that the compare must run on the EntityId because of object wrapping/unwrapping postsToShow = postsToShow .Where(p => (p.Categories as List<dynamic>) .Any(c => c.EntityId == ListContent.Category[0].EntityId)) OrderBy / OrderByDescending Order a list (IEnumerable) by a specific field. var items = AsDynamic(Data[\"Default\"]); items = items.OrderBy(p => p.Name); // items are now ordered by property \"Name\" First / Last Get first or last element of the list. var items = AsDynamic(Data[\"Default\"]); var first = items.First(); // contains the first element var last = items.Last(); // contains the last element Select Transform list into a new list, selecting only specified field(s). var items = AsDynamic(Data[\"Default\"]); var names = items.Select(p => p.Name); // names is a list of all names Take / Skip Paging functions: Take only n elements, skip m elements var items = AsDynamic(Data[\"Default\"]); items = items.Skip(10).Take(10); // Skips the first 10 elements and select only 10 Count Count number of elements in a list. var items = AsDynamic(Data[\"Default\"]); var count = items.Count(); // contains the number of elements in the list IndexOf Find index of a specific element in the list. @{ var items = AsDynamic(Data[\"Default\"]); } @foreach(var item in items) { <h1>Item number @items.IndexOf(item)</h1> }"
  },
  "net-code/data/linq-guide.html": {
    "href": "net-code/data/linq-guide.html",
    "title": "Guide to Working with LINQ and 2sxc/EAV Data | 2sxc and EAV 10",
    "keywords": "Guide to Working with LINQ and 2sxc/EAV Data In many cases you will want to sort, filter or group some data, or quickly check if any data was found. When using Razor or working in WebApi, this is best done with LINQ. This guide will assist you to get everything working. For a more API-oriented documentation, see DotNet Query LINQ . We also recommend to play around with the Razor Tutorial App Discover More in the Razor Tutorials We have an rich series of Razor tutorials . You should really check them out üëç. LINQ Basics The way LINQ works is that the namespace System.Linq contains a bunch of extension methods like .Count() , .Where(...) and more. So to use LINQ you need to add a @using statement to razor or just using in a WebApi class. Here's a simple razor example: @using System.Linq; @{ var newestPosts = AsList(App.Data[\"BlogPost\"]) .OrderByDescending(b => b.PublicationDate) .Take(3); } This demonstrates: adding the using statement getting all the BlogPost items using App.Data[\"BlogPost\"] converting it to a list of dynamic objects which will allow the nice syntax using AsList(...) sorting these with newest on top using .OrderByDescending(...) on the property PublicationDate keeping only the first 3 using .Take(3) it also shows how placing the parts on separate lines makes the code easier to read Important: Working with LINQ and dynamic objects LINQ needs IEnumerable<...> Before we continue, it's important that you really understand that LINQ commands are stored as extension methods of IEnumerable<T> . So this works: @using System.Linq; @{ var list = new List<string> { \"word\", \"word\" }; var x = list.First(); } ...whereas this does not: @using System.Linq; @{ var y = 27.First(); } This sounds obvious, but there's an important catch: if the compiler doesn't know that something is an IEnumerable , it will not even try to use the LINQ extension methods, because it doesn't know that it can. So let's look at that... LINQs Problems with dynamic objects #1 Here's an example that would fail: @using System.Linq; @{ dynamic list = new List<string> { \"word\", \"word\" }; var x = list.First(); } The only difference to before is that list ist now dynamic . It contains the same object, but the compiler doesn't treat it that way. In Razor, we use dynamic objects all the time, where we run into this problem. Here's an example which fails: @using System.Linq; @{ var books = AsList(App.Data[\"Books\"]); var booksWithoutAuthors = books .Where(b => !b.Authors.Any()); } Internally the b.Authors returns a list of authors, but the compiler doesn't know this, since it's treated as a dynamic object. You would get an error. To solve this, we must tell the compiler that b.Authors is an IEnumerable, like this: @using System.Linq; @using System.Collections.Generic; @{ var books = AsList(App.Data[\"Books\"]); var booksWithoutAuthors = books .Where(b => !(b.Authors as IEnumerable<dynamic>).Any()); } But let's be honest - it's ugly, long and prone to typos. Especially in a complex query where you could have many of these. So we recommend to define a shorthand for it, like this: @using System.Linq; @using Dynlist = System.Collections.Generic.IEnumerable<dynamic>; @{ var books = AsList(App.Data[\"Books\"]); var booksWithoutAuthors = books .Where(b => !(b.Authors as Dynlist).Any()); } LINQs problem with dynamic objects #2 LINQ methods often have multiple signatures. This means the same command can be written in different ways and with different parameters. To detect the right method, the compiler needs to know the data-types used in the parameters. This causes problem with dynamic objects because the compiler doesn't know what it is until runtime. Check this out: @using System.Linq; @{ var dogString = \"dog\" dynamic dogDyn = \"dog\"; var list = new List<string> { \"dog\", \"cat\", \"hound\" }; var x = list.Contains(dogString); // this works var x = list.Contains(dogDyn); // this fails } To fix this, we must tell the compiler it's an object: @using System.Linq; @{ dynamic dynDog = \"dog\"; var list = new List<string> { \"dog\", \"cat\", \"hound\" }; var x = list.Contains(dynDog as object); } The above example is a bit trivial but here's a real life example, taken from the 2sxc razor tutorial : @using System.Linq; @using Dynlist = System.Collections.Generic.IEnumerable<dynamic>; @{ var persons = AsList(App.Data[\"Persons\"]); var books = AsList(App.Data[\"Books\"]); var booksWithAwardedAuthors = books .Where(b => (b.Authors as Dynlist) .SelectMany(a => a.Awards as Dynlist) .Any() ); var otherBooks = books .Where(b => !(booksWithAwardedAuthors as Dynlist) .Contains(b as object) ); } LINQs problem with dynamic object #3 The last bit has to do with how dynamic objects are built, since they are usually wrapper-objects to help write nicer template code. As wrappers, they are different objects every time. This shows the problem: @using System.Linq; @using Dynlist = System.Collections.Generic.IEnumerable<dynamic>; @{ // this is just the data object, \"@bookData.Author\" wouldn't work var bookData1 = App.Data[\"Books\"].First(); var bookData2 = App.Data[\"Books\"].First(); // this is now a dynamic object, allowing @bookDyn1.Author\" var bookDyn1 = AsList(bookData1); var bookDyn2 = AsList(bookData2); var dataIsSame = bookData1 == bookData2; // true var dynIsSame = bookDyn1 == bookDyn2; // false before 2sxc 9.42 } This doesn't sound like a big deal, but it is. Look at this code from the example above: var otherBooks = books .Where(b => !(booksWithAwardedAuthors as Dynlist) .Contains(b as object) ); The .Contains(...) clause receives a variable b which is actually the dynamic wrapper, and will not be the same as the dynamic wrapper of dynamic wrappers given in booksWithAwardedAuthors . So contains would always say \"nope, didn't find it\". Solving the comparison / equality problem requires the underlying wrapper object to tell the .net framework, that == , != and a few internal methods must work differently. 2sxc 9.42 does this, so the above code would actually work in 2sxc 9.42, but not in previous versions. If another system gives you dynamic objects, you will probably have to write it like this: // this example is for non-2sxc objects or 2sxc before 9.42 var otherBooks = books .Where(b => !(booksWithAwardedAuthors as Dynlist) .Contains(bookWithAward => bookWithAward != null && bookWithAward.SomeProperty == b.SomeProperty) ); LINQs problem with boolean null-objects In many cases, dynamic objects could have a property like Show which could be a boolean, but it could also be null . So this could cause an error: var show = links.Where(x => x.Show); To fix this, the easiest way is to really compare it with true or false as you want, each way will result in treating the null as the opposite (so you decide if null should be yes or no): @using System.Linq; @using Dynlist = System.Collections.Generic.IEnumerable<dynamic>; Dynlist list; list = links.Where(x => x.Show == true); // take true, skip false & null list = links.Where(x => x.Show != true); // take false & null, skip true list = links.Where(x => x.Show == false); // take false, skip true & null list = links.Where(x => x.Show != false); // take true & null, skip false list = links.Where(x => x.Show == null); // take null, skip true & false Read also, Demo App and further links LINQ API Docs Razor Tutorial App showing all kinds of Queries History Guide created 2019-03"
  },
  "net-code/debug/index.html": {
    "href": "net-code/debug/index.html",
    "title": "2sxc Insights for Debugging Server-Code | 2sxc and EAV 10",
    "keywords": "2sxc Insights for Debugging Server-Code This should give you some minimal guidance into debugging 2sxc. You have the following tools at your disposal: 2sxc Insights is a real-time log of what's happening on each request. You can access it through the admin-toolbar (rotate the more-button till you see a speedometer and click on it). This is the most powerful and in-depth system which also gives you insights when no errors are thrown, but you expect different results. DNN Event Log are a standard part of DNN and give you error details when things break. Note that our documentation is not complete, but you should read the Blog Post about 2sxc Insights This may Also be Helpfull Debug what's happening in the Network F12 is one of your most important friends when debugging what's happening. Watch the chrome-console for network trafic and JS errors. Debug Client Side Code 2sxc Insights has a client-side implementation as well. Open the F12 console and you'll see some messages that you can use $2sxc.insights() to see what's happening in the browser. Just follow the instructions shown as you call those functions in the console. History Introduced 2sxc Insights (server-side) v9.31 Major enhancements in v10.22"
  },
  "api/dot-net/index.html": {
    "href": "api/dot-net/index.html",
    "title": "This is the 2sxc API Documentation | 2sxc and EAV 10",
    "keywords": "This is the 2sxc API Documentation Background: Architecture of Eav, Sxc, Dnn Tip Before you start, please get familiar with the architecture - otherwise you probably won't understand what you see here. Note also that the real code of EAV/2sxc/DNN has way more stuff, but that's inofficial. Please don't use objects that are not documented here. That allows us to improve the architecture without worrying about breaking your code. Once we're really sure that certain parts are very final, we'll publish the API docs for those parts. Tip We've color and icon coded all the things you might care about. Internal stuff in subdued marks things usually used in Razor/WebApi development marks things related to data processing, usually data sources marks ADAM things (automatic Digital Asset Management) marks things related to metadata What You're Probably Looking for APIs in Razor Templates and WebApi If you are creating a Razor template and want to know what APIs are available, start with RazorComponent . This is because new Razor Components inherits from that, so you'll see all the commannds you get there. If you're creating a WebApi and need to know everything in it, you also want to check the ApiController , because all new WebApi classes inherit that. Working with Entities and ADAM Assets If you're working with DynamicEntity objects and want to know more about them, check out IDynamicEntity . In very rare cases you also want to know more about the underlying IEntity . If you're working with ADAM Assets, like from the AsAdam(...) command on IDynamicEntity objects, you'll want to read about IFolder and IFile Programming with DataSources and VisualQuery All the DataSources are based on IDataSource and most of them are also IDataTarget . You can find most of them in ToSic.Eav.DataSources ."
  },
  "net-code/dynamic-data/entity.html": {
    "href": "net-code/dynamic-data/entity.html",
    "title": "Entity Objects | 2sxc and EAV 10",
    "keywords": "Entity Objects All content-items in the EAV database of 2sxc are internally handled as Entity objects with the interface IEntity . When using content-items in Razor-Templates and WebAPIs you usually don't care about this, as you will use it as a IDynamicEntity . But there are some advanced cases where you need to look deeper into the object - maybe to check if a translation exists in another language, or if the value is blank because it's null, or an empty string. In this case you'll need to look at the internals, the IEntity . To learn more about the differences, check out DynamicEntity vs Entity Using the IEntity Interface Just a short piece of code to show how it would work (but not usually recommended). // This example shows how to get the link as stored in the data // without converting page:74 to the real link var languagePreference = [\"de\", \"en\"]; var autoResolveLinks = false; var rawLink = AsEntity(Content).GetBestValue(\"Link\", languagePreference, autoResolveLinks); // Hard-core accessing the internal data structure IEntity entity = AsEntity(Content); Dictionary<string, IAttribute> attribs = entity.Attributes; IAttribute titleMultiLanguage = attribs[\"Title\"]; string attType = titleMultiLanguage.Type; IEnumerable<IValue> titleVals = titleMultiLanguage.Values; IValue firstTitle = titleVals.First(); string firstString = firstTitle.ToString(); IEnumerable<ILanguage> langAssignments = firstTitle.Languages; //etc. When would You need to work with Entity objects For Razor and WebAPI these are edge cases, but they are real: The DynamicEntity will automatically resolve links like page:72 and give you http://... . In rare cases you may need to actually get page:72 and for this you need to convert back to Entity. If you want to explicitly figure out what languages have been translated on a value To find out more about the underlying Content-Type (like to list the fields) If the entity is Metadata and you want to know what it's assigned to If the entity has Metadata and you want to get that Read also Discover More in the Razor Tutorials We have an rich series of Razor tutorials . You should really check them out üëç. In case you feel like you really need to know more about the real Entity objects, check out these things: IEntity API AsEntity(...) Entity vs. Dynamic Entity Content-Items History Introduced in 2sxc 01.00 Multi-Language since 2sxc 02.00 Added Value and Value<T> as well as Parents() and Children(...) in 09.42. Note that Value does not do the same thing as GetBestValue."
  },
  "net-code/dynamic-code/object-app.html": {
    "href": "net-code/dynamic-code/object-app.html",
    "title": "App / object Dynamic Code | 2sxc and EAV 10",
    "keywords": "App / @App object Dynamic Code The App object gives you full access to everything you need to know about the current App, including Path-info, access to all Data this App has, access to Settings and language Resources and more. Discover More in the Razor Tutorials We have an rich series of Razor tutorials . You should really check them out üëç. How to use Here's are two simple examples taken from the Blog App : <link rel=\"stylesheet\" href=\"@App.Path/assets/style.css\" data-enableoptimizations=\"true\"/> <script type=\"text/javascript\" src=\"@App.Path/assets/scripts.js\" data-enableoptimizations=\"true\"></script> @foreach(var tag in AsDynamic(App.Data[\"Tag\"])) { <li class='@(\"app-blog-tag\" + tag.ManualWeight)'><a href=\"@App.Settings.DetailsPage/tag/@tag.Tag\" title=\"@tag.Name\">@tag.Name</a></li> } The <link... and <script... use the app-path to ensure that the file is correctly loaded, no matter what portal or app-name is currently valid. Here you can discover more about the optimizations . The loop iterates through all tags with the @foreach(var tag in AsDynamic(App.Data[\"Tag\"])) , creates <li> items and links these to a page defined in the App.Settings . How it works Whenever a 2sxc-instance is created to render a page or to deliver JSON data, the App object is created and prepared to deliver everything you need. It's very performant, because it doesn't actually get any data or run any queries unless these are accessed. App Properties The app-object uses the IApp interface ( see code ) has the following simple properties: AppId number, current App id AppGuid guid, internal use global id Configuration DynamicEntity , contains the configuration content-item Data IAppData, to access all App-data (see below) Folder string, storage folder name in portal/#/2sxc/... Hidden bool, info if the app cannot be selected in the UIs Name string, the app name Path string, the path as used in URLs in html PhysicalPath string, the path as used on the server C:... Query[\"QueryName\"] dictionary of queries (see below) Resources DynamicEntity , all the multi-language labels etc. (see below) Settings DynamicEntity , all the app-settings (see below) ZoneId number, current Zone ID (similar to PortalId) Using App Data (App.Data) The App object gives you immediate acccess to all data in the app, through the Data property. Basically you can use it as follows: Get All Data Items of a Content Type App.Data[\"ContentTypeName\"] will give you a stream of all entities of that type. In most cases you'll use an AsDynamic(...) to use it efficiently in loops etc. because most of the razor templating will prefer a DynamicEntity to a pure IEntity-object. Here's an example: @foreach(var post in AsDynamic(App.Data[\"BlogPost\"])) { @RenderPage(\"_list-item.cshtml\", new { Post = post }) } note : this will give you all items, but you'll have to sort it using LINQ or other mechanisms. If you're not familiar with that, you're better of using App.Query[...] (see below). Edit App Data Content-Items In addition to giving access to all entities in this app, you can also create, edit and delete items using the App.Data object. The commands provided are: App.Data.Create(contentTypeName, values, userName) App.Data.Update(entityId, values, userName) App.Data.Delete(entityId, userName) You can read more about this in the App Data API Feature Using App Queries (App.Query) The queries you create in the app-configuration dialogs can do many things like filter certain items, order them and more. You will often just connect them to a template and visualize the result, by you can also use it in your code. Here's how: @foreach(var tag in AsDynamic(App.Query[\"SortedTags\"][\"Default\"])) { <li class='@(\"app-blog-tag\" + tag.ManualWeight)'><a href='@Link.To(\"tag= \" tag.Tag)' title=\"@tag.Name\">@tag.Name</a></li> } Technically the App.Query is a IDictionary<string, IDataSource> , meaning that it's a dictionary using string identifiers (names), returning an IDataSource object. It's important to realize that a DataSource can deliver multiple streams of data - a bit like delivering multiple tables. Each stream has a name, and you must specify which stream you want to work with. In the above example, we're using the Default stream as defined with App.Query[\"SortedTags\"][\"Default\"] . Note about Unpublished / Draft Content-Items In case you're not aware of the draft/unpublished features in 2sxc, we want to note that each item can be live/draft, and each item could have a corresponding counterpart. So a draft-item could have a live-item (but doesn't have to), and a live-item could have a draft item. This is important, because the admin/editor will see all the draft items, while the end-user will only see the live ones. So the exact items shown and the item-count can differ if you are logged in. App Settings and Resources In the App dialogs you can manage Settings and Resources . Basically both are a content-item with the fields you specify, the only difference is the purpose they have. You should put button-labels, standard-texts, decorative images etc. into Resources and these will often change from language to language. You should put settings like \"what page is xxx on\" or \"the primary color is #53aaff\" into Settings You would normally use it like this: <h1 class='@App.Settings.HeadingsDecorators'> @Content.Title </h1> <div> @Content.Body </div> <a href=\"@App.Settings.DisclaimerPage\"> @App.Resources.Disclaimer </a> As you can see, the HeadingsDecorators or DisclaimerPage are best placed in the Settings , while the label of the Disclaimer link are best handled as a multi-language Resource . Read also If you need to get an App object for other apps, read External App Use If you want to use the App object from non 2sxc-code, like other MVC pages, check out External App Use Demo App and further links You should find some code examples in this demo App Blog App showing many such features More links: App Data Create/Update/Delete History Introduced in 2sxc 05.05 Stable since 2sxc 06.00 Data-API was introduced in 2sxc 06.05"
  },
  "net-code/conventions/index.html": {
    "href": "net-code/conventions/index.html",
    "title": "Code Conventions | 2sxc and EAV 10",
    "keywords": "Code Conventions Here we will collect important coding conventions to help you understand the APIs better."
  },
  "net-code/conventions/use-named-parameters.html": {
    "href": "net-code/conventions/use-named-parameters.html",
    "title": "Convention: Named Parameters | 2sxc and EAV 10",
    "keywords": "Convention: Named Parameters When working with the C# / Razor API, most commands require named parameters. This means that a command like this is valid <div @Edit.TagToolbar(actions: \"new\", contentType: \"BlogPost\")> ... </div> ...and this is not <div @Edit.TagToolbar(\"new\", \"BlogPost\")> ... </div> Reason Behind Named Parameters We often have APIs which start simple - like @Edit.TagToolbar() and continue to receive new features. At first, the parameter order will make sense - for that simple use case. But as the API grows, the parameter-order will become strange, simply because we would have to order them in the sequence they were added (to keep compatibility) and not in the order that makes sense. By using named parameters, we're making sure that the parameter order never matters and the API stays stable/compatible for the future. Not all Parameters Require Names Because of historic reasons and because some APIs simply have a very obvious first or second parameter, it may be that the first 1-2 parameters are not named. An example is @Edit.TagToolbar(Content) which assumes that the first parameter without name is the item (entity) for which this toolbar is meant. How It's Implemented Internally the real signature of the command uses a parameter which has a fairly random value. The call then checks if the value of that parameter is this random value, and if not, shows an error. This is to protect you from accidentally using the command without naming the parameters. Note: you could of course work around this, by providing that random value and trick the call to accept unnamed parameters. Don't do this - as we will no guarantee that the API signature (parameter order) will stay the same. History Introduced ca. in 2sxc 6"
  },
  "net-code/data/index.html": {
    "href": "net-code/data/index.html",
    "title": "Use LINQ with Dynamic Data in Dynamic Code | 2sxc and EAV 10",
    "keywords": "Use LINQ with Dynamic Data in Dynamic Code LINQ (Language Integrated Query) from Microsoft is a highly efficient API to quickly sort, filter and reorganize list of data. It's built into .net. You probably want to check out one of the following: Tutorials Discover More in the Razor Tutorials We have an rich series of Razor tutorials . You should really check them out üëç. LINQ Tutorials on 2sxc.org 2sxc LINQ Docs Guide to Working with LINQ and 2sxc/EAV Data Querying Data and Data Sources with code and LINQ Microsoft Docs LINQ in the Microsoft Docs"
  },
  "net-code/errors/linq-cannot-use-lambda.html": {
    "href": "net-code/errors/linq-cannot-use-lambda.html",
    "title": "Error Cannot use a lambda expression | 2sxc and EAV 10",
    "keywords": "Error Cannot use a lambda expression If you see an error like this: Cannot use a lambda expression as an argument to a dynamically dispatched operation without first casting it to a delegate or expression tree type at System.Web.Compilation.AssemblyBuilder.Compile() at System.Web.Compilation.BuildProvidersCompiler.PerformBuild() at System.Web.Compilation.BuildManager.CompileWebFile(VirtualPath virtualPath) at System.Web.Compilation.BuildManager.GetVPathBuildResultInternal(VirtualPath virtualPath, Boolean noBuild, Boolean allowCrossApp, Boolean allowBuildInPrecompile, Boolean throwIfNotFound, Boolean ensureIsUpToDate) at System.Web.Compilation.BuildManager.GetVPathBuildResultWithNoAssert(HttpContext context, VirtualPath virtualPath, Boolean noBuild, Boolean allowCrossApp, Boolean allowBuildInPrecompile, Boolean throwIfNotFound, Boolean ensureIsUpToDate) at System.Web.Compilation.BuildManager.GetVirtualPathObjectFactory(VirtualPath virtualPath, HttpContext context, Boolean allowCrossApp, Boolean throwIfNotFound) at System.Web.Compilation.BuildManager.GetCompiledType(VirtualPath virtualPath) at ToSic.Sxc.Engines.RazorEngine.CreateWebPageInstance() in It usually means that you tried to write LINQ code like a .First(...) or .Select(...) on an object, and the compiler can't be sure that you tried to write LINQ. Background: Dynamic Code and Extension Methods Razor is dynamically compiled code, and many objects like Content are typed as dynamic . Because of this, the compiler can't be sure what's in a dynamic object, and also not what is in a Content.Tags - since this too is regarded as dynamic . This is why you can't just write Content.Tags.First() , because .First() is an extension method which the compiler must find first - but it can't do that, since it doesn't know that Content.Tags are of the type IEnumerable<...> . Solution #1 - use AsList(...) 2sxc 10.20 introduces AsList(...) which the compiler knows is an IEnumerable. Unfortunately if the the compiler isn't sure about Content.Tags , then it's also not sure about AsList(Content.Tags) . This is a minor inconvenience, since AsList(...) would figure things out, but Razor wants to be sure. So to use AsList() for solving this problem, you'll need to write AsList(Content.Tags as object) . That solves it. Solution #2 - cast as IEnumerable<dynamic> If you already know it's a list, you can also cast it as an IEnumerable<dynamic> . Since IEnumerable<T> is in the namespace System.Collections.Generic you have 3 options: Cast with full Namespace This is what the compiler actually understands - but it's a bit long and hard to read: var authors = (book.Authors as System.Collections.Generic.IEnumerable<dynamic>) .Select(a => a.FirstName + \" \" + a.LastName); Cast with @using and IEnumerable<dynamic> This is the same thing, just nicer to read: @using System.Collections.Generic; var authors = (book.Authors as IEnumerable<dynamic>) .Select(a => a.FirstName + \" \" + a.LastName); Cast with @using Dynlist = ... This is the same thing, but the nicest, easiest to read method: @using Dynlist = System.Collections.Generic.IEnumerable<dynamic>; var authors = (book.Authors as Dynlist) .Select(a => a.FirstName + \" \" + a.LastName);"
  },
  "api/dot-net/ToSic.Eav.Data.IAttribute-1.html": {
    "href": "api/dot-net/ToSic.Eav.Data.IAttribute-1.html",
    "title": "Interface IAttribute<T> | 2sxc and EAV 10",
    "keywords": "Interface IAttribute<T> Represents an Attribute (Property), but strongly typed Inherited Members IAttribute.Values IAttributeBase.Name IAttributeBase.Type IAttributeBase.ControlledType Namespace : ToSic.Eav.Data Assembly : ToSic.Eav.Core.dll Syntax [PublicApi_Stable_ForUseInYourCode] public interface IAttribute<T> : IAttribute, IAttributeBase Type Parameters Name Description T Type of the Value Remarks We recommend you read about the Data Models in the EAV Properties | Improve this Doc View Source Item[Int32] Gets the Value for the specified Language/Dimension using the ID accessor. Usually not needed. Typed. Declaration T this[int languageId] { get; } Parameters Type Name Description System.Int32 languageId the language id (number) Property Value Type Description T | Improve this Doc View Source Item[Int32[]] Gets the Value for this Languages, typed Declaration T this[int[] languageIds] { get; } Parameters Type Name Description System.Int32 [] languageIds list of languages to check Property Value Type Description T | Improve this Doc View Source Item[String] Get the best/first matching value for the specified language key - typed Declaration T this[string languageKey] { get; } Parameters Type Name Description System.String languageKey The language key (string) to look for Property Value Type Description T | Improve this Doc View Source Item[String[]] Get the best/first matching value for the specified language keys - typed Declaration T this[string[] languageKeys] { get; } Parameters Type Name Description System.String [] languageKeys list of language keys Property Value Type Description T | Improve this Doc View Source Typed Gets the typed Value Objects - so the same as Values, but with the correct type Declaration IList<IValue<T>> Typed { get; } Property Value Type Description System.Collections.Generic.IList < IValue <T>> | Improve this Doc View Source TypedContents Gets the typed first/default value Declaration T TypedContents { get; } Property Value Type Description T"
  },
  "api/dot-net/ToSic.Eav.Data.IWrapper-1.html": {
    "href": "api/dot-net/ToSic.Eav.Data.IWrapper-1.html",
    "title": "Interface IWrapper<T> | 2sxc and EAV 10",
    "keywords": "Interface IWrapper<T> This is for any object which does something, but caries with it an original object which is the type of the hosting system (environment) Namespace : ToSic.Eav.Data Assembly : ToSic.Eav.Core.dll Syntax [InternalApi_DoNotUse_MayChangeWithoutNotice(\"this is just fyi\")] public interface IWrapper<out T> Type Parameters Name Description T Properties | Improve this Doc View Source UnwrappedContents The underlying, original object. Helpful for inner methods which need access to the real, underlying item. It has a lengthy name so that objects which implement the wrapper don't need to fear that another property would have the same name. Declaration T UnwrappedContents { get; } Property Value Type Description T"
  },
  "api/dot-net/ToSic.Eav.DataSources.CsvDataSource.html": {
    "href": "api/dot-net/ToSic.Eav.DataSources.CsvDataSource.html",
    "title": "Class CsvDataSource | 2sxc and EAV 10",
    "keywords": "Class CsvDataSource DataSource for importing/reading CSV files. Inheritance System.Object HasLog DataSourceBase ExternalData CsvDataSource Implements IDataSource IAppIdentity IZoneIdentity IAppIdentityLight ICacheKey ICacheExpiring ITimestamped ICanPurgeListCache IHasLog IDataTarget Inherited Members ExternalData.CacheTimestamp DataSourceBase.Name DataSourceBase.CacheRelevantConfigurations DataSourceBase.CachePartialKey DataSourceBase.CacheFullKey DataSourceBase.CacheChanged(Int64) DataSourceBase.AppId DataSourceBase.ZoneId DataSourceBase.Guid DataSourceBase.In DataSourceBase.Out DataSourceBase.Item[String] DataSourceBase.List DataSourceBase.Configuration DataSourceBase.Attach(IDataSource) DataSourceBase.Attach(String, IDataSource) DataSourceBase.Attach(String, IDataStream) DataSourceBase.PurgeList(Boolean) HasLog.Log HasLog.InitLog(String, ILog, String) HasLog.InitLog(String, ILog, String, CodeRef) Namespace : ToSic.Eav.DataSources Assembly : ToSic.Eav.DataSources.dll Syntax [PublicApi_Stable_ForUseInYourCode] [VisualQuery(GlobalName = \"ToSic.Eav.DataSources.CsvDataSource, ToSic.Eav.DataSources\", Type = DataSourceType.Source, DynamicOut = false, ExpectsDataOfType = \"|Config ToSic.Eav.DataSources.CsvDataSource\", HelpLink = \"https://r.2sxc.org/DsCsv\")] public class CsvDataSource : ExternalData, IDataSource, IAppIdentity, IZoneIdentity, IAppIdentityLight, ICacheInfo, ICacheKey, ICacheExpiring, ITimestamped, ICanPurgeListCache, IHasLog, IDataTarget Properties | Improve this Doc View Source ContentType Name of the content type which the imported entities have. This is fake, but may be necessary for later filtering of the types. Defaults to \"Anonymous\" Declaration public string ContentType { get; set; } Property Value Type Description System.String | Improve this Doc View Source Delimiter Delimiter character in the CSV, usually a ',' or ';' but could also be a tab or something. Default is tab. Declaration public string Delimiter { get; set; } Property Value Type Description System.String | Improve this Doc View Source FilePath Path to the CSV file, relative to the website root Declaration public string FilePath { get; set; } Property Value Type Description System.String | Improve this Doc View Source IdColumnName Column in the CSV which contains the ID. Declaration public string IdColumnName { get; set; } Property Value Type Description System.String | Improve this Doc View Source ServerFilePath Full path to the CSV file. Declaration public string ServerFilePath { get; } Property Value Type Description System.String | Improve this Doc View Source TitleColumnName The CSV column containing the title of the item - for dropdowns etc. and the EntityTitle property. Declaration public string TitleColumnName { get; set; } Property Value Type Description System.String Implements IDataSource IAppIdentity IZoneIdentity IAppIdentityLight ICacheKey ICacheExpiring ITimestamped ICanPurgeListCache IHasLog IDataTarget"
  },
  "api/dot-net/ToSic.Eav.Apps.Assets.html": {
    "href": "api/dot-net/ToSic.Eav.Apps.Assets.html",
    "title": "Namespace ToSic.Eav.Apps.Assets | 2sxc and EAV 10",
    "keywords": "Namespace ToSic.Eav.Apps.Assets Everything related to assets in an EAV/2sxc App. It's the foundation for ToSic.Sxc.Adam . You will probably not use most of this. Interfaces IAsset Any asset (file/folder) of the EAV App System. This interface contains properties which both IFolder and IFile have in common IFile Describes a file asset as provided by the underlying environment (like DNN) IFolder Describes a folder as provided by the underlying environment (like DNN)"
  },
  "api/dot-net/ToSic.Eav.Configuration.Features.html": {
    "href": "api/dot-net/ToSic.Eav.Configuration.Features.html",
    "title": "Class Features | 2sxc and EAV 10",
    "keywords": "Class Features The Features lets your code find out what features are currently enabled/disabled in the environment. It's important to detect if the admin must activate certain features to let your code do it's work. Inheritance System.Object Features Namespace : ToSic.Eav.Configuration Assembly : ToSic.Eav.Core.dll Syntax [InternalApi_DoNotUse_MayChangeWithoutNotice(\"this is just fyi\")] public static class Features Fields | Improve this Doc View Source FeaturesJson Declaration public const string FeaturesJson = \"features.json\" Field Value Type Description System.String | Improve this Doc View Source FeaturesPath Declaration public const string FeaturesPath = \".data-custom/configurations/\" Field Value Type Description System.String Properties | Improve this Doc View Source Valid Informs you if the enabled features are valid or not - meaning if they have been countersigned by the 2sxc features system. As of now, it's not enforced, but in future it will be. Declaration public static bool Valid { get; } Property Value Type Description System.Boolean true if the features were signed correctly Methods | Improve this Doc View Source Enabled(IEnumerable<Guid>) Checks if a list of features are enabled, in case you need many features to be activated. Declaration public static bool Enabled(IEnumerable<Guid> guids) Parameters Type Name Description System.Collections.Generic.IEnumerable < System.Guid > guids list/array of Guids Returns Type Description System.Boolean true if all features are enabled, false if any one of them is not | Improve this Doc View Source Enabled(Guid) Checks if a feature is enabled Declaration public static bool Enabled(Guid guid) Parameters Type Name Description System.Guid guid The feature Guid Returns Type Description System.Boolean true if the feature is enabled"
  },
  "api/dot-net/ToSic.Eav.Data.Attribute-1.html": {
    "href": "api/dot-net/ToSic.Eav.Data.Attribute-1.html",
    "title": "Class Attribute<T> | 2sxc and EAV 10",
    "keywords": "Class Attribute<T> Represents an Attribute / Property of an Entity with Values of a Generic Type Inheritance System.Object AttributeBase Attribute<T> Implements IAttribute <T> IAttribute IAttributeBase Inherited Members AttributeBase.Name AttributeBase.Type Namespace : ToSic.Eav.Data Assembly : ToSic.Eav.Core.dll Syntax [InternalApi_DoNotUse_MayChangeWithoutNotice(\"this is just fyi, use interface IAttribute<T>\")] public class Attribute<T> : AttributeBase, IAttribute<T>, IAttribute, IAttributeBase Type Parameters Name Description T Type of the Value Remarks We recommend you read about the Data Models in the EAV Constructors | Improve this Doc View Source Attribute(String, String) Create an attribute object - usually when building up the data-model for caching. Declaration public Attribute(string name, string type) Parameters Type Name Description System.String name System.String type Properties | Improve this Doc View Source Item[Int32] Declaration public T this[int languageId] { get; } Parameters Type Name Description System.Int32 languageId Property Value Type Description T | Improve this Doc View Source Item[Int32[]] Declaration public T this[int[] languageIds] { get; } Parameters Type Name Description System.Int32 [] languageIds Property Value Type Description T | Improve this Doc View Source Item[String] Declaration public T this[string languageKey] { get; } Parameters Type Name Description System.String languageKey Property Value Type Description T | Improve this Doc View Source Item[String[]] Declaration public T this[string[] languageKeys] { get; } Parameters Type Name Description System.String [] languageKeys Property Value Type Description T | Improve this Doc View Source Typed Declaration public IList<IValue<T>> Typed { get; } Property Value Type Description System.Collections.Generic.IList < IValue <T>> | Improve this Doc View Source TypedContents Declaration public T TypedContents { get; } Property Value Type Description T | Improve this Doc View Source Values Gets a list of all IValue s of this Entity's Attribute. To get the typed objects, use the Typed Declaration public IList<IValue> Values { get; set; } Property Value Type Description System.Collections.Generic.IList < IValue > Implements IAttribute<T> IAttribute IAttributeBase"
  },
  "api/dot-net/ToSic.Eav.Data.IDimension.html": {
    "href": "api/dot-net/ToSic.Eav.Data.IDimension.html",
    "title": "Interface IDimension | 2sxc and EAV 10",
    "keywords": "Interface IDimension Represents a Dimension to assign values to. Dimensions are usually languages ( ILanguage ), but in future they could also be multi-dimensional, like values which are mapped to a language and to a specific edition, use case, etc. Namespace : ToSic.Eav.Data Assembly : ToSic.Eav.Core.dll Syntax [InternalApi_DoNotUse_MayChangeWithoutNotice(\"this is just fyi\")] public interface IDimension Properties | Improve this Doc View Source DimensionId Gets the internal DimensionId as it is stored in the DB. This is only used for scenarios where the dimensions are defined in relational data. Declaration int DimensionId { get; } Property Value Type Description System.Int32 | Improve this Doc View Source Key Gets the dimension Key. For languages it's usually values like en-US or de-DE Declaration string Key { get; } Property Value Type Description System.String | Improve this Doc View Source ReadOnly Gets whether Dimension is assigned read only. This affects the UI, so that the value cannot be edited in these dimensions. Declaration bool ReadOnly { get; } Property Value Type Description System.Boolean"
  },
  "how-to/dynamic-code/errors/ientity-not-found.html": {
    "href": "how-to/dynamic-code/errors/ientity-not-found.html",
    "title": "Error IEntity does not exist in the Namespace | 2sxc and EAV 10",
    "keywords": "Error IEntity does not exist in the Namespace This document has been moved to NetCo Error IEntity does not exist in the Namespace"
  },
  "how-to/dynamic-code/errors/index.html": {
    "href": "how-to/dynamic-code/errors/index.html",
    "title": "Solving typical Errors in Dynamic Code | 2sxc and EAV 10",
    "keywords": "Solving typical Errors in Dynamic Code This document has been moved to NetCo Solving typical Errors in Dynamic Code"
  },
  "how-to/razor/customizedata.html": {
    "href": "how-to/razor/customizedata.html",
    "title": "Event CustomizeData() on the Razor Page | 2sxc and EAV 10",
    "keywords": "Event CustomizeData() on the Razor Page This document has been moved to NetCo Event CustomizeData() on the Razor Page"
  },
  "how-to/razor/customizesearch.html": {
    "href": "how-to/razor/customizesearch.html",
    "title": "Event CustomizeSearch() on the Razor Page | 2sxc and EAV 10",
    "keywords": "Event CustomizeSearch() on the Razor Page This document has been moved to NetCo Event CustomizeSearch() on the Razor Page"
  },
  "how-to/webapi/dotnet-webapi-saveinadam.html": {
    "href": "how-to/webapi/dotnet-webapi-saveinadam.html",
    "title": "| 2sxc and EAV 10",
    "keywords": "This page has moved to SaveInAdam(...) Command in ApiController"
  },
  "api/dot-net/ToSic.Eav.DataSources.Queries.html": {
    "href": "api/dot-net/ToSic.Eav.DataSources.Queries.html",
    "title": "Namespace ToSic.Eav.DataSources.Queries | 2sxc and EAV 10",
    "keywords": "Namespace ToSic.Eav.DataSources.Queries Query objects in the EAV contain a configuration how to wire up various Data-Sources to retrieve data. Users will usually construct them using the VisualQueryDesigner and the specifications of the query are then stored as Entity objects in the App. Most queries are then accessed either through Razor or C# code using App.Query[\"queryname\"] or directly using WebApi (if permissions allow this). History Introduced in 2sxc 06.00 Api features added in 2sxc 8.10 Classes Query Provides a data-source to a query, but won't assemble/compile the query unless accessed (lazy). QueryDefinition This contains the structure / definition of a query, which was originally stored in an IEntity QueryPartDefinition The configuration / definition of a query part. The QueryDefinition uses a bunch of these together to build a query. VisualQueryAttribute Custom Attribute for DataSources and usage in Pipeline Designer. Will add information about help, configuration-content-types etc. Only DataSources which have this attribute will be listed in the designer-tool Structs Connection Represent a connection which connects two DataSources in a Query Interfaces IQuery Marks a special IDataSource which is a query. It has an underlying QueryDefinition and Params which can be modified by code before running the query. Enums DataSourceType Describes what a DataSource is for in the visual query (for logical grouping)"
  },
  "api/dot-net/ToSic.Eav.DataSources.html": {
    "href": "api/dot-net/ToSic.Eav.DataSources.html",
    "title": "Namespace ToSic.Eav.DataSources | 2sxc and EAV 10",
    "keywords": "Namespace ToSic.Eav.DataSources DataSources are objects which deliver one or many DataStreams , which contain a bunch of content-items. They are then attached to each other (from one sources Out to another ones In ) creating a Query . Queries can be customized at will. The whole system is used to prepare/process data for views, WebApi or anything else. In most cases there will be a VisualQuery which connects all the parts automatically, but when you want to work with them programatically, here you'll find the API. Note We've hidden the constructors for all DataSource objects in these docs, because you should usually use the CreateSource<T>(...) command on the Razor template or WebApi, which will auto-configure things behind the scenes. Tip Read about DataSources here . It also explains how the configuration system works and how to create custom DataSources to deliver your data to EAV/2sxc. Classes App All the data inside an App. For example, it has a variable amount of Out-streams, one for each content-type in the app. AppRoot The App Root is the entry point for all data. It takes it's data from a hidden AppState Cache. It's implemented as a DataSource so that other DataSources can easily attach to it. This is also the object returned as the root in any query. AttributeFilter DataSource to only pass through configured AttributeNames - other attributes/properties are removed from the entities. AttributeRename DataSource to only pass through configured AttributeNames - other attributes/properties are removed from the entities. CsvDataSource DataSource for importing/reading CSV files. DataSourceBase The base class, which should always be inherited. Already implements things like Get One / Get many, Caching and a lot more. DataTable Provide Entities from a System.Data.DataTable. This is not meant for VisualQuery, but for code which pre-processes data in a DataTable and then wants to provide it as entities. EntityIdFilter A DataSource that filters Entities by Ids EntityTypeFilter Return only entities of a specific content-type ExternalData Base DataSource class for providing data from external systems ItemFilterDuplicates A DataSource that merges two streams OwnerFilter Filter entities to show Drafts or only Published Entities Paging A DataSource that filters Entities by Ids PassThrough A DataSource that passes through all In Connections. Can be used con consolidate/merge multiple Sources into one. PublishingFilter Filter entities to show Drafts or only Published Entities QueryRun Run another query and provide the resulting data. The settings will provide the params for the query. RelationshipFilter Filter Entities by Value in a Related Entity. For example: Find all Books (desired Entity), whose Authors (related Entity) have a Country (Attribute) with 'Switzerland' (Value). Shuffle A DataSource that filters Entities by Ids Sql Provide Entities from a SQL Server StreamFallback A DataSource that returns the first stream which has content StreamMerge A DataSource that merges two streams StreamPick A DataSource that returns a stream by the provided name. Usually this will be configured through [Params:SomeName] ValueFilter Return only Entities having a specific value in an Attribute ValueSort Sort Entity by values in specified Attributes Interfaces IAppRoot Interface for the App Root - usually the very first node in any data-delivery or query. It's just like a normal IDataSource but will internally access the AppState from the IAppsCache . IDataSource Public interface for an Eav DataSource. All DataSource objects are based on this. IDataSourceConfiguration This helps a data source get configured. It manages all the properties which the data source will want to look up, as well as the LookUp engine which will perform the token resolution IDataStream Represents a DataStream object. This is a stream of IEntity objects, which has a source and a name. A stream can be read from, and it can be attached to upstream data-sources for further processing. IDataTarget Represents a data source that can be the recipient of Data. This basically means it has an In IDataStream"
  },
  "api/dot-net/ToSic.Eav.Metadata.ITarget.html": {
    "href": "api/dot-net/ToSic.Eav.Metadata.ITarget.html",
    "title": "Interface ITarget | 2sxc and EAV 10",
    "keywords": "Interface ITarget Reference to target. Usually used on IEntity to define what thing it provides additional metadata for. Basically it contains all the references necessary to identify what it belongs to. Namespace : ToSic.Eav.Metadata Assembly : ToSic.Eav.Core.dll Syntax [PublicApi_Stable_ForUseInYourCode] public interface ITarget Properties | Improve this Doc View Source IsMetadata Determines if the current thing is used as Metadata. Declaration [JsonIgnore] bool IsMetadata { get; } Property Value Type Description System.Boolean True if it's a metadata item, false if not. | Improve this Doc View Source KeyGuid A GUID key identifying a target. Declaration Guid? KeyGuid { get; } Property Value Type Description System.Nullable < System.Guid > The GUID key of the target. Null if the identifier is not a string. | Improve this Doc View Source KeyNumber A number (int) key identifying a target. Declaration int? KeyNumber { get; } Property Value Type Description System.Nullable < System.Int32 > The number key of the target. Null if the identifier is not a string. | Improve this Doc View Source KeyString A string key identifying a target. Declaration string KeyString { get; } Property Value Type Description System.String The string key of the target. Null if the identifier is not a string. | Improve this Doc View Source TargetType If this is metadata, then the target could be anything. This is an ID telling what kind of thing we're enhancing. Declaration int TargetType { get; } Property Value Type Description System.Int32 An ID from the system which registers all the types of things that can be described. See also ITargetTypes ."
  },
  "api/dot-net/ToSic.Eav.Metadata.ITargetTypes.html": {
    "href": "api/dot-net/ToSic.Eav.Metadata.ITargetTypes.html",
    "title": "Interface ITargetTypes | 2sxc and EAV 10",
    "keywords": "Interface ITargetTypes This interface allows objects to lookup metadata-target id / name of the system. Namespace : ToSic.Eav.Metadata Assembly : ToSic.Eav.Core.dll Syntax [PublicApi_Stable_ForUseInYourCode] public interface ITargetTypes Methods | Improve this Doc View Source GetId(String) Look up the target Id of a metadata target. These are registered somewhere (DB, file-system, etc.) Use this if you know the type-name, but need the type ID Declaration int GetId(string targetTypeName) Parameters Type Name Description System.String targetTypeName Returns Type Description System.Int32 the id of the target type | Improve this Doc View Source GetName(Int32) Look up the target name of a metadata target. These are registered somewhere (Db, file-system, etc.) Use this if you know the type-ID, but need the type name Declaration string GetName(int typeId) Parameters Type Name Description System.Int32 typeId the type id Returns Type Description System.String the name of the target type"
  },
  "api/dot-net/ToSic.Eav.Data.IAttributeBase.html": {
    "href": "api/dot-net/ToSic.Eav.Data.IAttributeBase.html",
    "title": "Interface IAttributeBase | 2sxc and EAV 10",
    "keywords": "Interface IAttributeBase Represents properties we should know about Attributes. This is the base for both IContentTypeAttribute (in the IContentType) attribute with values-list (in the IEntity) Namespace : ToSic.Eav.Data Assembly : ToSic.Eav.Core.dll Syntax [PublicApi_Stable_ForUseInYourCode] public interface IAttributeBase Remarks We recommend you read about the Data Models in the EAV Properties | Improve this Doc View Source ControlledType The official type, as a controlled value Declaration ValueTypes ControlledType { get; } Property Value Type Description ValueTypes | Improve this Doc View Source Name Name of the Attribute Declaration string Name { get; } Property Value Type Description System.String | Improve this Doc View Source Type Type of the Attribute like 'string', 'decimal' etc. Declaration string Type { get; } Property Value Type Description System.String"
  },
  "api/dot-net/ToSic.Eav.Data.Value-1.html": {
    "href": "api/dot-net/ToSic.Eav.Data.Value-1.html",
    "title": "Class Value<T> | 2sxc and EAV 10",
    "keywords": "Class Value<T> Represents a typed Value object in the memory model Inheritance System.Object Value<T> Implements IValue <T> IValue Namespace : ToSic.Eav.Data Assembly : ToSic.Eav.Core.dll Syntax [InternalApi_DoNotUse_MayChangeWithoutNotice(\"this is just fyi, always work with interface IValue<T>\")] public class Value<T> : IValue<T>, IValue Type Parameters Name Description T Type of the actual Value Constructors | Improve this Doc View Source Value(T) The default constructor to create a value object. Used internally to build the memory model. Declaration public Value(T typedContents) Parameters Type Name Description T typedContents Properties | Improve this Doc View Source Languages Gets the Language ( ILanguage ) assigned to this Value. Can be one or many. Declaration public IList<ILanguage> Languages { get; set; } Property Value Type Description System.Collections.Generic.IList < ILanguage > | Improve this Doc View Source SerializableObject Returns the inner value in a form that can be serialized, for JSON serialization etc. Declaration public object SerializableObject { get; } Property Value Type Description System.Object | Improve this Doc View Source TypedContents Declaration public T TypedContents { get; } Property Value Type Description T Implements IValue<T> IValue"
  },
  "how-to/razor/razor-component.html": {
    "href": "how-to/razor/razor-component.html",
    "title": "RazorComponent aka Razor Templates | 2sxc and EAV 10",
    "keywords": "RazorComponent aka Razor Templates This document has been moved to RazorComponent API"
  },
  "how-to/webapi/content.html": {
    "href": "how-to/webapi/content.html",
    "title": "| 2sxc and EAV 10",
    "keywords": "This page moved to Content REST and CRUD Web API"
  },
  "api/dot-net/ToSic.Eav.Caching.SynchronizedList-1.html": {
    "href": "api/dot-net/ToSic.Eav.Caching.SynchronizedList-1.html",
    "title": "Class SynchronizedList<T> | 2sxc and EAV 10",
    "keywords": "Class SynchronizedList<T> This is an IEnumerable which relies on an up-stream cache, which may change. That would require this IEnumerable to update what it delivers. Inheritance System.Object SynchronizedList<T> Implements System.Collections.Generic.IEnumerable <T> System.Collections.IEnumerable ICacheDependent ICacheExpiring ITimestamped Namespace : ToSic.Eav.Caching Assembly : ToSic.Eav.Core.dll Syntax [InternalApi_DoNotUse_MayChangeWithoutNotice(\"this is just fyi\")] public class SynchronizedList<T> : IEnumerable<T>, IEnumerable, ICacheDependent, ICacheExpiring, ITimestamped Type Parameters Name Description T The type which is enumerated, usually an IEntity Constructors | Improve this Doc View Source SynchronizedList(ICacheExpiring, Func<List<T>>) Initialized a new list which depends on another source Declaration [Obsolete(\"You should prefer the Func<Immutable> signature\")] public SynchronizedList(ICacheExpiring upstream, Func<List<T>> rebuild) Parameters Type Name Description ICacheExpiring upstream the upstream cache which can tell us if a refresh is necessary System.Func < System.Collections.Generic.List <T>> rebuild the method which rebuilds the list | Improve this Doc View Source SynchronizedList(ICacheExpiring, Func<IImmutableList<T>>) Initialized a new list which depends on another source Declaration public SynchronizedList(ICacheExpiring upstream, Func<IImmutableList<T>> rebuild) Parameters Type Name Description ICacheExpiring upstream the upstream cache which can tell us if a refresh is necessary System.Func < System.Collections.Immutable.IImmutableList <T>> rebuild the method which rebuilds the list Fields | Improve this Doc View Source Upstream Upstream source which implements ICacheExpiring to tell this object when the data must be refreshed Declaration protected readonly ICacheExpiring Upstream Field Value Type Description ICacheExpiring Properties | Improve this Doc View Source CacheTimestamp System time-stamp of when the data in this cached thing was initialized or updated. Depending on the implementation, this may go up-stream and return an up-stream value. Declaration public long CacheTimestamp { get; } Property Value Type Description System.Int64 A timestamp as a long number Methods | Improve this Doc View Source CacheChanged() Find out if the source it depends on has changed. Declaration public bool CacheChanged() Returns Type Description System.Boolean True if the upstream cache returns a newer timestamp | Improve this Doc View Source CacheChanged(Int64) Detect if the cache has old data, by comparing it to a timestamp which may be newer. This is implemented in each object, because sometimes it compares its own timestamp, sometimes that of another underlying object. Declaration public bool CacheChanged(long newCacheTimeStamp) Parameters Type Name Description System.Int64 newCacheTimeStamp New time stamp to compare with Returns Type Description System.Boolean True if the timestamps differ, false if it's the same | Improve this Doc View Source GetEnumerator() Declaration public IEnumerator<T> GetEnumerator() Returns Type Description System.Collections.Generic.IEnumerator <T> Explicit Interface Implementations | Improve this Doc View Source IEnumerable.GetEnumerator() Declaration IEnumerator IEnumerable.GetEnumerator() Returns Type Description System.Collections.IEnumerator Implements System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable ICacheDependent ICacheExpiring ITimestamped"
  },
  "api/dot-net/ToSic.Eav.Data.ContentTypeAttribute.html": {
    "href": "api/dot-net/ToSic.Eav.Data.ContentTypeAttribute.html",
    "title": "Class ContentTypeAttribute | 2sxc and EAV 10",
    "keywords": "Class ContentTypeAttribute Defines an attribute with name and the type this attribute has. Part of of a IContentType definition. Inheritance System.Object AttributeBase ContentTypeAttribute Implements IContentTypeAttribute IAttributeBase IHasPermissions IAppIdentityLight IHasMetadata Inherited Members AttributeBase.Name AttributeBase.Type Namespace : ToSic.Eav.Data Assembly : ToSic.Eav.Core.dll Syntax [InternalApi_DoNotUse_MayChangeWithoutNotice(\"this is just fyi, always use the interface\")] public class ContentTypeAttribute : AttributeBase, IContentTypeAttribute, IAttributeBase, IHasPermissions, IAppIdentityLight, IHasMetadata Constructors | Improve this Doc View Source ContentTypeAttribute(Int32, String, String, Boolean, Int32, Int32, IHasMetadataSource, Int32) Extended constructor when also storing the persistence Id Declaration public ContentTypeAttribute(int appId, string name, string type, bool isTitle, int attributeId, int sortOrder, IHasMetadataSource metaProvider = null, int parentApp = 0) Parameters Type Name Description System.Int32 appId System.String name System.String type System.Boolean isTitle System.Int32 attributeId System.Int32 sortOrder ToSic.Eav.Metadata.IHasMetadataSource metaProvider System.Int32 parentApp | Improve this Doc View Source ContentTypeAttribute(Int32, String, String, String, String, String, Nullable<Boolean>, Object) Create an attribute definition \"from scratch\" so for import-scenarios and code-created attribute definitions Declaration public ContentTypeAttribute(int appId, string name, string niceName, string type, string inputType, string notes, bool? visibleInEditUi, object defaultValue) Parameters Type Name Description System.Int32 appId System.String name System.String niceName System.String type System.String inputType System.String notes System.Nullable < System.Boolean > visibleInEditUi System.Object defaultValue Properties | Improve this Doc View Source AppId The app id as used internally Declaration public int AppId { get; } Property Value Type Description System.Int32 The App ID this thing belongs to | Improve this Doc View Source AttributeId additional info for the persistence layer Declaration public int AttributeId { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source IsTitle tells us if this attribute is the title Declaration public bool IsTitle { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source Metadata Additional information, specs etc. about this attribute Declaration public IMetadataOf Metadata { get; } Property Value Type Description IMetadataOf | Improve this Doc View Source SortOrder position of this attribute in the list of attributes Declaration public int SortOrder { get; } Property Value Type Description System.Int32 Implements IContentTypeAttribute IAttributeBase IHasPermissions IAppIdentityLight IHasMetadata"
  },
  "api/dot-net/ToSic.Eav.Data.IEntityWrapper.html": {
    "href": "api/dot-net/ToSic.Eav.Data.IEntityWrapper.html",
    "title": "Interface IEntityWrapper | 2sxc and EAV 10",
    "keywords": "Interface IEntityWrapper A interface to ensure all things that carry an IEntity can be compared based on the Entity they carry. Namespace : ToSic.Eav.Data Assembly : ToSic.Eav.Core.dll Syntax [PublicApi] public interface IEntityWrapper Properties | Improve this Doc View Source Entity The underlying entity. Declaration IEntity Entity { get; } Property Value Type Description IEntity The entity, or null if not provided"
  },
  "api/dot-net/ToSic.Eav.DataSources.AttributeFilter.html": {
    "href": "api/dot-net/ToSic.Eav.DataSources.AttributeFilter.html",
    "title": "Class AttributeFilter | 2sxc and EAV 10",
    "keywords": "Class AttributeFilter DataSource to only pass through configured AttributeNames - other attributes/properties are removed from the entities. The AttributeFilter DataSource is part of the Standard EAV Data Sources . It removes values from items so that the result is smaller, and doesn't publish confidential data. It's primarily used when providing data as JSON, so that not all values are published. How to use with the Visual Query When using the Visual Query you can just drag it into your query. Now you can configure what properties you want and not. The following shows a demo which delivers both the data as-is, and also filtered to only deliver Name and Country : This is what you get on the default-case (unfiltered): \"Default\": [ { \"Name\": \"2sic\", \"Country\": \"Switzerland\", \"Notes\": \"<p>Secret notes</p>\", \"Categories\": [ { \"Id\": 38646, \"Title\": \"Second\" } ], \"Id\": 38653, \"Guid\": \"46a46d9e-f572-413c-a42e-a82ac40d929d\", \"Title\": \"2sic\", \"Modified\": \"2017-11-06T22:38:00.15Z\" }, ... ] This is what you get on the filtered stream: \"Cleaned\": [ { \"Name\": \"2sic\", \"Country\": \"Switzerland\", \"Id\": 38653, \"Guid\": \"46a46d9e-f572-413c-a42e-a82ac40d929d\", \"Title\": \"2sic\", \"Modified\": \"2017-11-06T22:38:00.15Z\" }, ... ] As you can see, the secret Notes and the Categories are not in the Cleaned stream any more. There are three common use cases: Programming With The Attribute Filter We recommend to use the Visual Query where possible, as it's easier to understand and is identical for C# and JavaScript. It's also better because it separates data-retrieval from visualization. Read also datasource / data stream List of all EAV Data Sources query / visual query Demo App and further links You should find some examples in this demo App Demo App with examples for most DataSources History Introduced in EAV 3.x, 2sxc ca. v6 API Documentation Inheritance System.Object HasLog DataSourceBase AttributeFilter Implements IDataSource IAppIdentity IZoneIdentity IAppIdentityLight ICacheKey ICacheExpiring ITimestamped ICanPurgeListCache IHasLog IDataTarget Inherited Members DataSourceBase.Name DataSourceBase.CacheRelevantConfigurations DataSourceBase.CachePartialKey DataSourceBase.CacheFullKey DataSourceBase.CacheTimestamp DataSourceBase.CacheChanged(Int64) DataSourceBase.AppId DataSourceBase.ZoneId DataSourceBase.Guid DataSourceBase.In DataSourceBase.Out DataSourceBase.Item[String] DataSourceBase.List DataSourceBase.Configuration DataSourceBase.Attach(IDataSource) DataSourceBase.Attach(String, IDataSource) DataSourceBase.Attach(String, IDataStream) DataSourceBase.PurgeList(Boolean) HasLog.Log HasLog.InitLog(String, ILog, String) HasLog.InitLog(String, ILog, String, CodeRef) Namespace : ToSic.Eav.DataSources Assembly : ToSic.Eav.DataSources.dll Syntax [PublicApi_Stable_ForUseInYourCode] [VisualQuery(GlobalName = \"ToSic.Eav.DataSources.AttributeFilter, ToSic.Eav.DataSources\", Type = DataSourceType.Modify, DynamicOut = false, ExpectsDataOfType = \"|Config ToSic.Eav.DataSources.AttributeFilter\", HelpLink = \"https://r.2sxc.org/DsAttributeFilter\")] public class AttributeFilter : DataSourceBase, IDataSource, IAppIdentity, IZoneIdentity, IAppIdentityLight, ICacheInfo, ICacheKey, ICacheExpiring, ITimestamped, ICanPurgeListCache, IHasLog, IDataTarget Remarks Uses Configuration \"AttributeNames\" Properties | Improve this Doc View Source AttributeNames A string containing one or more attribute names. like \"FirstName\" or \"FirstName,LastName,Birthday\" Declaration public string AttributeNames { get; set; } Property Value Type Description System.String Implements IDataSource IAppIdentity IZoneIdentity IAppIdentityLight ICacheKey ICacheExpiring ITimestamped ICanPurgeListCache IHasLog IDataTarget"
  },
  "api/dot-net/ToSic.Eav.DataSources.IDataStream.html": {
    "href": "api/dot-net/ToSic.Eav.DataSources.IDataStream.html",
    "title": "Interface IDataStream | 2sxc and EAV 10",
    "keywords": "Interface IDataStream Represents a DataStream object. This is a stream of IEntity objects, which has a source and a name. A stream can be read from, and it can be attached to upstream data-sources for further processing. Inherited Members ICanPurgeListCache.PurgeList(Boolean) System.Collections.Generic.IEnumerable<ToSic.Eav.Data.IEntity>.GetEnumerator() Namespace : ToSic.Eav.DataSources Assembly : ToSic.Eav.DataSources.dll Syntax [PublicApi_Stable_ForUseInYourCode] public interface IDataStream : ICanSelfCache, ICanPurgeListCache, IEnumerable<IEntity>, IEnumerable Properties | Improve this Doc View Source List The list of items in this stream. Declaration IEnumerable<IEntity> List { get; } Property Value Type Description System.Collections.Generic.IEnumerable < IEntity > An System.Collections.Generic.IEnumerable<T> of IEntity items. | Improve this Doc View Source Name Name of this Stream Declaration string Name { get; } Property Value Type Description System.String The name - which would be used in the Source to get the same stream again. | Improve this Doc View Source Source Underlying IDataSource providing the IEntity of this stream Declaration IDataSource Source { get; } Property Value Type Description IDataSource The underlying IDataSource"
  },
  "api/dot-net/ToSic.Eav.DataSources.Shuffle.html": {
    "href": "api/dot-net/ToSic.Eav.DataSources.Shuffle.html",
    "title": "Class Shuffle | 2sxc and EAV 10",
    "keywords": "Class Shuffle A DataSource that filters Entities by Ids The Shuffle DataSource is part of the Standard EAV Data Sources . It will randomize the order of items which came in. This is common for components which show \"3 random quotes\" and similar scenarios. How to use with the Visual Query When using the Visual Query you can just drag it into your query. This is what it usually looks like: The above example shows: a content-type filter limiting the items to type Company a shuffle which only passes on 3 random companies Programming With The Shuffle DataSource We recommend to use the Visual Query where possible, as it's easier to understand and is identical for C# and JavaScript. It's also better because it separates data-retrieval from visualization. Read also datasource / data stream List of all EAV Data Sources query / visual query Demo App and further links You should find some examples in this demo App Demo App with examples for most DataSources History Introduced in EAV 4.x, 2sxc ? API Documentation Inheritance System.Object HasLog DataSourceBase Shuffle Implements IDataSource IAppIdentity IZoneIdentity IAppIdentityLight ICacheKey ICacheExpiring ITimestamped ICanPurgeListCache IHasLog IDataTarget Inherited Members DataSourceBase.Name DataSourceBase.CacheRelevantConfigurations DataSourceBase.CachePartialKey DataSourceBase.CacheFullKey DataSourceBase.CacheTimestamp DataSourceBase.CacheChanged(Int64) DataSourceBase.AppId DataSourceBase.ZoneId DataSourceBase.Guid DataSourceBase.In DataSourceBase.Out DataSourceBase.Item[String] DataSourceBase.List DataSourceBase.Configuration DataSourceBase.Attach(IDataSource) DataSourceBase.Attach(String, IDataSource) DataSourceBase.Attach(String, IDataStream) DataSourceBase.PurgeList(Boolean) HasLog.Log HasLog.InitLog(String, ILog, String) HasLog.InitLog(String, ILog, String, CodeRef) Namespace : ToSic.Eav.DataSources Assembly : ToSic.Eav.DataSources.dll Syntax [PublicApi_Stable_ForUseInYourCode] [VisualQuery(GlobalName = \"ToSic.Eav.DataSources.Shuffle, ToSic.Eav.DataSources\", Type = DataSourceType.Sort, DynamicOut = false, ExpectsDataOfType = \"38e7822b-1049-4539-bb3f-f99949b1b1d1\", Icon = \"shuffle\", HelpLink = \"https://r.2sxc.org/DsShuffle\")] public sealed class Shuffle : DataSourceBase, IDataSource, IAppIdentity, IZoneIdentity, IAppIdentityLight, ICacheInfo, ICacheKey, ICacheExpiring, ITimestamped, ICanPurgeListCache, IHasLog, IDataTarget Remarks Technically many things could just identify the app they belong to, and let the system look up the zone. But this would be inefficient, so for optimization, many items identify themselves with both the app and zone Ids Properties | Improve this Doc View Source Take Amount of items to take / return when shuffling. Defaults to 0. Declaration public int Take { get; set; } Property Value Type Description System.Int32 Implements IDataSource IAppIdentity IZoneIdentity IAppIdentityLight ICacheKey ICacheExpiring ITimestamped ICanPurgeListCache IHasLog IDataTarget"
  },
  "api/dot-net/ToSic.Eav.Logging.HasLog.html": {
    "href": "api/dot-net/ToSic.Eav.Logging.HasLog.html",
    "title": "Class HasLog | 2sxc and EAV 10",
    "keywords": "Class HasLog Base class for most objects which simply want to implement log and log-chaining. Inheritance System.Object HasLog AppBase ListCache DataSourceBase LookUpEngine DynamicCode DynamicCodeRoot EngineBase Implements IHasLog Namespace : ToSic.Eav.Logging Assembly : ToSic.Eav.Core.dll Syntax [InternalApi_DoNotUse_MayChangeWithoutNotice(\"this is just fyi\")] public abstract class HasLog : IHasLog Constructors | Improve this Doc View Source HasLog(String, CodeRef, ILog, String) Declaration protected HasLog(string logName, CodeRef code, ILog parentLog = null, string initialMessage = null) Parameters Type Name Description System.String logName CodeRef code ILog parentLog System.String initialMessage | Improve this Doc View Source HasLog(String, ILog, String, String, String, Int32) Constructor which ensures Log-chaining and optionally adds initial messages Declaration protected HasLog(string logName, ILog parentLog = null, string initialMessage = null, string cPath = null, string cName = null, int cLine = 0) Parameters Type Name Description System.String logName Name to use in the Log-ID ILog parentLog Parent log (if available) for log-chaining System.String initialMessage First message to be added System.String cPath auto pre filled by the compiler - the path to the code file System.String cName auto pre filled by the compiler - the method name System.Int32 cLine auto pre filled by the compiler - the code line Properties | Improve this Doc View Source Log The log object which contains the log and can add more logs to the list. Declaration [IgnoreDataMember] public ILog Log { get; } Property Value Type Description ILog Methods | Improve this Doc View Source InitLog(String, ILog, String) This is the real initializer - implemented as a virtual method, because some long-living objects must actively prevent logs from being attached. Declaration public virtual void InitLog(string name, ILog parentLog = null, string initialMessage = null) Parameters Type Name Description System.String name ILog parentLog System.String initialMessage Remarks this one can be overridden by outside sources, like the cache which should never allow attaching logs at runtime | Improve this Doc View Source InitLog(String, ILog, String, CodeRef) Declaration protected void InitLog(string name, ILog parentLog, string initialMessage, CodeRef code) Parameters Type Name Description System.String name ILog parentLog System.String initialMessage CodeRef code Implements IHasLog"
  },
  "api/dot-net/ToSic.Eav.DataSources.Caching.ICanPurgeListCache.html": {
    "href": "api/dot-net/ToSic.Eav.DataSources.Caching.ICanPurgeListCache.html",
    "title": "Interface ICanPurgeListCache | 2sxc and EAV 10",
    "keywords": "Interface ICanPurgeListCache Marks objects which can purge it's own cache, and also force upstream caches to be purged. This helps in scenarios where the code knows that the cache should be cleaned, but needs to rely on the whole tree to be cleaned. Without this, a cache would be cleared but the next-upstream would still be cached, so the next access would still return the same results. Namespace : ToSic.Eav.DataSources.Caching Assembly : ToSic.Eav.DataSources.dll Syntax [InternalApi_DoNotUse_MayChangeWithoutNotice(\"this is just fyi\")] public interface ICanPurgeListCache Methods | Improve this Doc View Source PurgeList(Boolean) Remove the current data from the cache, optionally also purge everything upstream Declaration void PurgeList(bool cascade = false) Parameters Type Name Description System.Boolean cascade true to purge all sources as well, default is false"
  },
  "api/dot-net/ToSic.Eav.DataSources.ItemFilterDuplicates.html": {
    "href": "api/dot-net/ToSic.Eav.DataSources.ItemFilterDuplicates.html",
    "title": "Class ItemFilterDuplicates | 2sxc and EAV 10",
    "keywords": "Class ItemFilterDuplicates A DataSource that merges two streams The ItemFilterDuplicates DataSource is part of the Standard EAV Data Sources . It will provide two streams, one with all the items (but without the duplicates) and one with all the duplicates, in case you need these. How to use with the Visual Query When using the Visual Query you can just drag it into your query. This is what it usually looks like: The above example shows two filters finding items and delivering them on the same stream. Because 1 item would have been delivered 2x (2sic is in Switzerland), the default-stream now only contains each item once, and the duplicates can also be retrieved from the Duplicates stream if needed. Example Using StreamMerge A common scenario will also combine this using the StreamMerge . It's demonstrated there. No Settings The ItemFilterDuplicates DataSource has no settings to configure. Note that it will automatically merge the streams in A-Z order of the In-Stream names. Programming With The ItemFilterDuplicates DataSource We recommend to use the Visual Query where possible, as it's easier to understand and is identical for C# and JavaScript. It's also better because it separates data-retrieval from visualization. Read also datasource / data stream List of all EAV Data Sources query / visual query Demo App and further links You should find some examples in this demo App Demo App with examples for most DataSources History Introduced in EAV 4.x, 2sxc 9.10 API Documentation Inheritance System.Object HasLog DataSourceBase ItemFilterDuplicates Implements IDataSource IAppIdentity IZoneIdentity IAppIdentityLight ICacheKey ICacheExpiring ITimestamped ICanPurgeListCache IHasLog IDataTarget Inherited Members DataSourceBase.Name DataSourceBase.CacheRelevantConfigurations DataSourceBase.CachePartialKey DataSourceBase.CacheFullKey DataSourceBase.CacheTimestamp DataSourceBase.CacheChanged(Int64) DataSourceBase.AppId DataSourceBase.ZoneId DataSourceBase.Guid DataSourceBase.In DataSourceBase.Out DataSourceBase.Item[String] DataSourceBase.List DataSourceBase.Configuration DataSourceBase.Attach(IDataSource) DataSourceBase.Attach(String, IDataSource) DataSourceBase.Attach(String, IDataStream) DataSourceBase.PurgeList(Boolean) HasLog.Log HasLog.InitLog(String, ILog, String) HasLog.InitLog(String, ILog, String, CodeRef) Namespace : ToSic.Eav.DataSources Assembly : ToSic.Eav.DataSources.dll Syntax [PublicApi_Stable_ForUseInYourCode] [VisualQuery(GlobalName = \"ToSic.Eav.DataSources.ItemFilterDuplicates, ToSic.Eav.DataSources\", Type = DataSourceType.Logic, DynamicOut = false, HelpLink = \"https://r.2sxc.org/DsFilterDuplicates\")] public sealed class ItemFilterDuplicates : DataSourceBase, IDataSource, IAppIdentity, IZoneIdentity, IAppIdentityLight, ICacheInfo, ICacheKey, ICacheExpiring, ITimestamped, ICanPurgeListCache, IHasLog, IDataTarget Remarks Technically many things could just identify the app they belong to, and let the system look up the zone. But this would be inefficient, so for optimization, many items identify themselves with both the app and zone Ids Implements IDataSource IAppIdentity IZoneIdentity IAppIdentityLight ICacheKey ICacheExpiring ITimestamped ICanPurgeListCache IHasLog IDataTarget"
  },
  "api/dot-net/ToSic.Eav.DataSources.Sql.html": {
    "href": "api/dot-net/ToSic.Eav.DataSources.Sql.html",
    "title": "Class Sql | 2sxc and EAV 10",
    "keywords": "Class Sql Provide Entities from a SQL Server The SqlDataSource DataSource is part of the Standard EAV Data Sources . It lets you use data from SQL databases as if they were entities. How to use with the Visual Query When using the Visual Query you can just drag it into your query. The Default out will contain the items from the DB: We recommend that you rename it so you know what it's for: You can then configure your connection to the DB and Query as you need it: Understanding the Settings Title & Notes This is just for your notes, to remind you what this is for and to put notes about anything you wanted to remember. Connection There are two ways to connect to SQL databases: using a Connection Name (which points to a detailed connection string in the web.config ) or using a detailed Connection String as you need it. We recommend to use connection names where possible. If you provide both, the connection name will be used: The SQL-Query The Query section has quite a lot of options, most of which are not required but are important for this to work: Here's what you need to know Content Type all entities must have a type-name - so you can just enter something here - in most cases the exact name isn't important, because you usually don't refer back to this, unless further processing will try to filter this or something EntityId and EntityTitle when using entities in 2sxc / EAV, each entity must be able to supply a title and an ID which is an integer. This is important for internal data processing to work. For this to work with SQL, the source needs to know what data-fields to use for this. By default it will use a field called EntityId and EntityTitle , but you can also use any other field - in which case you must supply the names in the following fields. Using URL Parameters in Queries The SQL DataSource can also use queries which use URL Parameters. It's safe and automatically prevent SQL Injection. For example, you can do the following: SELECT TOP (1000) PortalId as EntityId, HomeDirectory as EntityTitle,PortalID,ExpiryDate, AdministratorRoleId,GUID,HomeDirectory, CreatedOnDate,PortalGroupID FROM [Portals] Where PortalId = [QueryString:Id] This will automatically use the id parameter from the URL to filter the result. Using Another Entity As SQL Parameter You can of course use the In stream to provide entities which configure the SQL. The following example has a content-type SqlSetting with only one item (to make the example easier to understand). The App DataSource delivers this in the AppSetting stream, which also goes into the Sql as AppSetting and is then used as a token in the SQL: Using A Value from a Module-Instance as SQL Parameter This works like in the App-example: Provide the data from the ModuleDataSource as an In stream to the SqlDataSource, and use that to filter: Programming With The SqlDataSource DataSource We recommend to use the Visual Query where possible, as it's easier to understand and is identical for C# and JavaScript. It's also better because it separates data-retrieval from visualization. An example code @{ var sql = CreateSource<ToSic.Eav.DataSources.Sql>(); sql.ConnectionString = \"SiteSqlServer\"; // use DNN sql.SelectCommand = \"Select ... From\"; // your sql here } @foreach(var post in AsDynamic(sql[\"Default\"])) { <div>@post.EntityTitle</div> } Important When Coding Note that data sources only retrieve data once, and then ignore any further configuration. So you must set everything before accessing the data. Read also datasource / data stream List of all EAV Data Sources query / visual query Demo App and further links You should find some examples in this demo App Demo App with examples for most DataSources History Introduced in EAV 3.x, in 2sxc ? API Documentation Inheritance System.Object HasLog DataSourceBase ExternalData Sql DnnSql Implements IDataSource IAppIdentity IZoneIdentity IAppIdentityLight ICacheKey ICacheExpiring ITimestamped ICanPurgeListCache IHasLog IDataTarget Inherited Members ExternalData.CacheTimestamp DataSourceBase.Name DataSourceBase.CacheRelevantConfigurations DataSourceBase.CachePartialKey DataSourceBase.CacheFullKey DataSourceBase.CacheChanged(Int64) DataSourceBase.AppId DataSourceBase.ZoneId DataSourceBase.Guid DataSourceBase.In DataSourceBase.Out DataSourceBase.Item[String] DataSourceBase.List DataSourceBase.Configuration DataSourceBase.Attach(IDataSource) DataSourceBase.Attach(String, IDataSource) DataSourceBase.Attach(String, IDataStream) DataSourceBase.PurgeList(Boolean) HasLog.Log HasLog.InitLog(String, ILog, String) HasLog.InitLog(String, ILog, String, CodeRef) Namespace : ToSic.Eav.DataSources Assembly : ToSic.Eav.DataSources.dll Syntax [PublicApi_Stable_ForUseInYourCode] [VisualQuery(GlobalName = \"ToSic.Eav.DataSources.Sql, ToSic.Eav.DataSources\", Type = DataSourceType.Source, DynamicOut = false, Icon = \"database\", ExpectsDataOfType = \"c76901b5-0345-4866-9fa3-6208de7f8543\", PreviousNames = new string[]{\"ToSic.Eav.DataSources.SqlDataSource, ToSic.Eav.DataSources\"}, HelpLink = \"https://r.2sxc.org/DsSql\")] public class Sql : ExternalData, IDataSource, IAppIdentity, IZoneIdentity, IAppIdentityLight, ICacheInfo, ICacheKey, ICacheExpiring, ITimestamped, ICanPurgeListCache, IHasLog, IDataTarget Remarks Technically many things could just identify the app they belong to, and let the system look up the zone. But this would be inefficient, so for optimization, many items identify themselves with both the app and zone Ids Constructors | Improve this Doc View Source Sql(String, String, String, String, String) Initializes a new instance of the SqlDataSource class Declaration public Sql(string connectionString, string selectCommand, string contentType, string entityIdField = null, string titleField = null) Parameters Type Name Description System.String connectionString Connection String to the DB System.String selectCommand SQL Query System.String contentType Name of virtual content-type we'll return System.String entityIdField ID-field in the DB to use System.String titleField Title-field in the DB to use Properties | Improve this Doc View Source ConnectionString ConnectionString to the DB Declaration public string ConnectionString { get; set; } Property Value Type Description System.String | Improve this Doc View Source ConnectionStringName Name of the ConnectionString in the Application.Config to use Declaration public string ConnectionStringName { get; set; } Property Value Type Description System.String | Improve this Doc View Source ContentType Name of the ContentType which we'll pretend the items have. Declaration public string ContentType { get; set; } Property Value Type Description System.String | Improve this Doc View Source EntityIdField Name of the Column used as EntityId Declaration public string EntityIdField { get; set; } Property Value Type Description System.String | Improve this Doc View Source SelectCommand SQL Command for selecting data. Declaration public string SelectCommand { get; set; } Property Value Type Description System.String | Improve this Doc View Source TitleField Name of the Title Attribute of the Source DataTable Declaration public string TitleField { get; set; } Property Value Type Description System.String Implements IDataSource IAppIdentity IZoneIdentity IAppIdentityLight ICacheKey ICacheExpiring ITimestamped ICanPurgeListCache IHasLog IDataTarget"
  },
  "api/dot-net/ToSic.Sxc.Dnn.Factory.html": {
    "href": "api/dot-net/ToSic.Sxc.Dnn.Factory.html",
    "title": "Class Factory | 2sxc and EAV 10",
    "keywords": "Class Factory This is a factory to create CmsBlocks, Apps etc. and related objects from DNN. Inheritance System.Object Factory Namespace : ToSic.Sxc.Dnn Assembly : ToSic.Sxc.Dnn.dll Syntax [PublicApi_Stable_ForUseInYourCode] public static class Factory Methods | Improve this Doc View Source App(Int32, PortalSettings, Boolean, Boolean, ILog) Get a full app-object for accessing data of the app from outside Declaration public static IApp App(int appId, PortalSettings ownerPortalSettings, bool unusedButKeepForApiStability = false, bool showDrafts = false, ILog parentLog = null) Parameters Type Name Description System.Int32 appId The AppID of the app you need DotNetNuke.Entities.Portals.PortalSettings ownerPortalSettings The owner portal - this is important when retrieving Apps from another portal. System.Boolean unusedButKeepForApiStability Tells the App that you'll be using page-publishing. So changes will me auto-drafted for a future release as the whole page together. System.Boolean showDrafts Show draft items - usually false for visitors, true for editors/admins. ILog parentLog optional logger to attach to Returns Type Description IApp An initialized App object which you can use to access App.Data | Improve this Doc View Source App(Int32, Boolean, Boolean, ILog) Get a full app-object for accessing data of the app from outside Declaration public static IApp App(int appId, bool unusedButKeepForApiStability = false, bool showDrafts = false, ILog parentLog = null) Parameters Type Name Description System.Int32 appId The AppID of the app you need System.Boolean unusedButKeepForApiStability Tells the App that you'll be using page-publishing. So changes will me auto-drafted for a future release as the whole page together. System.Boolean showDrafts Show draft items - usually false for visitors, true for editors/admins. ILog parentLog optional logger to attach to Returns Type Description IApp An initialized App object which you can use to access App.Data | Improve this Doc View Source App(Int32, Int32, Boolean, Boolean, ILog) Get a full app-object for accessing data of the app from outside Declaration public static IApp App(int zoneId, int appId, bool unusedButKeepForApiStability = false, bool showDrafts = false, ILog parentLog = null) Parameters Type Name Description System.Int32 zoneId The zone the app is in. System.Int32 appId The AppID of the app you need System.Boolean unusedButKeepForApiStability Tells the App that you'll be using page-publishing. So changes will me auto-drafted for a future release as the whole page together. System.Boolean showDrafts Show draft items - usually false for visitors, true for editors/admins. ILog parentLog optional logger to attach to Returns Type Description IApp An initialized App object which you can use to access App.Data | Improve this Doc View Source CmsBlock(ModuleInfo) Get a Root CMS Block if you have the ModuleInfo object Declaration public static IBlockBuilder CmsBlock(ModuleInfo moduleInfo) Parameters Type Name Description DotNetNuke.Entities.Modules.ModuleInfo moduleInfo A DNN ModuleInfo object Returns Type Description ToSic.Sxc.Blocks.IBlockBuilder An initialized CMS Block, ready to use/render | Improve this Doc View Source CmsBlock(Int32, Int32) Get a Root CMS Block if you know the TabId and the ModId Declaration public static IBlockBuilder CmsBlock(int pageId, int modId) Parameters Type Name Description System.Int32 pageId The DNN tab id (page id) System.Int32 modId The DNN Module id Returns Type Description ToSic.Sxc.Blocks.IBlockBuilder An initialized CMS Block, ready to use/render | Improve this Doc View Source CmsBlock(Int32, Int32, ILog) Get a Root CMS Block if you know the TabId and the ModId Declaration public static IBlockBuilder CmsBlock(int pageId, int modId, ILog parentLog) Parameters Type Name Description System.Int32 pageId The DNN tab id (page id) System.Int32 modId The DNN Module id ILog parentLog The parent log, optional Returns Type Description ToSic.Sxc.Blocks.IBlockBuilder An initialized CMS Block, ready to use/render | Improve this Doc View Source CmsBlock(IModule, ILog) Get a Root CMS Block if you have the ModuleInfo object. Declaration public static IBlockBuilder CmsBlock(IModule module, ILog parentLog = null) Parameters Type Name Description ToSic.Sxc.Context.IModule module ILog parentLog optional logger to attach to Returns Type Description ToSic.Sxc.Blocks.IBlockBuilder An initialized CMS Block, ready to use/render | Improve this Doc View Source DynamicCode(IBlockBuilder) Retrieve a helper object which provides commands like AsDynamic, AsEntity etc. Declaration public static IDnnDynamicCode DynamicCode(IBlockBuilder blockBuilder) Parameters Type Name Description ToSic.Sxc.Blocks.IBlockBuilder blockBuilder CMS Block for which the helper is targeted. Returns Type Description IDnnDynamicCode A Code Helper based on IDnnDynamicCode"
  },
  "api/dot-net/ToSic.Sxc.DataSources.Block.html": {
    "href": "api/dot-net/ToSic.Sxc.DataSources.Block.html",
    "title": "Class Block | 2sxc and EAV 10",
    "keywords": "Class Block The main data source for Blocks. Internally often uses CmsBlock to find what it should provide. It's based on the PassThrough data source, because it's just a coordination-wrapper. Inheritance System.Object HasLog DataSourceBase PassThrough Block Implements IBlockDataSource IDataSource IAppIdentity IZoneIdentity IAppIdentityLight ICacheKey ICacheExpiring ITimestamped ICanPurgeListCache IHasLog IDataTarget Inherited Members PassThrough.CachePartialKey DataSourceBase.Name DataSourceBase.CacheRelevantConfigurations DataSourceBase.CacheFullKey DataSourceBase.CacheTimestamp DataSourceBase.CacheChanged(Int64) DataSourceBase.AppId DataSourceBase.ZoneId DataSourceBase.Guid DataSourceBase.In DataSourceBase.Out DataSourceBase.Item[String] DataSourceBase.List DataSourceBase.Configuration DataSourceBase.Attach(IDataSource) DataSourceBase.Attach(String, IDataSource) DataSourceBase.Attach(String, IDataStream) DataSourceBase.PurgeList(Boolean) HasLog.Log HasLog.InitLog(String, ILog, String) HasLog.InitLog(String, ILog, String, CodeRef) Namespace : ToSic.Sxc.DataSources Assembly : ToSic.Sxc.dll Syntax [InternalApi_DoNotUse_MayChangeWithoutNotice] public class Block : PassThrough, IBlockDataSource, IDataSource, IAppIdentity, IZoneIdentity, IAppIdentityLight, ICacheInfo, ICacheKey, ICacheExpiring, ITimestamped, ICanPurgeListCache, IHasLog, IDataTarget Implements IBlockDataSource IDataSource IAppIdentity IZoneIdentity IAppIdentityLight ICacheKey ICacheExpiring ITimestamped ICanPurgeListCache IHasLog IDataTarget"
  },
  "api/dot-net/ToSic.Sxc.DataSources.CmsBlock.html": {
    "href": "api/dot-net/ToSic.Sxc.DataSources.CmsBlock.html",
    "title": "Class CmsBlock | 2sxc and EAV 10",
    "keywords": "Class CmsBlock This data-source delivers the core data for a CMS Block. It will look up the configuration in the CMS (like the Module-Settings in DNN) to determine what data is needed for the block. Usually it will then find a reference to a ContentBlock, from which it determines what content-items are assigned. It could also find that the template specifies a query, in which case it would retrieve that. Was previously called ModuleDataSource Data Source: CmsBlockDataSource / Module-Instance DataSource The Module-Instance DataSource DataSource is part of the Standard 2sxc/DNN Data Sources . It is the default data source as it directly delivers module-instance data and is used for all scenarios which don't explicitly have a query, and it can also be used as part of a query. How to use with the Visual Query When using the Visual Query it is already in the default / initial query: The above example shows: all data start in the cache ICache it is then by default passed through the PublishingFilter then it enters this Instance/Module, which gets the current ModuleInstance and passes on the data which has been assigned to it Using Module/Instance Data For Configuration Things get really exciting when you use values which the user edited in the module as a setting in your query. Here's an example: As you can see, the Default out of the ModuleDataSource is passed into the ValueSort data source with the stream-name Settings and is then used in a token to configure behaviour of the sort. Manually Assigning a Module Instance ID (2sxc 9.9) In 2sxc 9.9 we added the configuration dialog, so you can specify what module the data should come from. This allows you to have configuration-modules or primary-data-modules, which are re-used in queries: Programming With The ModuleDataSource DataSource We recommend to use the Visual Query where possible, as it's easier to understand and is identical for C# and JavaScript. It's also better because it separates data-retrieval from visualization. The only property you need to set is InstanceId (2sxc 9.9+) if you want to provide a different module-id. Read also datasource / data stream List of all EAV Data Sources query / visual query Demo App and further links You should find some examples in this demo App Demo App with examples for most DataSources History Introduced in EAV 4.x, 2sxc ? Added ability to configure in in the visual-query (2sxc 9.9) API Documentation Inheritance System.Object HasLog DataSourceBase CmsBlock Implements IDataSource IAppIdentity IZoneIdentity IAppIdentityLight ICacheKey ICacheExpiring ITimestamped ICanPurgeListCache IHasLog IDataTarget Inherited Members DataSourceBase.Name DataSourceBase.CacheRelevantConfigurations DataSourceBase.CachePartialKey DataSourceBase.CacheFullKey DataSourceBase.CacheTimestamp DataSourceBase.CacheChanged(Int64) DataSourceBase.AppId DataSourceBase.ZoneId DataSourceBase.Guid DataSourceBase.In DataSourceBase.Out DataSourceBase.Item[String] DataSourceBase.List DataSourceBase.Configuration DataSourceBase.Attach(IDataSource) DataSourceBase.Attach(String, IDataSource) DataSourceBase.Attach(String, IDataStream) DataSourceBase.PurgeList(Boolean) HasLog.Log HasLog.InitLog(String, ILog, String) HasLog.InitLog(String, ILog, String, CodeRef) Namespace : ToSic.Sxc.DataSources Assembly : ToSic.Sxc.dll Syntax [PublicApi_Stable_ForUseInYourCode] [VisualQuery(GlobalName = \"ToSic.Sxc.DataSources.CmsBlock, ToSic.Sxc\", Type = DataSourceType.Source, ExpectsDataOfType = \"7c2b2bc2-68c6-4bc3-ba18-6e6b5176ba02\", HelpLink = \"https://docs.2sxc.org/api/dot-net/ToSic.Sxc.DataSources.CmsBlock.html\", PreviousNames = new string[]{\"ToSic.SexyContent.DataSources.ModuleDataSource, ToSic.SexyContent\"})] public sealed class CmsBlock : DataSourceBase, IDataSource, IAppIdentity, IZoneIdentity, IAppIdentityLight, ICacheInfo, ICacheKey, ICacheExpiring, ITimestamped, ICanPurgeListCache, IHasLog, IDataTarget Constructors | Improve this Doc View Source CmsBlock(Lazy<CmsRuntime>) Declaration public CmsBlock(Lazy<CmsRuntime> lazyCmsRuntime) Parameters Type Name Description System.Lazy < ToSic.Sxc.Apps.CmsRuntime > lazyCmsRuntime Fields | Improve this Doc View Source InstanceIdKey Declaration public const string InstanceIdKey = \"ModuleId\" Field Value Type Description System.String | Improve this Doc View Source InstanceLookupName Declaration public const string InstanceLookupName = \"module\" Field Value Type Description System.String Properties | Improve this Doc View Source InstanceId The instance-id of the CmsBlock (2sxc instance, DNN ModId). It's named Instance-Id to be more neutral as we're opening it to other platforms Declaration public int? InstanceId { get; set; } Property Value Type Description System.Nullable < System.Int32 > | Improve this Doc View Source LogId Declaration public override string LogId { get; } Property Value Type Description System.String Overrides ToSic.Eav.DataSources.DataSourceBase.LogId | Improve this Doc View Source OverrideView This allows external settings to override the view given by the configuration. This is used to temporarily use an alternate view. For example, when previewing a different template. Declaration public IView OverrideView { get; set; } Property Value Type Description IView Implements IDataSource IAppIdentity IZoneIdentity IAppIdentityLight ICacheKey ICacheExpiring ITimestamped ICanPurgeListCache IHasLog IDataTarget"
  },
  "api/dot-net/ToSic.Eav.DataSources.Caching.ListCache.html": {
    "href": "api/dot-net/ToSic.Eav.DataSources.Caching.ListCache.html",
    "title": "Class ListCache | 2sxc and EAV 10",
    "keywords": "Class ListCache Responsible for caching lists / streams. Usually used in queries or sources which have an intensive loading or querying time. Inheritance System.Object HasLog ListCache Implements IHasLog IListCache Inherited Members HasLog.Log HasLog.InitLog(String, ILog, String) HasLog.InitLog(String, ILog, String, CodeRef) Namespace : ToSic.Eav.DataSources.Caching Assembly : ToSic.Eav.DataSources.dll Syntax [InternalApi_DoNotUse_MayChangeWithoutNotice(\"this is just fyi\")] public class ListCache : HasLog, IHasLog, IListCache Properties | Improve this Doc View Source DefaultDuration The time a list stays in the cache by default - default is 3600 = 1 hour. Is used in all Set commands where the default duration is needed. Declaration public int DefaultDuration { get; } Property Value Type Description System.Int32 Methods | Improve this Doc View Source Get(String) Get a list from the cache Declaration public ListCacheItem Get(string key) Parameters Type Name Description System.String key the identifier in the cache Returns Type Description ListCacheItem the cached list | Improve this Doc View Source Get(IDataStream) Get a list from the cache using a configured dataStream. The stream won't be queried, it serves as an identifier for the cache item. Declaration public ListCacheItem Get(IDataStream dataStream) Parameters Type Name Description IDataStream dataStream the data stream, which can provide it's cache-key Returns Type Description ListCacheItem the cached list | Improve this Doc View Source GetOrBuild(IDataStream, Func<IImmutableList<IEntity>>, Int32) Get cached item if available and valid, or rebuild cache using a mutual lock Declaration public ListCacheItem GetOrBuild(IDataStream stream, Func<IImmutableList<IEntity>> builderFunc, int durationInSeconds = 0) Parameters Type Name Description IDataStream stream The data stream on a data-source object System.Func < System.Collections.Immutable.IImmutableList < IEntity >> builderFunc a function which is only called if building is required System.Int32 durationInSeconds The cache validity duration in seconds. If 0 or omitted, default value will be used. Returns Type Description ListCacheItem The ListCacheItem - either from cache, or just created | Improve this Doc View Source Has(String) Check if it has this in the cache Declaration public bool Has(string key) Parameters Type Name Description System.String key the identifier in the cache Returns Type Description System.Boolean true if found | Improve this Doc View Source Has(IDataStream) Check if it has this in the cache Declaration public bool Has(IDataStream dataStream) Parameters Type Name Description IDataStream dataStream the data stream, which can provide it's cache-key Returns Type Description System.Boolean true if found | Improve this Doc View Source Remove(String) Remove an item from the list-cache using the string-key Declaration public void Remove(string key) Parameters Type Name Description System.String key the identifier in the cache | Improve this Doc View Source Remove(IDataStream) Remove an item from the list cache using a data-stream key Declaration public void Remove(IDataStream dataStream) Parameters Type Name Description IDataStream dataStream the data stream, which can provide it's cache-key | Improve this Doc View Source Set(String, IImmutableList<IEntity>, Int64, Int32, Boolean) Add an item to the list-cache Declaration public void Set(string key, IImmutableList<IEntity> list, long sourceTimestamp, int durationInSeconds = 0, bool slidingExpiration = true) Parameters Type Name Description System.String key cache key System.Collections.Immutable.IImmutableList < IEntity > list items to put into the cache for this cache key System.Int64 sourceTimestamp System.Int32 durationInSeconds The cache validity duration in seconds. If 0 or omitted, default value will be used. System.Boolean slidingExpiration | Improve this Doc View Source Set(IDataStream, Int32, Boolean) Add an item to the list-cache Declaration public void Set(IDataStream dataStream, int durationInSeconds = 0, bool slidingExpiration = true) Parameters Type Name Description IDataStream dataStream the data stream, which can provide it's cache-key System.Int32 durationInSeconds The cache validity duration in seconds. If 0 or omitted, default value will be used. System.Boolean slidingExpiration Implements IHasLog IListCache"
  },
  "api/dot-net/ToSic.Eav.DataSources.Paging.html": {
    "href": "api/dot-net/ToSic.Eav.DataSources.Paging.html",
    "title": "Class Paging | 2sxc and EAV 10",
    "keywords": "Class Paging A DataSource that filters Entities by Ids The Paging DataSource is part of the Standard EAV Data Sources . It will limit the items returned to a page containing just a few items, and will also provide a paging-information so that the UI knows what page it's on and how many pages remain. How to use with the Visual Query When using the Visual Query you can just drag it into your query. This is what it usually looks like: The above example shows: a content-type filter limiting the items to type Company a Paging which only passes on the first 3 companies of page 1 Using Url Parameters for Paging This example shows how you can use the Url Parameter to page through the results: ...you could also set the page size from other tokens like url or app-configuration, like this: Programming With The Paging DataSource We recommend to use the Visual Query where possible, as it's easier to understand and is identical for C# and JavaScript. It's also better because it separates data-retrieval from visualization. Read also datasource / data stream List of all EAV Data Sources query / visual query Demo App and further links You should find some examples in this demo App Demo App with examples for most DataSources History Introduced in EAV 4.x, 2sxc ? API Documentation Inheritance System.Object HasLog DataSourceBase Paging Implements IDataSource IAppIdentity IZoneIdentity IAppIdentityLight ICacheKey ICacheExpiring ITimestamped ICanPurgeListCache IHasLog IDataTarget Inherited Members DataSourceBase.Name DataSourceBase.CacheRelevantConfigurations DataSourceBase.CachePartialKey DataSourceBase.CacheFullKey DataSourceBase.CacheTimestamp DataSourceBase.CacheChanged(Int64) DataSourceBase.AppId DataSourceBase.ZoneId DataSourceBase.Guid DataSourceBase.In DataSourceBase.Out DataSourceBase.Item[String] DataSourceBase.List DataSourceBase.Configuration DataSourceBase.Attach(IDataSource) DataSourceBase.Attach(String, IDataSource) DataSourceBase.Attach(String, IDataStream) DataSourceBase.PurgeList(Boolean) HasLog.Log HasLog.InitLog(String, ILog, String) HasLog.InitLog(String, ILog, String, CodeRef) Namespace : ToSic.Eav.DataSources Assembly : ToSic.Eav.DataSources.dll Syntax [PublicApi_Stable_ForUseInYourCode] [VisualQuery(GlobalName = \"ToSic.Eav.DataSources.Paging, ToSic.Eav.DataSources\", Type = DataSourceType.Logic, DynamicOut = false, ExpectsDataOfType = \"|Config ToSic.Eav.DataSources.Paging\", HelpLink = \"https://r.2sxc.org/DsPaging\")] public sealed class Paging : DataSourceBase, IDataSource, IAppIdentity, IZoneIdentity, IAppIdentityLight, ICacheInfo, ICacheKey, ICacheExpiring, ITimestamped, ICanPurgeListCache, IHasLog, IDataTarget Remarks Technically many things could just identify the app they belong to, and let the system look up the zone. But this would be inefficient, so for optimization, many items identify themselves with both the app and zone Ids Properties | Improve this Doc View Source PageNumber The Page number to show - defaults to 1 Declaration public int PageNumber { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source PageSize The Page size in the paging. Defaults to 10. Declaration public int PageSize { get; set; } Property Value Type Description System.Int32 Implements IDataSource IAppIdentity IZoneIdentity IAppIdentityLight ICacheKey ICacheExpiring ITimestamped ICanPurgeListCache IHasLog IDataTarget"
  },
  "api/dot-net/ToSic.Eav.DataSources.StreamMerge.html": {
    "href": "api/dot-net/ToSic.Eav.DataSources.StreamMerge.html",
    "title": "Class StreamMerge | 2sxc and EAV 10",
    "keywords": "Class StreamMerge A DataSource that merges two streams The StreamMerge DataSource is part of the Standard EAV Data Sources . It will create a new stream containing everything which came into this data source. How to use with the Visual Query When using the Visual Query you can just drag it into your query. This is what it usually looks like: The above example shows two filters finding items and delivering them on the same stream. Example Using ItemFilterDuplicates A common scenario will also combine this using the ItemFilterDuplicates , in case various in-streams deliver the same item: No Settings The StreamMerge DataSource has no settings to configure. Note that it will automatically merge the streams in A-Z order of the In-Stream names. Programming With The StreamMerge DataSource We recommend to use the Visual Query where possible, as it's easier to understand and is identical for C# and JavaScript. It's also better because it separates data-retrieval from visualization. Read also datasource / data stream List of all EAV Data Sources query / visual query Demo App and further links You should find some examples in this demo App Demo App with examples for most DataSources History Introduced in EAV 4.x, 2sxc 9.10 API Documentation Inheritance System.Object HasLog DataSourceBase StreamMerge Implements IDataSource IAppIdentity IZoneIdentity IAppIdentityLight ICacheKey ICacheExpiring ITimestamped ICanPurgeListCache IHasLog IDataTarget Inherited Members DataSourceBase.Name DataSourceBase.CacheRelevantConfigurations DataSourceBase.CachePartialKey DataSourceBase.CacheFullKey DataSourceBase.CacheTimestamp DataSourceBase.CacheChanged(Int64) DataSourceBase.AppId DataSourceBase.ZoneId DataSourceBase.Guid DataSourceBase.In DataSourceBase.Out DataSourceBase.Item[String] DataSourceBase.List DataSourceBase.Configuration DataSourceBase.Attach(IDataSource) DataSourceBase.Attach(String, IDataSource) DataSourceBase.Attach(String, IDataStream) DataSourceBase.PurgeList(Boolean) HasLog.Log HasLog.InitLog(String, ILog, String) HasLog.InitLog(String, ILog, String, CodeRef) Namespace : ToSic.Eav.DataSources Assembly : ToSic.Eav.DataSources.dll Syntax [PublicApi_Stable_ForUseInYourCode] [VisualQuery(GlobalName = \"ToSic.Eav.DataSources.StreamMerge, ToSic.Eav.DataSources\", Type = DataSourceType.Logic, DynamicOut = false, HelpLink = \"https://r.2sxc.org/DsStreamMerge\")] public sealed class StreamMerge : DataSourceBase, IDataSource, IAppIdentity, IZoneIdentity, IAppIdentityLight, ICacheInfo, ICacheKey, ICacheExpiring, ITimestamped, ICanPurgeListCache, IHasLog, IDataTarget Remarks Technically many things could just identify the app they belong to, and let the system look up the zone. But this would be inefficient, so for optimization, many items identify themselves with both the app and zone Ids Implements IDataSource IAppIdentity IZoneIdentity IAppIdentityLight ICacheKey ICacheExpiring ITimestamped ICanPurgeListCache IHasLog IDataTarget"
  },
  "api/dot-net/ToSic.Eav.Logging.html": {
    "href": "api/dot-net/ToSic.Eav.Logging.html",
    "title": "Namespace ToSic.Eav.Logging | 2sxc and EAV 10",
    "keywords": "Namespace ToSic.Eav.Logging The EAV system has a powerful internal logging system. It's the backbone to Insights. This is where it resides - usually you don't want to know about it ;). If you do, here a short conceptual background: Any object can have a property - usually called Log which is an ILog . Using this the object can call the Log.Add(...) to add messages. Many other commands help in various scenarios. The real power comes from chaining these - because each logger can know what parent-logger it reports to. This allows us to reproduce the chain of events in the original code, because you can track where loggers were made, and how they relate. The really amazing bit (added in 2sxc 10.22/10.23) is that the logger will also pick up the class names, code-file names and line of code where it was logged üòé. Most objects which use the Log, implement the IHasLog , often by inheriting ToSic.Eav.Logging .HasLog which automates things when initializing - like the chaining of the Loggers. Classes CodeRef Reference to code - containing the path to the file, the method name and the line in the code. HasLog Base class for most objects which simply want to implement log and log-chaining. Interfaces IHasLog Objects which can log their activity, and share their log with other objects in the chain to produce extensive internal logging. ILog A logger with special capabilities. It can take log messages, and chain itself to other loggers. If chained, it can broadcast the messages to the other loggers from that time forward. Basically this is the backbone of Insights."
  },
  "api/dot-net/ToSic.Sxc.Adam.IFile.html": {
    "href": "api/dot-net/ToSic.Sxc.Adam.IFile.html",
    "title": "Interface IFile | 2sxc and EAV 10",
    "keywords": "Interface IFile An ADAM (Automatic Digital Asset Management) file This simple interface assumes that it uses int-IDs. Inherited Members IAsset.HasMetadata IAsset.Metadata IAsset.Url IAsset.Type IFile.Extension IFile.Folder IFile.FolderId IFile.FullName IFile.Size IAsset.Created IAsset.Id IAsset.ParentId IAsset.Modified IAsset.Name IAsset.Path Namespace : ToSic.Sxc.Adam Assembly : ToSic.Sxc.dll Syntax [PublicApi_Stable_ForUseInYourCode] public interface IFile : IAsset, IFile, IAsset"
  },
  "api/dot-net/ToSic.Sxc.Adam.IFolder.html": {
    "href": "api/dot-net/ToSic.Sxc.Adam.IFolder.html",
    "title": "Interface IFolder | 2sxc and EAV 10",
    "keywords": "Interface IFolder An ADAM (Automatic Digital Asset Management) folder. This simple interface assumes that it uses int-IDs. Inherited Members IFolder.HasChildren IAsset.Created IAsset.Id IAsset.ParentId IAsset.Modified IAsset.Name IAsset.Path IAsset.HasMetadata IAsset.Metadata IAsset.Url IAsset.Type Namespace : ToSic.Sxc.Adam Assembly : ToSic.Sxc.dll Syntax [PublicApi_Stable_ForUseInYourCode] public interface IFolder : IFolder, IAsset, IAsset Properties | Improve this Doc View Source Files Get the files in this folder Declaration IEnumerable<IFile> Files { get; } Property Value Type Description System.Collections.Generic.IEnumerable < IFile > A list of files in this folder as IFile | Improve this Doc View Source Folders Get the sub-folders in this folder Declaration IEnumerable<IFolder> Folders { get; } Property Value Type Description System.Collections.Generic.IEnumerable < IFolder > A list of folders inside this folder - as IFolder ."
  },
  "api/dot-net/ToSic.Sxc.Data.IDynamicEntity.html": {
    "href": "api/dot-net/ToSic.Sxc.Data.IDynamicEntity.html",
    "title": "Interface IDynamicEntity | 2sxc and EAV 10",
    "keywords": "Interface IDynamicEntity This is a wrapper for IEntity objects. It provides nicer access to underlying properties and automatically handles things like multi-language etc. The underlying IEntity IEntity is in the Entity property. Normally you will use it without caring about these internals. Please check @HowTo.DynamicCode.DynamicEntity Namespace : ToSic.Sxc.Data Assembly : ToSic.Sxc.dll Syntax [PublicApi_Stable_ForUseInYourCode] [PublicApi_Stable_ForUseInYourCode] public interface IDynamicEntity : IDynamicEntity, IEntityWrapper Properties | Improve this Doc View Source AnyBooleanProperty A Dynamic Entity always contains an item of your data - a book, person, blog-post or a piece of content. Since the object is dynamic, you can just use .IsFemale or whatever other property your item has. If it's a true/false, it will just magically work and return a bool . If it doesn't exist, it will return null. Declaration bool AnyBooleanProperty { get; } Property Value Type Description System.Boolean | Improve this Doc View Source AnyChildrenProperty A Dynamic Entity always contains an item of your data - a book, person, blog-post or a piece of content. Since the object is dynamic, you can just use .Tags or whatever other property your item has. If it's contains relationships, it will just magically work and return a list of further DynamicEntity objects. If it doesn't exist, it will return null. Declaration IEnumerable<DynamicEntity> AnyChildrenProperty { get; } Property Value Type Description System.Collections.Generic.IEnumerable < DynamicEntity > Remarks Very often you'll want to use LINQ to further sort or query these items. But the Razor compiler cannot know that it got a list, so using .Any() or similar fails. To fix this, put an AsList around it - a bit like AsList(myThing.Tags) . Sometimes you'll also need to help a bit more with AsList(myThings.Tags as object) . Now you can do things like var tags = AsList(myThings.Tags as object); if (myTags.Any()) {...} Read more about this in the Dnn LINQ Tutorials | Improve this Doc View Source AnyDateTimeProperty A Dynamic Entity always contains an item of your data - a book, person, blog-post or a piece of content. Since the object is dynamic, you can just use .Birthday or whatever other property your item has. If it's a date/time, it will just magically work and return a DateTime . If it doesn't exist, it will return null. Declaration DateTime AnyDateTimeProperty { get; } Property Value Type Description System.DateTime | Improve this Doc View Source AnyJsonProperty A Dynamic Entity always contains an item of your data - a book, person, blog-post or a piece of content. Since the object is dynamic, you can just use .Gps or whatever other property your item has. If the field contains JSON, it will just magically work and return a string . If it doesn't exist, it will return null. Declaration string AnyJsonProperty { get; } Property Value Type Description System.String Remarks Very often you'll want to use the Json as a dynamic object again. Just pass the result through AsDynamic and it will work. Example: var gps = AsDynamic(myThing.Gps); var lat = gps.Lat; Read more about this in the Dnn JSON Tutorials | Improve this Doc View Source AnyLinkOrFileProperty A Dynamic Entity always contains an item of your data - a book, person, blog-post or a piece of content. Since the object is dynamic, you can just use .Image or whatever other property your item has. If it's a link, it will just magically work and return a string . If it doesn't exist, it will return null. Declaration string AnyLinkOrFileProperty { get; } Property Value Type Description System.String Remarks Note that many internal references in the CMS use file:2742 or similar. This will automatically be resolved to the real link which your output needs. | Improve this Doc View Source AnyNumberProperty A Dynamic Entity always contains an item of your data - a book, person, blog-post or a piece of content. Since the object is dynamic, you can just use .Length or whatever other property your item has. If it's a number, it will just magically work and return a double . If it doesn't exist, it will return null. Declaration double AnyNumberProperty { get; } Property Value Type Description System.Double | Improve this Doc View Source AnyStringProperty A Dynamic Entity always contains an item of your data - a book, person, blog-post or a piece of content. Since the object is dynamic, you can just use .FirstName or whatever other property your item has. If it's a string, it will just magically work. If it doesn't exist, it will return null. Declaration string AnyStringProperty { get; } Property Value Type Description System.String Remarks Remember to use @Html.Raw(...) if you want the html to be preserved and not cleaned when placed in the page. | Improve this Doc View Source Entity The underlying entity which provides all the data for the DynamicEntity Declaration IEntity Entity { get; } Property Value Type Description IEntity An Entity object. | Improve this Doc View Source EntityGuid The guid of the underlying entity. Declaration Guid EntityGuid { get; } Property Value Type Description System.Guid Remarks If the entity doesn't exist, it will return an empty guid | Improve this Doc View Source EntityId The ID of the underlying entity. Use it for edit-functionality or just to have a unique number for this item. Declaration int EntityId { get; } Property Value Type Description System.Int32 Remarks If the entity doesn't exist, it will return 0 | Improve this Doc View Source EntityTitle The title of this item. This is always available no matter what the underlying field for the title is. Declaration object EntityTitle { get; } Property Value Type Description System.Object The title of the underlying entity. In rare cases where no title-field is known, it can be null. It can also be null if there is no underlying entity. | Improve this Doc View Source EntityType The type name of the current entity. This provides the nice name like \"Person\" and not the technical internal StaticName Declaration string EntityType { get; } Property Value Type Description System.String | Improve this Doc View Source IsDemoItem Many templates show demo data. If the template code must know if it's the demo item or real data, use IsDemoItem. Declaration bool IsDemoItem { get; } Property Value Type Description System.Boolean True if this is the item configured in the view-settings, false if not. Remarks New in 10.07 | Improve this Doc View Source IsPublished Tells us if this data item is published or still draft. Default is true. Declaration bool IsPublished { get; } Property Value Type Description System.Boolean | Improve this Doc View Source Presentation Contains presentation settings for an item - if they exist. This is a functionality of the CMS, where an instance of an item can be configured to show in a specific way. Normally it's used when something like an address has various show-settings (like how the map should visualize this address). The presentation-info is therefor not-null IF the content belongs to this module instance the view-configuration of this module is configured to have presentation items there is either a default presentation configured in the view, or the user has manually edited the presentation settings Declaration dynamic Presentation { get; } Property Value Type Description System.Object An IDynamicEntity with the presentation item (or the demo-presentation), otherwise null. Methods | Improve this Doc View Source Children(String, String) A dynamic list of sub-items. Important for LINQ style querying or just working with various lists. Note that for getting child items of this item you can just use the properties, like content.Authors. But using Children(\"Authors\", typeName) gives you the ability to restrict to a type. Please check the tutorials on 2sxc.org/dnn-tutorials/ for more info. Declaration List<IDynamicEntity> Children(string field = null, string type = null) Parameters Type Name Description System.String field Optional field filter - would only return items that point to the current item in a specific field name. System.String type Optional type filter - would only return items of this type. Returns Type Description System.Collections.Generic.List < IDynamicEntity > A list of all items pointing here (filtered), converted to DynamicEntity for convenience. Remarks New in 10.21.00 - note also that the parameter-order is reversed to the Parents() | Improve this Doc View Source Get(String) Get a value of the entity. Usually you will prefer the quick access like @content.FirstName - which will give you the same things as content.Get(\"FirstName\"). There are two cases to use this: when you dynamically assemble the field name in your code, like when using App.Resources or similar use cases. to access a field which has a conflicting name with this object, like Get(\"Parents\") Declaration dynamic Get(string name) Parameters Type Name Description System.String name Returns Type Description System.Object An object which can be either a string, number, boolean or List<IDynamicEntity>, depending on the field type. Will return null if the field was not found. | Improve this Doc View Source Get(String, String, String, Boolean) Get a property using the string name. Only needed in special situations, as most cases can use the object.name directly Declaration dynamic Get(string name, string dontRelyOnParameterOrder = \"all params must be named, like 'enable: true, language: ''de-ch''\", string language = null, bool convertLinks = true) Parameters Type Name Description System.String name the property name. System.String dontRelyOnParameterOrder This should enforce the convention that all following parameters (which are optional) must explicitly use the parameter name. So Get(&quot;FirstName&quot;, &quot;en&quot;) won't work, you must use Get(&quot;FirstName&quot;, language: &quot;en&quot;) and similar System.String language Optional language code - like \"de-ch\" to prioritize that language System.Boolean convertLinks Optionally turn off if links like file:72 are looked up to a real link. Default is true. Returns Type Description System.Object a dynamically typed result, can be string, bool, etc. | Improve this Doc View Source GetDraft() Get the draft item of this item if this is a content-item which is published, and has a draft. Declaration dynamic GetDraft() Returns Type Description System.Object Returns a dynamic entity if there is a draft, or null if there is no draft. | Improve this Doc View Source GetPublished() Get the published item of this item if this is a content-item which is draft, and has a published. Declaration dynamic GetPublished() Returns Type Description System.Object Returns a dynamic entity if there is a draft, or null if there is no draft. | Improve this Doc View Source Parents(String, String) A dynamic list of entities which point to this item. Important for LINQ style querying or just working with various lists. Note that for getting child items of this item you can just use the properties, like content.Authors. Please check the tutorials on 2sxc.org/dnn-tutorials/ for more info. Declaration List<IDynamicEntity> Parents(string type = null, string field = null) Parameters Type Name Description System.String type Optional type filter - would only return items of this type. System.String field Optional field filter - would only return items that point to the current item in a specific field name. Returns Type Description System.Collections.Generic.List < IDynamicEntity > A list of all items pointing here (filtered), converted to DynamicEntity for convenience. Remarks New in 9.42 - note also that the parameter-order is reversed to the Children()"
  },
  "net-code/errors/dynamicentity-not-be-found.html": {
    "href": "net-code/errors/dynamicentity-not-be-found.html",
    "title": "Error: The type or namespace name 'DynamicEntity' could not be found | 2sxc and EAV 10",
    "keywords": "Error: The type or namespace name 'DynamicEntity' could not be found If you see an error like this: Error: System.Web.HttpCompileException (0x80004005): ...: error CS0246: The type or namespace name 'DynamicEntity' could not be found (are you missing a using directive or an assembly reference?) It usually means that you have code using DynamicEntity which had to be moved to another namespace for consistency. We're sorry about the breaking change. From what we see it mainly affects the very old FAQ app which had some very old coding style in it for LINQ. In this case it was not possible to clean 2sxc and still ensure that this works, because of type-casting restrictions in C# related to covariance and contravariance . Background: DynamicEntity was moved To create the public documentation we had to make sure our API was consistent, and IEntity was one of the exceptions. Before 2sxc 10.20 it was in the namespace ToSic.SexyContent . We standardized it now to ToSic.Sxc.Data so the full name is ToSic.Sxc.Data.DynamicEntity . Quick Fix: Change the namespace Your code probably has a @using ToSic.SexyContent . You should change this to @using ToSic.Sxc.Data; And everything should work. But please also check the good fix below: Good Fix: Change to <dynamic> Razor code shouldn't actually need to know the type of this dynamic entity. So it's better to replace occurances of DynamicEntity with the appropriate dynamic . For example, replace List<DynamicEntity> with IEnumerable<dynamic> (note that List<dynamic> won't work because of covariance restrictions). In the example of the FAQ app, it's recommended you change line 23 <li class=\"sc-element faq-set\" data-tags=\"@String.Join(\",\", ((List<DynamicEntity>)q.Categories).Select(a => AsDynamic(a).EntityId))\"> to <li class=\"sc-element faq-set\" data-tags=\"@String.Join(\",\", (q.Categories as IEnumerable<dynamic>) .Select(a => AsDynamic(a).EntityId))\"> To better understand this, best consult the LINQ Tutorials Full Error Example A full error can look like this: Error: System.Web.HttpCompileException (0x80004005): ...\\Portals\\...\\2sxc\\FAQ with Categories\\_All questions (sorted) of a selected category.cshtml(23): error CS0246: The type or namespace name 'DynamicEntity' could not be found (are you missing a using directive or an assembly reference?) at System.Web.Compilation.AssemblyBuilder.Compile() at System.Web.Compilation.BuildProvidersCompiler.PerformBuild() at System.Web.Compilation.BuildManager.CompileWebFile(VirtualPath virtualPath) at System.Web.Compilation.BuildManager.GetVPathBuildResultInternal(VirtualPath virtualPath, Boolean noBuild, Boolean allowCrossApp, Boolean allowBuildInPrecompile, Boolean throwIfNotFound, Boolean ensureIsUpToDate) at System.Web.Compilation.BuildManager.GetVPathBuildResultWithNoAssert(HttpContext context, VirtualPath virtualPath, Boolean noBuild, Boolean allowCrossApp, Boolean allowBuildInPrecompile, Boolean throwIfNotFound, Boolean ensureIsUpToDate) at System.Web.Compilation.BuildManager.GetVirtualPathObjectFactory(VirtualPath virtualPath, HttpContext context, Boolean allowCrossApp, Boolean throwIfNotFound) at System.Web.Compilation.BuildManager.GetCompiledType(VirtualPath virtualPath) at ToSic.Sxc.Engines.RazorEngine.CreateWebPageInstance() in C:\\Projects\\2sxc-dnn742\\Website\\DesktopModules\\ToSIC_SexyContent\\2Sexy Content Razor\\Engines\\Razor\\RazorEngine.cs:line 107 at ToSic.Sxc.Engines.RazorEngine.InitWebpage() in C:\\Projects\\2sxc-dnn742\\Website\\DesktopModules\\ToSIC_SexyContent\\2Sexy Content Razor\\Engines\\Razor\\RazorEngine.cs:line 128 at ToSic.Sxc.Engines.RazorEngine.Init() in C:\\Projects\\2sxc-dnn742\\Website\\DesktopModules\\ToSIC_SexyContent\\2Sexy Content Razor\\Engines\\Razor\\RazorEngine.cs:line 43 at ToSic.Sxc.Engines.EngineBase.Init(ICmsBlock cmsBlock, Purpose purpose, ILog parentLog) in C:\\Projects\\2sxc-dnn742\\Website\\DesktopModules\\ToSIC_SexyContent\\ToSic.Sxc\\Engines\\EngineBase.cs:line 76 at ToSic.Sxc.Blocks.CmsBlock.GetRenderingEngine(Purpose renderingPurpose) in C:\\Projects\\2sxc-dnn742\\Website\\DesktopModules\\ToSIC_SexyContent\\ToSic.Sxc\\Blocks\\CmsBlock_Render.cs:line 122 at ToSic.Sxc.Blocks.CmsBlock.Render() in C:\\Projects\\2sxc-dnn742\\Website\\DesktopModules\\ToSIC_SexyContent\\ToSic.Sxc\\Blocks\\CmsBlock_Render.cs:line 56 Here's a print-screen:"
  },
  "net-code/dynamic-code/header.html": {
    "href": "net-code/dynamic-code/header.html",
    "title": "Header / Object | 2sxc and EAV 10",
    "keywords": "Header / @Header Object The Header is a Dynamic Entity in all Dynamic Code (Razor and WebAPI). It's used on Views which are configured to have lists - and allows you to add information for the header or similar. So basicall List-Views have 0 or 1 Header and 0 or many Content items. If the View is not a list, the Header will not be available. ‚ö° The official API docs . Since it's a Dynamic Entity it carries all values as properties, like Header.Link etc. Discover More in the Razor Tutorials We have an rich series of Razor tutorials . You should really check them out üëç. Example Razor Code <h2> @Header.Title </h2> Header.Presentation Depending on the view configuration the Header can carry additional presentation information, for example how to format the title etc. This is available on Header.Presentation . The Presentation object is also a Dynamic Entity . <h2 class=\"@Header.Presentation.Highlight\"> @Header.Title </h2> Demo Data Note that the View can be configured to contain demo data for both the Header as well as the Header.Presentation . In this case your template will receive data to show even if the editor has not added anything. History Introduced in 2sxc 1.0 under the name List which was confusing Changed to Header in ca. V10 (but List still works for compatibility) Presentation added in this documented form ca. 2sxc 8"
  },
  "net-code/dynamic-code/object-dnn.html": {
    "href": "net-code/dynamic-code/object-dnn.html",
    "title": "Dnn / Object in Dynamic Code | 2sxc and EAV 10",
    "keywords": "Dnn / @Dnn Object in Dynamic Code The Dnn is a helper object which contains properties to access information about the current tab, portal, user, module etc. Discover More in the Razor Tutorials We have an rich series of Razor tutorials . You should really check them out üëç. How to use Here's a quick example of using the Dnn object in a Razor template: <!-- show the current users nice name --> @Dnn.User.DisplayName How it works There's not much to explain here, we're just providing the standard DNN objects to the template. The Main Properties of the @Dnn Object These are the main properties: Module Portal Tab User The @Dnn.Module Properties The @Dnn.Module is of the type ModuleInfo . It has the following properties: Dnn.Module.AllModules Dnn.Module.AllTabs Dnn.Module.Border Dnn.Module.Cacheability Dnn.Module.CacheMethod Dnn.Module.CacheTime Dnn.Module.ContainerPath Dnn.Module.ContainerSrc Dnn.Module.DefaultCacheTime Dnn.Module.DesktopModule Dnn.Module.DesktopModuleId Dnn.Module.DisplayTitle Dnn.Module.EndDate - for show/hide Dnn.Module.Footer Dnn.Module.Header Dnn.Module.ModuleControl Dnn.Module.ModuleControlId Dnn.Module.ModuleDefID - note: large D Dnn.Module.ModuleDefinition Dnn.Module.ModuleID - probably the most used value, note the large ID Dnn.Module.ModuleName Dnn.Module.ModuleOrder Dnn.Module.ModulePermissions Dnn.Module.ModuleSettings Dnn.Module.ModuleTitle Dnn.Module.PaneModuleCount Dnn.Module.PaneModuleIndex Dnn.Module.PaneName Dnn.Module.ParentTab - a TabInfo, same as Dnn.Tab Dnn.Module.PortalID - note large D Dnn.Module.StartDate - for show/hide rules Dnn.Module.TabID - note large D Dnn.Module.TabModuleID - note large D Dnn.Module.TabModuleSettings Dnn.Module.UniqueId Dnn.Module.Visibility The @Dnn.Portal Properties The @Dnn.Portal is of the type PortalSettings . It has the following properties: Dnn.Portal.ActiveTab Dnn.Portal.AdministratorId Dnn.Portal.AdministratorRoleId Dnn.Portal.AdministratoRoleName Dnn.Portal.AdminTabId Dnn.Portal.CultureCode Dnn.Portal.Currency Dnn.Portal.Current - static method returning the current portal portal-settings Dnn.Portal.Default... (AdminContainer, AdminSkin, ControlPanelMode, etc.) Dnn.Portal.DefaultLanguage Dnn.Portal.DefaultModuleId Dnn.Portal.DefaultPortalContainer Dnn.Portal.DefaultTabId Dnn.Portal.Description Dnn.Portal.Email Dnn.Portal.EnableBrowserLanguage Dnn.Portal.EnableUrlLanguage Dnn.Portal.ExpiryDate Dnn.Portal.FooterText Dnn.Portal.GetProperty(string, string, cultureInfo, UserInfo, scope, boolean) - ? Dnn.Portal.GUID - notice all large letters Dnn.Portal.HomeDirectory Dnn.Portal.HomeDirectoryMapPath Dnn.Portal.HomeTabId - the root page Dnn.Portal.KeyWords Dnn.Portal.LoginTabId - where the normal login usually goes to Dnn.Portal.LogoFile Dnn.Portal.Pages Dnn.Portal.PortalAlias Dnn.Portal.PortalId - very important - notice the small d Dnn.Portal.PortalName Dnn.Portal.PortalSkin Dnn.Portal.RegisteredRoleId Dnn.Portal.RegisteredRoleName Dnn.Portal.RegisterTabId Dnn.Portal.Search... (various values like IncludeCommon, IncludeTagInfoFilter etc.) Dnn.Portal.SearchTabId Dnn.Portal.SiteLogHistory Dnn.Portal.SplashTabId Dnn.Portal.SSLEnabled Dnn.Portal.SSLEnforced Dnn.Portal.SSLURL - all caps Dnn.Portal.STDURL - all caps Dnn.Portal.SuperTabId Dnn.Portal.TimeZoneOffset Dnn.Portal.UserId Dnn.Portal.UserInfo Dnn.Portal.UserMode Dnn.Portal.UserQuota Dnn.Portal.UserRegistration Dnn.Portal.Users Dnn.Portal.UserTabId The @Dnn.Tab Properties The @Dnn.Tab is of the type TabInfo . It has the following properties: Dnn.Tab.ChildModules Dnn.Tab.ContainerPath Dnn.Tab.ContainerSrc Dnn.Tab.CultureCode Dnn.Tab.DefaultLanguageGuid Dnn.Tab.DefaultLanguageTab Dnn.Tab.Description Dnn.Tab.EndDate - for show/hide of this tab Dnn.Tab.FullUrl Dnn.Tab.HasChildren Dnn.Tab.IsDefaultLanguage Dnn.Tab.IsDeleted Dnn.Tab.IsNeutralCulture Dnn.Tab.IsSecure Dnn.Tab.IsTranslated Dnn.Tab.IsVisible Dnn.Tab.KeyWords Dnn.Tab.Level Dnn.Tab.LocalizedTabName Dnn.Tab.LocalizedTabs Dnn.Tab.Modules Dnn.Tab.PageHeadtext Dnn.Tab.Panes Dnn.Tab.ParentId Dnn.Tab.PermanentRedirect Dnn.Tab.PortalID - notice the large D Dnn.Tab.RefreshInterval Dnn.Tab.SiteMapPriority Dnn.Tab.SkinDoctype Dnn.Tab.SkinPath Dnn.Tab.SkinSrc Dnn.Tab.StartDate - for show/hide Dnn.Tab.TabID - the current Tab-number - notice the large D Dnn.Tab.TabName Dnn.Tab.TabOrder Dnn.Tab.TabPath Dnn.Tab.TabPermissions Dnn.Tab.TabSettings Dnn.Tab.TabType Dnn.Tab.Title Dnn.Tab.UniqueId - small \"d\" Dnn.Tab.Url The @Dnn.User Properties The @Dnn.User is of the type UserInfo . It has the following properties: Dnn.User.DisplayName Dnn.User.Email Dnn.User.FirstName Dnn.User.FullName Dnn.User.IsDeleted Dnn.User.IsInRole(string RoleName) Dnn.User.IsSuperUser Dnn.User.LastName Dnn.User.Membership - these are asp.net memberships, you probably don't need them Dnn.User.PortalId Dnn.User.Roles - these are DNN roles Dnn.User.UserID - note the large D Dnn.User.Username History Introduced in 2sxc 1.0"
  },
  "net-code/dynamic-code/object-link.html": {
    "href": "net-code/dynamic-code/object-link.html",
    "title": "Link / Object in Dynamic Code | 2sxc and EAV 10",
    "keywords": "Link / @Link Object in Dynamic Code Basically you can always link around to other pages, websites or views using normal <a href=\"...\">text</a> html. And often you just want to add some parameters to the current Url like ?id=27 - but the behavior of this can be very different depending on the DNN settings. The Link object helps you handle this. Note: DNN often has a problem with links, because depending on what page you are on, the behaviour is a bit different. This is especially important on the home page. Use @Link.To(...) to make sure everything works no matter what. Discover More in the Razor Tutorials We have an rich series of Razor tutorials . You should really check them out üëç. How to use Here's a quick example of using the Link object in a Razor template: <a href=\"@Link.To(parameters: \"id=\" + item.EntityId)\"> @item.Title </a> This example creates a link to the current page, adding either ?id=27 or /id/27 , depending on the DNN configuration. How it works The Link -object is always available in all Razor-templates. Internally it uses the DNN API to get the correct url. Using @Link.To() Example: @Link.To(parameters: \"id=17\") @Link.To(parameters: \"id=403&category=all\") Using @Link.Base() for JavaScript SPA modules This is new in 2sxc v9.5.1. It ensures that the url can be used for SPAs, as some pages will otherwise provide a wrong link (like home) which then breaks the SPA. <base href=\"@Link.Base()\"> Notes and Clarifications The Link-Object is of type ILinkHelper . Enforced Parameter Naming To promote long term API stability, we require all parameters to be named when used. This allows us to add further parameters later on, and the calls will still work. <!-- this will work --> @Link.To(parameters: \"id=17\") @Link.To(parameters: \"id=403&category=all\") <!-- new in 2sxc 9.5.1 --> @Link.To(pageId: 40, parameters: \"id=403&category=all\") <!-- this won't work --> @Link.To(\"id=17\") Demo App and further links You should find some code examples in this demo App Blog App History Introduced in 2sxc 8.4 Enhanced in 2sxc 9.5.1 with Base() and with parameter pageId on Link.To"
  },
  "net-code/dynamic-data/dynamic-entity.html": {
    "href": "net-code/dynamic-data/dynamic-entity.html",
    "title": "How to Use a Dynamic Entity | 2sxc and EAV 10",
    "keywords": "How to Use a Dynamic Entity Whenever you create a content-type - like Person - and want to work with the data in your C# Razor templates, you'll be working with a Dynamic Entity . Tip Also read about AsDynamic(...) - Magic Objects Code example using a Dynamic Entity We'll assume we have a Content Type called Book with the following properties: Title (text, 1-line) Teaser (text, multi-line) Description (text, html) ReleaseDate (date) Author (entity - another content item) Here's a code example in a C# Razor template: <!-- The default variable for the current item is Content, we'll just use another name for this sample note that .Title is automatically provided, because the content-type has the property title. --> <h1>@Content.Title</h1> <div>@Content.Description</div> <div>Author: @Content.Author.FullName</div> So basically all properties of this book can be shown using [Object].[PropertyName] - for example Content.ReleaseDate . What Dynamic Entity really does - and how... Technically the dynamic entity object is like a read-helper for the more complex IEntity . So actually the dynamic entity object will keep a reference to the underlying read-only IEntity item on a property Entity , and whenever your code accesses a property, the dynamic entity will query it from the underlying Entity . The main things that the dynamic entity does for you, are Give you a nice, short syntax to access a property - so Content.FirstName instead of Object.Attributes[\"FirstName\"][\"en\"] which would be necessary using the more advanced IEntity object Ensure that the language used in retrieving a value is the current user language Give conveniant access to related information like the Presentation object Automatically handle some data-not-found errors Automatically do conversions, like convert related entities (like .Children ) into dynamic objects to make your code more consistant Properties of a Dynamic Entity Read the API docs in the IDynamicEntity . Additional properties that work (they are dynamic, so don't appear in the code) EntityId int EntityGuid Guid EntityType string - the type name like Person IsPublished bool - true/false if this item is currently published AnyProperty dynamic, but actually bool | string | decimal | datetime | List any normal property of the content-item can be accessd directly. It's correctly .net typed (string, etc.) Tip In 2sxc 10.27 any property that returns a List<DynamicEntity> now returns a DynamicEntityWithList . This means that if you expect the list to just return one item, you can directly access its properties like this: Content.Author.FirstName . To otherwise enumerate the items, we recommend AsList(Object) so AsList(Content.Tags) Working with unpublished/draft items TODO: write something about how-to-check if published/unpublished, navigating it, etc. - or link to such a page Discover More in the Razor Tutorials We have an rich series of Razor tutorials . You should really check them out üëç. Appendix The following properties/methods exist, but shouldn't be used. They are documented here so that you know that they are not meant for public use: Created - the created date Modified - the modified date Owner - the current owner of the item, usually the author Metadadata - currently use AsEntity(theObject).Metadata Permissions - permissions of the current item (if any are defined) History Introduced in 2sxc 01.00 Changed to use interface IDynamicEntity in 6.x Draft/Published introduced in 2sxc 7.x Presentation introduced in 2sxc 7.x Modified introduced in 2sxc 8.x Implemented .net equality comparer in 2sxc 9.42 Parents added in 2sxc 9.42 Get added in 2sxc 9.42 and added to interface IDynamicEntity in 10.07 Parents introduced in 2sxc 9.42, and added to interface IDynamicEntity in 10.07 IsDemoItem property added in 2sxc 10.06 Changed dynamic access to a property to return a DynamicEntity which is enumerable in 10.27"
  },
  "net-code/razor-blade/index.html": {
    "href": "net-code/razor-blade/index.html",
    "title": "RazorBlade Library | 2sxc and EAV 10",
    "keywords": "RazorBlade Library 2sxc includes RazorBlade - a very neat library of helper tools to get things done. It includes features such as: Text helpers to check if something has text, truncate/ellipsis text and more Tags helpers to strip HTML, make safe URLs and more Tag fluent API to create complex HTML using code HtmlPage helper to change the page title, add meta- and open-graph headers etc. Discover More in the RazorBlade Tutorials We have an rich series of RazorBlade tutorials . You should really check them out üëç. Example The following example is taken from the tutorials. It shows how to use @Text.Zip(...) to ensure that a string containing random white spaces is cleaned up. This is useful for counting visible characters or truncating text. @inherits ToSic.Sxc.Dnn.RazorComponent @using ToSic.Razor.Blade; @{ var samples = new string[] { \"This contains multi-spaces and \\t\\t\\t tabs\", \"This has \\n \\n line-breaks\" }; } <h2>Correct and incorrect Character Counts</h2> <table class=\"table table-hover\" width=\"100%\"> <!-- table header --> <tr> <th>Html output hides the problems</th> <th class=\"table-warning\">Whitespace output showing problems</th> <th>Length</th> <th class=\"table-success\">Output using Text.Zip(...)</th> <th>Zip Length</th> </tr> <!-- the real code --> @foreach(var s in samples) { <tr> <td>@s </td> <td class=\"table-warning\" style=\"white-space: pre-wrap;\">@s</td> <td>@s.Length </td> <td class=\"table-success\" style=\"white-space: pre-wrap;\">@Text.Zip(s)</td> <td>@Text.Zip(s).Length</td> </tr> } </table> Learn to Leverage RazorBlade Visit Razor-Blade.net Website Check out the RazorBlade Tutorials WolfExMachina tutorial for OpenGraph"
  },
  "api/dot-net/ToSic.Sxc.DataSources.IBlockDataSource.html": {
    "href": "api/dot-net/ToSic.Sxc.DataSources.IBlockDataSource.html",
    "title": "Interface IBlockDataSource | 2sxc and EAV 10",
    "keywords": "Interface IBlockDataSource This marks data sources which are meant for Blocks (Modules, Content-Block Instances). They have some internal functionality which isn't published as of now. Inherited Members IDataSource.Guid IDataSource.Out IDataSource.Item[String] IDataSource.List IDataSource.Configuration IDataSource.LogId IDataSource.Name IDataSource.CacheRelevantConfigurations IDataSource.CacheKey IZoneIdentity.ZoneId IAppIdentityLight.AppId ICacheKey.CachePartialKey ICacheKey.CacheFullKey ICacheExpiring.CacheChanged(Int64) ITimestamped.CacheTimestamp ICanPurgeListCache.PurgeList(Boolean) IHasLog.Log IDataTarget.In IDataTarget.Attach(IDataSource) IDataTarget.Attach(String, IDataSource) IDataTarget.Attach(String, IDataStream) Namespace : ToSic.Sxc.DataSources Assembly : ToSic.Sxc.dll Syntax [PublicApi_Stable_ForUseInYourCode] public interface IBlockDataSource : IDataSource, IAppIdentity, IZoneIdentity, IAppIdentityLight, ICacheInfo, ICacheKey, ICacheExpiring, ITimestamped, ICanPurgeListCache, IHasLog, IDataTarget"
  },
  "api/dot-net/ToSic.Sxc.DataSources.html": {
    "href": "api/dot-net/ToSic.Sxc.DataSources.html",
    "title": "Namespace ToSic.Sxc.DataSources | 2sxc and EAV 10",
    "keywords": "Namespace ToSic.Sxc.DataSources This contains new DataSources for EAV, which only 2sxc can provide. It extends the standard EAV Data-Sources . Classes Block The main data source for Blocks. Internally often uses CmsBlock to find what it should provide. It's based on the PassThrough data source, because it's just a coordination-wrapper. CmsBlock This data-source delivers the core data for a CMS Block. It will look up the configuration in the CMS (like the Module-Settings in DNN) to determine what data is needed for the block. Usually it will then find a reference to a ContentBlock, from which it determines what content-items are assigned. It could also find that the template specifies a query, in which case it would retrieve that. Was previously called ModuleDataSource Interfaces IBlockDataSource This marks data sources which are meant for Blocks (Modules, Content-Block Instances). They have some internal functionality which isn't published as of now."
  },
  "api/dot-net/ToSic.Sxc.LookUp.html": {
    "href": "api/dot-net/ToSic.Sxc.LookUp.html",
    "title": "Namespace ToSic.Sxc.LookUp | 2sxc and EAV 10",
    "keywords": "Namespace ToSic.Sxc.LookUp This extends the abilities of ToSic.Eav.LookUp with more look-up objects for things that are either web-specific (like request objects) or DynamicData specific. Classes LookUpForTokenTemplate LookUp for creating token based templates. In addition to retrieving values, it also resolves special tokens like repeater:index repeater:isfirst etc."
  },
  "api/dot-net/ToSic.Sxc.Search.ISearchItem.html": {
    "href": "api/dot-net/ToSic.Sxc.Search.ISearchItem.html",
    "title": "Interface ISearchItem | 2sxc and EAV 10",
    "keywords": "Interface ISearchItem Defines an item in the search system - which is prepared by Sxc, and can be customized as needed Namespace : ToSic.Sxc.Search Assembly : ToSic.Sxc.dll Syntax [PublicApi_Stable_ForUseInYourCode] public interface ISearchItem : ISearchInfo Properties | Improve this Doc View Source Body Contents of this item - will be indexed Declaration string Body { get; set; } Property Value Type Description System.String | Improve this Doc View Source CultureCode Culture code, for language sensitive searches Declaration string CultureCode { get; set; } Property Value Type Description System.String | Improve this Doc View Source Description Description in search results Declaration string Description { get; set; } Property Value Type Description System.String | Improve this Doc View Source Entity The underlying data in the search Declaration IEntity Entity { get; set; } Property Value Type Description IEntity | Improve this Doc View Source IsActive Determines if this item should appear in search or be ignored Declaration bool IsActive { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source ModifiedTimeUtc Timestamp in GMT / UTC Declaration DateTime ModifiedTimeUtc { get; set; } Property Value Type Description System.DateTime | Improve this Doc View Source QueryString Query String params to access this item Declaration string QueryString { get; set; } Property Value Type Description System.String | Improve this Doc View Source Title Title in search results Declaration string Title { get; set; } Property Value Type Description System.String | Improve this Doc View Source UniqueKey Declaration string UniqueKey { get; set; } Property Value Type Description System.String | Improve this Doc View Source Url Url to go to, when looking at the details of this search result Declaration string Url { get; set; } Property Value Type Description System.String"
  },
  "api/dot-net/ToSic.Eav.Security.Permission.html": {
    "href": "api/dot-net/ToSic.Eav.Security.Permission.html",
    "title": "Class Permission | 2sxc and EAV 10",
    "keywords": "Class Permission Helper object for constants related to the permissions-type Inheritance System.Object EntityBasedType Permission Implements IEntityBasedType IEntityWrapper Inherited Members EntityBasedType.Entity EntityBasedType.Title EntityBasedType.Id EntityBasedType.Guid EntityBasedType.Get<T>(String, T) Namespace : ToSic.Eav.Security Assembly : ToSic.Eav.Core.dll Syntax [InternalApi_DoNotUse_MayChangeWithoutNotice(\"this is just fyi\")] public class Permission : EntityBasedType, IEntityBasedType, IEntityWrapper Constructors | Improve this Doc View Source Permission(IEntity) Declaration public Permission(IEntity entity) Parameters Type Name Description IEntity entity Fields | Improve this Doc View Source FieldCondition Declaration public const string FieldCondition = \"Condition\" Field Value Type Description System.String | Improve this Doc View Source FieldGrant Declaration public const string FieldGrant = \"Grant\" Field Value Type Description System.String | Improve this Doc View Source FieldIdentity Declaration public const string FieldIdentity = \"Identity\" Field Value Type Description System.String | Improve this Doc View Source FieldOwner Declaration public const string FieldOwner = \"Owner\" Field Value Type Description System.String | Improve this Doc View Source TypeName Declaration public const string TypeName = \"PermissionConfiguration\" Field Value Type Description System.String Properties | Improve this Doc View Source Condition The condition in this permission - like \"this rule applies to admins\" The condition is usually a text-code by the hosting CMS Declaration public string Condition { get; } Property Value Type Description System.String | Improve this Doc View Source Grant The rights granted by this permission, usually a series of characters like r=read, u=update, etc. Declaration public string Grant { get; } Property Value Type Description System.String | Improve this Doc View Source Identity The identity this rule should apply to This is usually a user guid or group-id; exact specs vary based on the hosting CMS Declaration public string Identity { get; } Property Value Type Description System.String Implements IEntityBasedType IEntityWrapper"
  },
  "api/dot-net/ToSic.Eav.Security.html": {
    "href": "api/dot-net/ToSic.Eav.Security.html",
    "title": "Namespace ToSic.Eav.Security | 2sxc and EAV 10",
    "keywords": "Namespace ToSic.Eav.Security Security is a first-class citizen in the EAV. It allows you to set custom read/write/update/draft-only etc. permissions on Apps, Content-Types, Entities and even allow/restrict asset management. Classes Permission Helper object for constants related to the permissions-type Interfaces IHasPermissions Anything that uses IHasPermissions can have custom permissions. This interface provides access to the information stored in the custom permissions."
  },
  "api/dot-net/ToSic.Sxc.Data.DynamicEntityWithList.html": {
    "href": "api/dot-net/ToSic.Sxc.Data.DynamicEntityWithList.html",
    "title": "Class DynamicEntityWithList | 2sxc and EAV 10",
    "keywords": "Class DynamicEntityWithList This is a List of IDynamicEntity , which also behaves as an IDynamicEntity itself. So if it has any elements you can enumerate it (foreach). You can also do things like .EntityId or .SomeProperty just like a DynamicEntity. Inheritance System.Object System.Dynamic.DynamicObject DynamicEntity DynamicEntityWithList Implements System.Dynamic.IDynamicMetaObjectProvider IDynamicEntity IEntityWrapper ICompatibilityLevel System.IEquatable < IEntityWrapper > System.Collections.Generic.IReadOnlyList < IDynamicEntity > System.Collections.Generic.IReadOnlyCollection < IDynamicEntity > System.Collections.Generic.IList < IDynamicEntity > System.Collections.Generic.ICollection < IDynamicEntity > System.Collections.Generic.IEnumerable < IDynamicEntity > System.Collections.Generic.IList < System.Object > System.Collections.Generic.ICollection < System.Object > System.Collections.Generic.IEnumerable < System.Object > System.Collections.IEnumerable Inherited Members DynamicEntity.EntityTitle DynamicEntity.IsDemoItem DynamicEntity.AnyBooleanProperty DynamicEntity.AnyDateTimeProperty DynamicEntity.AnyChildrenProperty DynamicEntity.AnyJsonProperty DynamicEntity.AnyLinkOrFileProperty DynamicEntity.AnyNumberProperty DynamicEntity.AnyStringProperty DynamicEntity.EntityId DynamicEntity.EntityGuid DynamicEntity.EntityType DynamicEntity.Get(String) DynamicEntity.Get(String, String, String, Boolean) DynamicEntity.Presentation DynamicEntity.IsPublished DynamicEntity.GetDraft() DynamicEntity.GetPublished() DynamicEntity.Parents(String, String) DynamicEntity.Children(String, String) Namespace : ToSic.Sxc.Data Assembly : ToSic.Sxc.dll Syntax [PublicApi_Stable_ForUseInYourCode] public class DynamicEntityWithList : DynamicEntity, IDynamicMetaObjectProvider, IDynamicEntity, IDynamicEntity, IEntityWrapper, ICompatibilityLevel, IEquatable<IEntityWrapper>, IReadOnlyList<IDynamicEntity>, IReadOnlyCollection<IDynamicEntity>, IList<IDynamicEntity>, ICollection<IDynamicEntity>, IEnumerable<IDynamicEntity>, IList<object>, ICollection<object>, IEnumerable<object>, IEnumerable Remarks Added in 2sxc 10.27 Properties | Improve this Doc View Source Count Declaration public int Count { get; } Property Value Type Description System.Int32 | Improve this Doc View Source IsReadOnly Declaration public bool IsReadOnly { get; } Property Value Type Description System.Boolean | Improve this Doc View Source Item[Int32] Declaration public IDynamicEntity this[int index] { get; set; } Parameters Type Name Description System.Int32 index Property Value Type Description IDynamicEntity Methods | Improve this Doc View Source Add(Object) Declaration public void Add(object item) Parameters Type Name Description System.Object item | Improve this Doc View Source Add(IDynamicEntity) Declaration public void Add(IDynamicEntity item) Parameters Type Name Description IDynamicEntity item | Improve this Doc View Source Clear() Declaration public void Clear() | Improve this Doc View Source Contains(Object) Declaration public bool Contains(object item) Parameters Type Name Description System.Object item Returns Type Description System.Boolean | Improve this Doc View Source Contains(IDynamicEntity) Declaration public bool Contains(IDynamicEntity item) Parameters Type Name Description IDynamicEntity item Returns Type Description System.Boolean | Improve this Doc View Source CopyTo(Object[], Int32) Declaration public void CopyTo(object[] array, int arrayIndex) Parameters Type Name Description System.Object [] array System.Int32 arrayIndex | Improve this Doc View Source CopyTo(IDynamicEntity[], Int32) Declaration public void CopyTo(IDynamicEntity[] array, int arrayIndex) Parameters Type Name Description IDynamicEntity [] array System.Int32 arrayIndex | Improve this Doc View Source GetEnumerator() Declaration public IEnumerator<IDynamicEntity> GetEnumerator() Returns Type Description System.Collections.Generic.IEnumerator < IDynamicEntity > | Improve this Doc View Source IndexOf(Object) Declaration public int IndexOf(object item) Parameters Type Name Description System.Object item Returns Type Description System.Int32 | Improve this Doc View Source IndexOf(IDynamicEntity) Declaration public int IndexOf(IDynamicEntity item) Parameters Type Name Description IDynamicEntity item Returns Type Description System.Int32 | Improve this Doc View Source Insert(Int32, Object) Declaration public void Insert(int index, object item) Parameters Type Name Description System.Int32 index System.Object item | Improve this Doc View Source Insert(Int32, IDynamicEntity) Declaration public void Insert(int index, IDynamicEntity item) Parameters Type Name Description System.Int32 index IDynamicEntity item | Improve this Doc View Source Remove(Object) Declaration public bool Remove(object item) Parameters Type Name Description System.Object item Returns Type Description System.Boolean | Improve this Doc View Source Remove(IDynamicEntity) Declaration public bool Remove(IDynamicEntity item) Parameters Type Name Description IDynamicEntity item Returns Type Description System.Boolean | Improve this Doc View Source RemoveAt(Int32) Declaration public void RemoveAt(int index) Parameters Type Name Description System.Int32 index Explicit Interface Implementations | Improve this Doc View Source IEnumerable<Object>.GetEnumerator() Declaration IEnumerator<object> IEnumerable<object>.GetEnumerator() Returns Type Description System.Collections.Generic.IEnumerator < System.Object > | Improve this Doc View Source IList<Object>.Item[Int32] Declaration object IList<object>.this[int index] { get; set; } Parameters Type Name Description System.Int32 index Returns Type Description System.Object | Improve this Doc View Source IEnumerable.GetEnumerator() Declaration IEnumerator IEnumerable.GetEnumerator() Returns Type Description System.Collections.IEnumerator Implements System.Dynamic.IDynamicMetaObjectProvider IDynamicEntity IEntityWrapper ICompatibilityLevel System.IEquatable<T> System.Collections.Generic.IReadOnlyList<T> System.Collections.Generic.IReadOnlyCollection<T> System.Collections.Generic.IList<T> System.Collections.Generic.ICollection<T> System.Collections.Generic.IEnumerable<T> System.Collections.Generic.IList<T> System.Collections.Generic.ICollection<T> System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable"
  },
  "api/dot-net/ToSic.Sxc.Data.DynamicJacket.html": {
    "href": "api/dot-net/ToSic.Sxc.Data.DynamicJacket.html",
    "title": "Class DynamicJacket | 2sxc and EAV 10",
    "keywords": "Class DynamicJacket Case insensitive dynamic read-object for JSON. Used in various cases where you start with JSON and want to provide the contents to custom code without having to mess with JS/C# code style differences. You will usually do things like AsDynamic(jsonString).FirstName etc. Inheritance System.Object System.Dynamic.DynamicObject DynamicJacketBase < Newtonsoft.Json.Linq.JObject > DynamicJacket Implements System.Dynamic.IDynamicMetaObjectProvider System.Collections.Generic.IReadOnlyList < System.Object > System.Collections.Generic.IReadOnlyCollection < System.Object > System.Collections.Generic.IEnumerable < System.Object > System.Collections.IEnumerable IWrapper < Newtonsoft.Json.Linq.JObject > Inherited Members DynamicJacketBase<JObject>.UnwrappedContents DynamicJacketBase<JObject>.IEnumerable.GetEnumerator() DynamicJacketBase<JObject>.ToString() DynamicJacketBase<JObject>.Count Namespace : ToSic.Sxc.Data Assembly : ToSic.Sxc.dll Syntax [InternalApi_DoNotUse_MayChangeWithoutNotice(\"just use the objects from AsDynamic, don't use this directly\")] public class DynamicJacket : DynamicJacketBase<JObject>, IDynamicMetaObjectProvider, IReadOnlyList<object>, IReadOnlyCollection<object>, IEnumerable<object>, IEnumerable, IWrapper<JObject> Properties | Improve this Doc View Source IsList Declaration public override bool IsList { get; } Property Value Type Description System.Boolean Overrides ToSic.Sxc.Data.DynamicJacketBase<Newtonsoft.Json.Linq.JObject>.IsList | Improve this Doc View Source Item[Int32] Declaration public override object this[int index] { get; } Parameters Type Name Description System.Int32 index Property Value Type Description System.Object Overrides ToSic.Sxc.Data.DynamicJacketBase<Newtonsoft.Json.Linq.JObject>.Item[System.Int32] | Improve this Doc View Source Item[String] Access the properties of this object. Declaration public object this[string key] { get; } Parameters Type Name Description System.String key the key, case-insensitive Property Value Type Description System.Object A value (string, int etc.), DynamicJacket or DynamicJacketList Remarks Note that this accessor is case insensitive | Improve this Doc View Source Item[String, Boolean] Access the properties of this object. Declaration public object this[string key, bool caseSensitive] { get; } Parameters Type Name Description System.String key the key System.Boolean caseSensitive true if case-sensitive, false if not Property Value Type Description System.Object A value (string, int etc.), DynamicJacket or DynamicJacketList Methods | Improve this Doc View Source GetEnumerator() Enable enumeration. Will return the keys, not the values. Use the [key] accessor to get the values as DynamicJacket or DynamicJacketList Declaration public override IEnumerator<object> GetEnumerator() Returns Type Description System.Collections.Generic.IEnumerator < System.Object > the string names of the keys Overrides ToSic.Sxc.Data.DynamicJacketBase<Newtonsoft.Json.Linq.JObject>.GetEnumerator() | Improve this Doc View Source TryGetMember(GetMemberBinder, out Object) Performs a case-insensitive value look-up Declaration public override bool TryGetMember(GetMemberBinder binder, out object result) Parameters Type Name Description System.Dynamic.GetMemberBinder binder .net binder object System.Object result usually a DynamicJacket , DynamicJacketList or null Returns Type Description System.Boolean always returns true, to avoid errors Overrides ToSic.Sxc.Data.DynamicJacketBase<Newtonsoft.Json.Linq.JObject>.TryGetMember(System.Dynamic.GetMemberBinder, System.Object) Implements System.Dynamic.IDynamicMetaObjectProvider System.Collections.Generic.IReadOnlyList<T> System.Collections.Generic.IReadOnlyCollection<T> System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable IWrapper<T>"
  },
  "api/dot-net/ToSic.Eav.DataSources.RelationshipFilter.html": {
    "href": "api/dot-net/ToSic.Eav.DataSources.RelationshipFilter.html",
    "title": "Class RelationshipFilter | 2sxc and EAV 10",
    "keywords": "Class RelationshipFilter Filter Entities by Value in a Related Entity. For example: Find all Books (desired Entity), whose Authors (related Entity) have a Country (Attribute) with 'Switzerland' (Value). The RelationshipFilter DataSource is part of the Standard EAV Data Sources . It will return only the items which have a relationship to another item - like books having an author, or blog-posts with the tag grunt . How to use with the Visual Query When using the Visual Query you can just drag it into your query. This is what it usually looks like: Using Url Parameters You can of course also use URL parameters for both the value as well as the field: Using the Fallback In case none of the items match the reqiurement, then either no items are returned, or those in the fallback stream: You can find more fallback examples like chaining them in the ValueFilter DataSource Separators for Multiple Criterias (2sxc 9.9+) Until 2sxc 9.8 you could only check for 1 related item, so you could only say \"give me all items which have this one author\". In 2sxc 9.9 we are now able to specify multiple authors, allowing queries like \"give me all items which have all these authors\" or \"give me all items which have any of these authors\". This works using the separation-character, which is usually a comma , but could be something different (in case your items have commas in the texts you're comparing). If you don't specify a separator, none will be used and the whole Filter criteria is treated as one value. Here's where you set it: All Operators (2sxc 9.9+) Untill 2sxc 9.8, you could not specify an operator, and contains was the assumed operator. In 9.9 we added a lot more. To explain what each does, assume that our main stream contains items of BlogPost and we only want to keep the posts having certain Tags . Here's the list, each is explained more below: contains - will return all items (BlogPosts), having all the children (tags) specified containsany - will return all items (BlogPosts) having any of the children (tags) specified not-contains will return all items (BlogPosts) not-having-all of the children (tags). So it will also return those items, having some of the children. not-containsany will return all items (BlogPosts) having none of the children (tags) specified. any will return all items (BlogPosts) having any children at all (tags). So the filter is ignored. This is the same as count=0. not-any will return all items (BlogPosts) having no children (tags). first will return all items (BlogPosts) where the first child (tag) is one of the filter-options. This is for scenarios where you say the first tag is a primary-category or similar. not-first will return all items (BlogPosts) where the first children (tags) is not one of the filter values. count will return all items (BlogPosts) having a specific amount of children (tags) not-count will return all items (BlogPosts) not having a specific amount of children (tags) Filtering On Fields other than Title and ID (9.9+) In 2sxc 9.9 we added the ability to specify which field you want to compare (before it was always Id or Title). Here's an example: Filtering by Relationship-Count (9.9+) In 2sxc 9.9 we added the ability to filter by amount of relationships - so you could say \"give me all blog-posts with exactly 2 tags\": Note: you can also reverse this, so instead of count you can use not-count to get all the items that don't match this requirement. Filtering by Has-Any (9.9+) In 2sxc 9.9 we added the ability to filter by Limitations of the RelationshipFilter Note that as of now (2sxc 9.9) the RelationshipFilter: can only seek child-items Programming With The RelationshipFilter DataSource We recommend to use the Visual Query where possible, as it's easier to understand and is identical for C# and JavaScript. It's also better because it separates data-retrieval from visualization. Read also datasource / data stream List of all EAV Data Sources query / visual query Demo App and further links You should find some examples in this demo App Demo App with examples for most DataSources History Introduced in EAV 4.x, 2sxc ? Added AttributeOnRelationship (to compare other fields that title/id) in 2sxc 9.9 Added separator to enable multi-filter in 2sxc 9.9 Added various operators like count , first , containsany , any , not-* in 2sxc 9.9 API Documentation Inheritance System.Object HasLog DataSourceBase RelationshipFilter Implements IDataSource IAppIdentity IZoneIdentity IAppIdentityLight ICacheKey ICacheExpiring ITimestamped ICanPurgeListCache IHasLog IDataTarget Inherited Members DataSourceBase.Name DataSourceBase.CacheRelevantConfigurations DataSourceBase.CachePartialKey DataSourceBase.CacheFullKey DataSourceBase.CacheTimestamp DataSourceBase.CacheChanged(Int64) DataSourceBase.AppId DataSourceBase.ZoneId DataSourceBase.Guid DataSourceBase.In DataSourceBase.Out DataSourceBase.Item[String] DataSourceBase.List DataSourceBase.Configuration DataSourceBase.Attach(IDataSource) DataSourceBase.Attach(String, IDataSource) DataSourceBase.Attach(String, IDataStream) DataSourceBase.PurgeList(Boolean) HasLog.Log HasLog.InitLog(String, ILog, String) HasLog.InitLog(String, ILog, String, CodeRef) Namespace : ToSic.Eav.DataSources Assembly : ToSic.Eav.DataSources.dll Syntax [PublicApi_Stable_ForUseInYourCode] [VisualQuery(GlobalName = \"ToSic.Eav.DataSources.RelationshipFilter, ToSic.Eav.DataSources\", Type = DataSourceType.Lookup, In = new string[]{\"Default\", \"Fallback\"}, DynamicOut = false, ExpectsDataOfType = \"|Config ToSic.Eav.DataSources.RelationshipFilter\", HelpLink = \"https://r.2sxc.org/DsRelationshipFilter\")] public sealed class RelationshipFilter : DataSourceBase, IDataSource, IAppIdentity, IZoneIdentity, IAppIdentityLight, ICacheInfo, ICacheKey, ICacheExpiring, ITimestamped, ICanPurgeListCache, IHasLog, IDataTarget Remarks Technically many things could just identify the app they belong to, and let the system look up the zone. But this would be inefficient, so for optimization, many items identify themselves with both the app and zone Ids Properties | Improve this Doc View Source ChildOrParent Determines if the relationship we're looking into is a 'child'-relationship (default) or 'parent' relationship. Declaration public string ChildOrParent { get; set; } Property Value Type Description System.String | Improve this Doc View Source CompareAttribute The attribute we're looking into, in this case it would be 'Country' because we're checking what Authors are from Switzerland. Declaration public string CompareAttribute { get; set; } Property Value Type Description System.String | Improve this Doc View Source CompareMode Comparison mode. \"default\" and \"contains\" will check if such a relationship is available other modes like \"equals\" or \"exclude\" not implemented Declaration public string CompareMode { get; set; } Property Value Type Description System.String | Improve this Doc View Source Filter The filter-value that will be used - for example \"Switzerland\" when looking for authors from there Declaration public string Filter { get; set; } Property Value Type Description System.String | Improve this Doc View Source Relationship Relationship-attribute - in the example this would be 'Author' as we're checking values in related Author items. Declaration public string Relationship { get; set; } Property Value Type Description System.String | Improve this Doc View Source Separator Separator value where we have multiple values / IDs to compare. Default is 'ignore' = no separator Declaration public string Separator { get; set; } Property Value Type Description System.String Implements IDataSource IAppIdentity IZoneIdentity IAppIdentityLight ICacheKey ICacheExpiring ITimestamped ICanPurgeListCache IHasLog IDataTarget"
  },
  "api/dot-net/ToSic.Eav.Logging.CodeRef.html": {
    "href": "api/dot-net/ToSic.Eav.Logging.CodeRef.html",
    "title": "Class CodeRef | 2sxc and EAV 10",
    "keywords": "Class CodeRef Reference to code - containing the path to the file, the method name and the line in the code. Inheritance System.Object CodeRef Namespace : ToSic.Eav.Logging Assembly : ToSic.Eav.Core.dll Syntax [InternalApi_DoNotUse_MayChangeWithoutNotice(\"this is just fyi\")] public class CodeRef Constructors | Improve this Doc View Source CodeRef(Boolean, String, String, Int32) This constructor should be called without params, so that the compiler automatically injects all values. Declaration public CodeRef(bool autoPickup = true, string cPath = null, string cName = null, int cLine = 0) Parameters Type Name Description System.Boolean autoPickup Dummy parameter just to have a different signature. System.String cPath auto pre filled by the compiler - the path to the code file System.String cName auto pre filled by the compiler - the method name System.Int32 cLine auto pre filled by the compiler - the code line | Improve this Doc View Source CodeRef(String, String, Int32) Default constructor to set the values Declaration public CodeRef(string cPath, string cName, int cLine) Parameters Type Name Description System.String cPath System.String cName System.Int32 cLine Fields | Improve this Doc View Source Line Line of code where the code was running Declaration public int Line Field Value Type Description System.Int32 | Improve this Doc View Source Name Name of the method/property accessed Declaration public string Name Field Value Type Description System.String | Improve this Doc View Source Path Path to the code file Declaration public string Path Field Value Type Description System.String"
  },
  "api/dot-net/ToSic.Eav.Run.ICompatibilityLevel.html": {
    "href": "api/dot-net/ToSic.Eav.Run.ICompatibilityLevel.html",
    "title": "Interface ICompatibilityLevel | 2sxc and EAV 10",
    "keywords": "Interface ICompatibilityLevel Carries information about what compatibility level to use. Important for components that have an older and newer API. Namespace : ToSic.Eav.Run Assembly : ToSic.Eav.Core.dll Syntax [InternalApi_DoNotUse_MayChangeWithoutNotice(\"this is just fyi\")] public interface ICompatibilityLevel Properties | Improve this Doc View Source CompatibilityLevel The compatibility level to use. Declaration int CompatibilityLevel { get; } Property Value Type Description System.Int32"
  },
  "api/dot-net/ToSic.Eav.Run.IFingerprint.html": {
    "href": "api/dot-net/ToSic.Eav.Run.IFingerprint.html",
    "title": "Interface IFingerprint | 2sxc and EAV 10",
    "keywords": "Interface IFingerprint Defines all classes which can provide fingerprints - to delegate fingerprint-creation to the environment. Namespace : ToSic.Eav.Run Assembly : ToSic.Eav.Core.dll Syntax [InternalApi_DoNotUse_MayChangeWithoutNotice(\"this is just fyi\")] public interface IFingerprint Methods | Improve this Doc View Source GetSystemFingerprint() Declaration string GetSystemFingerprint() Returns Type Description System.String"
  },
  "api/dot-net/ToSic.Sxc.Engines.RazorEngine.html": {
    "href": "api/dot-net/ToSic.Sxc.Engines.RazorEngine.html",
    "title": "Class RazorEngine | 2sxc and EAV 10",
    "keywords": "Class RazorEngine The razor engine, which compiles / runs engine templates Inheritance System.Object HasLog EngineBase RazorEngine Implements IHasLog IEngine Inherited Members EngineBase.Helpers EngineBase.Init(IBlock, Purpose, ILog) EngineBase.Render() HasLog.Log HasLog.InitLog(String, ILog, String) HasLog.InitLog(String, ILog, String, CodeRef) Namespace : ToSic.Sxc.Engines Assembly : ToSic.SexyContent.Razor.dll Syntax [InternalApi_DoNotUse_MayChangeWithoutNotice(\"this is just fyi\")] [EngineDefinition(Name = \"Razor\")] public class RazorEngine : EngineBase, IHasLog, IEngine Constructors | Improve this Doc View Source RazorEngine(EngineBaseDependencies, Lazy<DnnDynamicCodeRoot>) Declaration public RazorEngine(EngineBaseDependencies helpers, Lazy<DnnDynamicCodeRoot> dnnDynCodeLazy) Parameters Type Name Description ToSic.Sxc.Engines.EngineBaseDependencies helpers System.Lazy < ToSic.Sxc.Dnn.Code.DnnDynamicCodeRoot > dnnDynCodeLazy Methods | Improve this Doc View Source CustomizeData() Mechanism which allows the view to change data it will show in a stream-based way. This helps to ensure that other parts like JSON-Streams or Search have the same information as the view itself. Declaration public override void CustomizeData() Overrides EngineBase.CustomizeData() | Improve this Doc View Source CustomizeSearch(Dictionary<String, List<ISearchItem>>, IModule, DateTime) Declaration public override void CustomizeSearch(Dictionary<string, List<ISearchItem>> searchInfos, IModule moduleInfo, DateTime beginDate) Parameters Type Name Description System.Collections.Generic.Dictionary < System.String , System.Collections.Generic.List < ISearchItem >> searchInfos ToSic.Sxc.Context.IModule moduleInfo System.DateTime beginDate Overrides EngineBase.CustomizeSearch(Dictionary<String, List<ISearchItem>>, IModule, DateTime) | Improve this Doc View Source RenderTemplate() Declaration protected override string RenderTemplate() Returns Type Description System.String Overrides ToSic.Sxc.Engines.EngineBase.RenderTemplate() Implements IHasLog IEngine"
  },
  "api/dot-net/ToSic.Sxc.Engines.TokenEngine.html": {
    "href": "api/dot-net/ToSic.Sxc.Engines.TokenEngine.html",
    "title": "Class TokenEngine | 2sxc and EAV 10",
    "keywords": "Class TokenEngine Rendering Engine for Token based templates (html using [Content:Title] kind of placeholders. Inheritance System.Object HasLog EngineBase TokenEngine Implements IHasLog IEngine Inherited Members EngineBase.Helpers EngineBase.Init(IBlock, Purpose, ILog) EngineBase.CustomizeData() EngineBase.CustomizeSearch(Dictionary<String, List<ISearchItem>>, IModule, DateTime) EngineBase.Render() HasLog.Log HasLog.InitLog(String, ILog, String) HasLog.InitLog(String, ILog, String, CodeRef) Namespace : ToSic.Sxc.Engines Assembly : ToSic.Sxc.dll Syntax [InternalApi_DoNotUse_MayChangeWithoutNotice(\"this is just fyi\")] [EngineDefinition(Name = \"Token\")] public class TokenEngine : EngineBase, IHasLog, IEngine Constructors | Improve this Doc View Source TokenEngine(EngineBaseDependencies, Lazy<DynamicCodeRoot>) Declaration public TokenEngine(EngineBaseDependencies helpers, Lazy<DynamicCodeRoot> dynCodeRootLazy) Parameters Type Name Description ToSic.Sxc.Engines.EngineBaseDependencies helpers System.Lazy < DynamicCodeRoot > dynCodeRootLazy Methods | Improve this Doc View Source RenderTemplate() Declaration protected override string RenderTemplate() Returns Type Description System.String Overrides ToSic.Sxc.Engines.EngineBase.RenderTemplate() Implements IHasLog IEngine"
  },
  "api/dot-net/ToSic.Eav.Apps.IAppIdentityLight.html": {
    "href": "api/dot-net/ToSic.Eav.Apps.IAppIdentityLight.html",
    "title": "Interface IAppIdentityLight | 2sxc and EAV 10",
    "keywords": "Interface IAppIdentityLight Marks things which belongs to an App - but it may only know about the app, not about the zone. For a full identity, see IAppIdentity . Namespace : ToSic.Eav.Apps Assembly : ToSic.Eav.Core.dll Syntax [InternalApi_DoNotUse_MayChangeWithoutNotice(\"this is just fyi\")] public interface IAppIdentityLight Properties | Improve this Doc View Source AppId The app id as used internally Declaration int AppId { get; } Property Value Type Description System.Int32 The App ID this thing belongs to"
  },
  "api/dot-net/ToSic.Eav.Caching.ICacheDependent.html": {
    "href": "api/dot-net/ToSic.Eav.Caching.ICacheDependent.html",
    "title": "Interface ICacheDependent | 2sxc and EAV 10",
    "keywords": "Interface ICacheDependent Marks something that is cache-dependent. Used for things that are themselves cached, but rely on an upstream cache. Inherited Members ITimestamped.CacheTimestamp Namespace : ToSic.Eav.Caching Assembly : ToSic.Eav.Core.dll Syntax [InternalApi_DoNotUse_MayChangeWithoutNotice(\"this is just fyi\")] public interface ICacheDependent : ITimestamped Methods | Improve this Doc View Source CacheChanged() Find out if the source it depends on has changed. Declaration bool CacheChanged() Returns Type Description System.Boolean True if the upstream cache returns a newer timestamp"
  },
  "api/dot-net/ToSic.Eav.DataSources.AppRoot.html": {
    "href": "api/dot-net/ToSic.Eav.DataSources.AppRoot.html",
    "title": "Class AppRoot | 2sxc and EAV 10",
    "keywords": "Class AppRoot The App Root is the entry point for all data. It takes it's data from a hidden AppState Cache. It's implemented as a DataSource so that other DataSources can easily attach to it. This is also the object returned as the root in any query. Inheritance System.Object HasLog DataSourceBase AppRoot Implements IDataTarget IAppRoot IDataSource IAppIdentity IZoneIdentity IAppIdentityLight ICacheKey ICacheExpiring ITimestamped ICanPurgeListCache IHasLog Inherited Members DataSourceBase.Name DataSourceBase.CacheRelevantConfigurations DataSourceBase.CachePartialKey DataSourceBase.AppId DataSourceBase.ZoneId DataSourceBase.Guid DataSourceBase.In DataSourceBase.Out DataSourceBase.Item[String] DataSourceBase.List DataSourceBase.Configuration DataSourceBase.Attach(IDataSource) DataSourceBase.Attach(String, IDataSource) DataSourceBase.Attach(String, IDataStream) DataSourceBase.PurgeList(Boolean) HasLog.Log HasLog.InitLog(String, ILog, String) HasLog.InitLog(String, ILog, String, CodeRef) Namespace : ToSic.Eav.DataSources Assembly : ToSic.Eav.DataSources.dll Syntax [InternalApi_DoNotUse_MayChangeWithoutNotice(\"this is just fyi\")] public class AppRoot : DataSourceBase, IDataTarget, IAppRoot, IDataSource, IAppIdentity, IZoneIdentity, IAppIdentityLight, ICacheInfo, ICacheKey, ICacheExpiring, ITimestamped, ICanPurgeListCache, IHasLog Properties | Improve this Doc View Source CacheFullKey Combination of the current key and all keys of upstream cached items, to create a long unique key for this context. Declaration public override string CacheFullKey { get; } Property Value Type Description System.String Full key containing own partial key and upstream keys. Overrides DataSourceBase.CacheFullKey | Improve this Doc View Source CacheTimestamp System time-stamp of when the data in this cached thing was initialized or updated. Depending on the implementation, this may go up-stream and return an up-stream value. Declaration public override long CacheTimestamp { get; } Property Value Type Description System.Int64 A timestamp as a long number Overrides DataSourceBase.CacheTimestamp Methods | Improve this Doc View Source CacheChanged(Int64) Detect if the cache has old data, by comparing it to a timestamp which may be newer. This is implemented in each object, because sometimes it compares its own timestamp, sometimes that of another underlying object. Declaration public override bool CacheChanged(long newCacheTimeStamp) Parameters Type Name Description System.Int64 newCacheTimeStamp New time stamp to compare with Returns Type Description System.Boolean True if the timestamps differ, false if it's the same Overrides DataSourceBase.CacheChanged(Int64) Implements IDataTarget IAppRoot IDataSource IAppIdentity IZoneIdentity IAppIdentityLight ICacheKey ICacheExpiring ITimestamped ICanPurgeListCache IHasLog"
  },
  "api/dot-net/ToSic.Eav.DataSources.IDataSource.html": {
    "href": "api/dot-net/ToSic.Eav.DataSources.IDataSource.html",
    "title": "Interface IDataSource | 2sxc and EAV 10",
    "keywords": "Interface IDataSource Public interface for an Eav DataSource. All DataSource objects are based on this. Inherited Members IZoneIdentity.ZoneId IAppIdentityLight.AppId ICacheKey.CachePartialKey ICacheKey.CacheFullKey ICacheExpiring.CacheChanged(Int64) ITimestamped.CacheTimestamp ICanPurgeListCache.PurgeList(Boolean) IHasLog.Log Namespace : ToSic.Eav.DataSources Assembly : ToSic.Eav.DataSources.dll Syntax [PublicApi_Stable_ForUseInYourCode] public interface IDataSource : IAppIdentity, IZoneIdentity, IAppIdentityLight, ICacheInfo, ICacheKey, ICacheExpiring, ITimestamped, ICanPurgeListCache, IHasLog Properties | Improve this Doc View Source CacheKey Declaration ICacheKeyManager CacheKey { get; } Property Value Type Description ICacheKeyManager | Improve this Doc View Source CacheRelevantConfigurations Some configuration of the data source is cache-relevant, others are not. This list contains the names of all configuration items which are cache relevant. It will be used when generating a unique ID for caching the data. Declaration List<string> CacheRelevantConfigurations { get; set; } Property Value Type Description System.Collections.Generic.List < System.String > | Improve this Doc View Source Configuration The configuration system of this data source. Keeps track of all values which the data source will need, and manages the LookUp engine which provides these values. Declaration IDataSourceConfiguration Configuration { get; } Property Value Type Description IDataSourceConfiguration | Improve this Doc View Source Guid Internal ID usually from persisted configurations IF the configuration was build from an pre-stored query. Declaration Guid Guid { get; set; } Property Value Type Description System.Guid The guid of this data source which identifies the configuration IEntity of the data source. | Improve this Doc View Source Item[String] Gets the Out-Stream with specified Name. Declaration IDataStream this[string outName] { get; } Parameters Type Name Description System.String outName Property Value Type Description IDataStream an IDataStream of the desired name Exceptions Type Condition System.NullReferenceException if the stream does not exist | Improve this Doc View Source List The items in the data-source - to be exact, the ones in the Default stream. Declaration IEnumerable<IEntity> List { get; } Property Value Type Description System.Collections.Generic.IEnumerable < IEntity > A list of IEntity items in the Default stream. | Improve this Doc View Source LogId The short name to be used in logging. It's set in the code, and then used to initialize the logger. Declaration string LogId { get; } Property Value Type Description System.String | Improve this Doc View Source Name Name of this DataSource - not usually relevant. Declaration string Name { get; } Property Value Type Description System.String Name of this source. | Improve this Doc View Source Out Gets the Dictionary of Out-Streams. This is the internal accessor, as usually you'll use this[\"name\"] instead. In rare cases you need the Out, for example to list the stream names in the data source. Declaration IDictionary<string, IDataStream> Out { get; } Property Value Type Description System.Collections.Generic.IDictionary < System.String , IDataStream > A dictionary of named IDataStream objects"
  },
  "api/dot-net/ToSic.Eav.Data.ContentTypeMetadata.html": {
    "href": "api/dot-net/ToSic.Eav.Data.ContentTypeMetadata.html",
    "title": "Class ContentTypeMetadata | 2sxc and EAV 10",
    "keywords": "Class ContentTypeMetadata Provides metadata for a content type. This can be very special, because ContentTypes can be shared (ghosts), in which case the metadata must be retrieved from another \"remote\" location (where the original is defined). Inheritance System.Object ToSic.Eav.Metadata.MetadataOf < System.String > ToSic.Eav.Metadata.RemoteMetadataOf < System.String > ContentTypeMetadata Implements IMetadataOf System.Collections.Generic.IEnumerable < IEntity > System.Collections.IEnumerable IHasPermissions ITimestamped Namespace : ToSic.Eav.Data Assembly : ToSic.Eav.Core.dll Syntax [InternalApi_DoNotUse_MayChangeWithoutNotice(\"this is just fyi\")] public class ContentTypeMetadata : RemoteMetadataOf<string>, IMetadataOf, IEnumerable<IEntity>, IEnumerable, IHasPermissions, IMetadataInternals, ITimestamped Constructors | Improve this Doc View Source ContentTypeMetadata(String, Int32, Int32) Used in cases where the metadata provider isn't known, but the IDs are known Declaration public ContentTypeMetadata(string typeId, int sourceZoneId, int sourceAppId) Parameters Type Name Description System.String typeId type id / static-name System.Int32 sourceZoneId the zone which has the metadata System.Int32 sourceAppId the app which has the metadata | Improve this Doc View Source ContentTypeMetadata(String, IHasMetadataSource) Used in cases where the metadata-provider is already known Declaration public ContentTypeMetadata(string typeId, IHasMetadataSource metaProvider) Parameters Type Name Description System.String typeId type id / static-name ToSic.Eav.Metadata.IHasMetadataSource metaProvider remote / deferred metadata provider Properties | Improve this Doc View Source Description Description IEntity metadata of this content-type. Declaration public IEntity Description { get; } Property Value Type Description IEntity Methods | Improve this Doc View Source LoadFromProvider() Load / initialize - needed when building the cache. Must usually be called a bit later, because the data is initialized from a cache, which in case of ghosts may be loaded a bit later. Declaration protected override void LoadFromProvider() Overrides ToSic.Eav.Metadata.MetadataOf<System.String>.LoadFromProvider() Implements IMetadataOf System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable IHasPermissions ITimestamped"
  },
  "api/dot-net/ToSic.Eav.Data.IEntityBasedType.html": {
    "href": "api/dot-net/ToSic.Eav.Data.IEntityBasedType.html",
    "title": "Interface IEntityBasedType | 2sxc and EAV 10",
    "keywords": "Interface IEntityBasedType Foundation for interfaces which will enhance EntityBasedType which gets its data from an Entity. This is used for more type safety - so you base your interfaces - like IPerson on this, otherwise you're IPerson would be missing the Title, Id, Guid Inherited Members IEntityWrapper.Entity Namespace : ToSic.Eav.Data Assembly : ToSic.Eav.Core.dll Syntax [PublicApi_Stable_ForUseInYourCode] public interface IEntityBasedType : IEntityWrapper Properties | Improve this Doc View Source Guid The entity guid, as quick, nice accessor. Declaration Guid Guid { get; } Property Value Type Description System.Guid The guid, or an empty-guid of no entity available | Improve this Doc View Source Id The entity id, as quick, nice accessor. Declaration int Id { get; } Property Value Type Description System.Int32 The id, or 0 if no entity available | Improve this Doc View Source Title The title as string. Declaration string Title { get; } Property Value Type Description System.String The title, or an empty string if not available or not string-able Remarks Can be overriden by other parts, if necessary."
  },
  "api/dot-net/ToSic.Eav.DataSources.AttributeRename.html": {
    "href": "api/dot-net/ToSic.Eav.DataSources.AttributeRename.html",
    "title": "Class AttributeRename | 2sxc and EAV 10",
    "keywords": "Class AttributeRename DataSource to only pass through configured AttributeNames - other attributes/properties are removed from the entities. TODO: update the standard list with attribute rename and the StreamSwitch one I made last week The AttributeRename DataSource is part of the Standard EAV Data Sources . It renames attributes from items so that the result has more appropriate field/property names. Optionally it will also remove all fields which have not been renamed, in case you only want the smaller, renamed items. How to use with the Visual Query When using the Visual Query you can just drag it into your query. Now you can configure what properties you want and not. In this screenshot you can see: The DataSource which we're configuring The field map renaming fields Toggle to keep attributes which were not renamed - default is True The optional type name which you can give the modified entities - default is blank, resulting in the original type being used Programming With The AttributeRename DataSource We recommend to use the Visual Query where possible, as it's easier to understand and is identical for C# and JavaScript. It's also better because it separates data-retrieval from visualization. Read also datasource / data stream List of all EAV Data Sources query / visual query Demo App and further links You should find some examples in this demo App Demo App with examples for most DataSources History Introduced in EAV / 2sxc 10.27 API Documentation Inheritance System.Object HasLog DataSourceBase AttributeRename Implements IDataSource IAppIdentity IZoneIdentity IAppIdentityLight ICacheKey ICacheExpiring ITimestamped ICanPurgeListCache IHasLog IDataTarget Inherited Members DataSourceBase.Name DataSourceBase.CacheRelevantConfigurations DataSourceBase.CachePartialKey DataSourceBase.CacheFullKey DataSourceBase.CacheTimestamp DataSourceBase.CacheChanged(Int64) DataSourceBase.AppId DataSourceBase.ZoneId DataSourceBase.Guid DataSourceBase.In DataSourceBase.Out DataSourceBase.Item[String] DataSourceBase.List DataSourceBase.Configuration DataSourceBase.Attach(IDataSource) DataSourceBase.Attach(String, IDataSource) DataSourceBase.Attach(String, IDataStream) DataSourceBase.PurgeList(Boolean) HasLog.Log HasLog.InitLog(String, ILog, String) HasLog.InitLog(String, ILog, String, CodeRef) Namespace : ToSic.Eav.DataSources Assembly : ToSic.Eav.DataSources.dll Syntax [PublicApi_Stable_ForUseInYourCode] [VisualQuery(GlobalName = \"ToSic.Eav.DataSources.AttributeRename, ToSic.Eav.DataSources\", Type = DataSourceType.Modify, DynamicOut = false, NiceName = \"Attribute-Rename\", UiHint = \"rename the Attribute / Property\", ExpectsDataOfType = \"c5918cb8-d35a-48c7-9380-a437edde66d2\", HelpLink = \"https://r.2sxc.org/DsAttributeRename\")] public class AttributeRename : DataSourceBase, IDataSource, IAppIdentity, IZoneIdentity, IAppIdentityLight, ICacheInfo, ICacheKey, ICacheExpiring, ITimestamped, ICanPurgeListCache, IHasLog, IDataTarget Remarks Uses Configuration \"AttributeNames\" Properties | Improve this Doc View Source AttributeMap A string containing one or more attribute maps. The syntax is \"NewName=OldName\" - one mapping per line Declaration public string AttributeMap { get; set; } Property Value Type Description System.String | Improve this Doc View Source KeepOtherAttributes True/false if attributes not renamed should be preserved. Declaration public bool KeepOtherAttributes { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source TypeName A string containing one or more attribute maps. The syntax is \"NewName=OldName\" - one mapping per line Declaration public string TypeName { get; set; } Property Value Type Description System.String Implements IDataSource IAppIdentity IZoneIdentity IAppIdentityLight ICacheKey ICacheExpiring ITimestamped ICanPurgeListCache IHasLog IDataTarget"
  },
  "api/dot-net/ToSic.Eav.DataSources.IDataSourceConfiguration.html": {
    "href": "api/dot-net/ToSic.Eav.DataSources.IDataSourceConfiguration.html",
    "title": "Interface IDataSourceConfiguration | 2sxc and EAV 10",
    "keywords": "Interface IDataSourceConfiguration This helps a data source get configured. It manages all the properties which the data source will want to look up, as well as the LookUp engine which will perform the token resolution Namespace : ToSic.Eav.DataSources Assembly : ToSic.Eav.DataSources.dll Syntax [PublicApi_Stable_ForUseInYourCode] public interface IDataSourceConfiguration Properties | Improve this Doc View Source IsParsed Tell us if the values have already been parsed or not. Ideal to check / avoid multiple calls to parse, which would just slow the system down. Declaration bool IsParsed { get; } Property Value Type Description System.Boolean | Improve this Doc View Source Item[String] Quick read / add for values which the DataSource will use. Declaration string this[string key] { get; set; } Parameters Type Name Description System.String key The property name/key, like SortOrder or similar Property Value Type Description System.String | Improve this Doc View Source LookUpEngine The internal look up engine which manages value sources and will resolve the tokens Declaration ILookUpEngine LookUpEngine { get; } Property Value Type Description ILookUpEngine | Improve this Doc View Source Values The values (and keys) used in the data source which owns this Configuration Declaration IDictionary<string, string> Values { get; } Property Value Type Description System.Collections.Generic.IDictionary < System.String , System.String > Methods | Improve this Doc View Source Parse() Parse the values and change them so placeholders in the values are now the resolved value. This can only be called once - then the placeholder are gone. In scenarios where multiple parses are required, use the Parse(IDictionary) overload. Declaration void Parse() | Improve this Doc View Source Parse(IDictionary<String, String>) This will parse a dictionary of values and return the result. It's used to resolve the values list without actually changing the values on the configuration object, in scenarios where multiple parses will be required. Declaration IDictionary<string, string> Parse(IDictionary<string, string> values) Parameters Type Name Description System.Collections.Generic.IDictionary < System.String , System.String > values Returns Type Description System.Collections.Generic.IDictionary < System.String , System.String >"
  },
  "api/dot-net/ToSic.Eav.DataSources.QueryRun.html": {
    "href": "api/dot-net/ToSic.Eav.DataSources.QueryRun.html",
    "title": "Class QueryRun | 2sxc and EAV 10",
    "keywords": "Class QueryRun Run another query and provide the resulting data. The settings will provide the params for the query. Inheritance System.Object HasLog DataSourceBase QueryRun Implements IDataSource IAppIdentity IZoneIdentity IAppIdentityLight ICacheKey ICacheExpiring ITimestamped ICanPurgeListCache IHasLog IDataTarget Inherited Members DataSourceBase.Name DataSourceBase.CacheRelevantConfigurations DataSourceBase.CachePartialKey DataSourceBase.CacheFullKey DataSourceBase.CacheTimestamp DataSourceBase.CacheChanged(Int64) DataSourceBase.AppId DataSourceBase.ZoneId DataSourceBase.Guid DataSourceBase.In DataSourceBase.Item[String] DataSourceBase.List DataSourceBase.Configuration DataSourceBase.Attach(IDataSource) DataSourceBase.Attach(String, IDataSource) DataSourceBase.Attach(String, IDataStream) DataSourceBase.PurgeList(Boolean) HasLog.Log HasLog.InitLog(String, ILog, String) HasLog.InitLog(String, ILog, String, CodeRef) Namespace : ToSic.Eav.DataSources Assembly : ToSic.Eav.DataSources.dll Syntax [PublicApi_Stable_ForUseInYourCode] [VisualQuery(GlobalName = \"ToSic.Eav.DataSources.QueryRun, ToSic.Eav.DataSources\", Type = DataSourceType.Source, NiceName = \"Query Run\", Icon = \"filter\", DynamicOut = true, ExpectsDataOfType = \"78d25ea6-66cc-44a2-b45d-77749cd9420a\", HelpLink = \"https://r.2sxc.org/QueryRun\")] public class QueryRun : DataSourceBase, IDataSource, IAppIdentity, IZoneIdentity, IAppIdentityLight, ICacheInfo, ICacheKey, ICacheExpiring, ITimestamped, ICanPurgeListCache, IHasLog, IDataTarget Properties | Improve this Doc View Source Out Gets the Dictionary of Out-Streams. This is the internal accessor, as usually you'll use this[\"name\"] instead. In rare cases you need the Out, for example to list the stream names in the data source. Declaration public override IDictionary<string, IDataStream> Out { get; } Property Value Type Description System.Collections.Generic.IDictionary < System.String , IDataStream > A dictionary of named IDataStream objects Overrides DataSourceBase.Out Implements IDataSource IAppIdentity IZoneIdentity IAppIdentityLight ICacheKey ICacheExpiring ITimestamped ICanPurgeListCache IHasLog IDataTarget"
  },
  "api/dot-net/ToSic.Eav.Factory.html": {
    "href": "api/dot-net/ToSic.Eav.Factory.html",
    "title": "Class Factory | 2sxc and EAV 10",
    "keywords": "Class Factory The Eav DI Factory, used to construct various objects through Dependency Injection. Inheritance System.Object Factory Namespace : ToSic.Eav Assembly : ToSic.Eav.Core.dll Syntax [PublicApi_Stable_ForUseInYourCode] public class Factory Fields | Improve this Doc View Source CountResolves Counter for internal statistics and debugging. Will only be incremented if Debug = true. Declaration public static int CountResolves Field Value Type Description System.Int32 | Improve this Doc View Source Debug Internal debugging, disabled by default. If set to true, resolves will be counted and logged. Declaration public static bool Debug Field Value Type Description System.Boolean | Improve this Doc View Source ResolvesList Declaration public static List<string> ResolvesList Field Value Type Description System.Collections.Generic.List < System.String > Methods | Improve this Doc View Source ActivateNetCoreDi(Factory.ServiceConfigurator) Declaration public static void ActivateNetCoreDi(Factory.ServiceConfigurator configure) Parameters Type Name Description ToSic.Eav.Factory.ServiceConfigurator configure | Improve this Doc View Source LogResolve(Type, Boolean) Declaration public static void LogResolve(Type t, bool generic) Parameters Type Name Description System.Type t System.Boolean generic | Improve this Doc View Source Resolve(Type) Dependency Injection resolver with a known type as a parameter. Declaration public static object Resolve(Type T) Parameters Type Name Description System.Type T The type or interface we need Returns Type Description System.Object | Improve this Doc View Source Resolve<T>() Dependency Injection resolver with a known type as a parameter. Declaration public static T Resolve<T>() Returns Type Description T Type Parameters Name Description T The type / interface we need. | Improve this Doc View Source StaticBuild<T>() This is a special internal resolver for static objects Should only be used with extreme caution, as downstream objects May need more scope-specific stuff, why may be missing Declaration public static T StaticBuild<T>() Returns Type Description T Type Parameters Name Description T | Improve this Doc View Source UseExistingServices(IServiceCollection) Declaration public static void UseExistingServices(IServiceCollection newServiceCollection) Parameters Type Name Description Microsoft.Extensions.DependencyInjection.IServiceCollection newServiceCollection"
  },
  "api/dot-net/ToSic.Eav.Metadata.Target.html": {
    "href": "api/dot-net/ToSic.Eav.Metadata.Target.html",
    "title": "Class Target | 2sxc and EAV 10",
    "keywords": "Class Target Reference to target. Usually used on IEntity to define what thing it provides additional metadata for. Basically it contains all the references necessary to identify what it belongs to. Inheritance System.Object Target Implements ITarget Namespace : ToSic.Eav.Metadata Assembly : ToSic.Eav.Core.dll Syntax [PublicApi_Stable_ForUseInYourCode] public class Target : ITarget Constructors | Improve this Doc View Source Target() Constructor for a new MetadataFor, which is empty. So it's not for anything, or the specs will be added afterwards. Declaration public Target() | Improve this Doc View Source Target(ITarget) Constructor to copy an existing MetadataFor object. Declaration public Target(ITarget originalToCopy) Parameters Type Name Description ITarget originalToCopy Properties | Improve this Doc View Source IsMetadata Will return true if a target-type was assigned Declaration [JsonIgnore] public bool IsMetadata { get; } Property Value Type Description System.Boolean | Improve this Doc View Source KeyGuid The KeyGuid is null or the guid of the key as stored in \"Key\" Declaration public Guid? KeyGuid { get; set; } Property Value Type Description System.Nullable < System.Guid > | Improve this Doc View Source KeyNumber The KeyNumber is null or the int of the key as stored in \"Key\" Declaration public int? KeyNumber { get; set; } Property Value Type Description System.Nullable < System.Int32 > | Improve this Doc View Source KeyString The KeyString is null or the string of the key as stored in \"Key\" Declaration public string KeyString { get; set; } Property Value Type Description System.String | Improve this Doc View Source TargetType This is the AssignmentObjectTypeId - usually 1 (none), 2 (attribute), 4 (entity) Declaration public int TargetType { get; set; } Property Value Type Description System.Int32 Implements ITarget"
  },
  "api/dot-net/ToSic.Eav.Metadata.html": {
    "href": "api/dot-net/ToSic.Eav.Metadata.html",
    "title": "Namespace ToSic.Eav.Metadata | 2sxc and EAV 10",
    "keywords": "Namespace ToSic.Eav.Metadata Everything related to the Metadata-system in EAV. This will be explained and documented more in future. Classes Target Reference to target. Usually used on IEntity to define what thing it provides additional metadata for. Basically it contains all the references necessary to identify what it belongs to. Interfaces IHasMetadata Anything with this interface has a property Metadata which can give us more information about that object. IMetadataOf A provider for metadata for something. So if an IEntity or an App has metadata, this will provide it. IMetadataSource For querying metadata from the data source. Mainly used in the Store, Cache-Systems and Apps. ITarget Reference to target. Usually used on IEntity to define what thing it provides additional metadata for. Basically it contains all the references necessary to identify what it belongs to. ITargetTypes This interface allows objects to lookup metadata-target id / name of the system."
  },
  "api/dot-net/ToSic.Sxc.Data.DynamicJacketList.html": {
    "href": "api/dot-net/ToSic.Sxc.Data.DynamicJacketList.html",
    "title": "Class DynamicJacketList | 2sxc and EAV 10",
    "keywords": "Class DynamicJacketList This is a DynamicJacket for JSON arrays. You can enumerate through it. Inheritance System.Object System.Dynamic.DynamicObject DynamicJacketBase < Newtonsoft.Json.Linq.JArray > DynamicJacketList Implements System.Dynamic.IDynamicMetaObjectProvider IWrapper < Newtonsoft.Json.Linq.JArray > System.Collections.Generic.IReadOnlyList < System.Object > System.Collections.Generic.IReadOnlyCollection < System.Object > System.Collections.Generic.IEnumerable < System.Object > System.Collections.IEnumerable Inherited Members DynamicJacketBase<JArray>.UnwrappedContents DynamicJacketBase<JArray>.IEnumerable.GetEnumerator() DynamicJacketBase<JArray>.ToString() DynamicJacketBase<JArray>.Count Namespace : ToSic.Sxc.Data Assembly : ToSic.Sxc.dll Syntax [InternalApi_DoNotUse_MayChangeWithoutNotice(\"just use the objects from AsDynamic, don't use this directly\")] public class DynamicJacketList : DynamicJacketBase<JArray>, IDynamicMetaObjectProvider, IWrapper<JArray>, IReadOnlyList<object>, IReadOnlyCollection<object>, IEnumerable<object>, IEnumerable Constructors | Improve this Doc View Source DynamicJacketList(JArray) Declaration public DynamicJacketList(JArray originalData) Parameters Type Name Description Newtonsoft.Json.Linq.JArray originalData Properties | Improve this Doc View Source IsList Declaration public override bool IsList { get; } Property Value Type Description System.Boolean Overrides ToSic.Sxc.Data.DynamicJacketBase<Newtonsoft.Json.Linq.JArray>.IsList | Improve this Doc View Source Item[Int32] Access the items in this object - but only if the underlying object is an array. Declaration public override object this[int index] { get; } Parameters Type Name Description System.Int32 index array index Property Value Type Description System.Object the item or an error if not found Overrides ToSic.Sxc.Data.DynamicJacketBase<Newtonsoft.Json.Linq.JArray>.Item[System.Int32] Methods | Improve this Doc View Source GetEnumerator() Declaration public override IEnumerator<object> GetEnumerator() Returns Type Description System.Collections.Generic.IEnumerator < System.Object > Overrides ToSic.Sxc.Data.DynamicJacketBase<Newtonsoft.Json.Linq.JArray>.GetEnumerator() Implements System.Dynamic.IDynamicMetaObjectProvider IWrapper<T> System.Collections.Generic.IReadOnlyList<T> System.Collections.Generic.IReadOnlyCollection<T> System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable"
  },
  "api/dot-net/ToSic.Eav.DataSources.StreamPick.html": {
    "href": "api/dot-net/ToSic.Eav.DataSources.StreamPick.html",
    "title": "Class StreamPick | 2sxc and EAV 10",
    "keywords": "Class StreamPick A DataSource that returns a stream by the provided name. Usually this will be configured through [Params:SomeName] The StreamPick DataSource is part of the Standard EAV Data Sources . It will pick a stream from In and pass that on to Out. How to use with the Visual Query When using the Visual Query you can just drag it into your query. This is what it usually looks like: In this screenshot you can see: The DataSource which we are configuring The stream called True The stream called False The configuration which will resolve a token to True or False and thereby pick the stream Programming With The StreamPick DataSource We recommend to use the Visual Query where possible, as it's easier to understand and is identical for C# and JavaScript. It's also better because it separates data-retrieval from visualization. Read also datasource / data stream List of all EAV Data Sources query / visual query Demo App and further links You should find some examples in this demo App Demo App with examples for most DataSources History Introduced in EAV / 2sxc 10.26 API Documentation Inheritance System.Object HasLog DataSourceBase StreamPick Implements IDataSource IAppIdentity IZoneIdentity IAppIdentityLight ICacheKey ICacheExpiring ITimestamped ICanPurgeListCache IHasLog IDataTarget Inherited Members DataSourceBase.Name DataSourceBase.CacheRelevantConfigurations DataSourceBase.CachePartialKey DataSourceBase.CacheFullKey DataSourceBase.CacheTimestamp DataSourceBase.CacheChanged(Int64) DataSourceBase.AppId DataSourceBase.ZoneId DataSourceBase.Guid DataSourceBase.In DataSourceBase.Out DataSourceBase.Item[String] DataSourceBase.List DataSourceBase.Configuration DataSourceBase.Attach(IDataSource) DataSourceBase.Attach(String, IDataSource) DataSourceBase.Attach(String, IDataStream) DataSourceBase.PurgeList(Boolean) HasLog.Log HasLog.InitLog(String, ILog, String) HasLog.InitLog(String, ILog, String, CodeRef) Namespace : ToSic.Eav.DataSources Assembly : ToSic.Eav.DataSources.dll Syntax [PublicApi_Stable_ForUseInYourCode] [VisualQuery(GlobalName = \"ToSic.Eav.DataSources.StreamPick, ToSic.Eav.DataSources\", Type = DataSourceType.Logic, ExpectsDataOfType = \"67b19864-df6d-400b-9f37-f41f1dd69c4a\", DynamicOut = false, HelpLink = \"https://r.2sxc.org/DsStreamPick\")] public sealed class StreamPick : DataSourceBase, IDataSource, IAppIdentity, IZoneIdentity, IAppIdentityLight, ICacheInfo, ICacheKey, ICacheExpiring, ITimestamped, ICanPurgeListCache, IHasLog, IDataTarget Remarks Introduced in 10.26 Properties | Improve this Doc View Source StreamName The stream name to lookup. Declaration public string StreamName { get; set; } Property Value Type Description System.String | Improve this Doc View Source UseParentStreams The attribute whose value will be sorted by. Declaration public bool UseParentStreams { get; set; } Property Value Type Description System.Boolean Remarks This feature has not been fully implemented yet. The idea would be that it could access an \"App\" or similar and dynamically access streams from there This may also have a security risk, so don't finish till this is clarified Implements IDataSource IAppIdentity IZoneIdentity IAppIdentityLight ICacheKey ICacheExpiring ITimestamped ICanPurgeListCache IHasLog IDataTarget"
  },
  "api/dot-net/ToSic.Eav.LookUp.ILookUp.html": {
    "href": "api/dot-net/ToSic.Eav.LookUp.ILookUp.html",
    "title": "Interface ILookUp | 2sxc and EAV 10",
    "keywords": "Interface ILookUp A key-value map which resolves keys like \"SortOrder\" to \"asc\". It's usually used to get pre-stored configuration or to get settings from the context. Read more about this in LookUp & LookUpEngine Namespace : ToSic.Eav.LookUp Assembly : ToSic.Eav.Core.dll Syntax [PublicApi_Stable_ForUseInYourCode] public interface ILookUp Properties | Improve this Doc View Source Name Gets the Name of this LookUp, e.g. QueryString or PipelineSettings Declaration string Name { get; } Property Value Type Description System.String The name which is used to identify this LookUp, like in a ILookUpEngine Methods | Improve this Doc View Source Get(String) Gets a value by Name/key, will simply return the string or an empty string, in rare cases a null-value. Declaration string Get(string key) Parameters Type Name Description System.String key Returns Type Description System.String The resolved value, or an empty string if not found. Note that it could also resolve to an empty string if found - use Has to check for that case. | Improve this Doc View Source Get(String, String) Gets a value by Name/key and tries to format it in a special way (like for dates) Declaration string Get(string key, string format) Parameters Type Name Description System.String key Name of the Property System.String format Format String Returns Type Description System.String"
  },
  "api/dot-net/ToSic.Eav.Apps.AppBase.html": {
    "href": "api/dot-net/ToSic.Eav.Apps.AppBase.html",
    "title": "Class AppBase | 2sxc and EAV 10",
    "keywords": "Class AppBase Base object for things that have a full app-identity (app-id and zone-id) and can also log their state. Inheritance System.Object HasLog AppBase App AppState Implements IHasLog IAppIdentity IZoneIdentity IAppIdentityLight Inherited Members HasLog.Log HasLog.InitLog(String, ILog, String) HasLog.InitLog(String, ILog, String, CodeRef) Namespace : ToSic.Eav.Apps Assembly : ToSic.Eav.Core.dll Syntax [InternalApi_DoNotUse_MayChangeWithoutNotice(\"this is just fyi\")] public abstract class AppBase : HasLog, IHasLog, IAppIdentity, IZoneIdentity, IAppIdentityLight Constructors | Improve this Doc View Source AppBase(String, CodeRef) DI Constructor - always run Init afterwards Declaration protected AppBase(string logName, CodeRef codeRef) Parameters Type Name Description System.String logName CodeRef codeRef Properties | Improve this Doc View Source AppId The app id as used internally Declaration public int AppId { get; } Property Value Type Description System.Int32 The App ID this thing belongs to | Improve this Doc View Source ZoneId ID of the zone (EAV Tenant) Declaration public int ZoneId { get; } Property Value Type Description System.Int32 The zone ID this thing belongs to Methods | Improve this Doc View Source Init(IAppIdentity, CodeRef, ILog) App identity containing zone/app combination Declaration protected AppBase Init(IAppIdentity app, CodeRef code, ILog parentLog) Parameters Type Name Description IAppIdentity app the identity CodeRef code code-ref, must be created first ILog parentLog the current log - could be null if necessary Returns Type Description AppBase Implements IHasLog IAppIdentity IZoneIdentity IAppIdentityLight"
  },
  "api/dot-net/ToSic.Eav.Caching.AppsCache.html": {
    "href": "api/dot-net/ToSic.Eav.Caching.AppsCache.html",
    "title": "Class AppsCache | 2sxc and EAV 10",
    "keywords": "Class AppsCache The default Apps Cache system running on a normal environment. Inheritance System.Object AppsCacheBase AppsCache Implements IAppsCache Inherited Members AppsCacheBase.Has(IAppIdentity) AppsCacheBase.Get(IAppIdentity) AppsCacheBase.Get(Int32) AppsCacheBase.Load(IAppIdentity, String) AppsCacheBase.Purge(IAppIdentity) AppsCacheBase.Update(IAppIdentity, IEnumerable<Int32>, ILog) AppsCacheBase.GetIdentity(Nullable<Int32>, Nullable<Int32>) Namespace : ToSic.Eav.Caching Assembly : ToSic.Eav.Core.dll Syntax [InternalApi_DoNotUse_MayChangeWithoutNotice(\"this is just fyi\")] public class AppsCache : AppsCacheBase, IAppsCache Properties | Improve this Doc View Source Zones The list of zones, which internally contains the list of apps. Declaration public override IReadOnlyDictionary<int, Zone> Zones { get; } Property Value Type Description System.Collections.Generic.IReadOnlyDictionary < System.Int32 , Zone > Overrides AppsCacheBase.Zones Methods | Improve this Doc View Source Get(String) Declaration protected override AppState Get(string key) Parameters Type Name Description System.String key Returns Type Description AppState Overrides ToSic.Eav.Caching.AppsCacheBase.Get(System.String) | Improve this Doc View Source Has(String) Declaration protected override bool Has(string cacheKey) Parameters Type Name Description System.String cacheKey Returns Type Description System.Boolean Overrides ToSic.Eav.Caching.AppsCacheBase.Has(System.String) | Improve this Doc View Source PurgeZones() Clean entire global cache, which includes the List of Zones and Apps as well as all the apps. Declaration public override void PurgeZones() Overrides AppsCacheBase.PurgeZones() | Improve this Doc View Source Remove(String) Declaration protected override void Remove(string key) Parameters Type Name Description System.String key Overrides ToSic.Eav.Caching.AppsCacheBase.Remove(System.String) | Improve this Doc View Source Set(String, AppState) Declaration protected override void Set(string key, AppState item) Parameters Type Name Description System.String key AppState item Overrides ToSic.Eav.Caching.AppsCacheBase.Set(System.String, ToSic.Eav.Apps.AppState) Implements IAppsCache"
  },
  "api/dot-net/ToSic.Eav.Data.EntityLight.html": {
    "href": "api/dot-net/ToSic.Eav.Data.EntityLight.html",
    "title": "Class EntityLight | 2sxc and EAV 10",
    "keywords": "Class EntityLight Represents a light Entity, which is a very basic entity without multi-language capabilities, versions or publishing. For the more powerful Entity, use IEntity . Inheritance System.Object EntityLight Entity Implements IEntityLight IAppIdentityLight Namespace : ToSic.Eav.Data Assembly : ToSic.Eav.Core.dll Syntax [InternalApi_DoNotUse_MayChangeWithoutNotice(\"this is just fyi, always use IEntity\")] public class EntityLight : IEntityLight, IAppIdentityLight Properties | Improve this Doc View Source AppId The app id as used internally Declaration public int AppId { get; } Property Value Type Description System.Int32 The App ID this thing belongs to | Improve this Doc View Source Created Gets the Created DateTime Declaration public DateTime Created { get; } Property Value Type Description System.DateTime A date-time object. | Improve this Doc View Source EntityGuid Gets the EntityGuid Declaration public Guid EntityGuid { get; } Property Value Type Description System.Guid The GUID of the Entity | Improve this Doc View Source EntityId Gets the EntityId Declaration public int EntityId { get; } Property Value Type Description System.Int32 The internal EntityId - usually for reference in the DB, but not quite always (like when this is a draft entity). | Improve this Doc View Source Item[String] Gets an Attribute by its StaticName Declaration public object this[string attributeName] { get; } Parameters Type Name Description System.String attributeName StaticName of the Attribute Property Value Type Description System.Object The attribute - probably an IAttribute<T> | Improve this Doc View Source MetadataFor Information which is relevant if this current entity is actually mapped to something else. If it is mapped, then it's describing another thing, which is identified in this MetadataFor. Declaration public ITarget MetadataFor { get; } Property Value Type Description ITarget A ITarget object describing the target. | Improve this Doc View Source Modified Gets the Last Modified DateTime Declaration public DateTime Modified { get; } Property Value Type Description System.DateTime A date-time object. | Improve this Doc View Source Owner Owner of this entity Declaration public string Owner { get; } Property Value Type Description System.String A string identifying the owner. Uses special encoding to work with various user-ID providers. | Improve this Doc View Source Relationships Relationship-helper object, important to navigate to children and parents Declaration [JsonIgnore] public IRelationshipManager Relationships { get; } Property Value Type Description IRelationshipManager The IRelationshipManager in charge of relationships for this Entity. | Improve this Doc View Source Title Gets the \"official\" Title-Attribute IAttribute<T> Declaration public object Title { get; } Property Value Type Description System.Object The title of this Entity. The field used is determined in the IContentType . If you need a string, use GetBestTitle() instead. | Improve this Doc View Source Type Gets the ContentType of this Entity Declaration public IContentType Type { get; } Property Value Type Description IContentType The content-type object. Methods | Improve this Doc View Source GetBestTitle() Best way to get the current entities title. The field used is determined in the IContentType . If you need the attribute-object, use the Title instead. Declaration public string GetBestTitle() Returns Type Description System.String The entity title as a string. | Improve this Doc View Source GetBestValue(String) Declaration public object GetBestValue(string attributeName) Parameters Type Name Description System.String attributeName Returns Type Description System.Object Implements IEntityLight IAppIdentityLight"
  },
  "api/dot-net/ToSic.Eav.Data.IValue-1.html": {
    "href": "api/dot-net/ToSic.Eav.Data.IValue-1.html",
    "title": "Interface IValue<T> | 2sxc and EAV 10",
    "keywords": "Interface IValue<T> Represents a Value with a specific type (string, decimal, etc.). Inherited Members IValue.Languages IValue.SerializableObject Namespace : ToSic.Eav.Data Assembly : ToSic.Eav.Core.dll Syntax [PublicApi_Stable_ForUseInYourCode] public interface IValue<out T> : IValue Type Parameters Name Description T Type of the actual Value Properties | Improve this Doc View Source TypedContents Typed contents of the value Declaration T TypedContents { get; } Property Value Type Description T"
  },
  "api/dot-net/ToSic.Eav.DataSources.PublishingFilter.html": {
    "href": "api/dot-net/ToSic.Eav.DataSources.PublishingFilter.html",
    "title": "Class PublishingFilter | 2sxc and EAV 10",
    "keywords": "Class PublishingFilter Filter entities to show Drafts or only Published Entities The PublishingFilter DataSource is part of the Standard EAV Data Sources . It will hide unpublished items for non-editors and provide these drafts if an editor is viewing the results. How to use with the Visual Query When using the Visual Query you can just drag it into your query. Here's a picture showing app data with or without publishing filter: Configuring the PublishingFilter DataSource The PublishingFilter has no configuration. How does it work? Since the published/unpublished is a very common query, internally the cache actually already provides different streams for this - and the PublishingFilter simply chooses the stream based on the current permissions. Programming With The PublishingDataSource We recommend to use the Visual Query where possible, as it's easier to understand and is identical for C# and JavaScript. It's also better because it separates data-retrieval from visualization. Read also datasource / data stream List of all EAV Data Sources query / visual query Demo App and further links You should find some examples in this demo App Demo App with examples for most DataSources History Introduced in EAV 3.x, in 2sxc ? API Documentation Inheritance System.Object HasLog DataSourceBase PublishingFilter Implements IDataSource IAppIdentity IZoneIdentity IAppIdentityLight ICacheKey ICacheExpiring ITimestamped ICanPurgeListCache IHasLog IDataTarget Inherited Members DataSourceBase.Name DataSourceBase.CacheRelevantConfigurations DataSourceBase.CachePartialKey DataSourceBase.CacheFullKey DataSourceBase.CacheTimestamp DataSourceBase.CacheChanged(Int64) DataSourceBase.AppId DataSourceBase.ZoneId DataSourceBase.Guid DataSourceBase.In DataSourceBase.Out DataSourceBase.Item[String] DataSourceBase.List DataSourceBase.Configuration DataSourceBase.Attach(IDataSource) DataSourceBase.Attach(String, IDataSource) DataSourceBase.Attach(String, IDataStream) DataSourceBase.PurgeList(Boolean) HasLog.Log HasLog.InitLog(String, ILog, String) HasLog.InitLog(String, ILog, String, CodeRef) Namespace : ToSic.Eav.DataSources Assembly : ToSic.Eav.DataSources.dll Syntax [PublicApi_Stable_ForUseInYourCode] [VisualQuery(GlobalName = \"ToSic.Eav.DataSources.PublishingFilter, ToSic.Eav.DataSources\", Type = DataSourceType.Security, Icon = \"eye\", DynamicOut = false, HelpLink = \"https://r.2sxc.org/DsPublishingFilter\")] public class PublishingFilter : DataSourceBase, IDataSource, IAppIdentity, IZoneIdentity, IAppIdentityLight, ICacheInfo, ICacheKey, ICacheExpiring, ITimestamped, ICanPurgeListCache, IHasLog, IDataTarget Remarks Technically many things could just identify the app they belong to, and let the system look up the zone. But this would be inefficient, so for optimization, many items identify themselves with both the app and zone Ids Properties | Improve this Doc View Source ShowDrafts Indicates whether to show drafts or only Published Entities. Declaration public bool ShowDrafts { get; set; } Property Value Type Description System.Boolean Implements IDataSource IAppIdentity IZoneIdentity IAppIdentityLight ICacheKey ICacheExpiring ITimestamped ICanPurgeListCache IHasLog IDataTarget"
  },
  "api/dot-net/ToSic.Eav.Apps.Assets.IFile.html": {
    "href": "api/dot-net/ToSic.Eav.Apps.Assets.IFile.html",
    "title": "Interface IFile | 2sxc and EAV 10",
    "keywords": "Interface IFile Describes a file asset as provided by the underlying environment (like DNN) Inherited Members IAsset.Created IAsset.Id IAsset.ParentId IAsset.Modified IAsset.Name IAsset.Path Namespace : ToSic.Eav.Apps.Assets Assembly : ToSic.Eav.Apps.dll Syntax [PublicApi_Stable_ForUseInYourCode] public interface IFile : IAsset Properties | Improve this Doc View Source Extension The file extension of the real underlying file. Declaration string Extension { get; set; } Property Value Type Description System.String The extension, like \"pdf\" or \"jpg\" | Improve this Doc View Source Folder The folder of the file Declaration string Folder { get; set; } Property Value Type Description System.String The folder name | Improve this Doc View Source FolderId The folder ID of the file, if the underlying environment uses int IDs Declaration int FolderId { get; } Property Value Type Description System.Int32 an int with the id used by the environment to track this item | Improve this Doc View Source FullName The full file name of the original file Declaration string FullName { get; set; } Property Value Type Description System.String The full file name with extension. | Improve this Doc View Source Size The file size of the file, IF the underlying environment provides this. Declaration int Size { get; set; } Property Value Type Description System.Int32 the size in bytes"
  },
  "api/dot-net/ToSic.Eav.Caching.html": {
    "href": "api/dot-net/ToSic.Eav.Caching.html",
    "title": "Namespace ToSic.Eav.Caching | 2sxc and EAV 10",
    "keywords": "Namespace ToSic.Eav.Caching Everything related to how the EAV caches stuff. Fairly internal tidbits, you probably won't need them. Classes AppsCache The default Apps Cache system running on a normal environment. AppsCacheBase The Apps Cache is the main cache for App States. This is just the abstract base implementation. The real cache must implement this and also provide platform specific adjustments so that the caching is in sync with the Environment. SynchronizedList<T> This is an IEnumerable which relies on an up-stream cache, which may change. That would require this IEnumerable to update what it delivers. Interfaces IAppsCache Marks the objects which are responsible for caching AppState in memory. This is a very powerful system ensuring performance and more. ICacheDependent Marks something that is cache-dependent. Used for things that are themselves cached, but rely on an upstream cache. ICacheExpiring Marks objects which are cache-based, and which may contain obsolete cached data. ICacheKey Marks objects which can identify what cache it's for. For example, when parameters change what data is cached, then the cache-key can contain this parameter, so that a different cache is used based on changing parameters. ICacheKeyManager Generates cache-keys for certain objects and combines them with CacheKeys of parent-objects which this object relies on. ITimestamped Provides a time stamp when something was created / updated for caching."
  },
  "api/dot-net/ToSic.Eav.Data.Entity.html": {
    "href": "api/dot-net/ToSic.Eav.Data.Entity.html",
    "title": "Class Entity | 2sxc and EAV 10",
    "keywords": "Class Entity A basic unit / item of data. Has many IAttribute<T> s which then contains IValue<T> s which are multi-language. Inheritance System.Object EntityLight Entity Implements IEntity IEntityLight IAppIdentityLight IHasPermissions Inherited Members EntityLight.AppId EntityLight.EntityId EntityLight.EntityGuid EntityLight.Type EntityLight.Created EntityLight.Modified EntityLight.Relationships EntityLight.MetadataFor EntityLight.Owner EntityLight.GetBestValue(String) Namespace : ToSic.Eav.Data Assembly : ToSic.Eav.Core.dll Syntax [InternalApi_DoNotUse_MayChangeWithoutNotice(\"this is just fyi, always use IEntity\")] public class Entity : EntityLight, IEntity, IEntity, IEntityLight, IAppIdentityLight, IPublish<IEntity>, IHasPermissions Properties | Improve this Doc View Source Attributes All the attributes of the current Entity. Declaration public Dictionary<string, IAttribute> Attributes { get; set; } Property Value Type Description System.Collections.Generic.Dictionary < System.String , IAttribute > | Improve this Doc View Source IsPublished Declaration public bool IsPublished { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source Item[String] Gets an Attribute using its StaticName Declaration public IAttribute this[string attributeName] { get; } Parameters Type Name Description System.String attributeName StaticName of the Attribute Property Value Type Description IAttribute A typed Attribute Object | Improve this Doc View Source Metadata Get the metadata for this item Declaration public IMetadataOf Metadata { get; } Property Value Type Description IMetadataOf A typed Metadata provider for this Entity Remarks The metadata is either already prepared, from the same app, or from a remote app | Improve this Doc View Source Permissions Permissions are also stored as entity items. Declaration public IEnumerable<Permission> Permissions { get; } Property Value Type Description System.Collections.Generic.IEnumerable < Permission > List of permission entities for an item Remarks Currently still a private API, because the type could change to be a typed permission object | Improve this Doc View Source Title Gets the \"official\" Title-Attribute IAttribute<T> Declaration public IAttribute Title { get; } Property Value Type Description IAttribute The title of this Entity. The field used is determined in the IContentType . If you need a string, use GetBestTitle() instead. | Improve this Doc View Source Version version of this entity in the repository Declaration public int Version { get; } Property Value Type Description System.Int32 The version number. Methods | Improve this Doc View Source Children(String, String) Get all the children IEntity items - optionally only of a specific field and/or type Declaration public List<IEntity> Children(string field = null, string type = null) Parameters Type Name Description System.String field Optional field name to access System.String type Optional type to filter for Returns Type Description System.Collections.Generic.List < IEntity > List of children, or empty list if not found | Improve this Doc View Source ExtendDimsWithDefault(String[]) Make sure the dimensions list also has a null-entry, for fallback to the first/only language (if any are provided and no match was made first) Declaration public string[] ExtendDimsWithDefault(string[] dimensions) Parameters Type Name Description System.String [] dimensions Returns Type Description System.String [] | Improve this Doc View Source GetBestTitle() Best way to get the current entities title. The field used is determined in the IContentType . If you need the attribute-object, use the Title instead. Declaration public string GetBestTitle() Returns Type Description System.String The entity title as a string. | Improve this Doc View Source GetBestTitle(String[]) Best way to get the current entities title Declaration public string GetBestTitle(string[] dimensions) Parameters Type Name Description System.String [] dimensions Array of dimensions/languages to use in the lookup Returns Type Description System.String The entity title as a string | Improve this Doc View Source GetBestValue(String, String[]) Retrieves the best possible value for an attribute or virtual attribute (like EntityTitle) Automatically resolves the language-variations as well based on the list of preferred languages Declaration public object GetBestValue(string attributeName, string[] languages) Parameters Type Name Description System.String attributeName Name of the attribute or virtual attribute System.String [] languages list of languages to search in Returns Type Description System.Object An object OR a null - for example when retrieving the title and no title exists the object is string, int or even a EntityRelationship | Improve this Doc View Source GetBestValue<TVal>(String, String[]) Retrieves the best possible value for an attribute or virtual attribute (like EntityTitle) Automatically resolves the language-variations as well based on the list of preferred languages. Will cast/convert to the expected type, or return null / default value for that type if not possible. Declaration public TVal GetBestValue<TVal>(string name, string[] languages) Parameters Type Name Description System.String name System.String [] languages list of languages to search in Returns Type Description TVal An object OR a null - for example when retrieving the title and no title exists the object is string, int or even a EntityRelationship Type Parameters Name Description TVal | Improve this Doc View Source GetDraft() Declaration public IEntity GetDraft() Returns Type Description IEntity | Improve this Doc View Source GetInternalPropertyByName(String) Declaration protected override object GetInternalPropertyByName(string attributeNameLowerInvariant) Parameters Type Name Description System.String attributeNameLowerInvariant Returns Type Description System.Object Overrides ToSic.Eav.Data.EntityLight.GetInternalPropertyByName(System.String) | Improve this Doc View Source GetPublished() Declaration public IEntity GetPublished() Returns Type Description IEntity | Improve this Doc View Source Parents(String, String) Get all the parent IEntity items - optionally only of a specific type and/or referenced in a specific field Declaration public List<IEntity> Parents(string type = null, string field = null) Parameters Type Name Description System.String type The type name to filter for System.String field The field name where a parent references this item Returns Type Description System.Collections.Generic.List < IEntity > List of children, or empty list if not found | Improve this Doc View Source Value(String) Get the value of this field as an object. This overload without languages will always return the first value it finds, so if the data is multi-lingual, it's not reliable. This is preferred for internal work for configuration objects and similar which are not multi-language. Declaration public object Value(string field) Parameters Type Name Description System.String field Returns Type Description System.Object The value or null if not found Remarks In addition to the fields this Entity has (like FirstName, etc.) you can also use known terms like EntityId, Modified etc. | Improve this Doc View Source Value<T>(String) Get the value of this field in a type-safe way. This overload without languages will always return the first value it finds, so if the data is multi-lingual, it's not reliable. This is preferred for internal work for configuration objects and similar which are not multi-language. Declaration public T Value<T>(string field) Parameters Type Name Description System.String field Returns Type Description T The typed value or the (default) value - so a null for strings, false for boolean etc. Type Parameters Name Description T The type, usually string, int, bool, etc. Remarks In addition to the fields this Entity has (like FirstName, etc.) you can also use known terms like EntityId, Modified etc. Implements IEntity IEntityLight IAppIdentityLight IHasPermissions"
  },
  "api/dot-net/ToSic.Eav.Data.ILanguage.html": {
    "href": "api/dot-net/ToSic.Eav.Data.ILanguage.html",
    "title": "Interface ILanguage | 2sxc and EAV 10",
    "keywords": "Interface ILanguage Represents a Language Dimension. It's identical to an IDimension for now. Inherited Members IDimension.DimensionId IDimension.Key IDimension.ReadOnly Namespace : ToSic.Eav.Data Assembly : ToSic.Eav.Core.dll Syntax [InternalApi_DoNotUse_MayChangeWithoutNotice(\"this is just fyi\")] public interface ILanguage : IDimension"
  },
  "api/dot-net/ToSic.Eav.DataSources.Caching.IListCache.html": {
    "href": "api/dot-net/ToSic.Eav.DataSources.Caching.IListCache.html",
    "title": "Interface IListCache | 2sxc and EAV 10",
    "keywords": "Interface IListCache Marks objects that can cache lists based on certain rules - including retention time and if up-stream changes should refresh the cache. Namespace : ToSic.Eav.DataSources.Caching Assembly : ToSic.Eav.DataSources.dll Syntax [InternalApi_DoNotUse_MayChangeWithoutNotice(\"this is just fyi\")] public interface IListCache Properties | Improve this Doc View Source DefaultDuration The time a list stays in the cache by default - default is 3600 = 1 hour. Is used in all Set commands where the default duration is needed. Declaration int DefaultDuration { get; } Property Value Type Description System.Int32 Methods | Improve this Doc View Source Get(String) Get a list from the cache Declaration ListCacheItem Get(string key) Parameters Type Name Description System.String key the identifier in the cache Returns Type Description ListCacheItem the cached list | Improve this Doc View Source Get(IDataStream) Get a list from the cache using a configured dataStream. The stream won't be queried, it serves as an identifier for the cache item. Declaration ListCacheItem Get(IDataStream dataStream) Parameters Type Name Description IDataStream dataStream the data stream, which can provide it's cache-key Returns Type Description ListCacheItem the cached list | Improve this Doc View Source GetOrBuild(IDataStream, Func<IImmutableList<IEntity>>, Int32) Get cached item if available and valid, or rebuild cache using a mutual lock Declaration ListCacheItem GetOrBuild(IDataStream stream, Func<IImmutableList<IEntity>> builderFunc, int durationInSeconds = 0) Parameters Type Name Description IDataStream stream The data stream on a data-source object System.Func < System.Collections.Immutable.IImmutableList < IEntity >> builderFunc a function which is only called if building is required System.Int32 durationInSeconds The cache validity duration in seconds. If 0 or omitted, default value will be used. Returns Type Description ListCacheItem The ListCacheItem - either from cache, or just created | Improve this Doc View Source Has(String) Check if it has this in the cache Declaration bool Has(string key) Parameters Type Name Description System.String key the identifier in the cache Returns Type Description System.Boolean true if found | Improve this Doc View Source Has(IDataStream) Check if it has this in the cache Declaration bool Has(IDataStream dataStream) Parameters Type Name Description IDataStream dataStream the data stream, which can provide it's cache-key Returns Type Description System.Boolean true if found | Improve this Doc View Source Remove(String) Remove an item from the list-cache using the string-key Declaration void Remove(string key) Parameters Type Name Description System.String key the identifier in the cache | Improve this Doc View Source Remove(IDataStream) Remove an item from the list cache using a data-stream key Declaration void Remove(IDataStream dataStream) Parameters Type Name Description IDataStream dataStream the data stream, which can provide it's cache-key | Improve this Doc View Source Set(String, IImmutableList<IEntity>, Int64, Int32, Boolean) Add an item to the list-cache Declaration void Set(string key, IImmutableList<IEntity> list, long sourceTimestamp, int durationInSeconds = 0, bool slidingExpiration = true) Parameters Type Name Description System.String key cache key System.Collections.Immutable.IImmutableList < IEntity > list items to put into the cache for this cache key System.Int64 sourceTimestamp System.Int32 durationInSeconds The cache validity duration in seconds. If 0 or omitted, default value will be used. System.Boolean slidingExpiration | Improve this Doc View Source Set(IDataStream, Int32, Boolean) Add an item to the list-cache Declaration void Set(IDataStream dataStream, int durationInSeconds = 0, bool slidingExpiration = true) Parameters Type Name Description IDataStream dataStream the data stream, which can provide it's cache-key System.Int32 durationInSeconds The cache validity duration in seconds. If 0 or omitted, default value will be used. System.Boolean slidingExpiration"
  },
  "api/dot-net/ToSic.Eav.DataSources.OwnerFilter.html": {
    "href": "api/dot-net/ToSic.Eav.DataSources.OwnerFilter.html",
    "title": "Class OwnerFilter | 2sxc and EAV 10",
    "keywords": "Class OwnerFilter Filter entities to show Drafts or only Published Entities The OwnerFilter DataSource is part of the Standard EAV Data Sources . It will only let items pass through, which a specific user (often the current one) has created initially. You will typically use the OwnerFilter in scenarios where users create their own data, and should only see/edit items which they own (usually in combination with security settings, which only allow the owner to modify their own items). How to use with the Visual Query When using the Visual Query you can just drag it into your query. You must then edit the settings once - and usually you will use the recommended prefilled-form. But you can also do something different. This is what it usually looks like: The above example shows: a content-type filter limiting the items to type Company an owner-filter which receives 5 items, but only lets 3 pass, because the Test Settings have a demo-value of the user who only created 3 of the 5 items. Programming With The OwnerFilter DataSource We recommend to use the Visual Query where possible, as it's easier to understand and is identical for C# and JavaScript. It's also better because it separates data-retrieval from visualization. Read also datasource / data stream List of all EAV Data Sources query / visual query Demo App and further links You should find some examples in this demo App Demo App with examples for most DataSources History Introduced in EAV 3.x, 2sxc ? API Documentation Inheritance System.Object HasLog DataSourceBase OwnerFilter Implements IDataSource IAppIdentity IZoneIdentity IAppIdentityLight ICacheKey ICacheExpiring ITimestamped ICanPurgeListCache IHasLog IDataTarget Inherited Members DataSourceBase.Name DataSourceBase.CacheRelevantConfigurations DataSourceBase.CachePartialKey DataSourceBase.CacheFullKey DataSourceBase.CacheTimestamp DataSourceBase.CacheChanged(Int64) DataSourceBase.AppId DataSourceBase.ZoneId DataSourceBase.Guid DataSourceBase.In DataSourceBase.Out DataSourceBase.Item[String] DataSourceBase.List DataSourceBase.Configuration DataSourceBase.Attach(IDataSource) DataSourceBase.Attach(String, IDataSource) DataSourceBase.Attach(String, IDataStream) DataSourceBase.PurgeList(Boolean) HasLog.Log HasLog.InitLog(String, ILog, String) HasLog.InitLog(String, ILog, String, CodeRef) Namespace : ToSic.Eav.DataSources Assembly : ToSic.Eav.DataSources.dll Syntax [PublicApi_Stable_ForUseInYourCode] [VisualQuery(GlobalName = \"ToSic.Eav.DataSources.OwnerFilter, ToSic.Eav.DataSources\", Type = DataSourceType.Security, DynamicOut = false, ExpectsDataOfType = \"|Config ToSic.Eav.DataSources.OwnerFilter\", HelpLink = \"https://r.2sxc.org/DsOwnerFilter\")] public class OwnerFilter : DataSourceBase, IDataSource, IAppIdentity, IZoneIdentity, IAppIdentityLight, ICacheInfo, ICacheKey, ICacheExpiring, ITimestamped, ICanPurgeListCache, IHasLog, IDataTarget Remarks Technically many things could just identify the app they belong to, and let the system look up the zone. But this would be inefficient, so for optimization, many items identify themselves with both the app and zone Ids Properties | Improve this Doc View Source Identity The identity of the user to filter by. Uses the Identity-token convention like dnn:1 is the user #1 in the DNN DB Declaration public string Identity { get; set; } Property Value Type Description System.String Implements IDataSource IAppIdentity IZoneIdentity IAppIdentityLight ICacheKey ICacheExpiring ITimestamped ICanPurgeListCache IHasLog IDataTarget"
  },
  "api/dot-net/ToSic.Eav.DataSources.StreamFallback.html": {
    "href": "api/dot-net/ToSic.Eav.DataSources.StreamFallback.html",
    "title": "Class StreamFallback | 2sxc and EAV 10",
    "keywords": "Class StreamFallback A DataSource that returns the first stream which has content The StreamFallback DataSource is part of the Standard EAV Data Sources . It will pass on the first stream which has results. The order of evaluation is based on the names of the streams as they enter the StreamFallback. How to use with the Visual Query When using the Visual Query you can just drag it into your query. This is what it usually looks like: The above example shows a query from the blog app : a stream-fallback with 4 in-streams the first stream which would filter by tag, if the URL had a tag in it - as the test-data has no tag, this stream delivers no results the second stream filters by author - as the url would have an author (specified in the test-values), it does return items The StreamFallback therefor passes on the items provided by the author-filter. Note that while using the visual query, all other streams are also processed to show what's happening. At runtime it will stop processing other streams once it's found a first match. Programming With The StreamFallback DataSource We recommend to use the Visual Query where possible, as it's easier to understand and is identical for C# and JavaScript. It's also better because it separates data-retrieval from visualization. Read also datasource / data stream List of all EAV Data Sources query / visual query Demo App and further links You should find some examples in this demo App Demo App with examples for most DataSources History Introduced in EAV 3.x, 2sxc ? API Documentation Inheritance System.Object HasLog DataSourceBase StreamFallback Implements IDataSource IAppIdentity IZoneIdentity IAppIdentityLight ICacheKey ICacheExpiring ITimestamped ICanPurgeListCache IHasLog IDataTarget Inherited Members DataSourceBase.Name DataSourceBase.CacheRelevantConfigurations DataSourceBase.CachePartialKey DataSourceBase.CacheFullKey DataSourceBase.CacheTimestamp DataSourceBase.CacheChanged(Int64) DataSourceBase.AppId DataSourceBase.ZoneId DataSourceBase.Guid DataSourceBase.In DataSourceBase.Out DataSourceBase.Item[String] DataSourceBase.List DataSourceBase.Configuration DataSourceBase.Attach(IDataSource) DataSourceBase.Attach(String, IDataSource) DataSourceBase.Attach(String, IDataStream) DataSourceBase.PurgeList(Boolean) HasLog.Log HasLog.InitLog(String, ILog, String) HasLog.InitLog(String, ILog, String, CodeRef) Namespace : ToSic.Eav.DataSources Assembly : ToSic.Eav.DataSources.dll Syntax [PublicApi_Stable_ForUseInYourCode] [VisualQuery(GlobalName = \"ToSic.Eav.DataSources.StreamFallback, ToSic.Eav.DataSources\", Type = DataSourceType.Logic, DynamicOut = false, HelpLink = \"https://r.2sxc.org/DsStreamFallback\")] public sealed class StreamFallback : DataSourceBase, IDataSource, IAppIdentity, IZoneIdentity, IAppIdentityLight, ICacheInfo, ICacheKey, ICacheExpiring, ITimestamped, ICanPurgeListCache, IHasLog, IDataTarget Remarks Technically many things could just identify the app they belong to, and let the system look up the zone. But this would be inefficient, so for optimization, many items identify themselves with both the app and zone Ids Implements IDataSource IAppIdentity IZoneIdentity IAppIdentityLight ICacheKey ICacheExpiring ITimestamped ICanPurgeListCache IHasLog IDataTarget"
  },
  "api/dot-net/ToSic.Eav.Logging.ILog.html": {
    "href": "api/dot-net/ToSic.Eav.Logging.ILog.html",
    "title": "Interface ILog | 2sxc and EAV 10",
    "keywords": "Interface ILog A logger with special capabilities. It can take log messages, and chain itself to other loggers. If chained, it can broadcast the messages to the other loggers from that time forward. Basically this is the backbone of Insights. Namespace : ToSic.Eav.Logging Assembly : ToSic.Eav.Core.dll Syntax [InternalApi_DoNotUse_MayChangeWithoutNotice(\"this is just fyi\")] public interface ILog Properties | Improve this Doc View Source Depth Declaration int Depth { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source Id A short random ID to differentiate this logger from others. Declaration string Id { get; } Property Value Type Description System.String | Improve this Doc View Source Identifier A unique identifier containing a special XXX.yyyyy[id] name Declaration string Identifier { get; } Property Value Type Description System.String | Improve this Doc View Source Preserve Determines if this log should be preserved in the short term. Like for live-analytics / live-insights. Default is true, but in certain cases it will default to false. Declaration bool Preserve { get; set; } Property Value Type Description System.Boolean Methods | Improve this Doc View Source Add(Func<String>, String, String, Int32) Add a message by calling a function. This will be inside a try/catch, to prevent crashes because of looping on nulls etc. Declaration void Add(Func<string> messageMaker, string cPath = null, string cName = null, int cLine = 0) Parameters Type Name Description System.Func < System.String > messageMaker System.String cPath auto pre filled by the compiler - the path to the code file System.String cName auto pre filled by the compiler - the method name System.Int32 cLine auto pre filled by the compiler - the code line | Improve this Doc View Source Add(String, String, String, Int32) Add a message log entry Declaration string Add(string message, string cPath = null, string cName = null, int cLine = 0) Parameters Type Name Description System.String message Message to log System.String cPath auto pre filled by the compiler - the path to the code file System.String cName auto pre filled by the compiler - the method name System.Int32 cLine auto pre filled by the compiler - the code line Returns Type Description System.String The same warning text which was added | Improve this Doc View Source Call(Func<String>, Func<String>, Boolean, String, String, Int32) Add a log entry for a class constructor, returning a method to call when done Declaration Action<string> Call(Func<string> parameters, Func<string> message = null, bool useTimer = false, string cPath = null, string cName = null, int cLine = 0) Parameters Type Name Description System.Func < System.String > parameters what was passed to the call in the brackets System.Func < System.String > message the message to log System.Boolean useTimer enable a timer from call/close System.String cPath auto pre filled by the compiler - the path to the code file System.String cName auto pre filled by the compiler - the method name System.Int32 cLine auto pre filled by the compiler - the code line Returns Type Description System.Action < System.String > | Improve this Doc View Source Call(String, String, Boolean, String, String, Int32) Add a log entry for method call, returning a method to call when done Declaration Action<string> Call(string parameters = null, string message = null, bool useTimer = false, string cPath = null, string cName = null, int cLine = 0) Parameters Type Name Description System.String parameters what was passed to the call in the brackets System.String message the message to log System.Boolean useTimer enable a timer from call/close System.String cPath auto pre filled by the compiler - the path to the code file System.String cName auto pre filled by the compiler - the method name System.Int32 cLine auto pre filled by the compiler - the code line Returns Type Description System.Action < System.String > | Improve this Doc View Source Call<T>(String, String, Boolean, String, String, Int32) Add a log entry for method call, returning a method to call when done Declaration Func<string, T, T> Call<T>(string parameters = null, string message = null, bool useTimer = false, string cPath = null, string cName = null, int cLine = 0) Parameters Type Name Description System.String parameters what was passed to the call in the brackets System.String message the message to log System.Boolean useTimer enable a timer from call/close System.String cPath auto pre filled by the compiler - the path to the code file System.String cName auto pre filled by the compiler - the method name System.Int32 cLine auto pre filled by the compiler - the code line Returns Type Description System.Func < System.String , T, T> Type Parameters Name Description T | Improve this Doc View Source LinkTo(ILog, String) Link this logger to a parent and optionally rename Declaration void LinkTo(ILog parent, string name = null) Parameters Type Name Description ILog parent parent log to attach to System.String name optional new name | Improve this Doc View Source Rename(String) Rename this logger - usually used when a base-class has a logger, but the inherited class needs a different name Declaration void Rename(string name) Parameters Type Name Description System.String name Remarks limits the length to 6 chars to make the output readable | Improve this Doc View Source Unlink() Unlink a logger from the parent. Declaration void Unlink() | Improve this Doc View Source Warn(String) Add a warning log entry Declaration string Warn(string message) Parameters Type Name Description System.String message Returns Type Description System.String The same warning text which was added"
  },
  "api/dot-net/ToSic.Sxc.Context.html": {
    "href": "api/dot-net/ToSic.Sxc.Context.html",
    "title": "Namespace ToSic.Sxc.Context | 2sxc and EAV 10",
    "keywords": "Namespace ToSic.Sxc.Context Context information for the current request / scenario. The Context gives your code information about the page / site / module etc. it's currently running in. All your code (Razor, WebApi) will have a property CmsContext which is of type ICmsContext . Note Your code will always have these objects, but they may sometimes be referencing unknown information. For example, if the current context doesn't have a known Module (like in API scenarios) then CmsContext.Module will return a valid object, but the ID will be < 0. Interfaces ICmsContext This is the runtime context of your code in the CMS. It can tell you about the site, page, module etc. that you're on. Note that it it Platform Agnostic so it's the same on Dnn, Oqtane etc. ICmsCulture Information about the cultures/languages used. ICmsModule Information about the module context the code is running in. ICmsPage Information about the page which is the context for the currently running code. ICmsSite The site context of the code - so basically which website / portal it's running on. ICmsUser The user context of your code - so it's information about the user your code is using. Enums PlatformType The types of platforms which 2sxc could be running on"
  },
  "api/dot-net/ToSic.Sxc.Conversion.DataToDictionary.html": {
    "href": "api/dot-net/ToSic.Sxc.Conversion.DataToDictionary.html",
    "title": "Class DataToDictionary | 2sxc and EAV 10",
    "keywords": "Class DataToDictionary Convert various types of entities (standalone, dynamic, in streams, etc.) to Dictionaries Mainly used for serialization scenarios, like in WebApis Inheritance System.Object HasLog ToSic.Eav.Logging.HasLog < EntitiesToDictionaryBase > EntitiesToDictionaryBase EntitiesToDictionary DataToDictionary Implements IHasLog IEntitiesTo < System.Collections.Generic.Dictionary < System.String , System.Object >> IStreamsTo < System.Collections.Generic.Dictionary < System.String , System.Object >> Inherited Members EntitiesToDictionary.Convert(IDataSource, IEnumerable<String>) EntitiesToDictionary.Convert(IDataSource, String) EntitiesToDictionary.Convert(IDataStream) EntitiesToDictionaryBase.ValueConverter EntitiesToDictionaryBase.WithGuid EntitiesToDictionaryBase.WithPublishing EntitiesToDictionaryBase.WithMetadataFor EntitiesToDictionaryBase.WithTitle EntitiesToDictionaryBase.ConfigureForAdminUse() EntitiesToDictionaryBase.Languages EntitiesToDictionaryBase.Convert(IEnumerable<IEntity>) EntitiesToDictionaryBase.Convert(IEntity) HasLog.Log HasLog.InitLog(String, ILog, String) HasLog.InitLog(String, ILog, String, CodeRef) Namespace : ToSic.Sxc.Conversion Assembly : ToSic.Sxc.dll Syntax [PublicApi_Stable_ForUseInYourCode] public class DataToDictionary : EntitiesToDictionary, IHasLog<EntitiesToDictionaryBase>, IHasLog, IEntitiesTo<Dictionary<string, object>>, IStreamsTo<Dictionary<string, object>>, IDynamicEntityTo<IDictionary<string, object>> Constructors | Improve this Doc View Source DataToDictionary(Boolean) Common constructor, directly preparing it with 2sxc Declaration public DataToDictionary(bool withEdit) Parameters Type Name Description System.Boolean withEdit Include editing information in serialized result Properties | Improve this Doc View Source WithEdit Determines if we should use edit-information Declaration public bool WithEdit { get; } Property Value Type Description System.Boolean Methods | Improve this Doc View Source Convert(IEnumerable<Object>) Declaration public IEnumerable<IDictionary<string, object>> Convert(IEnumerable<dynamic> dynamicList) Parameters Type Name Description System.Collections.Generic.IEnumerable < System.Object > dynamicList Returns Type Description System.Collections.Generic.IEnumerable < System.Collections.Generic.IDictionary < System.String , System.Object >> | Improve this Doc View Source Convert(IDynamicEntity) Declaration public IDictionary<string, object> Convert(IDynamicEntity dynamicEntity) Parameters Type Name Description IDynamicEntity dynamicEntity Returns Type Description System.Collections.Generic.IDictionary < System.String , System.Object > Implements IHasLog IEntitiesTo<T> IStreamsTo<T>"
  },
  "api/dot-net/ToSic.Sxc.Dnn.Web.DnnLinkHelper.html": {
    "href": "api/dot-net/ToSic.Sxc.Dnn.Web.DnnLinkHelper.html",
    "title": "Class DnnLinkHelper | 2sxc and EAV 10",
    "keywords": "Class DnnLinkHelper The DNN implementation of the ILinkHelper . Inheritance System.Object DnnLinkHelper Implements ILinkHelper Namespace : ToSic.Sxc.Dnn.Web Assembly : ToSic.Sxc.Dnn.dll Syntax [PublicApi_Stable_ForUseInYourCode] public class DnnLinkHelper : ILinkHelper, ILinkHelper Constructors | Improve this Doc View Source DnnLinkHelper(IDnnContext) Declaration public DnnLinkHelper(IDnnContext dnn) Parameters Type Name Description IDnnContext dnn Methods | Improve this Doc View Source Base() A base url for the current page, for use in html-base tags Declaration public string Base() Returns Type Description System.String | Improve this Doc View Source To(String, Nullable<Int32>, String) returns a link to the current page with parameters resolved in a way that DNN wants it Declaration public string To(string requiresNamedParameters = null, int? pageId = default(int? ), string parameters = null) Parameters Type Name Description System.String requiresNamedParameters a helper to ensure that you must use named parameters. You shouldn't give it anything, but you must use all others like parameters: \"id=47&name=42\" System.Nullable < System.Int32 > pageId optional page ID (TabId) - if not supplied, will use current page System.String parameters the parameters either as \"/id/47/name/daniel\" or \"id=47&name=daniel\" Returns Type Description System.String Implements ILinkHelper"
  },
  "api/dot-net/ToSic.Eav.Apps.IAppDataConfiguration.html": {
    "href": "api/dot-net/ToSic.Eav.Apps.IAppDataConfiguration.html",
    "title": "Interface IAppDataConfiguration | 2sxc and EAV 10",
    "keywords": "Interface IAppDataConfiguration The configuration of an app-data - usually relevant so the source will auto-filter out unpublished data for normal viewers. Namespace : ToSic.Eav.Apps Assembly : ToSic.Eav.Apps.dll Syntax [InternalApi_DoNotUse_MayChangeWithoutNotice(\"this is just fyi\")] public interface IAppDataConfiguration Properties | Improve this Doc View Source Configuration Configuration used to query data - will deliver url-parameters and other important configuration values. Declaration ILookUpEngine Configuration { get; } Property Value Type Description ILookUpEngine | Improve this Doc View Source ShowDrafts If this instance is allowed to show draft items This is usually dependent on the current users permissions Declaration bool ShowDrafts { get; } Property Value Type Description System.Boolean"
  },
  "api/dot-net/ToSic.Eav.Caching.ICacheKey.html": {
    "href": "api/dot-net/ToSic.Eav.Caching.ICacheKey.html",
    "title": "Interface ICacheKey | 2sxc and EAV 10",
    "keywords": "Interface ICacheKey Marks objects which can identify what cache it's for. For example, when parameters change what data is cached, then the cache-key can contain this parameter, so that a different cache is used based on changing parameters. Namespace : ToSic.Eav.Caching Assembly : ToSic.Eav.Core.dll Syntax [InternalApi_DoNotUse_MayChangeWithoutNotice(\"this is just fyi\")] public interface ICacheKey Properties | Improve this Doc View Source CacheFullKey Combination of the current key and all keys of upstream cached items, to create a long unique key for this context. Declaration string CacheFullKey { get; } Property Value Type Description System.String Full key containing own partial key and upstream keys. | Improve this Doc View Source CachePartialKey Unique key-id for this specific situation - could be the same for all instances, or could vary by some parameter. Declaration string CachePartialKey { get; } Property Value Type Description System.String A string which is specific to this cache-item."
  },
  "api/dot-net/ToSic.Eav.Data.DimensionDefinition.html": {
    "href": "api/dot-net/ToSic.Eav.Data.DimensionDefinition.html",
    "title": "Class DimensionDefinition | 2sxc and EAV 10",
    "keywords": "Class DimensionDefinition The definition of a dimension / language Inheritance System.Object DimensionDefinition Namespace : ToSic.Eav.Data Assembly : ToSic.Eav.Core.dll Syntax [PublicApi_Stable_ForUseInYourCode] public class DimensionDefinition Properties | Improve this Doc View Source Active If this dimension is active. Declaration public bool Active { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source Key The key/id, in case of a language this would be something like \"en\" or \"en-us\". Declaration public string Key { get; set; } Property Value Type Description System.String Remarks It's always lower case | Improve this Doc View Source Name The name - in case of a language this would be something like \"English\" Declaration public string Name { get; set; } Property Value Type Description System.String Methods | Improve this Doc View Source Matches(String) Compares two keys to see if they are the same. Declaration public bool Matches(string environmentKey) Parameters Type Name Description System.String environmentKey Returns Type Description System.Boolean"
  },
  "api/dot-net/ToSic.Eav.Data.IEntityLight.html": {
    "href": "api/dot-net/ToSic.Eav.Data.IEntityLight.html",
    "title": "Interface IEntityLight | 2sxc and EAV 10",
    "keywords": "Interface IEntityLight Represents a light Entity, which is a very basic entity without multi-language capabilities, versions or publishing. For the more powerful Entity, use IEntity . Inherited Members IAppIdentityLight.AppId Namespace : ToSic.Eav.Data Assembly : ToSic.Eav.Core.dll Syntax [InternalApi_DoNotUse_MayChangeWithoutNotice(\"this is just fyi\")] public interface IEntityLight : IAppIdentityLight Properties | Improve this Doc View Source Created Gets the Created DateTime Declaration DateTime Created { get; } Property Value Type Description System.DateTime A date-time object. | Improve this Doc View Source EntityGuid Gets the EntityGuid Declaration Guid EntityGuid { get; } Property Value Type Description System.Guid The GUID of the Entity | Improve this Doc View Source EntityId Gets the EntityId Declaration int EntityId { get; } Property Value Type Description System.Int32 The internal EntityId - usually for reference in the DB, but not quite always (like when this is a draft entity). | Improve this Doc View Source Item[String] Gets an Attribute by its StaticName Declaration object this[string attributeName] { get; } Parameters Type Name Description System.String attributeName StaticName of the Attribute Property Value Type Description System.Object The attribute - probably an IAttribute<T> | Improve this Doc View Source MetadataFor Information which is relevant if this current entity is actually mapped to something else. If it is mapped, then it's describing another thing, which is identified in this MetadataFor. Declaration ITarget MetadataFor { get; } Property Value Type Description ITarget A ITarget object describing the target. | Improve this Doc View Source Modified Gets the Last Modified DateTime Declaration DateTime Modified { get; } Property Value Type Description System.DateTime A date-time object. | Improve this Doc View Source Owner Owner of this entity Declaration string Owner { get; } Property Value Type Description System.String A string identifying the owner. Uses special encoding to work with various user-ID providers. | Improve this Doc View Source Relationships Relationship-helper object, important to navigate to children and parents Declaration IRelationshipManager Relationships { get; } Property Value Type Description IRelationshipManager The IRelationshipManager in charge of relationships for this Entity. | Improve this Doc View Source Title Gets the \"official\" Title-Attribute IAttribute<T> Declaration object Title { get; } Property Value Type Description System.Object The title of this Entity. The field used is determined in the IContentType . If you need a string, use GetBestTitle() instead. | Improve this Doc View Source Type Gets the ContentType of this Entity Declaration IContentType Type { get; } Property Value Type Description IContentType The content-type object. Methods | Improve this Doc View Source GetBestTitle() Best way to get the current entities title. The field used is determined in the IContentType . If you need the attribute-object, use the Title instead. Declaration string GetBestTitle() Returns Type Description System.String The entity title as a string."
  },
  "api/dot-net/ToSic.Eav.Apps.Assets.IFolder.html": {
    "href": "api/dot-net/ToSic.Eav.Apps.Assets.IFolder.html",
    "title": "Interface IFolder | 2sxc and EAV 10",
    "keywords": "Interface IFolder Describes a folder as provided by the underlying environment (like DNN) Inherited Members IAsset.Created IAsset.Id IAsset.ParentId IAsset.Modified IAsset.Name IAsset.Path Namespace : ToSic.Eav.Apps.Assets Assembly : ToSic.Eav.Apps.dll Syntax [PublicApi_Stable_ForUseInYourCode] public interface IFolder : IAsset Properties | Improve this Doc View Source HasChildren Information if this folder has things inside it - other folders, files etc. Declaration bool HasChildren { get; set; } Property Value Type Description System.Boolean true if it has items inside it, false if not"
  },
  "api/dot-net/ToSic.Eav.Metadata.IMetadataOf.html": {
    "href": "api/dot-net/ToSic.Eav.Metadata.IMetadataOf.html",
    "title": "Interface IMetadataOf | 2sxc and EAV 10",
    "keywords": "Interface IMetadataOf A provider for metadata for something. So if an IEntity or an App has metadata, this will provide it. Inherited Members System.Collections.Generic.IEnumerable<ToSic.Eav.Data.IEntity>.GetEnumerator() IHasPermissions.Permissions Namespace : ToSic.Eav.Metadata Assembly : ToSic.Eav.Core.dll Syntax [PublicApi_Stable_ForUseInYourCode] public interface IMetadataOf : IEnumerable<IEntity>, IEnumerable, IHasPermissions Remarks You can either loop through this object (since it's an IEnumerable ) or ask for values of the metadata, no matter on what sub-entity the value is stored on. Methods | Improve this Doc View Source GetBestValue<TVal>(String, String) Get the best matching value in ALL the metadata items. Declaration TVal GetBestValue<TVal>(string name, string typeName = null) Parameters Type Name Description System.String name attribute name we're looking for System.String typeName optional type-name, if provided, will only look at metadata of that type; otherwise (or if null) will look at all metadata items and pick first match Returns Type Description TVal A typed value. Type Parameters Name Description TVal expected type, like string, int etc. | Improve this Doc View Source GetBestValue<TVal>(String, String[]) Get the best matching value in the metadata items. Declaration TVal GetBestValue<TVal>(string name, string[] typeNames) Parameters Type Name Description System.String name attribute name we're looking for System.String [] typeNames list of type-name in the order to check. if one of the values is null, it will then check all items no matter what type Returns Type Description TVal A typed value. Type Parameters Name Description TVal expected type, like string, int etc."
  },
  "api/dot-net/ToSic.Eav.Data.LazyEntities.html": {
    "href": "api/dot-net/ToSic.Eav.Data.LazyEntities.html",
    "title": "Class LazyEntities | 2sxc and EAV 10",
    "keywords": "Class LazyEntities Delivers entities which are needed. It's lazy, because on initialization it only knows the Ids (int/guid) of the items to pick up, and only retrieves them when needed. Once retrieved, it will cache the result, until the up-stream reports changes. An additional optimization: in special cases where we just need the IDs for saving, it won't actually query the cache if the IDs are already known. Inheritance System.Object LazyEntities Implements System.Collections.Generic.IEnumerable < IEntity > System.Collections.IEnumerable ICacheDependent ITimestamped Namespace : ToSic.Eav.Data Assembly : ToSic.Eav.Core.dll Syntax [InternalApi_DoNotUse_MayChangeWithoutNotice(\"this is just fyi\")] public class LazyEntities : IEnumerable<IEntity>, IEnumerable, ICacheDependent, ITimestamped Properties | Improve this Doc View Source CacheTimestamp System time-stamp of when the data in this cached thing was initialized or updated. Depending on the implementation, this may go up-stream and return an up-stream value. Declaration public long CacheTimestamp { get; } Property Value Type Description System.Int64 A timestamp as a long number | Improve this Doc View Source Identifiers Identifiers of the items in the list. Build with either the Guids or the Ids, depending on what was used. Special mechanism to get identifiers to DB storage, without loading the entities themselves Declaration public IList Identifiers { get; } Property Value Type Description System.Collections.IList Methods | Improve this Doc View Source CacheChanged() Find out if the source it depends on has changed. Declaration public bool CacheChanged() Returns Type Description System.Boolean True if the upstream cache returns a newer timestamp Implements System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable ICacheDependent ITimestamped"
  },
  "api/dot-net/ToSic.Eav.Metadata.IHasMetadata.html": {
    "href": "api/dot-net/ToSic.Eav.Metadata.IHasMetadata.html",
    "title": "Interface IHasMetadata | 2sxc and EAV 10",
    "keywords": "Interface IHasMetadata Anything with this interface has a property Metadata which can give us more information about that object. Namespace : ToSic.Eav.Metadata Assembly : ToSic.Eav.Core.dll Syntax [PublicApi_Stable_ForUseInYourCode] public interface IHasMetadata Properties | Improve this Doc View Source Metadata Additional information, specs etc. about this attribute Declaration IMetadataOf Metadata { get; } Property Value Type Description IMetadataOf"
  },
  "api/dot-net/ToSic.Sxc.Code.ICreateInstance.html": {
    "href": "api/dot-net/ToSic.Sxc.Code.ICreateInstance.html",
    "title": "Interface ICreateInstance | 2sxc and EAV 10",
    "keywords": "Interface ICreateInstance Marks objects - usually DynamicCode - which can create instances of other C# files. A special feature is that it must store a reference to the path it's in (provided by the compiler that created this instance). This is important, so that CreateInstance knows what path to start in. Namespace : ToSic.Sxc.Code Assembly : ToSic.Sxc.dll Syntax [PublicApi_Stable_ForUseInYourCode] public interface ICreateInstance Properties | Improve this Doc View Source CreateInstancePath Location of the current code. This is important when trying to create instances for other code in relative folders - as this is usually not known. Declaration string CreateInstancePath { get; set; } Property Value Type Description System.String The real path to the currently executed code - important for dynamically compiled code like WebApis Methods | Improve this Doc View Source CreateInstance(String, String, String, String, Boolean) Create an instance of code lying in a file near this Declaration dynamic CreateInstance(string virtualPath, string dontRelyOnParameterOrder = \"all params must be named, like 'enable: true, language: ''de-ch''\", string name = null, string relativePath = null, bool throwOnError = true) Parameters Type Name Description System.String virtualPath path to the other code file to compile System.String dontRelyOnParameterOrder dummy parameter to ensure all other parameters are called using named parameters, so that the API can change in future System.String name Override the class name to compile - usually not required as it should match the file name System.String relativePath optional relative path, will usually use the CreateInstancePath System.Boolean throwOnError throw errors if compiling fails, recommended Returns Type Description System.Object An object of the class in the file Remarks Note that the C# code which we are creating an instance of inherits from DynamicCode then it will automatically be initialized to support App, AsDynamic etc."
  },
  "api/dot-net/ToSic.Sxc.Search.SearchItem.html": {
    "href": "api/dot-net/ToSic.Sxc.Search.SearchItem.html",
    "title": "Class SearchItem | 2sxc and EAV 10",
    "keywords": "Class SearchItem A search item which is passed around before handed over to the indexing system Inheritance System.Object DotNetNuke.Services.Search.Entities.SearchDocumentToDelete DotNetNuke.Services.Search.Entities.SearchDocument SearchItem Implements ISearchItem Namespace : ToSic.Sxc.Search Assembly : ToSic.Sxc.Dnn.dll Syntax [PublicApi_Stable_ForUseInYourCode] public class SearchItem : SearchDocument, ISearchItem, ISearchInfo Properties | Improve this Doc View Source Entity Declaration public IEntity Entity { get; set; } Property Value Type Description IEntity Implements ISearchItem"
  },
  "api/dot-net/ToSic.Eav.DataSources.IAppRoot.html": {
    "href": "api/dot-net/ToSic.Eav.DataSources.IAppRoot.html",
    "title": "Interface IAppRoot | 2sxc and EAV 10",
    "keywords": "Interface IAppRoot Interface for the App Root - usually the very first node in any data-delivery or query. It's just like a normal IDataSource but will internally access the AppState from the IAppsCache . Inherited Members IDataSource.Guid IDataSource.Out IDataSource.Item[String] IDataSource.List IDataSource.Configuration IDataSource.LogId IDataSource.Name IDataSource.CacheRelevantConfigurations IDataSource.CacheKey IZoneIdentity.ZoneId IAppIdentityLight.AppId ICacheKey.CachePartialKey ICacheKey.CacheFullKey ICacheExpiring.CacheChanged(Int64) ITimestamped.CacheTimestamp ICanPurgeListCache.PurgeList(Boolean) IHasLog.Log Namespace : ToSic.Eav.DataSources Assembly : ToSic.Eav.DataSources.dll Syntax [VisualQuery(GlobalName = \"ToSic.Eav.DataSources.IAppRoot, ToSic.Eav.DataSources\", NiceName = \"App Root Cache\", UiHint = \"(aka ICache)\", PreviousNames = new string[]{\"ToSic.Eav.DataSources.Caches.ICache, ToSic.Eav.DataSources\", \"ToSic.Eav.DataSources.Caching.IRootCache, ToSic.Eav.DataSources\"}, Type = DataSourceType.Source, HelpLink = \"https://r.2sxc.org/DsAppRoot\")] [InternalApi_DoNotUse_MayChangeWithoutNotice(\"this is just fyi\")] public interface IAppRoot : IDataSource, IAppIdentity, IZoneIdentity, IAppIdentityLight, ICacheInfo, ICacheKey, ICacheExpiring, ITimestamped, ICanPurgeListCache, IHasLog"
  },
  "api/dot-net/ToSic.Eav.DataSources.DataTable.html": {
    "href": "api/dot-net/ToSic.Eav.DataSources.DataTable.html",
    "title": "Class DataTable | 2sxc and EAV 10",
    "keywords": "Class DataTable Provide Entities from a System.Data.DataTable. This is not meant for VisualQuery, but for code which pre-processes data in a DataTable and then wants to provide it as entities. Inheritance System.Object HasLog DataSourceBase ExternalData DataTable Implements IDataSource IAppIdentity IZoneIdentity IAppIdentityLight ICacheKey ICacheExpiring ITimestamped ICanPurgeListCache IHasLog IDataTarget Inherited Members ExternalData.CacheTimestamp DataSourceBase.Name DataSourceBase.CacheRelevantConfigurations DataSourceBase.CachePartialKey DataSourceBase.CacheFullKey DataSourceBase.CacheChanged(Int64) DataSourceBase.AppId DataSourceBase.ZoneId DataSourceBase.Guid DataSourceBase.In DataSourceBase.Out DataSourceBase.Item[String] DataSourceBase.List DataSourceBase.Configuration DataSourceBase.Attach(IDataSource) DataSourceBase.Attach(String, IDataSource) DataSourceBase.Attach(String, IDataStream) DataSourceBase.PurgeList(Boolean) HasLog.Log HasLog.InitLog(String, ILog, String) HasLog.InitLog(String, ILog, String, CodeRef) Namespace : ToSic.Eav.DataSources Assembly : ToSic.Eav.DataSources.dll Syntax [PublicApi_Stable_ForUseInYourCode] public class DataTable : ExternalData, IDataSource, IAppIdentity, IZoneIdentity, IAppIdentityLight, ICacheInfo, ICacheKey, ICacheExpiring, ITimestamped, ICanPurgeListCache, IHasLog, IDataTarget Remarks Technically many things could just identify the app they belong to, and let the system look up the zone. But this would be inefficient, so for optimization, many items identify themselves with both the app and zone Ids Constructors | Improve this Doc View Source DataTable(DataTable, String, String, String, String) Initializes a new instance of the DataTableDataSource class with all important parameters. Declaration public DataTable(DataTable source, string contentType, string entityIdField = null, string titleField = null, string modifiedField = null) Parameters Type Name Description System.Data.DataTable source Source object containing the table System.String contentType Type-name to use System.String entityIdField ID column in the table System.String titleField Title column in the table System.String modifiedField modified column in the table Properties | Improve this Doc View Source ContentType Name of the ContentType Declaration public string ContentType { get; set; } Property Value Type Description System.String | Improve this Doc View Source EntityIdField Name of the Column used as EntityId Declaration public string EntityIdField { get; set; } Property Value Type Description System.String | Improve this Doc View Source ModifiedField Name of the field which would contain a modified timestamp (date/time) Declaration public string ModifiedField { get; set; } Property Value Type Description System.String | Improve this Doc View Source Source Source DataTable Declaration public DataTable Source { get; set; } Property Value Type Description System.Data.DataTable | Improve this Doc View Source TitleField Name of the Title Attribute of the Source DataTable Declaration public string TitleField { get; set; } Property Value Type Description System.String Implements IDataSource IAppIdentity IZoneIdentity IAppIdentityLight ICacheKey ICacheExpiring ITimestamped ICanPurgeListCache IHasLog IDataTarget"
  },
  "api/dot-net/ToSic.Eav.DataSources.PassThrough.html": {
    "href": "api/dot-net/ToSic.Eav.DataSources.PassThrough.html",
    "title": "Class PassThrough | 2sxc and EAV 10",
    "keywords": "Class PassThrough A DataSource that passes through all In Connections. Can be used con consolidate/merge multiple Sources into one. Inheritance System.Object HasLog DataSourceBase PassThrough Block Implements IDataSource IAppIdentity IZoneIdentity IAppIdentityLight ICacheKey ICacheExpiring ITimestamped ICanPurgeListCache IHasLog IDataTarget Inherited Members DataSourceBase.Name DataSourceBase.CacheRelevantConfigurations DataSourceBase.CacheFullKey DataSourceBase.CacheTimestamp DataSourceBase.CacheChanged(Int64) DataSourceBase.AppId DataSourceBase.ZoneId DataSourceBase.Guid DataSourceBase.In DataSourceBase.Out DataSourceBase.Item[String] DataSourceBase.List DataSourceBase.Configuration DataSourceBase.Attach(IDataSource) DataSourceBase.Attach(String, IDataSource) DataSourceBase.Attach(String, IDataStream) DataSourceBase.PurgeList(Boolean) HasLog.Log HasLog.InitLog(String, ILog, String) HasLog.InitLog(String, ILog, String, CodeRef) Namespace : ToSic.Eav.DataSources Assembly : ToSic.Eav.DataSources.dll Syntax [PublicApi_Stable_ForUseInYourCode] [VisualQuery(GlobalName = \"ToSic.Eav.DataSources.PassThrough, ToSic.Eav.DataSources\", Type = DataSourceType.Source, DynamicOut = true)] public class PassThrough : DataSourceBase, IDataSource, IAppIdentity, IZoneIdentity, IAppIdentityLight, ICacheInfo, ICacheKey, ICacheExpiring, ITimestamped, ICanPurgeListCache, IHasLog, IDataTarget Remarks Technically many things could just identify the app they belong to, and let the system look up the zone. But this would be inefficient, so for optimization, many items identify themselves with both the app and zone Ids Properties | Improve this Doc View Source CachePartialKey provide a static cachekey - as there is nothing dynamic on this source to modify the cache Declaration public override string CachePartialKey { get; } Property Value Type Description System.String Overrides DataSourceBase.CachePartialKey Remarks if the key is not static (like the default setup) it will always cause errors Implements IDataSource IAppIdentity IZoneIdentity IAppIdentityLight ICacheKey ICacheExpiring ITimestamped ICanPurgeListCache IHasLog IDataTarget"
  },
  "api/dot-net/ToSic.Sxc.Apps.html": {
    "href": "api/dot-net/ToSic.Sxc.Apps.html",
    "title": "Namespace ToSic.Sxc.Apps | 2sxc and EAV 10",
    "keywords": "Namespace ToSic.Sxc.Apps This extends the ToSic.Eav.Apps with things relevant in a CMS. Most of this isn't documented yet. Classes App A single-use app-object providing quick simple api to access name, folder, data, metadata etc. AppConfiguration The configuration of the app, as you can set it in the app-package definition. Interfaces IApp An app-object as is available in a razor template or WebApi"
  },
  "api/dot-net/ToSic.Eav.LookUp.ILookUpEngineResolver.html": {
    "href": "api/dot-net/ToSic.Eav.LookUp.ILookUpEngineResolver.html",
    "title": "Interface ILookUpEngineResolver | 2sxc and EAV 10",
    "keywords": "Interface ILookUpEngineResolver An object implementing this interface can provide an engine for the current context. It's important so that code can easily ask for the current engine, but that the real implementation is dependency-injected later on, as each environment (DNN, Nop, etc.) can provide different initial engines. Read more about this in LookUp & LookUpEngine Inherited Members IHasLog.Log Namespace : ToSic.Eav.LookUp Assembly : ToSic.Eav.Core.dll Syntax [InternalApi_DoNotUse_MayChangeWithoutNotice] public interface ILookUpEngineResolver : IHasLog<ILookUpEngineResolver>, IHasLog Methods | Improve this Doc View Source GetLookUpEngine(Int32) Get the engine for the current execution instance. Declaration ILookUpEngine GetLookUpEngine(int instanceId) Parameters Type Name Description System.Int32 instanceId The instance ID - should be 0 if unknown Returns Type Description ILookUpEngine"
  },
  "api/dot-net/ToSic.Eav.LookUp.LookUpBase.html": {
    "href": "api/dot-net/ToSic.Eav.LookUp.LookUpBase.html",
    "title": "Class LookUpBase | 2sxc and EAV 10",
    "keywords": "Class LookUpBase Base Class to create your own LookUp Class - used by all Look-Ups. Read more about this in LookUp & LookUpEngine Inheritance System.Object LookUpBase LookUpIn<T> LookUpInDataTarget LookUpInDictionary LookUpInLookUps LookUpInNameValueCollection LookUpInDnnPropertyAccess Implements ILookUp Namespace : ToSic.Eav.LookUp Assembly : ToSic.Eav.Core.dll Syntax [PublicApi_Stable_ForUseInYourCode] public abstract class LookUpBase : ILookUp Properties | Improve this Doc View Source Name Gets the Name of this LookUp, e.g. QueryString or PipelineSettings Declaration public string Name { get; protected set; } Property Value Type Description System.String The name which is used to identify this LookUp, like in a ILookUpEngine Methods | Improve this Doc View Source Format(Boolean) Declaration public static string Format(bool value) Parameters Type Name Description System.Boolean value Returns Type Description System.String | Improve this Doc View Source Format(DateTime) Declaration public static string Format(DateTime value) Parameters Type Name Description System.DateTime value Returns Type Description System.String | Improve this Doc View Source Get(String) Gets a value by Name/key, will simply return the string or an empty string, in rare cases a null-value. Declaration public virtual string Get(string key) Parameters Type Name Description System.String key Returns Type Description System.String The resolved value, or an empty string if not found. Note that it could also resolve to an empty string if found - use Has to check for that case. | Improve this Doc View Source Get(String, String) Gets a value by Name/key and tries to format it in a special way (like for dates) Declaration public abstract string Get(string key, string format) Parameters Type Name Description System.String key Name of the Property System.String format Format String Returns Type Description System.String Implements ILookUp"
  },
  "api/dot-net/ToSic.Eav.DataSources.ExternalData.html": {
    "href": "api/dot-net/ToSic.Eav.DataSources.ExternalData.html",
    "title": "Class ExternalData | 2sxc and EAV 10",
    "keywords": "Class ExternalData Base DataSource class for providing data from external systems Inheritance System.Object HasLog DataSourceBase ExternalData CsvDataSource DataTable Sql DnnUserProfile Implements IDataSource IAppIdentity IZoneIdentity IAppIdentityLight ICacheKey ICacheExpiring ITimestamped ICanPurgeListCache IHasLog IDataTarget Inherited Members DataSourceBase.Name DataSourceBase.CacheRelevantConfigurations DataSourceBase.CachePartialKey DataSourceBase.CacheFullKey DataSourceBase.CacheChanged(Int64) DataSourceBase.AppId DataSourceBase.ZoneId DataSourceBase.Guid DataSourceBase.In DataSourceBase.Out DataSourceBase.Item[String] DataSourceBase.List DataSourceBase.Configuration DataSourceBase.Attach(IDataSource) DataSourceBase.Attach(String, IDataSource) DataSourceBase.Attach(String, IDataStream) DataSourceBase.PurgeList(Boolean) HasLog.Log HasLog.InitLog(String, ILog, String) HasLog.InitLog(String, ILog, String, CodeRef) Namespace : ToSic.Eav.DataSources Assembly : ToSic.Eav.DataSources.dll Syntax [PublicApi_Stable_ForUseInYourCode] public abstract class ExternalData : DataSourceBase, IDataSource, IAppIdentity, IZoneIdentity, IAppIdentityLight, ICacheInfo, ICacheKey, ICacheExpiring, ITimestamped, ICanPurgeListCache, IHasLog, IDataTarget Remarks Technically many things could just identify the app they belong to, and let the system look up the zone. But this would be inefficient, so for optimization, many items identify themselves with both the app and zone Ids Properties | Improve this Doc View Source CacheTimestamp System time-stamp of when the data in this cached thing was initialized or updated. Depending on the implementation, this may go up-stream and return an up-stream value. Declaration public override long CacheTimestamp { get; } Property Value Type Description System.Int64 A timestamp as a long number Overrides DataSourceBase.CacheTimestamp Implements IDataSource IAppIdentity IZoneIdentity IAppIdentityLight ICacheKey ICacheExpiring ITimestamped ICanPurgeListCache IHasLog IDataTarget"
  },
  "api/dot-net/ToSic.Eav.DataSources.Queries.QueryPartDefinition.html": {
    "href": "api/dot-net/ToSic.Eav.DataSources.Queries.QueryPartDefinition.html",
    "title": "Class QueryPartDefinition | 2sxc and EAV 10",
    "keywords": "Class QueryPartDefinition The configuration / definition of a query part. The QueryDefinition uses a bunch of these together to build a query. Inheritance System.Object EntityBasedType QueryPartDefinition Implements IEntityBasedType IEntityWrapper Inherited Members EntityBasedType.Entity EntityBasedType.Title EntityBasedType.Id EntityBasedType.Guid EntityBasedType.Get<T>(String, T) Namespace : ToSic.Eav.DataSources.Queries Assembly : ToSic.Eav.DataSources.dll Syntax [InternalApi_DoNotUse_MayChangeWithoutNotice(\"this is just fyi\")] public class QueryPartDefinition : EntityBasedType, IEntityBasedType, IEntityWrapper Properties | Improve this Doc View Source DataSourceType The .net type which the data source has for this part. Will automatically resolve old names to new names as specified in the DataSources VisualQueryAttribute Declaration public string DataSourceType { get; } Property Value Type Description System.String | Improve this Doc View Source VisualDesignerData Information for this part, how it's to be displayed in the visual query. This is a JSON string containing positioning etc. Declaration public string VisualDesignerData { get; } Property Value Type Description System.String Implements IEntityBasedType IEntityWrapper"
  },
  "api/dot-net/ToSic.Eav.DataSources.ValueFilter.html": {
    "href": "api/dot-net/ToSic.Eav.DataSources.ValueFilter.html",
    "title": "Class ValueFilter | 2sxc and EAV 10",
    "keywords": "Class ValueFilter Return only Entities having a specific value in an Attribute The ValueFilter DataSource is part of the Standard EAV Data Sources . It will filter items based on the values - and if none are found, will optionally return a fallback-list. How to use with the Visual Query When using the Visual Query you can just drag it into your query. This is what it usually looks like: The above example shows that 2 of the 5 items fulfilled the filters requirements. Using Url Parameter for Filtering You can also filter using values from the URL, like this: Using Multiple URL Parameters ...and of course you can also use url parameters to specify field-names and value: ... or field, value and operator: Comparison Operators There are many operators possible - see the in-UI help bubble for that. Using Fallback Streams The filter will return the items which match the requirement, but sometimes none will match. This is common when you have a parameter from the Url, which may not match anything. In the simple version this looks like this: ...this previous example used a filter criteria which didn't match any items, so it resulted in delivering all. This is very useful when you want to cascade optional filters, like this: ...this example shows two filters - the first didn't match anything (it was blank), so it delivered all items, the second one then worked, and reduced the remaining items to 2. Programming With The ValueFilter DataSource We recommend to use the Visual Query where possible, as it's easier to understand and is identical for C# and JavaScript. It's also better because it separates data-retrieval from visualization. // A source which can filter by Content-Type (EntityType) var allAuthors = CreateSource<EntityTypeFilter>(); allAuthors.TypeName = \"Author\"; // filter by FullName var someAuthors = CreateSource<ValueFilter>(allAuthors); someAuthors.Attribute = \"FullName\"; someAuthors.Value = \"Daniel Mettler\"; Read also datasource / data stream List of all EAV Data Sources query / visual query Demo App and further links You should find some examples in this demo App Demo App with examples for most DataSources History Introduced in EAV 3.x, 2sxc ? Enhanced in 2sxc 8.12 with fallback API Documentation Inheritance System.Object HasLog DataSourceBase ValueFilter Implements IDataSource IAppIdentity IZoneIdentity IAppIdentityLight ICacheKey ICacheExpiring ITimestamped ICanPurgeListCache IHasLog IDataTarget Inherited Members DataSourceBase.Name DataSourceBase.CacheRelevantConfigurations DataSourceBase.CachePartialKey DataSourceBase.CacheFullKey DataSourceBase.CacheTimestamp DataSourceBase.CacheChanged(Int64) DataSourceBase.AppId DataSourceBase.ZoneId DataSourceBase.Guid DataSourceBase.In DataSourceBase.Out DataSourceBase.Item[String] DataSourceBase.List DataSourceBase.Configuration DataSourceBase.Attach(IDataSource) DataSourceBase.Attach(String, IDataSource) DataSourceBase.Attach(String, IDataStream) DataSourceBase.PurgeList(Boolean) HasLog.Log HasLog.InitLog(String, ILog, String) HasLog.InitLog(String, ILog, String, CodeRef) Namespace : ToSic.Eav.DataSources Assembly : ToSic.Eav.DataSources.dll Syntax [PublicApi_Stable_ForUseInYourCode] [VisualQuery(GlobalName = \"ToSic.Eav.DataSources.ValueFilter, ToSic.Eav.DataSources\", Type = DataSourceType.Filter, In = new string[]{\"Default\", \"Fallback\"}, DynamicOut = false, ExpectsDataOfType = \"|Config ToSic.Eav.DataSources.ValueFilter\", HelpLink = \"https://r.2sxc.org/DsValueFilter\")] public sealed class ValueFilter : DataSourceBase, IDataSource, IAppIdentity, IZoneIdentity, IAppIdentityLight, ICacheInfo, ICacheKey, ICacheExpiring, ITimestamped, ICanPurgeListCache, IHasLog, IDataTarget Remarks Technically many things could just identify the app they belong to, and let the system look up the zone. But this would be inefficient, so for optimization, many items identify themselves with both the app and zone Ids Properties | Improve this Doc View Source Attribute The attribute whose value will be scanned / filtered. Declaration public string Attribute { get; set; } Property Value Type Description System.String | Improve this Doc View Source Languages Language to filter for. At the moment it is not used, or it is trying to find \"any\" Declaration public string Languages { get; set; } Property Value Type Description System.String | Improve this Doc View Source Operator The comparison operator, == by default, many possibilities exist depending on the original types we're comparing Declaration public string Operator { get; set; } Property Value Type Description System.String | Improve this Doc View Source Take Amount of items to take - then stop filtering. For performance optimization. Declaration public string Take { get; set; } Property Value Type Description System.String | Improve this Doc View Source Value The filter that will be used - for example \"Daniel\" when looking for an entity w/the value Daniel Declaration public string Value { get; set; } Property Value Type Description System.String Implements IDataSource IAppIdentity IZoneIdentity IAppIdentityLight ICacheKey ICacheExpiring ITimestamped ICanPurgeListCache IHasLog IDataTarget"
  },
  "api/dot-net/ToSic.Eav.LookUp.html": {
    "href": "api/dot-net/ToSic.Eav.LookUp.html",
    "title": "Namespace ToSic.Eav.LookUp | 2sxc and EAV 10",
    "keywords": "Namespace ToSic.Eav.LookUp Sometimes objects need to get values from the context - like... a URL Parameter the current date/time an App Setting or Resource etc. This is done through ToSic.Eav.LookUp .ILookUp objects. In many cases, we need to look up a few - like when we have a configuration made with Tokens . These would look like [App:Path] or [QueryString:Ui] . The tool which takes a list of these and looks all of them up is the ToSic.Eav.LookUp .ILookupEngine. Tip Read more about this in LookUp & LookUpEngine Classes LookUpBase Base Class to create your own LookUp Class - used by all Look-Ups. Read more about this in LookUp & LookUpEngine LookUpEngine Takes a list of configuration masks (list of tokens) and resolves them with a bunch of LookUps. Read more about this in LookUp & LookUpEngine LookUpIn<T> LookUpInDataTarget Look up stuff in a DataSource. It will take the first IEntity in a source and look up properties/attributes in that. Normally this is used in Queries, where you want to get a parameter from the In stream. LookUpInDictionary Look Up values from a .net dictionary. Case-Insensitive. Read more about this in LookUp & LookUpEngine LookUpInEntity Get Values from an IEntity . Read more about this in LookUp & LookUpEngine LookUpInLookUps This Value Provider chains two or more LookUps and tries one after another to deliver a result It's mainly used to override values which are given, by a special situation. Read more about this in LookUp & LookUpEngine LookUpInMetadata LookUp things from metadata. This uses EAV Metadata system and will look up Metadata for something. As of now it's hardwired to look up Metadata of Entities. Read more about this in LookUp & LookUpEngine LookUpInNameValueCollection Look-Up helper to get something from a standard .net NameValueCollection. Read more about this in LookUp & LookUpEngine Interfaces ILookUp A key-value map which resolves keys like \"SortOrder\" to \"asc\". It's usually used to get pre-stored configuration or to get settings from the context. Read more about this in LookUp & LookUpEngine ILookUpEngine Resolves Configurations from LookUps. Common use is for configurable DataSources ILookUpEngineResolver An object implementing this interface can provide an engine for the current context. It's important so that code can easily ask for the current engine, but that the real implementation is dependency-injected later on, as each environment (DNN, Nop, etc.) can provide different initial engines. Read more about this in LookUp & LookUpEngine"
  },
  "api/dot-net/ToSic.Eav.DataSources.IDataTarget.html": {
    "href": "api/dot-net/ToSic.Eav.DataSources.IDataTarget.html",
    "title": "Interface IDataTarget | 2sxc and EAV 10",
    "keywords": "Interface IDataTarget Represents a data source that can be the recipient of Data. This basically means it has an In IDataStream Namespace : ToSic.Eav.DataSources Assembly : ToSic.Eav.DataSources.dll Syntax [PublicApi_Stable_ForUseInYourCode] public interface IDataTarget Properties | Improve this Doc View Source Guid Internal ID usually from persisted configurations IF the configuration was build from an pre-stored query. Declaration Guid Guid { get; set; } Property Value Type Description System.Guid The guid of this data source which identifies the configuration IEntity of the data source. | Improve this Doc View Source In List of all In connections Declaration IDictionary<string, IDataStream> In { get; } Property Value Type Description System.Collections.Generic.IDictionary < System.String , IDataStream > Methods | Improve this Doc View Source Attach(String, IDataSource) Add a single named stream to the In Declaration void Attach(string streamName, IDataSource dataSource) Parameters Type Name Description System.String streamName In-name of the stream IDataSource dataSource The data source - will use it's default out | Improve this Doc View Source Attach(String, IDataStream) Add a single named stream to the In Declaration void Attach(string streamName, IDataStream dataStream) Parameters Type Name Description System.String streamName In-name of the stream IDataStream dataStream The data stream to attach | Improve this Doc View Source Attach(IDataSource) Attach a DataSource to In - replaces all existing in-streams. Declaration void Attach(IDataSource dataSource) Parameters Type Name Description IDataSource dataSource DataSource to attach"
  },
  "net-code/dynamic-code/object-cms-object.html": {
    "href": "net-code/dynamic-code/object-cms-object.html",
    "title": "CmsContext in Dynamic Code WIP in 11.11 | 2sxc and EAV 10",
    "keywords": "CmsContext in Dynamic Code WIP in 11.11 As we're getting ready for Oqtane, we need standards so that our Dynamic Code can access information about the page, module etc. Up until now our code always used the Dnn object which obviously won't exist on Oqtane. So we're creating this new standardized object to ask for these things. ‚ö° The official API docs of the Object on the Dynamic Code ‚ö° The official API docs of the ICmsContext object Discover More in the Razor Tutorials We have an rich series of Razor tutorials . You should really check them out üëç. Demo App and further links You should find some code examples in this demo App No demo apps exist yet History Introduced in 2sxc 11.11"
  },
  "net-code/dynamic-code/object-data.html": {
    "href": "net-code/dynamic-code/object-data.html",
    "title": "Data / in Dynamic Code | 2sxc and EAV 10",
    "keywords": "Data / @Data in Dynamic Code What is Data A 2sxc instance is a running 2sxc-engine which is about to execute some code (Razor, Token or a web service) together with some content-items which should be used in this case. These content-items are provided to the code in an object called Data . 2sxc will decide what items to deliver, based on the situation. In most cases, a DNN-Module will show a 2sxc-template, and the content-editor will manually add items to it using the normal web-UI. In this case, these items will be tied to this use-case and 2sxc will deliver them in the Data object. In other cases, the template (or view) will be configured to get data from a query configered elsewhere. In this case, all data retrieved in the query will be provided in the same Data object. There are also cases, where a template needs both queried data (like all categories ) as well as content-items added manually. There are multiple easy ways of doing this todo - document later Note: if you want all data of a type, like \"Get me all Tag-items in the system\" you need to use App-Data . Discover More in the Razor Tutorials We have an rich series of Razor tutorials . You should really check them out üëç. Most common way to use the Data object In all Razor-templates and also the web-api files, the Data object is already created and ready to access. Here's a code example: <div class=\"app-blog\"> @foreach(var post in AsDynamic(Data)) { // do something with the @post here } </div> the foreach will loop through all items of the data in the Stream Default - read more about streams below the var post is the inner variable containing the current item the AsDynamic will ensure that the items we're working with are easy to code with, because they are Dynamic Entities The Streams in a Data Object The data object can have multiple Streams , each containing a list of items. In most cases you'll just have the Default stream, which you can access using Data[\"Default\"] . Read more about streams in the Stream docs But you may also have additional streams, depending on what has been configured in the data-preparation stuff (usually a visual query). For example, if you are working on a view showing one product and a menu with all possible categories, then your query may have these streams: Book (the current book, this stream has 1 item with the ID matching the ID in the URL) Categories (all categories in the system, sorted A-Z) The code would then look a bit like this: var book = Data[\"Book\"].FirstOrDefault(); // returns an IEntity Object var cats = Data[\"Categories\"]; // returns an IEnumerable of iEntity objects Or in most cases, because of the simpler syntax later on: var book = AsDynamic(Data[\"Book\"].FirstOrDefault()); // returns one dynamic entity var cats = AsDynamic(Data[\"Categories\"]); // returns an IEnumerable of dynamic entities Changing what is provided by Data The main configuration of the template will determine, what data is initially provided to the template. Afterwards, other mechanisms can override / change this. Initial Sources Default type/list configuration - this can determine that 0, 1 or many items (of a certain type) are delivered if one or many are delivered, then the selection will be based on what the editor added to the module instance. Visual Query - if the template has a query attached, this query will deliver the data Modifications to the source for the template The event CustomizeData can optionally completely reconfigure what Data contains in your code. Data Object API The Data object itself is actually a normal EAV IDataSource . So if you need to know more about the internals, read it up there. All other properties of the Data object are very special use only, so you probably shouldn't bother about them - which is why they are not documented here."
  },
  "net-code/dynamic-data/entity-vs-dynamic-entity.html": {
    "href": "net-code/dynamic-data/entity-vs-dynamic-entity.html",
    "title": "Entity vs. Dynamic Entity Content-Items | 2sxc and EAV 10",
    "keywords": "Entity vs. Dynamic Entity Content-Items Difference IEntity and IDynamicEntity Just a short piece of code, so you can see why you usually don't want to use the IEntity and will prefer the IDynamicEntity instead. // The easy way, using the content-item as a DynamicEntity var titleSimple = Content.Title; // The hard way, what actually happens internally var languagePreference = [\"de\", \"en\"]; var autoResolveLinks = true; var titleMedium = AsEntity(Content).GetBestValue(\"Title\", languagePreference, autoResolveLinks); As you can see, the internals provide a lot of information about the underlying data - things you usually don't care about, but in rare cases may be important. Conversion Examples This is just a bit of code so you can see how to convert back and forth. You usually won't care too much about this and not do this. Note that this is a very advanced topic, and you'll need Visual Studio Intellisense to get this done reasonably. Since you'll figure it out fairly quickly, we won't document it in detail here. // assume that you have a DynamicEntity like Content var entity = AsEntity(Content); // assume that you have a DataStream with Entities... @foreach(var postEntity in Data[\"Default\"]) { var postDyn = AsDynamic(postEntity); // postEntity is a IEntity // postDyn is a DynamicEntity } // but this is easier - convert the whole list @foreach(var post in AsDynamic(Data[\"Default\"])) { var postEnt = AsEntity(post); // do something with the @post here, it's a DynamicEntity // ...or with postEnt, it's an IEntity } Read also Discover More in the Razor Tutorials We have an rich series of Razor tutorials . You should really check them out üëç. How to Use a Dynamic Entity Entity Objects History Introduced in 2sxc 01.00 Multi-Language since 2sxc 02.00 Added Value and Value<T> as well as Parents() and Children(...) in 09.42. Note that Value does not do the same thing as GetBestValue."
  },
  "net-code/razor/customizedata.html": {
    "href": "net-code/razor/customizedata.html",
    "title": "Event CustomizeData() on the Razor Page | 2sxc and EAV 10",
    "keywords": "Event CustomizeData() on the Razor Page This event is called by the view-engine before the rest of the script is parsed - and it's usually empty. It can be overriden to change/configure what data is delivered to the template or search-index. Tip 2sxc 11 introduces Code-Behind. You can now place the CustomizeData() method in the code-behind file. Discover More in the Razor Tutorials We have an rich series of Razor tutorials . You should really check them out üëç. How to use In your razor page (.cshtml file) you can add a script block implementing this, as follows: @functions{ // Prepare the data - get all categories through the pipeline public override void CustomizeData() { // new features in 6.1 - the App DataSource CreateSource<App> and also the RelationshipFilter // Just add the items which have the relationship to the category in the URL var qsOfCat = CreateSource<RelationshipFilter>(App.Data[\"QandA\"]); qsOfCat.Relationship = \"Categories\"; qsOfCat.Filter = \"[QueryString:Category]\"; Data.In.Add(\"QandA\", qsOfCat[\"Default\"]); } } Since the code above is run before the rest of the template is executed, the Data object now has a stream called QandA which the rest of the template can access using Data[\"QandA\"] . Notes and Clarifications In general, you can override this event to prepare data. It has a few benefits like It's always called, even if the data is not templated - for example when it's streamed as JSON or when it's prepared for search indexing In the future, most data-preparations will be possible through a visual designer, but for now, this is the best way to go. Connection to Search index The CustomizeData event runs both when rendering the template as well as when the search is running. For further details you may want to read about InstancePurpose - which tells you why the current code is running so you could change the data added CustomizeSearch - which let's you write code to alter how the data is processed in the search-index Demo App and further links You should find some code examples in this demo App FAQ with Categories More links: Description of the feature on 2sxc docs History Introduced in 2sxc 6.1"
  },
  "net-code/razor/customizesearch.html": {
    "href": "net-code/razor/customizesearch.html",
    "title": "Event CustomizeSearch() on the Razor Page | 2sxc and EAV 10",
    "keywords": "Event CustomizeSearch() on the Razor Page This event is called by the view-engine after calling CustomizeData and before passing the Data object to the DNN Search Indexer. You can override this event to change how data is presented to the search, for example by bundling items together, or by giving items different URLs so that search knows that they are to appear on a sub-page. Tip 2sxc 11 introduces Code-Behind. You can now place the CustomizeSearch(...) method in the code-behind file. Discover More in the Razor Tutorials We have an rich series of Razor tutorials . You should really check them out üëç. How to use In your razor page (.cshtml file) you can add a script block implementing this, as follows: @using ToSic.Eav.Run; @using ToSic.Sxc.Dnn.Run; @using ToSic.Sxc.Search; @functions { // this method is optional - your code wouldn't need it, but it's in here to show how it would work together // the CustomizeData would be called first, and potentially modify what is in the Data-object public override void CustomizeData() { // Don't customize anything, nothing to customize in this case } /// <summary> /// Populate the search - ensure that each entity has an own url/page /// </summary> /// <param name=\"searchInfos\"></param> /// <param name=\"moduleInfo\"></param> /// <param name=\"startDate\"></param> public override void CustomizeSearch(Dictionary<string, List<ISearchItem>> searchInfos, IContainer moduleInfo, DateTime beginDate) { foreach (var si in searchInfos[\"Default\"]) { // tell the search system what url it should use in the result si.QueryString = \"mid=\"+ (moduleInfo as DnnContainer).Id + \"&feature=\" + si.Entity.EntityId; } } } The code above will skip customizing any data (but often you would want that too), then CustomizeSearch modifies the list of search-items before they are indexed. How it works In general everything will work automatically. This is what happens: 2sxc will retrieve the data added to this module 2sxc will call the CustomizeData() event if the template has such an event. In this event, your code can add more data to the module as needed. Note that during the search index, no Request-variables exist. So your method will cause an error if it does something like var x = Request[\"Category\"]. In case of an error, the index will still continue to work, but your changes to the data will fail To help you with this, a new property called Purpose was added. It tells you if this view/template was created for displaying or for indexing. 2sxc will then use the data and create SearchItems, ready to index. Each entity will be turned into a SearchItem Each Content-Type will have an own list (so you can differentiate between all the SearchItems for the Categories and the SearchItems for the Questions) Multi-Language is handled correctly, so the English index will contain the English content, etc. 2sxc will then call a CustomizeSearch() event, so your code could provide changes. A common scenario is to say that each entity (say each question) has a different URL (say a details-page). So even though all entities belong to the module (and DNN only knows of this one module), the module can say that each entity has an own details page. One this is done, the SearchItems are converted to official SearchDocument-objects and handed over to DNN Read also Purpose - which tells you why the current code is running so you could change the data added CustomizeData Demo App and further links You should find some code examples in this demo App FAQ with Categories More links: Description of the feature on 2sxc docs History Introduced in 2sxc 6.2 Added support for newer DNN versions at a later time - not sure when"
  },
  "net-code/razor/migrate-to-v10.html": {
    "href": "net-code/razor/migrate-to-v10.html",
    "title": "Migrating from the old Razor (before 10.20) to the new RazorComponent | 2sxc and EAV 10",
    "keywords": "Migrating from the old Razor (before 10.20) to the new RazorComponent The RazorComponent was created in v10.20 to provide a newer, cleaner API. To not break existing code, old templates still work, but you must migrate a template to RazorComponent if you wish to use the new features. Here what you need to do:"
  },
  "api/dot-net/ToSic.Eav.Metadata.IMetadataSource.html": {
    "href": "api/dot-net/ToSic.Eav.Metadata.IMetadataSource.html",
    "title": "Interface IMetadataSource | 2sxc and EAV 10",
    "keywords": "Interface IMetadataSource For querying metadata from the data source. Mainly used in the Store, Cache-Systems and Apps. Inherited Members ICacheExpiring.CacheChanged(Int64) ITimestamped.CacheTimestamp Namespace : ToSic.Eav.Metadata Assembly : ToSic.Eav.Core.dll Syntax [InternalApi_DoNotUse_MayChangeWithoutNotice(\"this is just fyi\")] public interface IMetadataSource : ICacheExpiring, ITimestamped Methods | Improve this Doc View Source Get<T>(Int32, T, String) Declaration [Obsolete(\"Deprecated in 11.11. Use GetMetadata instead. just keeping this till 2sxc 12 for compatibility\")] IEnumerable<IEntity> Get<T>(int targetType, T key, string contentTypeName = null) Parameters Type Name Description System.Int32 targetType T key System.String contentTypeName Returns Type Description System.Collections.Generic.IEnumerable < IEntity > Type Parameters Name Description T | Improve this Doc View Source GetMetadata<T>(Int32, T, String) Get any metadata of the current data source (usually an app) Declaration IEnumerable<IEntity> GetMetadata<T>(int targetType, T key, string contentTypeName = null) Parameters Type Name Description System.Int32 targetType The type-id of the target we're accessing, like 10=cms-object, 4=entity T key The key which is used for lookup System.String contentTypeName Optional content-type name, to only retrieve metadata of that type Returns Type Description System.Collections.Generic.IEnumerable < IEntity > A list (may be empty) of metadata items found for this target Type Parameters Name Description T Key-Type used - string, int or guid"
  },
  "api/dot-net/ToSic.Sxc.Context.ICmsPage.html": {
    "href": "api/dot-net/ToSic.Sxc.Context.ICmsPage.html",
    "title": "Interface ICmsPage | 2sxc and EAV 10",
    "keywords": "Interface ICmsPage Information about the page which is the context for the currently running code. Namespace : ToSic.Sxc.Context Assembly : ToSic.Sxc.dll Syntax [PublicApi] public interface ICmsPage Remarks Note that the module context is the module for which the code is currently running. In some scenarios (like Web-API scenarios) the code is running for this page but not on this page, as it would then be running on a WebApi. Properties | Improve this Doc View Source Id The Id of the page. Corresponds to the Dnn TabId Declaration int Id { get; } Property Value Type Description System.Int32"
  },
  "api/dot-net/ToSic.Sxc.Context.ICmsSite.html": {
    "href": "api/dot-net/ToSic.Sxc.Context.ICmsSite.html",
    "title": "Interface ICmsSite | 2sxc and EAV 10",
    "keywords": "Interface ICmsSite The site context of the code - so basically which website / portal it's running on. Namespace : ToSic.Sxc.Context Assembly : ToSic.Sxc.dll Syntax [PublicApi] public interface ICmsSite Properties | Improve this Doc View Source Id The Id of the site in systems like DNN and Oqtane. In DNN this is the same as the PortalId Declaration int Id { get; } Property Value Type Description System.Int32"
  },
  "api/dot-net/ToSic.Sxc.Dnn.RazorComponentCode.html": {
    "href": "api/dot-net/ToSic.Sxc.Dnn.RazorComponentCode.html",
    "title": "Class RazorComponentCode | 2sxc and EAV 10",
    "keywords": "Class RazorComponentCode This is the type used by code-behind classes of razor components. Use it to move logic / functions etc. into a kind of code-behind razor instead of as part of your view-template. Inheritance System.Object System.Web.WebPages.WebPageExecutingBase System.Web.WebPages.WebPageRenderingBase System.Web.WebPages.WebPageBase ToSic.Sxc.Web.RazorComponentBase ToSic.Sxc.Hybrid.Razor.RazorComponent RazorComponent RazorComponentCode Implements IRazorComponent IDnnDynamicCode IDynamicCode ICreateInstance ICompatibilityLevel IHasLog Inherited Members RazorComponent.Dnn Namespace : ToSic.Sxc.Dnn Assembly : ToSic.SexyContent.Razor.dll Syntax [PublicApi_Stable_ForUseInYourCode] public abstract class RazorComponentCode : RazorComponent, ITemplateFile, IHasDynCodeContext, INeedsDynCodeContext, ICoupledDynamicCode, IRazorComponent, IDnnDynamicCode, IDynamicCode, ICreateInstance, ICompatibilityLevel, IHasLog Methods | Improve this Doc View Source CustomizeData() Declaration public override void CustomizeData() Overrides ToSic.Sxc.Hybrid.Razor.RazorComponent.CustomizeData() | Improve this Doc View Source CustomizeSearch(Dictionary<String, List<ISearchItem>>, IContainer, DateTime) Declaration public override void CustomizeSearch(Dictionary<string, List<ISearchItem>> searchInfos, IContainer moduleInfo, DateTime beginDate) Parameters Type Name Description System.Collections.Generic.Dictionary < System.String , System.Collections.Generic.List < ISearchItem >> searchInfos ToSic.Eav.Run.IContainer moduleInfo System.DateTime beginDate Overrides ToSic.Sxc.Dnn.RazorComponent.CustomizeSearch(System.Collections.Generic.Dictionary<System.String, System.Collections.Generic.List<ToSic.Sxc.Search.ISearchItem>>, ToSic.Eav.Run.IContainer, System.DateTime) Implements IRazorComponent IDnnDynamicCode IDynamicCode ICreateInstance ICompatibilityLevel IHasLog"
  },
  "api/dot-net/ToSic.Eav.DataSources.Caching.CacheAllStreams.html": {
    "href": "api/dot-net/ToSic.Eav.DataSources.Caching.CacheAllStreams.html",
    "title": "Class CacheAllStreams | 2sxc and EAV 10",
    "keywords": "Class CacheAllStreams Special DataSource which automatically caches everything it's given. It's Used to optimize queries, so that heavier calculations don't need to be repeated if another request with the same signature is used. Internally it asks all up-stream DataSources what factors would determine their caching. So if part of the supplying DataSources would have a changed parameter (like a different filter), it will still run the full query and cache the results again. Inheritance System.Object HasLog DataSourceBase CacheAllStreams Implements IDataSource IAppIdentity IZoneIdentity IAppIdentityLight ICacheKey ICacheExpiring ITimestamped ICanPurgeListCache IHasLog IDataTarget Inherited Members DataSourceBase.Name DataSourceBase.CacheRelevantConfigurations DataSourceBase.CachePartialKey DataSourceBase.CacheFullKey DataSourceBase.CacheTimestamp DataSourceBase.CacheChanged(Int64) DataSourceBase.AppId DataSourceBase.ZoneId DataSourceBase.Guid DataSourceBase.In DataSourceBase.Item[String] DataSourceBase.List DataSourceBase.Configuration DataSourceBase.Attach(IDataSource) DataSourceBase.Attach(String, IDataSource) DataSourceBase.Attach(String, IDataStream) DataSourceBase.PurgeList(Boolean) HasLog.Log HasLog.InitLog(String, ILog, String) HasLog.InitLog(String, ILog, String, CodeRef) Namespace : ToSic.Eav.DataSources.Caching Assembly : ToSic.Eav.DataSources.dll Syntax [VisualQuery(GlobalName = \"ToSic.Eav.DataSources.Caching.CacheAllStreams, ToSic.Eav.DataSources\", Type = DataSourceType.Cache, DynamicOut = true, ExpectsDataOfType = \"|Config ToSic.Eav.DataSources.Caches.CacheAllStreams\", PreviousNames = new string[]{\"ToSic.Eav.DataSources.Caches.CacheAllStreams, ToSic.Eav.DataSources\"}, HelpLink = \"https://github.com/2sic/2sxc/wiki/DotNet-DataSource-CacheAllStreams\")] [PublicApi_Stable_ForUseInYourCode] public class CacheAllStreams : DataSourceBase, IDataSource, IAppIdentity, IZoneIdentity, IAppIdentityLight, ICacheInfo, ICacheKey, ICacheExpiring, ITimestamped, ICanPurgeListCache, IHasLog, IDataTarget, IDeferredDataSource Properties | Improve this Doc View Source CacheDurationInSeconds How long to keep these streams in the cache Declaration public int CacheDurationInSeconds { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source Out Gets the Dictionary of Out-Streams. This is the internal accessor, as usually you'll use this[\"name\"] instead. In rare cases you need the Out, for example to list the stream names in the data source. Declaration public override IDictionary<string, IDataStream> Out { get; } Property Value Type Description System.Collections.Generic.IDictionary < System.String , IDataStream > A dictionary of named IDataStream objects Overrides DataSourceBase.Out | Improve this Doc View Source RefreshOnSourceRefresh If a source-refresh should trigger a cache rebuild Declaration public bool RefreshOnSourceRefresh { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source ReturnCacheWhileRefreshing Perform a cache rebuild async. Declaration public bool ReturnCacheWhileRefreshing { get; set; } Property Value Type Description System.Boolean Implements IDataSource IAppIdentity IZoneIdentity IAppIdentityLight ICacheKey ICacheExpiring ITimestamped ICanPurgeListCache IHasLog IDataTarget"
  },
  "api/dot-net/ToSic.Eav.Logging.IHasLog.html": {
    "href": "api/dot-net/ToSic.Eav.Logging.IHasLog.html",
    "title": "Interface IHasLog | 2sxc and EAV 10",
    "keywords": "Interface IHasLog Objects which can log their activity, and share their log with other objects in the chain to produce extensive internal logging. Namespace : ToSic.Eav.Logging Assembly : ToSic.Eav.Core.dll Syntax [InternalApi_DoNotUse_MayChangeWithoutNotice(\"this is just fyi\")] public interface IHasLog Properties | Improve this Doc View Source Log The log object which contains the log and can add more logs to the list. Declaration ILog Log { get; } Property Value Type Description ILog"
  },
  "api/dot-net/ToSic.Eav.html": {
    "href": "api/dot-net/ToSic.Eav.html",
    "title": "Namespace ToSic.Eav | 2sxc and EAV 10",
    "keywords": "Namespace ToSic.Eav This is the root of the EAV system. It's almost empty, except for the Dependency Injection system Factory . Classes Factory The Eav DI Factory, used to construct various objects through Dependency Injection."
  },
  "api/dot-net/ToSic.Sxc.Adam.IAsset.html": {
    "href": "api/dot-net/ToSic.Sxc.Adam.IAsset.html",
    "title": "Interface IAsset | 2sxc and EAV 10",
    "keywords": "Interface IAsset Describes an ADAM (Automatic Digital Asset Management) asset. This contains properties which both IFolder and IFile have in common. Namespace : ToSic.Sxc.Adam Assembly : ToSic.Sxc.dll Syntax [PublicApi_Stable_ForUseInYourCode] public interface IAsset Properties | Improve this Doc View Source HasMetadata Informs the code if this asset has real metadata attached or not. Declaration bool HasMetadata { get; } Property Value Type Description System.Boolean True if this asset has metadata, false if it doesn't (in which case the Metadata property still works, but won't deliver any real values) | Improve this Doc View Source Metadata List of metadata items - will automatically contain a fake item, even if no metadata exits to help in razor template etc. Declaration dynamic Metadata { get; } Property Value Type Description System.Object An IDynamicEntity which contains the metadata, or an empty IDynamicEntity which still works if no metadata exists. | Improve this Doc View Source Type The type of this asset (folder, file, etc.) Declaration string Type { get; } Property Value Type Description System.String \"folder\", \"image\", \"document\", \"file\" depending on what it is | Improve this Doc View Source Url The path to this asset as used from external access. Must be a full url beginning with a \"/\" like \"/Portals/0/adam/...\" Declaration string Url { get; } Property Value Type Description System.String The url to this asset"
  },
  "api/dot-net/ToSic.Sxc.Data.DynamicJacketBase-1.html": {
    "href": "api/dot-net/ToSic.Sxc.Data.DynamicJacketBase-1.html",
    "title": "Class DynamicJacketBase<T> | 2sxc and EAV 10",
    "keywords": "Class DynamicJacketBase<T> Base class for DynamicJackets. You won't use this, just included in the docs. To check if something is an array or an object, use \"IsArray\" Inheritance System.Object System.Dynamic.DynamicObject DynamicJacketBase<T> DynamicJacket DynamicJacketList Implements System.Dynamic.IDynamicMetaObjectProvider System.Collections.Generic.IReadOnlyList < System.Object > System.Collections.Generic.IReadOnlyCollection < System.Object > System.Collections.Generic.IEnumerable < System.Object > System.Collections.IEnumerable IWrapper <T> Namespace : ToSic.Sxc.Data Assembly : ToSic.Sxc.dll Syntax [InternalApi_DoNotUse_MayChangeWithoutNotice(\"just use the objects from AsDynamic, don't use this directly\")] public abstract class DynamicJacketBase<T> : DynamicObject, IDynamicMetaObjectProvider, IReadOnlyList<object>, IReadOnlyCollection<object>, IEnumerable<object>, IEnumerable, IWrapper<T> Type Parameters Name Description T The underlying type, either a JObject or a JToken Properties | Improve this Doc View Source Count Declaration public int Count { get; } Property Value Type Description System.Int32 | Improve this Doc View Source IsList Check if it's an array. Declaration public abstract bool IsList { get; } Property Value Type Description System.Boolean True if an array/list, false if an object. | Improve this Doc View Source Item[Int32] Not yet implemented accessor - must be implemented by the inheriting class. Declaration public virtual object this[int index] { get; } Parameters Type Name Description System.Int32 index Property Value Type Description System.Object a System.NotImplementedException | Improve this Doc View Source UnwrappedContents The underlying data, in case it's needed for various internal operations. Declaration public T UnwrappedContents { get; } Property Value Type Description T Methods | Improve this Doc View Source GetEnumerator() Enable enumeration. When going through objects (properties) it will return the keys, not the values. Use the [key] accessor to get the values as DynamicJacketList or ToSic.Sxc Declaration public abstract IEnumerator<object> GetEnumerator() Returns Type Description System.Collections.Generic.IEnumerator < System.Object > | Improve this Doc View Source ToString() If the object is just output, it should show the underlying json string Declaration public override string ToString() Returns Type Description System.String the inner json string Overrides System.Object.ToString() Explicit Interface Implementations | Improve this Doc View Source IEnumerable.GetEnumerator() Declaration IEnumerator IEnumerable.GetEnumerator() Returns Type Description System.Collections.IEnumerator Implements System.Dynamic.IDynamicMetaObjectProvider System.Collections.Generic.IReadOnlyList<T> System.Collections.Generic.IReadOnlyCollection<T> System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable IWrapper<T>"
  },
  "js-code/angular/index.html": {
    "href": "js-code/angular/index.html",
    "title": "Work-In-Progress | 2sxc and EAV 10",
    "keywords": "Work-In-Progress We're reorganizing our JS API Docs - they will be moved to here. This is still WIP. Using Angular in 2sxc / DNN <!-- Data Highlights --> <!-- ADAM --> <!-- Server --> <!-- Prepare --> <!-- Data Source --> <!-- Optimzers --> <!-- Process / Awesomize --> <!-- Libraries --> <!-- data formats --> <!-- Browser --> <!-- Frameworks --> <!-- App show parts --> <!-- Interact parts --> <!-- Edit parts --> <!-- Edit UI parts --> <!-- SPA parts --> <!-- Custom highlight boxes - can be controlled by in-page CSS --> you are here (click to zoom) - discover the stack .context-box-summary .spa-all { visibility: visible; } Check out the dnn-sxc-angular NPM package TODO Quick Example TODO What's Where This documentation contains the following sections TODO"
  },
  "js-code/angular/toolbars.html": {
    "href": "js-code/angular/toolbars.html",
    "title": "Toolbars in Angular (dnn-sxc-angular) | 2sxc and EAV 10",
    "keywords": "Toolbars in Angular (dnn-sxc-angular) <!-- Data Highlights --> <!-- ADAM --> <!-- Server --> <!-- Prepare --> <!-- Data Source --> <!-- Optimzers --> <!-- Process / Awesomize --> <!-- Libraries --> <!-- data formats --> <!-- Browser --> <!-- Frameworks --> <!-- App show parts --> <!-- Interact parts --> <!-- Edit parts --> <!-- Edit UI parts --> <!-- SPA parts --> <!-- Custom highlight boxes - can be controlled by in-page CSS --> you are here (click to zoom) - discover the stack .context-box-summary .spa-all { visibility: visible; } dnn-sxc-angular provides directives/components which allow to place toolbars in an Angular App. Prerequisite is an Angular App running with dnn-sxc-angular . Important: these docs have to be rewritten! Best refer to the NPM infos for now. How to use In your app.module.ts , add an import to ContentManagerModule from @2sic.com/dnn-sxc-angular and add it to the imports array. Place the toolbar directives/components in your templates. There are two different ways to place your toolbars, the tag-toolbar (default) and the inline toolbar, depending on the use case. In most cases, you will want to use the tag-toolbar; the inline toolbar is useful when you want to show the toolbar without the need to hover over the target element. Tag-Toolbar To use the tag-toolbar, insert the [sxc-toolbar] directive where you want to place the toolbar, e.g.: <div *ngIf=\"!!reference\" [sxc-toolbar]='{toolbar:{entityId:reference.Id}}'> ... </div> The object being passed to the attribute can contain a toolbar and a settings property, according to HTML Toolbars and Buttons . Inline-Toolbar Place the inline toolbar in your template, for example inside of a table cell: <td> <sxc-toolbar [config]=\"{toolbar:{entityId:reference.Id}}\"></sxc-toolbar> </td> The config object passed to the component follows the same rules as the tag-toolbar ( https://github.com/2sic/2sxc/wiki/html-toolbars-and-buttons )."
  },
  "js-code/index.html": {
    "href": "js-code/index.html",
    "title": "Work-In-Progress | 2sxc and EAV 10",
    "keywords": "Work-In-Progress We're reorganizing our JS API Docs - they will be moved to here. This is still WIP. JavaScript and TypeScript Code <!-- Data Highlights --> <!-- ADAM --> <!-- Server --> <!-- Prepare --> <!-- Data Source --> <!-- Optimzers --> <!-- Process / Awesomize --> <!-- Libraries --> <!-- data formats --> <!-- Browser --> <!-- Frameworks --> <!-- App show parts --> <!-- Interact parts --> <!-- Edit parts --> <!-- Edit UI parts --> <!-- SPA parts --> <!-- Custom highlight boxes - can be controlled by in-page CSS --> you are here (click to zoom) - discover the stack .context-box-summary .browser-all { visibility: visible; } Many people implement JavaScript or TypeScript solutions using 2sxc, as it's ideal both for simple scripts like galleries as well as for bundling and distributing complex Angular or React SPAs. Note: We're just consolidating docs in this section, so it's still very incomplete. What it should contain in the end is... Guidance for using the basic $2sxc and sxc for working with data/apis - with npm packages etc. Guidance for using the edit API Guidance for customizing toolbars? Guidance for Angular integration Guidance for React integration Basic Structure probably JS Framework Overview JS Basics Inpage CMS API Angular SPAs Edit UI API Quick Example TODO What's Where This documentation contains the following sections TODO"
  },
  "js-code/2sxc-api/2sxc.html": {
    "href": "js-code/2sxc-api/2sxc.html",
    "title": "The $2sxc Root Object | 2sxc and EAV 10",
    "keywords": "The $2sxc Root Object <!-- Data Highlights --> <!-- ADAM --> <!-- Server --> <!-- Prepare --> <!-- Data Source --> <!-- Optimzers --> <!-- Process / Awesomize --> <!-- Libraries --> <!-- data formats --> <!-- Browser --> <!-- Frameworks --> <!-- App show parts --> <!-- Interact parts --> <!-- Edit parts --> <!-- Edit UI parts --> <!-- SPA parts --> <!-- Custom highlight boxes - can be controlled by in-page CSS --> you are here (click to zoom) - discover the stack .context-box-summary .interact-2sxc { visibility: visible; } The $2sxc-object is the core JavaScript object helping you to access data of your view or WebAPIs of your 2sxc-App. Note 2sxc uses these objects internally for building the edit experience. You only need this if you wish to do custom JavaScript stuff in 2sxc, like retrieve data from a WebApi. Advanced cases where you need $2sxc: When you want to use view-data as an asyc-JS call if you wish to work with WebAPI REST calls if you want more control over the edit-experience with custom buttons etc. How to use add a script-tag to include the 2sxc.api.min.js note 1: in edit-mode this happens automatically note 2: always use lower-case paths and the minified version call the $2sxc(...) constructor to get a sxc-controller for your module (as each module on the page will have an own $2sxc controller) work with the API of the sxc-controller Here's a simple example of a template-file: @Edit.Enable(js: true) <script> $(function () { var modId = 17; var sxc = $2sxc(modId); alert(\"edit mode: \" + sxc.isEditMode()); }); </script> The code above shows how to include the api-file in the best way using @Edit.Enable(js: true) how the sxc-object is resolved how to ask if we're in edit-mode The moduleId is usually dynamic, so you can't hardwire it with var modId = 17 into your JS code. This is explained in the next section Initialization . Initialization of the $2sxc for a Module We have three initializers: $2sxc(DomNode) - recommended $2sxc(moduleId) - oldest way, very common $2sxc(moduleId, contentBlockId) - a special version for internal use only The Recommended HTML/DOM-Node Initializer We recommend the DOM-Node syntax , because in that mode $2sxc will go up through the DOM-tree and find the module it's in (or the content-block), and auto-configure itself. What's nice about this is that this method works without any server-side support (which you need for the other methods). Here's a simple example: <a onclick='$2sxc(this).manage.run(\"layout\")'>layout</a> In the above example, the dom-node is given by the current click, which puts the current <a> node in the this object. Here's a JS example: var x = $(\".myApp\"); // get ANY dom element inside this 2sxc app var sxc1 = $2sxc(x); // use it // the same thing in 1 line var sxc2 = $2sxc($(\"#SomeNodeInThePage\")); Note that the simple example above assumes that there is only one item on the page, but there can often be more. So you'll usually need to do something like this // note that we cannot work before the page-onready. // so our code is in a $(our-code); $(function(){ $(\"some-jquery-selector\").each(function(index, element){ var sxc = $2sxc(element); // now do something... }); }); The Classic ModuleId method In this method, you need to get the ModuleId from somewhere, usually provided by the server-side template. In a Token-Template you would use [Module:ModuleId] and in a Razor-Template it's @Dnn.Module.ModuleID (large \"ID\"). The previous code in Tokens would be like: $(function () { var sxc = $2sxc([Module:ModuleId]); alert(\"edit mode: \" + sxc.isEditMode()); }) And the same code in Razor would be like: $(function () { var sxc = $2sxc(@Dnn.Module.ModuleID); alert(\"edit mode: \" + sxc.isEditMode()); }) You can also find an example of finding all of our nodes and initializing them in the TimeLineJS App . If you're interested, here's the js-initializer . Everything about the Module-Level sxc Controller In the module sxc controller you'll read about: The API of a module-level controller Calling commands, creating toolbars and buttons Working with JSON data of the current module Working with REST / HTTP Async Stuff Working with WebAPI calls, especially to your backend WebAPI in your api-folder Calling Queries (from the visual query designer) Technical Features Explained Including the $2sxc API JavaScript File Each template that needs the $2sxc-file when not logged in must include it, to be sure it's always there when needed. Note that we've included various features to prevent duplicate execution. if the file is included multiple times, it will only execute once if the file is included minified and unminified, it too will only be executed once if you need to debug the JS for whatever reason with F12 in the browser a sourcemap is included for more advanced debuging, just include the unminified version Note that the entire code is packed in an IIFE, so the only global variable created is the $2sxc . Everything is Cached We optimized for just about every thinkable situation, so the $2sxc will build a controller-object for a module, but following calls to it will use the cached information. Example: var sxc = $2sxc(42); // initial call, will build controller for Module 42 var sxc2 = $2sxc(42); // second call, will use cached controller var sxc3 = $2sxc(domNodeInsideTheModule42); // another call, will also used cached controller Metadata Needed by $2sxc to Work The $2sxc object needs a few pieces of information to work properly, which are stored in a JSON in the HTML. So the Module-DIV-Tag is actually enhanced with additional pieces of information. This structure is open and easy to read, but the structure can change from time to time, so don't read/rely on that JSON, use the $2sxc to access any information. There are even situations where additional metadata in inserted into the HTML rendered by your template. This has to do with inner-content (see next section) and the same \"don't rely on the JSON\" applies. Module-Instances and Content-Blocks This is a very advanced topic, so if you're new - just skip this. Also if you use content-blocks you don't need to understand this, it's just included for completeness. A 2sxc-module can contain many 2sxc-content-blocks since version 8.4 because an item could have independent, inner content-blocks. Because of this, the controller may need an additional parameter, so instead of $2sxc(moduleId) it can also use $2sxc(moduleId, contentBlockId) . As mentioned above, you never need to work with this, it's included for completeness. Since the now recommended method to initialized $2sxc is not with the moduleId but with a DOM-node, that call will automatically resolve everything correctly. Additional properties of the $2sxc Controller In 2sxc 9.30 a new object $2sxc.cms was added - read about it in $2sxc.cms TODO: document the properties, mention that they won't be stable in future versions Till we find time to document more, please consult the $2sxc API Background: How $2sxc works This is just some info for you to better understand what happens behind the scenes: How Module-Level Information is found When you use $2sxc(moduleId) it scans the DOM for the <div> tag that contains the module with that ID When you use $2sxc(htmlNode) it starts from that node and scans all parents till it finds the <div> which is the module wrapper Once it finds that, it knows what module it's for and configures itself How Page and Portal Information is Found This is for information the $2sxc needs for WebApi calls. This here applies to 2sxc 10.25+ It first checks the html-head section for a meta tag with the name _jsApi . If this exists, it contains a JSON with everything it needs. If that doesn't exist it will retry 3x times (in case the head wasn't ready yet) and otherwise falls back to the old mechanism. The old mechanism is to ask DNN and the ServicesFramework for this information. This is always available when you're logged on as an editor, but it's only on the page for anonymous users IF ...you are either using the old mechanisms ...or your Razor code asked for with @Edit.Enable(js:true) Demo App and further links You should find some code examples in this demo App TimeLineJS all the JS-apps including AngularJS in the app-catalog More links: Description of the feature on 2sxc docs History Introduced in 2sxc 04.00 Enhanced with cms (see cms ) in 9.30"
  },
  "js-code/angular-js/angularjs-1-overview.html": {
    "href": "js-code/angular-js/angularjs-1-overview.html",
    "title": "AngularJs 1 Overview (obsolete) | 2sxc and EAV 10",
    "keywords": "AngularJs 1 Overview (obsolete) Warning This is old, obsolete information. AngularJS is really dead. You should use Angular 2sxc contains a special helper called 2sxc4ng which takes care of starting your app inside DNN and providing you with toolbars and data from 2sxc. How to use Until we find time to document everything, here's the short version To use 2sxc4ng you must include a JS file in your template, and you must bootstrap your app using this (not using the standard angularjs bootstrapping) this is to ensure that multiple Angular apps can run on the same page, and to provide your app with the necessary context so it knows what module it's working on, etc. Here's an introduction to that . To get your current sxc-controller there are two objects $2sxc and sxc which you can just include it in your function definition, like module.controller('AppCatalogCtrl', function ($2sxc, sxc, $http, ...) { The sxc is the one you want most, it is already set to your current instance, so you can ask it things like sxc.manage etc. The $2sxc is the same as the global $2sxc object you know from jquery. You could of course also do $2sxc(27).manage to acces the manage, but that's unnecessarily complicated Additional services provided when bootstrapping with 2sxc4ng is content(typename) - a service which requests content-data from the current app / context, can also delete / create items etc. query(queryname) - a service which gets data from app-queries Additional directives sxcToolbar - a create-toolbar directive to provide in-app toolbars to edit/manage etc. for <sxc-toolbar toolbar=\"...\"> tags Todo: a simple full example right here Including All Necessary Files You need three files + your code 2sxc.min.js - only necessary, if you intend to work with 2sxc data items & toolbars, must come before 2sxc4ng Angular - ideally from a CDN 2sxc4ng.min.js - only necessary, if you intend to work with 2sxc data items & toolbars, must come after angular Your code Example: <script src=\"/desktopmodules/tosic_sexycontent/js/2sxc.api.min.js\" data-enableoptimizations=\"100\"></script> <script src=\"//ajax.googleapis.com/ajax/libs/angularjs/1.6.1/angular.min.js\" data-enableoptimizations=\"101\"></script> <script src=\"/desktopmodules/tosic_sexycontent/js/angularjs/2sxc4ng.min.js\" data-enableoptimizations=\"110\"></script> <script src=\"@App.Path/dist/angular-app.min.js\" data-enableoptimizations=\"120\"></script> Toolbar Directive Quick example - this requires 2sxc 8.8 // a quick sxcToolbar example <li ng-repeat=\"app in apps\"> <sxc-toolbar toolbar='{ \"entityId\": app.EntityId }' settings='{ \"hover\": \"left\", \"align\": \"left\" }'></sxc-toolbar> ... </li> Content Service This is a quick example of the content service Todo: you can find some infos till then in the ( http://2sxc.org/en/Learn/Simple-AngularJS-in-DNN-with-2sxc4ng)(http://2sxc.org/en/Learn/Simple-AngularJS-in-DNN-with-2sxc4ng ) article Important: you can use the content service to get all of a type get one of a type create one of a type (if permissions have been configured for that type) delete one of a type (permissions...) quick demo of syntax var cSrv = content(\"BlogPosts\"); var onePromise = cSrv.get(740); var allPromise = cSrv.get(); var createPromise = cSrv.create({ \"Title\": \"hello\", \"Body\": \"great article\"}); var deletePromise = cSrv.delete(7740); Query Service This is a quick example of the query service Todo: you can find some infos till then in the ( http://2sxc.org/en/Learn/Simple-AngularJS-in-DNN-with-2sxc4ng)(http://2sxc.org/en/Learn/Simple-AngularJS-in-DNN-with-2sxc4ng ) article // this example assumes you added the query service in your constructor // it also assumes you created a visual-query called \"All-blog-items\" var qAll = query(\"All-blog-items\"); qAll.get().then(function (result) { ... // some code here }); // this assumes you want to query the data from the current view // so the real items assigned to this instance // or processed inside the view in a PrepareData() method var qCurrent = query(); qCurrent.get().then(function (result) { ... // some code here }); When working with queries that expect parameters, you can pass them in the get() call qAll.get({ data: { \"sort\": \"EntityTitle\" }, }).then(...) Notes and Clarifications On Bootstrapping Just fyi: in 2sxc 6.0 till 2sxc 8.8.0 the AngularJS bootstrapping needed to know the module-id. This was done by either providing an attribute like iid=\"@Dnn.Module.ModuleId\" or for tokens iid=\"[Module:ModuleId]\" providing the mod-id in the app name like sxc-app=\"MyApp-@Dnn.Module.ModuleId\" This is because it needs if for webservice calls. In 2sxc 8.8.1 the bootstrapping will auto-detect the module id, so you don't have to provide it any more. Read also Full explanation of bootstrapping and how/why etc. - which tells you why the current code is running so you could change the data added Demo App and further links You should find some code examples in this demo App Various AngularJS based apps History Introduced in 2sxc ??.?? sxcToolbar released in 2sxc 8.8.0"
  },
  "js-code/2sxc-api/2sxc.http.html": {
    "href": "js-code/2sxc-api/2sxc.http.html",
    "title": "The $2sxc.http API | 2sxc and EAV 10",
    "keywords": "The $2sxc.http API <!-- Data Highlights --> <!-- ADAM --> <!-- Server --> <!-- Prepare --> <!-- Data Source --> <!-- Optimzers --> <!-- Process / Awesomize --> <!-- Libraries --> <!-- data formats --> <!-- Browser --> <!-- Frameworks --> <!-- App show parts --> <!-- Interact parts --> <!-- Edit parts --> <!-- Edit UI parts --> <!-- SPA parts --> <!-- Custom highlight boxes - can be controlled by in-page CSS --> you are here (click to zoom) - discover the stack .context-box-summary .interact-2sxc { visibility: visible; } The $2sxc.http object contains information for doig API calls. It's new - introduced in 2sxc 10.25 . Note The http -object was introduced to help $2sxc run without jQuery and without the rather instable ServicesFramework of DNN. It has the following important methods: apiUrl(url) resolves a partial url like app/auto/api/Posts/All to the real url needed in DNN apiUrl(url, endpointName) special version of the apiUrl(...) method, for calling endpoints which are not in 2sxc headers() returns the headers you need to add to a WebApi call for it to work in DNN headers(moduleId) the headers incl. the one needed when addressing a specific module Internally this information is automatically retrieved from the html-header. The environment looks for a special meta-tag called _jsApi which contains all this information. This is new in 2sxc 10.25 and was added to avoid using jQuery when not necessary. Warning Internally all these commands need the env to be ready. This means that the entire html <head> tag was processed by the browser. A very safe way to do this is to run your code on-document-ready, or just to ensure that whatever bootstraps your application runs inside the <body> tag. Internal Stuff The http also has some internal methods like: apiRoot(endpointName) the full api-root to use in calling DNN or 2sxc endpoints. It's internal, because for all 2sxc stuff and 2sxc Apps the endpointName is always 2sxc headers(moduleId, contentBlockId) headers incl. ModuleId and content-Block ID - rarely used History Introduced in 2sxc 10.25"
  },
  "js-code/2sxc-api/2sxc.env.html": {
    "href": "js-code/2sxc-api/2sxc.env.html",
    "title": "The $2sxc.env API | 2sxc and EAV 10",
    "keywords": "The $2sxc.env API <!-- Data Highlights --> <!-- ADAM --> <!-- Server --> <!-- Prepare --> <!-- Data Source --> <!-- Optimzers --> <!-- Process / Awesomize --> <!-- Libraries --> <!-- data formats --> <!-- Browser --> <!-- Frameworks --> <!-- App show parts --> <!-- Interact parts --> <!-- Edit parts --> <!-- Edit UI parts --> <!-- SPA parts --> <!-- Custom highlight boxes - can be controlled by in-page CSS --> you are here (click to zoom) - discover the stack .context-box-summary .interact-2sxc { visibility: visible; } The $2sxc.env object manages environment information for the JavaScript. It's new - introduced in 2sxc 10.25 . Note The env -object was introduced to help $2sxc run without jQuery and without the rather instable ServicesFramework of DNN. It has the following important methods: page() which will tell you the page number - often needed in API calls api() the root path for api-calls, used in http rvt() the request-verification token needed for internal WebAPI calls Internally this information is automatically retrieved from the html-header. The environment looks for a special meta-tag called _jsApi which contains all this information. This is new in 2sxc 10.25 and was added to avoid using jQuery when not necessary. Internal Stuff The env also has some internal methods like load(...) for special scenarios like using $2sxc in an html which does not come from DNN. This is not documented in detail, but can be figured out by reading the code. For debugging, there is also a log object which contains some information how the env was built, how long it took etc. History Introduced in 2sxc 10.25"
  },
  "js-code/quick-e/quicke.html": {
    "href": "js-code/quick-e/quicke.html",
    "title": "Html & JS: quickE - Quick Edit 2.0 | 2sxc and EAV 10",
    "keywords": "Html & JS: quickE - Quick Edit 2.0 <!-- Data Highlights --> <!-- ADAM --> <!-- Server --> <!-- Prepare --> <!-- Data Source --> <!-- Optimzers --> <!-- Process / Awesomize --> <!-- Libraries --> <!-- data formats --> <!-- Browser --> <!-- Frameworks --> <!-- App show parts --> <!-- Interact parts --> <!-- Edit parts --> <!-- Edit UI parts --> <!-- SPA parts --> <!-- Custom highlight boxes - can be controlled by in-page CSS --> you are here (click to zoom) - discover the stack .context-box-summary .edit-custom { visibility: visible; } quickE (pronounced quicky) is the quick-edit feature inside 2sxc to quickly add / move modules and inner content blocks. This page explains the In-Browser things you must know, incl. JSON configuration Concept and Background For this please read Concept-Quick-Edit , which also explains how to include it in a Skin etc. How to use Assuming that the $quickE is already on the page and you're logged on, there is not much to do for now. Note that the internal API of $quickE is still prone to change, so anything you do which isn't officially documented could brake on a future upgrade. Configuring quickE Quick-Edit in HTML Since quickE 2.0 (released in 2sxc 8.7) you can now also configure it a bit. Here are the most important features enable / disable the entire quickE enable / disable module quick-edit enable / disable inner-block quick edit To do this, just add a quick-edit-config=\"{...}\" attribute to any DOM node with the desired configuration. Here's what will happen if you add it to a skin-dom-node, you can set \"defaults\" like \"never enable at all\" if you add it to a view-template, you can change the behavior if that view is included Why include configuration it in a View? As explained above, quickE changes it's behavior by default if it finds inner-content. This is desired on details-views, but not on templates which just create more complex content on a normal page. So on these templates, you could add a config to continue enabling module-quick-edit. The Configuration Object Structure config = { enable: true, // default buttons: { addApp: true, addContent: true, select: true, paste: true, delete: true, move: true, }, modules: { enable: null // auto-detect, can also be true/false buttons: { // same structure as above, if not set, defaults to the main settings }, }, innerBlocks: { enable: null // auto-detect, can also be true/false buttons: { // same structure as above, if not set, defaults to the main settings }, } } A Quick Razor Example If you want to add this attribute only when the user is editing the page, the best way to do it is like this: <div @Edit.Attribute(\"quick-edit-config\", new { modules = new { enable = true }})> ... </div> or this <div @Edit.Attribute(\"quick-edit-config\", new { buttons = new { select = false}, modules = new { enable = true, buttons = new { addApp = false }}})> ... </div> Read also Inner Content Blocks - blog about inner content-blocks Demo App and further links You should find some code examples in this demo App Accordion (collapsible sections) 2sxc blog History Introduced in 2sxc v08.04 Enhanced / made configurable in 2sxc 08.06.01 Added ability to specify each button in 2sxc 11.11.03"
  },
  "js-code/custom-fields/index.html": {
    "href": "js-code/custom-fields/index.html",
    "title": "How To Create Custom Input Fields (v11.2) | 2sxc and EAV 10",
    "keywords": "How To Create Custom Input Fields (v11.2) <!-- Data Highlights --> <!-- ADAM --> <!-- Server --> <!-- Prepare --> <!-- Data Source --> <!-- Optimzers --> <!-- Process / Awesomize --> <!-- Libraries --> <!-- data formats --> <!-- Browser --> <!-- Frameworks --> <!-- App show parts --> <!-- Interact parts --> <!-- Edit parts --> <!-- Edit UI parts --> <!-- SPA parts --> <!-- Custom highlight boxes - can be controlled by in-page CSS --> you are here (click to zoom) - discover the stack .context-box-summary .edit-ui-custom { visibility: visible; } Sometimes you want a custom input field - as color-picker, dropdown-from-api or whatever. Tip 2sxc 11 finally allows you to do this using simple WebComponents Registering these happens by placing them in a specific folder You can also make them configurable by placing a content-type json in another folder Note There are more ways to provide and register custom input fields - like when you need them globally across many apps and portals. That is not discussed here. Quick-Start Video and Tutorial If you're new here, best watch this video: Then check out the tutorials . What kind of Custom Input Field can you Create You can create any kind of custom input field, as a JavaScript WebComponent. Look and Feel however you want it Any kind of JS code Talking to any other system (Google Maps, etc.) Talking to any endpoint (weather APIs) Tip This overview will get you started, but we've already created demos on the 2sxc Tutorials . If you want to know more, you should also read the specs Getting Started with Custom Input Fields Basically a custom Input Field is just a index.js in the correct folder. These are the specs: An input field as described here is an App Extension . All App Extensions must each lie in an own folder... within a folder called system inside the App folder The folder name for your custom input field must obey certain naming rules so that they are auto-detected. The javascript that will be loaded must be called index.js Your script must register a custom element - a WebComponent - in the browser The name of your custom element is predefined, and must adhere to the naming rules. Here's a checklist to get this setup Note Once you have that setup, the input field is automatically detected and a user can choose it as a field type in the configuration. Some Background on WebComponents The WebComponent has a simple lifecycle - from when it's created to when it receives data and can push changes back to the form. The form itself is reactive. This means that your field will receive messages when the value changes or when other values change (in case you want to use other field values in your input). The API to communicate with the form has a few complexities you need to know. This is because the form is very dynamic - so the user could switch languages, and your input field needs to react to this. So let's get started üöÄ! Getting the HTML into the Custom Input WebControls are developed using pure JavaScript, but a control is automatically a rich DOM object. So your this object can do all kinds of DOM manipulations, but in most cases you'll just do something like this: this.innerHTML = 'Hello <em>world</em>!'; Now you have to wait with doing this, till your object has been added to the DOM, so you need to kick this off in the connectedCallback() like this: class EmptyHelloWorld extends HTMLElement { /* Constructor for WebComponents - the first line must always be super() */ constructor() { super(); } /* connectedCallback() is the standard callback when the component has been attached */ connectedCallback() { this.innerHTML = 'Hello <em>world</em>!'; } } Reading and Writing Values The 2sxc form will initialize your custom element and attach a connector object. This happens automatically, so you will have it once connectedCallback() is fired. This connector is a rich object with lots of stuff, but for your field value you need to know these bits connector.data.value gets you the current value connector.data.update(newValue) updates the form with the changed value connector.data.value$ is the observable version of the value - this is great for advanced use cases, but otherwise you can stick to the simple .value Tip Avoid calling update(...) if nothing changed - as it will make the form dirty, so the user will be asked if he wants to save when cancelling the dialog, even though nothing changed. Tip Check out this tutorial example of Pickr to see all this in action Loading Custom CSS and JS Libraries Since this is all standard JavaScript, you can do it anyhow you want. For example, to load some CSS we recommend that you simply add a <link> tag to your html, like this: <link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/@simonwep/pickr/dist/themes/classic.min.css\"/> For JavaScript you can do the same, either using a <script> tag or telling the browser to load the JS using DOM commands. We also provide a helper on connector.loadScript(name, url, callback) which does the following: Check if the name given in the first parameter exists on the window object (to check if it's already loaded) If not, load the script provided in the url Watch the window object using polling to see when the item with name is created Then trigger your callback function Tip Check out the tutorial example of Pickr to see all this in action Making your Fields Configurable Now you have a color-picker, but each field may require a different set of preconfigured colors. Or maybe your date picker has could optionally restrict dates to weekdays. In these cases, you need configuration specific for the field. Create Your own WYSIWYG Field WYSIWYG fields are very hard to do right. Basically you can simply create your own using the same principles as mentioned above. But we recommend that you use the existing WYSIWYG field provided by 2sxc and just change some of the configurations. Tip By just reconfiguring the existing 2sxc WYSIWYG you will benefit from ADAM file-upload and continuous updates to the main component. Here's what you need to know The WYSIWYG field is based on TinyMCE - so to make configuration changes, you'll need to understand that API pretty well. To change it, you need to create a wrapper component which contains the standard 2sxc-wysiwyg and give it different configurations. To do this, we are calling various methods on a reconfigure object of your wrapper - so you can override most of the defaults To learn more, best look at the tutorials and the API Basic tutorial, just providing 4 standard buttons Advanced tutorial adding a custom button WYSIWYG Reconfigure API"
  },
  "how-to/customize-edit-ux/input-fields.html": {
    "href": "how-to/customize-edit-ux/input-fields.html",
    "title": "Moved to | 2sxc and EAV 10",
    "keywords": "Moved to How To Create Custom Input Fields (v11.2)"
  },
  "js-code/custom-fields/connector.html": {
    "href": "js-code/custom-fields/connector.html",
    "title": "API of Connector Object in Custom Input Fields | 2sxc and EAV 10",
    "keywords": "API of Connector Object in Custom Input Fields <!-- Data Highlights --> <!-- ADAM --> <!-- Server --> <!-- Prepare --> <!-- Data Source --> <!-- Optimzers --> <!-- Process / Awesomize --> <!-- Libraries --> <!-- data formats --> <!-- Browser --> <!-- Frameworks --> <!-- App show parts --> <!-- Interact parts --> <!-- Edit parts --> <!-- Edit UI parts --> <!-- SPA parts --> <!-- Custom highlight boxes - can be controlled by in-page CSS --> you are here (click to zoom) - discover the stack .context-box-summary .edit-ui-custom { visibility: visible; } The connector object provides values to your WebComponent and let's you communicate with the form. Here's the API you need: Background The connector object is attached by the form to your custom WebComponent before the connectedCallback() is triggered. So you can access it using this.connector . connector API data - a ConnectorData<T> object which has various properties you need to read/write values dialog - a ConnectorDialog<T> object which lets you open/close details-dialogs in your component field - contains a FieldConfig object telling you about the field, it's configuration etc. field$ - an observable with the field configuration, will emit a new FieldConfig whenever it changes loadScript(...) - a helper method to load additional javascript files _experimental - internal API for things which do not have a stable API yet connector.data Object The data object is of type ConnectorData<T> . It has these members: export interface ConnectorData<T> { /** Current value of the field */ value: T; /** * Client updates value in the host * @param newValue - New value of the field from the client */ update(newValue: T): void; /** * Client adds callback functions to be executed every time value changes in the host. * So call it to register your function which should run on change. * * Use this if you are not familier with observables. * @param callback - Function to be executed every time value changes in the host */ onValueChange(callback: (newValue: T) => void): void; /** * Observable on field value * Use this if you are familiar with observables. */ value$: Observable<T>; /** * Fired before form is saved. * It tells your control that the form is about to save, and that this is the last moment you can update the value. * Used in case your input doesn't always push changed values, like in WYSIWYG and other complex input fields which may buffer changes. */ forceConnectorSave$: Observable<T>; } connector.dialog Object This is the API to open a new dialog or close it again. /** * Responsible for opening/closing dialogs in a control. */ export interface ConnectorDialog<T> { /** * Opens a dialog and shows a WebComponent inside it. * * @param {string} [componentTag] name of the WebComponent which will be loaded inside the dialog */ open(componentTag?: string): void; /** * Closes the dialog */ close(): void; } connector.field FieldConfig Object This gives you information about the field. For simplity in maintaining the docs, here's a copy of the type file: export interface FieldConfig { /** Static name of the field */ name: string; /** Ordering index of the field inside the form */ index: number; /** Field label */ label: string; // updated on language change /** Field placeholder text */ placeholder: string; // never updated atm. Probably will be /** Input type of the field. e.g. string-default, string-dropdown, etc. */ inputType: string; /** Data type of the field. e.g. String, Hyperlink, Entity, etc. */ type: string; /** Tells whether the field is required */ required: boolean; // updated on language change /** Tells whether the field is disabled. This is the initial value that was set in settings for this field */ disabled: boolean; settings: FieldSettings; } connector.field and connector.field$ FieldConfig Object The connector.field object tells you how the field is configured. Note that if you use this object directly, you won't be notified of changes. For that you should use the connector.field$ stream. export interface FieldConfig { /** Static name of the field */ name: string; /** Ordering index of the field inside the form */ index: number; /** Field label */ label: string; // updated on language change /** Field placeholder text */ placeholder: string; // never updated atm. Probably will be /** Input type of the field. e.g. string-default, string-dropdown, etc. */ inputType: string; /** Data type of the field. e.g. String, Hyperlink, Entity, etc. */ type: string; /** Tells whether the field is required */ required: boolean; // updated on language change /** Tells whether the field is disabled. This is the initial value that was set in settings for this field */ disabled: boolean; /** * Settings of the field, as configured in the UI * This is just a normal dictionary-object with keys having the same names as the fields in the configuration dialog. * Note that most keys are PascalCase, not camelCase. */ settings: FieldSettings; } connector.loadScript() Method /** * Load a script into the browser - but only once. * Makes sure that script with the same source is loaded only once and executes callback. * * @param {string} globalObject - name on window.xxx which is checked if the js is already loaded * @param {string} src - path to the script * @param {(...args: any[]) => any} callback - your callback function * @memberof Connector */ loadScript(globalObject: string, src: string, callback: (...args: any[]) => any): void; Read Also How To Create Custom Input Fields Tutorials for Custom Input Fields History Introduced in 2sxc 11.02"
  },
  "js-code/commands/custom-code.html": {
    "href": "js-code/commands/custom-code.html",
    "title": "Buttons with Custom Code in a Toolbar | 2sxc and EAV 10",
    "keywords": "Buttons with Custom Code in a Toolbar <!-- Data Highlights --> <!-- ADAM --> <!-- Server --> <!-- Prepare --> <!-- Data Source --> <!-- Optimzers --> <!-- Process / Awesomize --> <!-- Libraries --> <!-- data formats --> <!-- Browser --> <!-- Frameworks --> <!-- App show parts --> <!-- Interact parts --> <!-- Edit parts --> <!-- Edit UI parts --> <!-- SPA parts --> <!-- Custom highlight boxes - can be controlled by in-page CSS --> you are here (click to zoom) - discover the stack .context-box-summary .edit-custom { visibility: visible; } In some cases you want to add buttons to a toolbar, which run custom JavaScript code. How to use Here's a basic example showing a 2sxc-toolbar with a custom code: <ul class=\"sc-menu\" data-toolbar='{ \"groups\": [{ \"buttons\": [{ \"command\": { \"action\": \"custom\", \"customCode\": \"alert(\\\"custom button!\\\")\" } }] }] }'></ul> This shows 2sxc-toolbar with 1 button, calling the command custom and giving it the code customCode which will be executed. Here's a more extensive example: <div class=\"sc-element\"> custom js action <ul class=\"sc-menu\" data-toolbar='{\"groups\": [ { \"buttons\": [ { \"command\": { \"action\": \"custom\", \"customCode\": \"alert(\\\"custom button!\\\")\" }, \"icon\": \"icon-sxc-code\", \"title\": \"my custom code\" },{ \"command\": { \"action\": \"custom\", \"customCode\": \"someCustomAction(settings, event, sxc);\" }, \"icon\": \"icon-sxc-code\", \"title\": \"my custom code\" }, \"layout\", \"more\" ]}, { \"buttons\": \"layout,more\" } ], \"debug\": true}'></ul> </div> <script> function someCustomAction(settings, event, sxc) { console.log(\"found these settings: \", settings); console.log(\"for this click event: \", event); console.log(\"in the context of this sxc: \", sxc); alert(\"check js console output\"); } </script> The above example also provides a custom icon, a title and a second button which also knows about the event (the click), the settings (like the entityId) and the sxc (the controller). How it works Internally, the command custom is meant to simply execute the code which is in the attribute customCode . That's all it does. Notes and Clarifications JSON Encode if using data-toolbar attribute If you're adding this in the HTML, then everything must be correctly JSON encoded (which isn't exactly fun). So if you plan to do that, we recommend to put most of the JS in an external file and just put the call to it in the button itself. More Specs On Click The second example shows 3 additional variables which are available inside the click event. They are settings - these are the parameters passed in, like entityId event - this is the JS event like click sxc - this is the current sxc-controller - you can also access sxc.manage if you need it Read also commands Demo App and further links You should find some code examples in this demo App JS Manage / Toolbar API Tutorial App History Introduced in 2sxc v08.06"
  },
  "js-code/commands/content-items.html": {
    "href": "js-code/commands/content-items.html",
    "title": "CMS Command contentitems | 2sxc and EAV 10",
    "keywords": "CMS Command contentitems <!-- Data Highlights --> <!-- ADAM --> <!-- Server --> <!-- Prepare --> <!-- Data Source --> <!-- Optimzers --> <!-- Process / Awesomize --> <!-- Libraries --> <!-- data formats --> <!-- Browser --> <!-- Frameworks --> <!-- App show parts --> <!-- Interact parts --> <!-- Edit parts --> <!-- Edit UI parts --> <!-- SPA parts --> <!-- Custom highlight boxes - can be controlled by in-page CSS --> you are here (click to zoom) - discover the stack .context-box-summary .edit-custom { visibility: visible; } This button opens the admin-dialog with all content-items. It has a (beta) feature which also allows you to add filters (since 2sxc 8.7). How to use Here's a basic example showing a 2sxc-toolbar with a custom code: @* Example using hover TagToolbar (recommended) *@ <div @Edit.TagToolbar(toolbar: new { action = \"contentitems\", contentType= \"Tag\", filters = new { ManualWeight = 2 })> ... </div> @* Example using inline Toolbar (not recommended) *@ <div> @Edit.Toolbar(toolbar: new { action = \"contentitems\", contentType= \"Tag\", filters = new { ManualWeight = 2 }) ... </div> This shows a button which opens the table with all Tag items and filters for ManualWeight = 2. Let's try a more complex setup: @* Example using hover TagToolbar (recommended) *@ <div @Edit.TagToolbar( toolbar: new object[] { new { action = \"contentitems\", contentType= \"Tag\", filters = new { ManualWeight = 2 } }, new { action = \"contentitems\", contentType= \"BlogPost\", filters = new {Tags = new[] { tag.Tag } } } }, settings: new { show = \"always\" })> ... </div> This shows 2sxc-toolbar with 2 buttons, one opening tag-management (filtered by ManualWeight), the other opens all BlogPosts filtering by Tag. It also has some settings which always show it, even if the mouse is not hovering. Possible filters on contentitems The filters-object is a JS-object with properties. We're still working on the format, but for now it's probably NumberPropertyName: ## StringPropertyName: \"...\" BoolPropertyName: true EntityPropertyName: [\"title1\", \"title2\", ...] IsPublished: true IsMetadata: true Read also commands Demo App and further links Mobius Forms uses the contentitems command to let the admin see the forms-records for his use case only History Introduced in 2sxc v08.06 Filters introduced in 2sxc v08.08"
  },
  "js-code/2sxc-api/sxc.manage.html": {
    "href": "js-code/2sxc-api/sxc.manage.html",
    "title": "Manage Everything With the manage Controller | 2sxc and EAV 10",
    "keywords": "Manage Everything With the manage Controller <!-- Data Highlights --> <!-- ADAM --> <!-- Server --> <!-- Prepare --> <!-- Data Source --> <!-- Optimzers --> <!-- Process / Awesomize --> <!-- Libraries --> <!-- data formats --> <!-- Browser --> <!-- Frameworks --> <!-- App show parts --> <!-- Interact parts --> <!-- Edit parts --> <!-- Edit UI parts --> <!-- SPA parts --> <!-- Custom highlight boxes - can be controlled by in-page CSS --> you are here (click to zoom) - discover the stack .context-box-summary .edit-custom { visibility: visible; } The manage object helps you manage content, allowing you to run(...) commands or to get buttons or toolbars . How to use Each content-block (usually a DNN-Module) has it's own 2sxc-controller, which also gives you a prepared manage-object to work with. Here's an example <a onclick='$2sxc(this).manage.run(\"layout\")'>layout</a> this click-event will look up the 2sxc-controller using $2sxc(this) , then use the manage-object provided by this to then run the layout command. The layout command opens the change-template dialog. Here's an example to generate a toolbar from code: <p class=\"sc-element\"> mouse over this to see the js toolbar generated by the groups of buttons <toolbarsGroups></toolbarsGroups> </p> <script> var toolbarsGroups = { groups: [ { buttons: \"layout,more\"}, { buttons: \"app,zone,more\" } ] }; $(function(){ $(\"toolbarsGroups\").each(function(index, element){ var controller = $2sxc(element); var toolbar = controller.manage.getToolbar(toolbarsGroups); $(element).replaceWith(toolbar); }); }); </script> The example above has a function which will look for all <toolbarsGroups> tags and replace them with the HTML provided by manage.getToolbar(...) . How it works Basically the manage-property only exists when the user has edit permissions, as 2sxc will automatically include the necessary JS in the page. So if the user doesn't have edit-rights, the .manage property will be undefined . If it does exist, it can be used to do perform these kinds of actions. Properties and Methods We try to keep APIs very light, so all the internal properties/objects are not documented and should not be used. These properties and methods can be treated as stable: void .run(...) - used to run a command string .getButton(...) - used to generate HTML for a single button (which when pressed, runs a command) - see buttons and toolbars string .getToolbar(...) - used to generate HTML for a toolbar (with buttons, which run commands) - see buttons and toolbars Demo App and further links You should find some code examples in this demo App JS Manage / Toolbar API Tutorial App History Introduced in 2sxc v02.00 Officially released & documented for use in 2sxc v08.06"
  },
  "js-code/dnn/jquery.html": {
    "href": "js-code/dnn/jquery.html",
    "title": "JQuery in DNN and 2sxc | 2sxc and EAV 10",
    "keywords": "JQuery in DNN and 2sxc <!-- Data Highlights --> <!-- ADAM --> <!-- Server --> <!-- Prepare --> <!-- Data Source --> <!-- Optimzers --> <!-- Process / Awesomize --> <!-- Libraries --> <!-- data formats --> <!-- Browser --> <!-- Frameworks --> <!-- App show parts --> <!-- Interact parts --> <!-- Edit parts --> <!-- Edit UI parts --> <!-- SPA parts --> <!-- Custom highlight boxes - can be controlled by in-page CSS --> you are here (click to zoom) - discover the stack .context-box-summary .frameworks-js { visibility: visible; } Often you'll need and want jQuery, but when you don't it shouldn't be loaded for performance reasons. Tip Removing jQuery and jQueryUI will boost your mobile PageSpeed like crazy. So only include it on pages where you really need it. How DNN Auto-Loades jQuery There is some history to this which we'll explain briefly. DNN made jQuery a first-class citizen around DNN 4, and since then most of the UI was jQuery based. For a while there even was a standard that buttons etc. should be built and styled with jQuery UI. That is not the case any more. You can now easily run DNN (at least in browsing mode, not editing) without jQuery. But because jQuery was always there developers never noticed that they could leave it away, and many parts like Templates would simply rely on them. There were also many things that automatically added jQuery but were never noticed. Here some important examples: 2sxc always used the ServicesFramework of DNN which internally auto-added jQuery Most DNN websites use popups for login, and just doing this automatically adds jQueryUI and jQuery to the page. You can easily stop this using the recipe Remove jQueryUI from my page In case your code is running on a page without jQuery but you need it, your code should tell DNN that you want jQuery, like this: Warning Don't manually add urls to the jQuery files, make sure you use the official API. This should help you prevent loading jQuery multiple times and avoid conflicts between jQuery version. Tip If you do need a newer version of jQuery, that is possible but needs some tweaking to get them to run side-by-side. It's done using the jQuery.noConflict() . How 2sxc loads jQuery in DNN Up until 2sxc 10.24, every 2sxc module automatically loaded jQuery because 2sxc used the ServicesFramework of DNN Starting from 2sxc 10.25 old templates auto-load jQuery for backward compatibility. This includes token-templates and Razor templates which don't have an @inherits statement at the beginning. Anything new done using the RazorComponent will not do that unless your template code requests it. In 2sxc 10.25 and newer, all core features of 2sxc don't need jQuery. So anonyomus browsing of your site won't require jQuery at all, even if you're doing API calls or using the $2sxc javascript API . But what you do need (if you're using the new RazorComponent ) is to tell 2sxc that you plan to use JavaScript and APIs, so that 2sxc can add the stuff to the page to make the magic happen. This is done with this line in your razor code: @Edit.Enable(js:true) Because 2sxc doesn't use jQuery any more for normal stuff, this will have the following effect: Add a special header to the page containing information needed for API calls Load the 2sxc.api.min.js in the correct way It's important to note that this will not load jQuery."
  },
  "js-code/commands/delete.html": {
    "href": "js-code/commands/delete.html",
    "title": "delete Command | 2sxc and EAV 10",
    "keywords": "delete Command <!-- Data Highlights --> <!-- ADAM --> <!-- Server --> <!-- Prepare --> <!-- Data Source --> <!-- Optimzers --> <!-- Process / Awesomize --> <!-- Libraries --> <!-- data formats --> <!-- Browser --> <!-- Frameworks --> <!-- App show parts --> <!-- Interact parts --> <!-- Edit parts --> <!-- Edit UI parts --> <!-- SPA parts --> <!-- Custom highlight boxes - can be controlled by in-page CSS --> you are here (click to zoom) - discover the stack .context-box-summary .edit-custom { visibility: visible; } This button let's a user really delete a content item (since 2sxc 8.9). How to use Here's a basic example showing a 2sxc-toolbar with a custom code: @Edit.Toolbar(toolbar: new { action = \"delete\", entityId = tag.EntityId, entityGuid = tag.EntityGuid, entityTitle = tag.EntityTitle }) The previous example just renders a delete-button. Here's an example creating an entire toolbar, incl. the delete-button. @Edit.Toolbar(Content, toolbar: new { entityId = Content.EntityId, entityGuid = Content.EntityGuid, entityTitle = Content.EntityTitle }) Note that for the delete-button to appear, the following conditions must be met: It is not an module-assigned item (also knows as content-mode), because in this case the item is in use, and it cannot be quick-deleted anyhow It has an entityId - used to show to the user to help him be sure he's deleting the right item It has an entityTitle - also shown to the user to be sure he's deleting the right thing It has an entityGuid - used as the ID when deleting the data as an extra level of security. Notes and Clarifications requires id, title and guid. otherwise the button won't appear Read also commands Demo App and further links todo History Introduced in 2sxc v08.09"
  },
  "js-code/commands/index.html": {
    "href": "js-code/commands/index.html",
    "title": "CMS Commands in JavaScript | 2sxc and EAV 10",
    "keywords": "CMS Commands in JavaScript <!-- Data Highlights --> <!-- ADAM --> <!-- Server --> <!-- Prepare --> <!-- Data Source --> <!-- Optimzers --> <!-- Process / Awesomize --> <!-- Libraries --> <!-- data formats --> <!-- Browser --> <!-- Frameworks --> <!-- App show parts --> <!-- Interact parts --> <!-- Edit parts --> <!-- Edit UI parts --> <!-- SPA parts --> <!-- Custom highlight boxes - can be controlled by in-page CSS --> you are here (click to zoom) - discover the stack .context-box-summary .edit-custom { visibility: visible; } Whenever you press a button in the edit-ui, a edit-command is handled by the javascript layer. These commands are things like edit an item on the screen open the layout -picker dialog for a content-block To keep things simple, these commands all have the convention of using a short command name like new , some parameters like entityId which differ for each command and usually some context like this is happening in the module 7503 . How to use Tip These examples are fairly technical - in most cases you just want the commands for custom toolbars. You can find them below. In most cases you don't have to even think about this, because the hover-buttons will automatically call the command as needed. But there are cases where you may want to do so yourself - for example with very custom buttons or if you want to automate something. Here's an example: <!-- quick version with name only --> <a onclick=\"$2sxc(this).manage.run('layout', event)\"> change layout </a> <!-- expanded version --> <a onclick=\"$2sxc(this).manage.run({ action: 'layout' }, event)\"> change layout </a> <!-- expanded version with many params --> <a onclick=\"$2sxc(this).manage.run({ action: 'new', contentType: 'BlogPost' }, event)\"> createBlogPost </a> These examples example gets the $2sxc-controller related to the <a> tag using $2sxc(this) and thereby giving it a context so it knows what module-id, etc. Then it executes the command. Here's a fairly realistic setup using Razor and custom buttons in HTML: @if(Edit.Enabled) { <ol> <li> <a onclick='$2sxc(this).manage.run({\"action\": \"layout\"})'>layout</a> </li> <li> <a onclick='$2sxc(this).manage.run({\"action\": \"new\", \"contentType\": \"Dummy\"})'>new</a> </li> <li> <a onclick='$2sxc(this).manage.run({\"action\": \"edit\", \"entityId\": @Content.EntityId})'>edit #@Content.EntityId</a> </li> <li> <a onclick='$2sxc(this).manage.run({\"action\": \"edit\", \"useModuleList\": true, \"sortOrder\": 0 })'>edit slot 0 of module list</a> </li> <li>manage table of <a onclick='$2sxc(this).manage.run({\"action\": \"contentitems\"})'>items of the type used in this template</a> or of <a onclick='$2sxc(this).manage.run({\"action\": \"contentitems\", contentType: \"Quotes\"})'>Quotes</a> </li> </ol> } Maybe you also want to put the command-construction in more code, like this: // the function which does this function openLayout(moduleId){ var command = { action: \"layout\" } $2sxc(moduleId).manage.run(command); } // the jquery call to do this on-load $(function() { openLayoutOnPageLoad(740); }) Running a Command Always use the sxc-controller of a module, then access the .manage.run(...) method to run a command. There are 3 calls you can use: run(\"layout\") - for simple commands requiring only the name run(\"new\", { contentType: \"BlogPost\" }) - for additional parameters run({ action: \"new\", contentType: \"BlogPost\" }) - does the same as above run(..., event) - if you had an event like click, it's best to always include it as last parameter Some Examples Every action in the UI is a command, and for it to run, it must know a few things, like var sxc = $2sxc(7523); // get sxc for moduleId 7523 var newCommand = { action: \"new\", contentType: \"BlogPost\" }; sxc.manage.run(newCommand); var editItemCommand = { action: \"edit\", entityId: 760 }; sxc.manage.run(editItemCommand); var editSlot7Params = { useModuleList: true, sortOrder: 7 }; sxc.manage.run(\"edit\", editSlot7Params); Command With Custom Code There is a command called custom which is meant to be used for this. Check out the example on Custom Code All Commands & Parameters (todo - update) To understand the internals, check out the source code . These are the currently available actions and their parameters: Action Name Purpose Description and Parameters new Edit Open the edit-dialog for a new content-item. * contentType Then it needs either the ID...: * entityId ...or it needs the position within the list: * useModuleList: true * sortOrder: [number] (important so it knows the position add Edit Adds a content-item to the current list of items, right below the item where it was clicked. * useModuleList: true (required to be true for it to work) * sortOrder: [number] (important so it knows the position) add-existing Edit New in 11.01. Adds a content-item to the current list of items, right below the item where it was clicked. But to do this, it shows the user a list of existing items. edit Edit Opens the edit-dialog. If the item is module-content it may also open the presentation-item as well. It needs either the ID...: * entityId ...or it needs the position within the list: * useModuleList: true * sortOrder: [number] (important so it knows the position dash-view - internal, don't use this app-import Manage Open the app-import dialog to import a new app. * [no parameters] metadata Edit todo - more documentation delete Edit delete (not just remove) a content-item. Needs: * entityId * entityGuid * entityTitle remove List Removes an item from a list of items. * useModuleList: true (required to be true for it to work) * sortOrder: [number] (important so it knows the position) moveup List Move a content-item up one position in the list * useModuleList: true (required to be true for it to work) * sortOrder: [number] (important so it knows the position) movedown List Move a content-item down one position in the list * useModuleList: true (required to be true for it to work) * sortOrder: [number] (important so it knows the position) instance-list List Open a dialog to manually re-order items in a list. (note: in older versions was called \"sort\" publish Edit Tells the system to update a content-items status to published. If there was a published and a draft before, the draft will replace the previous item. replace Edit Slot Only available on module-assigned content items. Will open the dialog to assign a different content-item in this slot. *‚Ä¶ <!-- <tr height=\"20\" style=\"height:15.0pt\"> <td height=\"20\" class=\"xl6522490\" align=\"left\" width=\"130\" style=\"height:15.0pt; width:98pt;font-size:11.0pt;color:black;font-weight:400;text-decoration:none; text-underline-style:none;text-line-through:none;font-family:Calibri\">item-history</td> <td class=\"xl6522490\" align=\"left\" width=\"84\" style=\"width:63pt;font-size:11.0pt; color:black;font-weight:400;text-decoration:none;text-underline-style:none; text-line-through:none;font-family:Calibri\">Versioning</td> <td class=\"xl6522490\" align=\"left\" width=\"436\" style=\"width:327pt;font-size:11.0pt; color:black;font-weight:400;text-decoration:none;text-underline-style:none; text-line-through:none;font-family:Calibri\">Review previous versions of this item and restore if necessary.</td> </tr> --> layout Design Opens the in-page dialog to change the layout of the current content. * [no parameters needed] template-develop Develop Opens the template-editor dialog in a new window. (note: in older versions was called \"develop\") template-query Develop Opens the pipeline/query-designer in a new window. It's invisible on content, and disabled if no pipeline is configured. template-settings Develop Change settings on the template currently used. contentitems Admin Opens the dialog to manage content-items for the current template. Will use the settings of the current template to open. * contentType (optional) - name of data-type to manage/open contenttype Develop Opens the dialog to view or change the current content-type, meaning you can change what fields it has, their types etc. app Admin Opens the app-admin dialog. app-settings Admin Opens the edit dialog for the app-settings. It's disabled if the app doesn't have setting-values to configure. app-resources Admin Opens the edit for app-resources (multi-language texts, labels etc.). It's disable if the app doesn't have resource-values to configure. zone Admin Opens the manage all apps dialog. custom Special Execute custom javascript * customCode - some JS like \"alert('hello');\" more Ui Only needed in toolbars, creates a \"‚Ä¶\" button which flips through the menu-buttons. <!--[if supportMisalignedColumns]--> <!--[endif]--> Beta Features Work in Progress: ContentItems with Filters Work in Progress: Delete Work in Progress: Code Demo App and further links You should find some code examples in this demo App JS Manage / Toolbar API Tutorial App Blog post about Calling commands from links History Used inside 2sxc since 01.00 Official API since 2sxc 08.06"
  },
  "js-code/toolbars/index.html": {
    "href": "js-code/toolbars/index.html",
    "title": "In-Page Edit Toolbars and Buttons | 2sxc and EAV 10",
    "keywords": "In-Page Edit Toolbars and Buttons <!-- Data Highlights --> <!-- ADAM --> <!-- Server --> <!-- Prepare --> <!-- Data Source --> <!-- Optimzers --> <!-- Process / Awesomize --> <!-- Libraries --> <!-- data formats --> <!-- Browser --> <!-- Frameworks --> <!-- App show parts --> <!-- Interact parts --> <!-- Edit parts --> <!-- Edit UI parts --> <!-- SPA parts --> <!-- Custom highlight boxes - can be controlled by in-page CSS --> you are here (click to zoom) - discover the stack .context-box-summary .edit-custom { visibility: visible; } When a user is logged on and has edit permissions, he should see buttons to edit his content or perform other actions. This is all done in HTML / JavaScript. By default, the server will render this in places defined by the template using placeholders like @Edit.TagToolbar(Content) and similar. Note that usually this HTML is generated by a server-side template, and will usually be wrapped in a if-user-logged-in condition. So if you want to do things differently, here's how - just remember that this is an advanced use case so it's a bit harder than what you're used to with 2sxc :). New much simpler method in v10.27+ Tip Before you try anything you should really check out the newest, easiest way to customize toolbars . How to Use v9.40 (old, not recommended) The most common use-case is actually to provide some HTML, which the JavaScript will pick up automatically and convert into a menu. The syntax was revised in 2sxc 9.40+, which is what we show here. The previous syntax is still supported, but not recommended any more: <!-- this is the default toolbar for first content item assigned to this module --> <div sxc-toolbar='{ \"toolbar\": {\"sortOrder\":0,\"useModuleList\":true} }'> </div> <!-- this is a toolbar for a content-item with the id 6875 --> <div sxc-toolbar='{ \"toolbar\": {\"entityId\":6875} }'> </div> <!-- this could be a custom toolbar for showing a new-button only --> <div sxc-toolbar='{ \"toolbar\": {\"contentType\":\"BlogPost\",\"action\":\"new\"} }'> </div> <!-- this would have two buttons, each configured in a way --> <div sxc-toolbar='{ \"toolbar\": [{ \"action\":\"edit\", \"useModuleList\":true, \"sortOrder\": 0, \"prefill\": { \"DocumentedOnPage\": \"page:@Dnn.Tab.TabID\", \"title\": \"@Dnn.Tab.Title\" } }, { \"action\" : \"new\", \"contentType\" : \"BlogPost\" }] }'> </div> What was Changed/Enhanced in 2sxc 9.40 There were some things which worked well, but bothered us as perfectionists :). It boils down to how much of the page html must be different just because editing is used. So this is what we wanted to change: the previous implementation always used a special class sc-element to mark the tag which detects mouse-over. This was necessary, because the tag itself was added in another place in the code. This is not necessary any more, since the sxc-toolbar attribute is now on the tag which does the hover-detect. the previous implementation created a <ul> tag in the source code. Though this was not a big issue, it just didn't feel right. the previous implementation spread the information for the toolbar on two attributes toolbar and settings - this just wasn't perfect. Now it's both in the sxc-toolbar attribute. How to Use before 2sxc 9.40 <!-- this is the default toolbar for content assigned to this module --> <ul class=\"sc-menu\" toolbar='{\"sortOrder\":0,\"useModuleList\":true,\"isPublished\":true}'></ul> <!-- this is a default toolbar for content-items not assigned to this module --> <ul class=\"sc-menu\" toolbar='{\"isPublished\":true,\"entityId\":6875}'></ul> <!-- this could be a custom toolbar for showing a new-button only --> <ul class=\"sc-menu\" toolbar='{\"contentType\":\"BlogPost\",\"action\":\"new\"}'></ul> <!-- this would have two buttons, each configured in a way --> <ul class='sc-menu' toolbar='[{ \"action\":\"edit\", \"useModuleList\":true, \"sortOrder\": 0, \"prefill\": { \"DocumentedOnPage\": \"page:@Dnn.Tab.TabID\", \"title\": \"@Dnn.Tab.Title\" } }, { \"action\" : \"new\", \"contentType\" : \"BlogPost\" }]'></ul> How it Works Internally, a lot will happen to actually turn that into a real, usually floating, toolbar. Basically what happens is a script picks up all cases of <* sxc-toolbar=...> and <ul class=\"sc-menu ...\"></ul> it will then pass it to a toolbar creator which will either create a standard-list of buttons, or a custom one the resulting buttons/links will be placed in <li> items and added to the <ul> tag But you could also do a whole lot more, including custom buttons and code (since 2sxc 08.06) <div sxc-toolbar='{ \"toolbar\": { \"groups\": [ { \"name\": \"my default list\", \"buttons\": \"edit,add,more\" }, { \"name\": \"list buttons\", \"buttons: \"sort,moveup,movedown,more\" }, { \"name\": \"really advanced stuff\", \"buttons\": [ \"app\", \"zone\", { \"command\":{ \"action\": \"custom\", \"customCode\": \"alert(&apos;hello&apos;)\" } \"icon\": \"icon-sxc-bomb\" }, \"more\" ] } ], \"defaults\": { \"entityId\": 740, \"contentType\": \"BlogPost\" } }}'> ... </div> All the configuration is in the sxc-toolbar attribute, which contains two main nodes: toolbar - see below settings - see Toolbar Settings In the old syntax (before 2sxc 9.40, using the <ul> tag, two attributes are handled toolbar or data-toolbar - see below settings or data-settings - see Toolbar Settings More Background The toolbar information is: an object with some properties (like entityId ) and no action verbs --> then it will auto-generate all default buttons { entityId: 17, isPublished: true } an object with some properties and 1 or more action verbs --> generate only these buttons { actions: \"new,edit\", useModuleList: true, sortOrder: 1 } an array with commands (objects with 1 verb) --> generate these Buttons [{ action: ...}, { action: ...}] on object containing a buton-group like { buttons: [ { command: { action: ...}}, { command: ...}] } a group of button-groups [ { buttons: ... }, {buttons: ...}] a full toolbar configuration { groups: [...], defaults: {...}, params: {...} } For a full scope of what is possible, you should read the js toolbar documentation . Demo App and further links JS Manage / Toolbar API Tutorial App History Introduced in 2sxc v02.00 Published API for use in templates in 2sxc v08.06 Enhanced / Standardized in 2sxc v09.40"
  },
  "js-code/toolbars/settings.html": {
    "href": "js-code/toolbars/settings.html",
    "title": "Toolbar Settings | 2sxc and EAV 10",
    "keywords": "Toolbar Settings <!-- Data Highlights --> <!-- ADAM --> <!-- Server --> <!-- Prepare --> <!-- Data Source --> <!-- Optimzers --> <!-- Process / Awesomize --> <!-- Libraries --> <!-- data formats --> <!-- Browser --> <!-- Frameworks --> <!-- App show parts --> <!-- Interact parts --> <!-- Edit parts --> <!-- Edit UI parts --> <!-- SPA parts --> <!-- Custom highlight boxes - can be controlled by in-page CSS --> you are here (click to zoom) - discover the stack .context-box-summary .edit-custom { visibility: visible; } Each in page toolbar can have some settings which control how it works and how it's shown. note: there is a blog post on using toolbar settings . How to use Here's a quick example: <div style=\"height: 100px\" class=\"sc-element\"> 100px tall area to show alignments floating left with more to the left <ul class=\"sc-menu\" data-toolbar='' settings='{ \"hover\": \"left\", \"align\": \"left\" }'></ul> </div> The above example will hover the toolbar when the mouse moves over this DIV but place it to the left hover: \"left\" and place the more button on the left side as well align: \"left\" . How it works Internally the toolbar configuration has a very flexible structure, so internally it will look a bit like { groups: [...], // array of groups settings: { hover: \"...\", autoAddMore: ..., show: \"...\" }, ... // more stuff } In many cases the <ul toolbar=\"...\"> tag will be very simple, and adding these settings would be very complex. Because of this, we added the attribute settings=\"{json} which is merged into that object. Settings and Values string autoAddMore : (null) | \"right\" | \"left\" will automatically add a \"...\" (more) button if multiple button groups are detected string hover : \"right\" | \"left\" | \"none\" (\"center\" ist still beta) determines where the toolbar appears when the mouse hovers over the area (usually a DIV) with the class sc-element string follow new in 11.06 \"none\" | \"initial\" | \"scroll\" | \"always\" tells the toolbar to follow the mouse - ideal for large content blocks where you need the toolbar even if otherwise it would be off-screen. Note: this used to default to scroll on the TagToolbar but was changed to none in 2sxc 11.06 because it caused too many UX issues. string show : \"hover\" | \"always\" by default any toolbar inside an element with a sc-element class will appear on hover string classes : (null) | any kind of string Read also InstancePurpose - which tells you why the current code is running so you could change the data added CustomizeData Demo App and further links You should find some code examples in this demo App FAQ with Categories More links: Description of the feature on 2sxc docs History Introduced in 2sxc ??.??"
  },
  "web-api/index.html": {
    "href": "web-api/index.html",
    "title": "2sxc Web API | 2sxc and EAV 10",
    "keywords": "<!-- Data Highlights --> <!-- ADAM --> <!-- Server --> <!-- Prepare --> <!-- Data Source --> <!-- Optimzers --> <!-- Process / Awesomize --> <!-- Libraries --> <!-- data formats --> <!-- Browser --> <!-- Frameworks --> <!-- App show parts --> <!-- Interact parts --> <!-- Edit parts --> <!-- Edit UI parts --> <!-- SPA parts --> <!-- Custom highlight boxes - can be controlled by in-page CSS --> you are here (click to zoom) - discover the stack .context-box-summary .browser-interact, .context-box-summary .process-apis { visibility: visible; } 2sxc Web API 2sxc has a fully featured WebApi for use in JavaScript or as Headless CMS. So you can call HTTP GET to an endpoint like app/News/content/NewsItems/ and get a list of news items. You can also create / modify data using REST, access Queries and work with your custom Web-APIs - across all 2sxc platforms (Dnn / Oqtane / Custom) and with the security you need. Simple Example Here's an example JavaScript which would run in a 2sxc News-App on a DNN page: // Get news as a promise var allNewsPromise = sxc.webApi.get('app/auto/content/News/'); // now log to console allNewsPromise.then(data => console.log(data)); This example has some magic happening in the background. Specifically 3 important things happen on the client before sending: The real URL which is requested is a bit longer, but the webApi takes care of that. The server needs to know what App and Module the script is calling from. This Context information is also added by the webApi . To add security, a crypto-token is added which will prove that the JavaScript requesting this is running on the page. This is also added by webApi . When the server receives the request, it too does important stuff. First it will use the URL and Context information to figure out what Site , Language and App should be accessed. The server will do some security checks to see if this request should be answered. Then it returns the data in a simple JSON format Get Started Step 1: Decide which Endpoint you need This checklist should help you decide: Getting Started Your 1-2-3 steps for using data endpoints are: Decide which endpoint you need Create / Publish the endpoint For standard endpoints, set the permissions as you need them For custom endpoints, write the C# code Write the code to read the data (typically in JavaScript) Conventions Used REST means that there is a url convention to access data like .../blogposts/25 REST also specifies that an HTTP GET is for reading, HTTP POST is for writing, etc. All the APIs use JSON for sending/receiving data. This is the default schema . Demo App and further links You should find some code examples in this demo App REST and WebApi Tutorial Razor Web API tutorials Recommended Reading Data CRUD API DotNet WebApi Concepts: Polymorphisms History Introduced Content-REST API in 2sxc 5.x Query added in 2sxc 8.10 Enhanced with Polymorph Editions in 2sxc 9.35 (allowing subfolder/api)"
  },
  "web-api/custom/custom-web-api-security.html": {
    "href": "web-api/custom/custom-web-api-security.html",
    "title": "Security & Permissions in Custom WebAPIs | 2sxc and EAV 10",
    "keywords": "Security & Permissions in Custom WebAPIs Important This page explains how security is configured in custom WebAPI controllers. But there is much more to security, so please read Security for 2sxc WebAPI and REST APIs as well. Custom WebAPI Security is configured using Attributes . These attributes can be placed on the class (in which case they apply to all actions/methods of that class) or on a specific method (in which case it only applies to that method). This example will NOT respond to Anonymous requests from outside: using System.Web.Http; public class BasicController : ToSic.Sxc.Dnn.ApiController { [HttpGet] public string Hello() { return \"Hello from the basic controller in /api\"; } } This example from the dnn web api tutorials will: using System.Web.Http; [AllowAnonymous] // define that all commands can be accessed without a login public class BasicController : ToSic.Sxc.Dnn.ApiController { [HttpGet] public string Hello() { return \"Hello from the basic controller in /api\"; } } And this example as well: using System.Web.Http; public class BasicController : ToSic.Sxc.Dnn.ApiController { [HttpGet] [AllowAnonymous] // only his command can be accessed without a login public string Hello() { return \"Hello from the basic controller in /api\"; } } Common Security Attributes for Custom WebAPI Controllers The exact set of attributes varies a bit on DNN and Oqtane, but we're working on a unified set. As of now, these attributes are common in DNN. You can apply all to both classes and methods: [AllowAnonymous] This allows non-identified users to use this endpoint. requires using System.Web.Http; [SupportedModules(\"2sxc,2sxc-app\")] This says to only respond to requests if they originate from a 2sxc module or a 2sxc-app Module. Note that this will only work if the Module Context is known. requires using DotNetNuke.Web.Api; [ValidateAntiForgeryToken] Verifies that the RequestVerificationToken in the header is valid. These requests will be blocked if the Anti-Forgery-Token is missing, invalid or is meant for another user. Note: this means such requests can only be called from a JS on a DNN page requires DotNetNuke.Web.Api; [DnnModuleAuthorize(AccessLevel = SecurityAccessLevel.Admin)] In place of the SecurityAccessLevel.Admin you can also use SecurityAccessLevel.Anonymous or other values . Note that this will only work if the Module Context is known. requires using DotNetNuke.Web.Api; Common Other Attributes (HttpGet, HttpPost, HttpDelete) These attributes [HttpGet] , [HttpPost] and [HttpDelete] are not really security attributes, but because they often lead to problems we figured we should mention them. Adding these to your method means that your method will listen to the Verbs mentioned, and only to these verbs. So a method like this: using System.Web.Http; public class BasicController : ToSic.Sxc.Dnn.ApiController { [HttpGet] [HttpDelete] public string Hello() { return \"Hello from the basic controller in /api\"; } } ...will only respond to GET and DELETE requests, but not to POST . Using Multiple Attributes You can use many attributes on the same class or method like this: [HttpGet] [ValidateAntiForgeryToken] [SupportedModules(\"2sxc,2sxc-app\")] [DnnModuleAuthorize(AccessLevel = SecurityAccessLevel.Admin)] { return \"Hello from the basic controller in /api\"; } In most cases it will do exactly what you expect - and each condition must be met for the command to process. Common Mistakes Combining HttpGet with ValidateAntiForgeryToken Warning Combining [HttpGet] and [ValidateAntiForgeryToken] will fail, as GET requests cannot add custom headers. Deny Access at Class level and Allowing at Method Level Warning Class level attributes are handled first, and if these result in denying the request then method-level attributes won't be checked. Using Context-Requiring-Attributes for External Access Warning Certain tags like [DnnModuleAuthorize(...)] or [SupportedModules(...)] require a context . If you plan to use the API from outside of the site (like from a mobile app) then those requests will not have the context, and fail. Using ValidateAntiForgeryToken for External Access Warning Classes/methods decorated with [ValidateAntiForgeryToken] will require the token, which is only available for calls made by JavaScript on the page itself. If you plan to use the API from outside of the site (like from a mobile app) then those requests will fail. Read also DotNet WebApi Security for 2sxc WebAPI and REST APIs - understanding Security for all Web API calls Context for 2sxc WebAPI and REST APIs - every request has a context, it's best you read up on that Demo App and further links You should find some code examples in this demo App Razor Web API tutorials REST and WebApi Tutorial Mobius Forms App History These security features have been part of DNN since ca. DNN 6.0"
  },
  "js-code/2sxc-api/sxc.webapi.html": {
    "href": "js-code/2sxc-api/sxc.webapi.html",
    "title": "The WebApi Helpers on the Sxc Controller | 2sxc and EAV 10",
    "keywords": "The WebApi Helpers on the Sxc Controller <!-- Data Highlights --> <!-- ADAM --> <!-- Server --> <!-- Prepare --> <!-- Data Source --> <!-- Optimzers --> <!-- Process / Awesomize --> <!-- Libraries --> <!-- data formats --> <!-- Browser --> <!-- Frameworks --> <!-- App show parts --> <!-- Interact parts --> <!-- Edit parts --> <!-- Edit UI parts --> <!-- SPA parts --> <!-- Custom highlight boxes - can be controlled by in-page CSS --> you are here (click to zoom) - discover the stack .context-box-summary .interact-2sxc { visibility: visible; } The WebApi object on the module-specific sxc -controller is for AJAX calls. It helps you in these advanced cases: to read/write content-items using REST to access your apps WebApi controllers How to use First you must ensure that you have the $2sxc manager on your page, which will get you a module-specific sxc controller. Read about the $2sxc manager here. Here's a simple example (assuming you have the $2sxc manager): <a onclick=\"$2sxc(this).webApi.get('app/auto/content/Category').then(handleResult);\"> get all Categories </a> The code above shows how the sxc-object is retrieved using the $2sxc(...) manager, based on the current context this how all items of type \"Category\" are requested how the result (promise) is passed on to handleResults for updating the view etc. Here's another quick example, calling a C# web-api endpoint: var sxc = $2sxc(27); sxc.webApi.post(\"Form/ProcessForm\") .success(function(result) { // .... }); How to Get the Current Context's sxc Controller Before you continue, make sure you know how to resolve/get your sxc -controller, as it is unique for each DNN-Module. This is because each action needs to know which module it belongs to. Read about the 3 ways to get this in the $2sxc Manager docs . Here you'll also find out more about the sxc-controller . Working with REST / HTTP Async Stuff Short note: the WebAPIs work like classic javascript promises, supporting .then(...) , .error(...) etc. The $2sxc(...).webApi has 4 commands .webApi.get(url, ...) .webApi.post(url, ...) .webApi.delete(url, ...) .webApi.put(url, ...) Each of these has the following parameters url or settings required string|object: a Url for the end-point OR a { ... } settings object params optional object: the url params like { id: 27, name: \"hello\" } data optional object: the data - in case of post / put, like { ... } preventAutoFail optional bool: if true, won't automatically show a default message on error, so that you can handle errors differently Quick examples: var sxc = $2sxc(27); sxc.webApi.post(\"Form/ProcessForm\", {}, data, true) .success(function() { // .... }) .error(function() { // ... }); This will call the C# WebApi controller FormController in the api folder and go for its ProcessForm command. It will use no url-params, but put a data object in the body (as json), and will do error-handling itself. Till we find time to document more, please consult the source Using App-Queries with $2sxc (TODO) Todo: must document more about this In short: use $2sxc(...).webApi.get(...) or $2sxc(...).webApi.post(...) etc. for the path-parameter, use a path starting with app/auto/query/[queryname] - 2sxc will take care of all the path resolutions if the path starts with app/auto/query/ Till we find time to document more, please consult the source Working with Custom C# App WebAPIs (TODO) TODO - must document more about what the web-apis are (link to more documentation) In short: use $2sxc(...).webApi.get(...) or $2sxc(...).webApi.post(...) etc. for the path-parameter, use a path starting with app/auto/api/[controller]/[action] - 2sxc will take care of all the path resolutions if the path starts with app/auto/api/ You can read more about the C# WebApi Server Side Short note: the WebAPIs work like classic javascript promises. So not like the data.on(event) implementation which is a bit special, this is very standard jQuery promise. Till we find time to document more, please consult the source Technical Features Explained todo Additional Properties of a Module Controller TODO - must document more about properties like isLoaded, lastRefresh, etc. that these are all internal-use and not guaranteed to stay stable in future versions Till we find time to document more, please consult the source Demo App and further links You should find some code examples in this demo App TimeLineJS all the JS-apps including AngularJS in the app-catalog More links: Description of the feature on 2sxc docs History Introduced in 2sxc 04.00"
  },
  "web-api/custom/custom-web-api-base-class.html": {
    "href": "web-api/custom/custom-web-api-base-class.html",
    "title": "Custom C# Web API Base Classes | 2sxc and EAV 10",
    "keywords": "Custom C# Web API Base Classes Any WebAPI controller in ASP.net inherits from a base class. This is a typical code you may see as an example: using System.Web.Http; [AllowAnonymous] public class BasicController : ToSic.Sxc.Dnn.ApiController // <-- This is the Base Class { [HttpGet] public string Hello() { return \"Hello from the basic controller in /api\"; } } In these docs we want to explain what the base class is for, and what you should use. Why Inherit from a Base Class A WebAPI controller does a lot of magic in the background so your code can stay small and simple. In classic ASP.net you would inherit from a class called ApiController (namespace System.Web.Http ) and in classic Dnn you inherit from a base class DnnApiController (namespace DotNetNuke.Web.Api ) which also inherits the standard ApiController . Tip Each additional layer adds functionality which will be available to your code. For example if you inherit from ApiController you can use objects such as Request and User in your code, and if you inherit from DnnApiController your code can also use PortalSettings or ModuleInfo . Recommended Base Class in 2sxc 10+ You can use any base class available in 2sxc, including the previously mentioned System.Web.Http.ApiController and DotNetNuke.Web.Api.DnnApiController and others. But by inheriting from ToSic.Sxc.Dnn.ApiController your code will have access to many more objects like these: App Data Content CmsContext You also get many helper commands like these AsDynamic(...) AsEntity(...) SaveInAdam(...) Tip As of 2sxc 10 we always recommend that your APIs inherit from ToSic.Sxc.Dnn.ApiController The Past: Avoid using SxcApiController In previous versions of 2sxc the recommended base class was ToSic.SexyContent.WebApi.SxcApiController . For compatibility reasons this still works, but we strongly urge you to switch over to the new ToSic.Sxc.Dnn.ApiController as the old base class may become deprecated. Caution We strongly recommend that you switch over to the new base class ToSic.Sxc.Dnn.ApiController . But be aware that some of the APIs have changed a bit, so switching will take a few minutes. You will probably see compile errors which tell you what to fix. The Future: A Hybrid Base Class As of March 2021 we're working on bringing 2sxc to [](xref:Platform Oqtane). Since Oqtane doesn't have Dnn objects like PortalSettings we must develop a new base class which will have an identical API across all platforms. This is still work in progress. Recommended Reading Web API Tutorials WebApi Concepts: Polymorphisms History Introduced in 2sxc 06.05 Enhanced with Polymorph Editions in 2sxc 9.35 (allowing subfolder/api) The ToSic.Sxc.Dnn.ApiController was introduced in 2sxc 10.25"
  },
  "web-api/custom/custom-web-api-files.html": {
    "href": "web-api/custom/custom-web-api-files.html",
    "title": "Custom C# Web API File Structure | 2sxc and EAV 10",
    "keywords": "Custom C# Web API File Structure Default Setup without Editions All your WebAPIs are C# files saved in the special folder called api . The folder must be in root of your 2sxc app, and the files have to end with ...Controller.cs (this is a convention in ASP.net). File: [app-folder]/api/[Your]Controller.cs Url: [api-root]/app/auto/api/[Your] Example File: /Portals/0/2sxc/DemoApp/api/PersonController.cs Url: GET : /api/2sxc/auto/app/auto/api/Person/List Read more about url schema in the URLs for 2sxc WebAPI and REST APIs Advanced Setup with Editions Tip New in 2sxc 9.35+ : you can now also create api folders as _subfolders to run the api in multiple editions. This is the polymorph feature . It let's you have the same api-controller in multiple editions, where the end-user is using live and you're doing open-heart-surgery in the background on a new edition like staging . File: [app-folder]/[edition]/api/YourController.cs Url: [api-root]/app/auto/[edition]/api/[Your] Example File: /Portals/0/2sxc/DemoApp/staging/api/PersonController.cs Url: GET : /api/2sxc/auto/app/auto/staging/api/Person/List Read more about url schema in the URLs for 2sxc WebAPI and REST APIs Recommended Reading Web API Tutorials WebApi Concepts: Polymorphisms History Introduced in 2sxc 06.05 Enhanced with Polymorph Editions in 2sxc 9.35 (allowing subfolder/api)"
  },
  "how-to/webapi/dotnet-webapi.html": {
    "href": "how-to/webapi/dotnet-webapi.html",
    "title": "| 2sxc and EAV 10",
    "keywords": "This page has moved to 2sxc Custom C# Web APIs"
  },
  "how-to/webapi/webapis.html": {
    "href": "how-to/webapi/webapis.html",
    "title": "| 2sxc and EAV 10",
    "keywords": "This page moved to 2sxc Web API"
  },
  "web-api/specs/webapi-context.html": {
    "href": "web-api/specs/webapi-context.html",
    "title": "Context for 2sxc WebAPI and REST APIs | 2sxc and EAV 10",
    "keywords": "Context for 2sxc WebAPI and REST APIs <!-- Data Highlights --> <!-- ADAM --> <!-- Server --> <!-- Prepare --> <!-- Data Source --> <!-- Optimzers --> <!-- Process / Awesomize --> <!-- Libraries --> <!-- data formats --> <!-- Browser --> <!-- Frameworks --> <!-- App show parts --> <!-- Interact parts --> <!-- Edit parts --> <!-- Edit UI parts --> <!-- SPA parts --> <!-- Custom highlight boxes - can be controlled by in-page CSS --> you are here (click to zoom) - discover the stack .context-box-summary .browser-interact, .context-box-summary .process-apis { visibility: visible; } Whenever the server receives an HTTP request it must determine what it's for to figure out what to do. Tip The Context contains default information about the request incl. the site/app it's for, what languages to use etc. In most cases the client will include the necessary information automatically. The following section is helpful if... ...you need to manually include the context, like when you're request originates from outside of the ecosystem ...you need to override some context information, like when your JS is on a German site but want to get the English data In these docs we explain what each part of the context does, where it's from, what it's for and how to optionally override it. 1. The Site / Portal Context (required) Since our platforms (DNN/Oqtane) could have multiple sites in the same installation, the first thing that must be determined is what site this request is for. How the Site is Automatically Detected In DNN a site is always identified by the root path to the site, as it's configured in DNN. Examples: https://www.2sxc.org is site 0 https://2sic.org is site 0 https://2sxc.org/en is site 0 https://2sxc.org/de is site 0 https://2sxc.org/dnn-tutorials/ is site 24 In Oqtane a site is always identified through a number in the route (the domain is ignored). Examples: .../1/api/... is site 1 .../2/api/... is site 2 What is Affected by the Site Context The Site context is important for various additional pieces of context: The languages available (can be different on each site) The primary language (configured per site) The current language (can only be one of the available languages or primary) The app (see below, apps are installed on sites) Providing an Own Value or Overriding the Default Just call the other endpoint with the correct URL. 2. Current Language The current language is necessary for read operations to determine what values to actually use. In case of a no-language or single-language site it's not important. How the Current Language is Automatically Detected In DNN the current language is part of the url, as configured in the site, so it's dependent on the Site Context. Here some examples: 2sxc.org/en would be configured to be en-US 2sxc.org/de would be configured to be de-DE de.2sxc.org would be configured to be de-DE In Oqtane the convention isn't clear yet (WIP) What is Affected by the Current Language All read operations in the API and internally will try to access values meant for that language. Return values will also prefer that language (if translations exist). Providing an Own Value or Overriding the Current Language The most common way to use another language is to use the appropriate url which matches that language. Another way to do it is to include a parameter in the request like ?language=en . Warning Setting the ?language=xxx parameter in DNN has a suprising performance penalty of ca. 200-300ms. So if you can, prefer to just use the correct initial path. 3. Page and Module Context (optional) Whenever the API call is used on a DNN or Oqtane page, the HTTP call will usually include this information in the request to assist in auto-detecting the App Context. How the Page and Module are Automatically Detected The standard implementation is that API-Calls include special HTTP headers with these IDs. These headers are used: PageId (number) ModuleId (number) Note For historical reasons, DNN includes a TabId which contains the same value as PageId . The backend will treat these as the same header. We changed this to PageId in v11 and for future stability please use PageId . What is Affected by the Page and Module Context The primary use for the Page/Module Context is figuring out what App Context to use. So if the Module 2472 on Page 51 on Portal 7 is a Blog App then, then the App Context will be this Blog App. The second use is providing data for this Module Instance . So if a module has content or data assigned to it (like a Category List showing 3 selected Categories), then this data will be available automatically. The third important use is for permission detection: if the current user has certain permissions on this page/module, then these permissions also apply to the current API request. If the Page/Module context is missing, then only default permissions apply. The final and obvious use is that certain backend APIs will know these values, so that objects like CmsContext.Page.Id have these values for the scripts to use. See also ICmsContext Providing an Own Value or Overriding the Default Page/Module The default calls on the 2sxc JS API including dnn-sxc-angular will automatically set these headers if it can. If you have a reason to include alternate values, just make sure that you change the headers either by modifying the request before it's sent, or by using another http-caller like jQuery. 4. App Context (required) All WebAPI operations happen inside an App. They are either Content/Query REST calls (so they apply to the app) or custom WebApis (which are in the app-folder) - so the App must always be known. How the App Context is Automatically Detected The App Context requires that the Site Context is already known. Then there are two ways for the App Context to be detected: If the Page Context and Module Context are known, then this automatically leads to the app to be used, as it's the app on that module. Note: In rare cases the page and module are set, but the app has not been selected yet. This edge case only affects internal APIs of 2sxc, not the normal use we discuss here If Page/Module are not known or not provided, then the app is chosen based on the App-Name in the url. This is the default mechanism used when calling endpoints from other pages or mobile apps. If both the Page/Module Context and the App-Name are provided, then the App-Name is prioritized. If it is about the same App, then the full context (with Page/Module) is used, allowing more permissions to work. If neither Page/Module nor App Context are known, then the request will fail. What is Affected by the App Context The App Context will be used for almost everything, including these aspects: The data and configuration used ( App.Data etc.) The path to code (like custom WebApi Controllers) Permissions on the App or Content-Types Providing an Own Value or Overriding the Default App Context To access another app you will usually supply another App-Name in the url for the API-Call. In rare cases you may also provide other Page and Module Context headers, but this is usually not a good idea. 5. Current User (required) All operations happen in the context of a user, either Anonymous or the Current User Identity . How the Current User is Automatically Detected The current user is always provided by the environment (DNN or Oqtane). If no user is identified, the platform always tells 2sxc that the user is Anonymous . What is Affected by the Current User Read / Write permissions (either directly or indirectly if a user is in a group with permissions) Read-Draft permissions (admins may also see data which isn't published yet) Identity used when saving data Providing an Own Value or Overriding the Default App Context The user is fixed to being the real user logged in (or Anonymous). So if you need to execute something in another identity, make sure your system logs into Dnn/Oqtane using the built-in mechanisms (like JWT) and then perform the request using that authentication. 6. Other: Edition (optional) This only applies to custom WebAPI controllers. Custom WebAPI controllers are usually stored in the folder [App-Root]/api . You can also place them in subfolders like [App-Root]/live/api in which case live would be an edition. This allows you to have multiple editions of the same controller for staging, testing and more. As it's not really context information, it's only mentioned here. To find out more, read about the URL Schema and about Polymorphisms . 6. Other: RequestVerificationToken (maybe optional) Dnn and Oqtane have a security system to ensure that requests are coming from the page itself and that they are using the right login. This is not really context, so the full mechanism is explained in [Security][xref:WebApi.Specs.Security]. Read also URL Schema Concepts: Polymorphisms You should find some code examples in this demo App Razor Web API tutorials REST and WebApi Tutorial Mobius Forms App History Introduced in 2sxc 5.x Query added in 2sxc 8.10 Enhanced with Polymorph Editions in 2sxc 9.35 (allowing edition-folder/api)"
  },
  "web-api/specs/url-schema.html": {
    "href": "web-api/specs/url-schema.html",
    "title": "URLs for 2sxc WebAPI and REST APIs | 2sxc and EAV 10",
    "keywords": "URLs for 2sxc WebAPI and REST APIs <!-- Data Highlights --> <!-- ADAM --> <!-- Server --> <!-- Prepare --> <!-- Data Source --> <!-- Optimzers --> <!-- Process / Awesomize --> <!-- Libraries --> <!-- data formats --> <!-- Browser --> <!-- Frameworks --> <!-- App show parts --> <!-- Interact parts --> <!-- Edit parts --> <!-- Edit UI parts --> <!-- SPA parts --> <!-- Custom highlight boxes - can be controlled by in-page CSS --> you are here (click to zoom) - discover the stack .context-box-summary .browser-interact, .context-box-summary .process-apis { visibility: visible; } The URL Schema describes how the paths look to access WebAPIs. When using $2sxc JS or other helpers like dnn-sxc-angular most if this is automatic. So this information is most usefull if you are doing something very custom or accessing 2sxc APIs from externally (like mobile apps). Finding the right URLs in the Admin-Dialogs Tip Starting in 2sxc 11.10+ the admin-UI has built-in help to get started. These UIs also show sample code and everything. So you probably don't need to read the stuff here and just go ahead with that. Tip In 2sxc 11.10 this dialog was introduced for the Data section, and we'll add similar sections for Query and WebApi . So the remaining information on this page is really only for those who really want to dive in deep. Note about Platform and Version Differences The exact schema for the url varies depending on the platform you're using. So DNN 7 is different from DNN 9, and Oqtane is different again. Also older versions of 2sxc had URLs which still work today but are not recommended any more, because they were not well structured. In 2sxc 11.10+ we introduced REST-API help dialogs in the Admin-UI, so from now on you 2sxc will tell you what URLs you can use. So the information you find here is valid, but you probably don't need it URL Schema Specifications (Advanced) One of the most confusing aspects when using the REST API or custom WebApis is finding the right URL to talk to the API. Read this to help you understand what's going on and get started quickly. Every 2sxc REST URL is built with the following parts: [root]/app/[app-identity]/[app-part]/[specifics] The root is determined by DNN and changes a bit by DNN version, portal, and language configuration. more The app-identity says what app we're addressing. It's often auto for auto-detection, but when auto-detection isn't available, it's the app-folder name. more the app-part determines if we're accessing content , query or api of the app. The specifics is a path part describing what exactly what we're accessing and varies depending on the API. Part 1: The Root Path The Root in DNN 9+ In DNN 9 the root was shortened to: [portal-root-with-language]/api/2sxc/... Note The old root from DNN 7 and 8 still work in DNN 9 for compatibility. The Root in DNN 7 and 8 DNN 7 & 8: [portal-root-with-language]/desktopmodules/2sxc/api/... Warning An easy thing to overlook is that in DNN 7 and 8 it was 2sxc/api but in DNN 9 it's api/2sxc The Root in Oqtane This is still WIP, but most likely it's [domain]/[site-id-number]/api/2sxc/... Part 2: The App-Identity When to use or not-use Auto-Detection auto The App-identity can be either the word auto to use auto-detection, or the app-folder-name if you can't use auto-detection. Tip Whenever you're working in DNN and accessing the endpoint from a module that contains the same App, then you should use auto-detection. Warning Auto-Detection relies on DNN mechanisms to detect the Context (usually sending the PageId and ModuleId in HTTP-headers). 2sxc uses these headers to figure out what App you're using. If something fails in auto-detection, you're probably not using the normal DNN conventions for making REST calls. Warning When calling an endpoint from another website or a mobile App, you cannot use auto but must specify the app-folder name. Or you can provide Context by adding ?PageId=...&ModuleId=... to the url. Tip If you're not using auto-detection, then the root path must be absolutely correct. Here's why: If you have multiple portals then each portal could have other apps, or sometimes even the same app (like a Blog app). In this case, the root-path says what portal is being used, which in turn is important to get the correct app. App-Identity Examples To access an API (in this example the content ) from JS code in the same app you can rely on auto-detection of the app, like this: .../app/auto/content/... To access the same Glossary-App from elsewhere, like from the skin (for example, to highlight all words to which your glossary-app has definitions), from another app, or from another website, you would specify the folder name as auto-detection won't work. Like this: .../app/Glossary/content/... This applies to all endpoints like content , query , api . Part 3: App-Part Content, Query or Web-Api Part 3a: App-Part Content If your part is content then you're using the normal content/entity REST API. It supports all common HTTP verbs. In this case you have the following possibilities after content/ : .../content/[YourContentType] HTTP GET will retrieve all items of this type .../content/[your-content-type]/[item-id] where item-id is the number or the GUID HTTP GET will get one item HTTP POST is used to create an item or update it HTTP DELETE will delete the item Warning This requires that permissions are configured to allow it. The permissions are very powerful so make sure you understand them. Tip You can also configure permissions in ways that allow users to only create draft items (which would then require an admin to publish it) Content Example Assume you have the blog-app installed and your JS would request a JSON from this endpoint (logged in as host, so security is not an issue): [root-path]/app/auto/content/BlogPost ...then your JS would receive a JSON with all BlogPost items. More examples: Reading [root-path]/app/auto/content/BlogPost/1050 would give you exactly one BlogPost item (with the id 1050) HTTP POST to [root-path]/app/auto/content/BlogPost/1050 with a POST body of { \"Title\": \"changed title\"} would let you update the item 1050. Part 3b: App-Part Query The Query endpoint can be accessed on .../query/[your-query-name] . Note that Query endpoints only support the HTTP-verb GET, since it's read-only. Warning This requires that permissions are configured to allow it. The permissions are very powerful so make sure you understand them. Tip Make sure you give your queries simple names without spaces if you intend to use them in REST calls. Tip Queries can also expect url-parameters if they are configured to do this. So if you query has an ID-filter which expects a token [QueryString:id] you can also call your query like .../app/auto/query/GetWithId?id=27 Query Example Assume you have the blog-app installed and your JS would request a JSON from this endpoint (logged in as host, so security is not an issue): [root-path]/app/auto/query/BlogPostsByAuthor?Author=Daniel%20Mettler This would run the pre-defined query and return the Blog Posts of the author Daniel Mettler . Part 3c: App-Part Custom C# Web Api Custom WebAPI use one of these schemas .../api/[controller-name]/[action-or-more-params] .../[edition]/api/[controller-name]/[action-or-more-params] Your C# code determines what HTTP-verbs will work (GET, POST, etc.). Your code is also responsible for determining what permissions are used, like Anonymous etc. The [edition] is relevant if you're using Polymorphism . So if you don't specify an edition, the controller is expected to be in the [AppFolder]\\api but if you do use polymorphism the controller must be in [AppFolder]\\[edition]\\api . Read also DotNet WebApi Concepts: Polymorphisms Demo App and further links You should find some code examples in this demo App Razor Web API tutorials REST and WebApi Tutorial Mobius Forms App History Introduced in 2sxc 5.x Query added in 2sxc 8.10 Enhanced with Polymorph Editions in 2sxc 9.35 (allowing edition-folder/api)"
  },
  "web-api/custom/custom-web-api.html": {
    "href": "web-api/custom/custom-web-api.html",
    "title": "2sxc Custom C# Web APIs | 2sxc and EAV 10",
    "keywords": "2sxc Custom C# Web APIs You can easily create custom C# WebAPIs, and then access them from JavaScript or anywhere. What these endpoints do is completely up to you. <!-- Data Highlights --> <!-- ADAM --> <!-- Server --> <!-- Prepare --> <!-- Data Source --> <!-- Optimzers --> <!-- Process / Awesomize --> <!-- Libraries --> <!-- data formats --> <!-- Browser --> <!-- Frameworks --> <!-- App show parts --> <!-- Interact parts --> <!-- Edit parts --> <!-- Edit UI parts --> <!-- SPA parts --> <!-- Custom highlight boxes - can be controlled by in-page CSS --> you are here (click to zoom) - discover the stack .context-box-process .process-web-api { visibility: visible; } Access Endpoints with JavaScript You can find a good example on live tutorials or in the Mobius Forms App . Calling these is as follows: .../app/auto/api/[YourName] when accessing a WebApi of the current app (from a dnn-page with this module), as then 2sxc uses auto-detect .../app/[app-folder]/api/[YourName] when using this endpoint from external, as auto-detect can't work then. Most WebApi Actions will require additional parameters. Just add them as url-parameters like ?param1=This&param2=That Discover More in the Web API Tutorials We have an rich series of Web API tutorials . You should really check them out üëç. Basic Example A file in your app in the api folder called BooksController.cs could look like the following: using DotNetNuke.Security; using DotNetNuke.Web.Api; using System; using System.Collections.Generic; using System.Linq; using System.Net.Http; using System.Web.Http; public class BooksController : ToSic.Sxc.Dnn.ApiController { [HttpGet] [DnnModuleAuthorize(AccessLevel = SecurityAccessLevel.Anonymous)] [ValidateAntiForgeryToken] public object Persons() { return new ToSic.Sxc.Conversion.DataToDictionary(Edit.Enabled) .Convert(App.Data[\"Persons\"]); } } The custom controller BooksController must have the same name as the file and extends the ApiController controller. It has a method returning all items of the Persons data type. The method is decorated with several attributes: [HttGet] defines that the method must be invoked with HTTP GET [DnnModuleAuthorize(AccessLevel = ...)] defines the permission an invoker must have [ValidateAntiForgeryToken] ensures that a security token from the cookies is validated before the mehod is invoked The custom controller can be called with JavaScript like this: <!-- this ensures the $2sxc scripts are loaded --> @Edit.Enable(js: true) <!-- the button which loads everything --> <button type=\"button\" class=\"btn btn-primary\" onclick=\"getPersons(this)\"> Get Persons Custom </button> <script> // this script does the API call and then shows the result function getPersons(moduleContext) { $2sxc(moduleContext) .webApi.get('app/auto/api/books/persons') .then(function (results) { alert('Found ' + results.length + ' persons. \\n' + 'The first one is \"' + results[0].FirstName + ' ' + results[0].LastName + '\"\\n\\n' + 'The raw JSON: \\n' + JSON.stringify(results) ); }); } </script> The $2sxc API ensures that the GET request is send to the correct url /DesktopModules/2sxc/API/app/auto/api/Books/Persons . You can also read more about the sxc Controller . The Awesomeness of these API Controllers First and foremost, these API controllers let you run your code as you wish. But there's a lot more that make this the ideal choice for your code: Fast Development without ever Restarting 2sxc Web API Controllers are stored in your app as pure source code, and you can edit them at runtime. They will be compiled on the fly and don't require DNN to restart. The built in source-code editor in 2sxc lets you make simple changes through your browser. And if you want more power then just open it in Visual Studio or Visual Studio Code. Simple Distribution and Tweaking 2sxc Apps can easily be exported and imported to other solutions. What's also typical is that new copies of the App may need some modifications to better suit the new needs. Since the C# files are included as source you can easily adapt the controllers to your needs. All 2sxc Objects Initialized Much of the productivity with 2sxc comes with the fact that so much is already done. When you create custom 2sxc Web APIs you automatically get everything like App and Data objects prepared for the context your code is running in. Notes Instead of App.Data[\"MyData\"] you can fetch data from another data source provided by 2sxc (for exmple from the App.Query[\"MyQueryData\"] ) Sxc.Serializer.Prepare(...) converts the object returned by App.Data[\"MyData\"].List to a dynamic and serializable object Recommended Reading Web API Tutorials WebApi Concepts: Polymorphisms History Introduced in 2sxc 06.05 Enhanced with Polymorph Editions in 2sxc 9.35 (allowing subfolder/api)"
  },
  "net-code/koi/index.html": {
    "href": "net-code/koi/index.html",
    "title": "Koi Library | 2sxc and EAV 10",
    "keywords": "Koi Library 2sxc includes Koi - a helper library to let components / modules know what CSS framework is used, and use that information to create templates which adjust to that CSS framework. Tip 2sxc 11 introduced Polymorphism which lets you place different editions of a Razor file in folders matching various CSS frameworks. This is easiest way to leverage Koi, and your code doesn't even need to know about it. Discover More in the Koi Tutorials We have an rich series of Koi tutorials . You should really check them out üëç. Example The following example will automatically include Bootstrap4 from a CDN if the theme doesn't already include it. @using Connect.Koi; @if(!Koi.Is(\"bs4\")) { <link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css\" integrity=\"sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T\" crossorigin=\"anonymous\"> } Learn to Leverage RazorBlade Visit Connect-Koi Website Check out the Koi Tutorials Install the default content-templates and discover how it's used there"
  },
  "web-api/specs/webapi-security.html": {
    "href": "web-api/specs/webapi-security.html",
    "title": "Security for 2sxc WebAPI and REST APIs | 2sxc and EAV 10",
    "keywords": "Security for 2sxc WebAPI and REST APIs <!-- Data Highlights --> <!-- ADAM --> <!-- Server --> <!-- Prepare --> <!-- Data Source --> <!-- Optimzers --> <!-- Process / Awesomize --> <!-- Libraries --> <!-- data formats --> <!-- Browser --> <!-- Frameworks --> <!-- App show parts --> <!-- Interact parts --> <!-- Edit parts --> <!-- Edit UI parts --> <!-- SPA parts --> <!-- Custom highlight boxes - can be controlled by in-page CSS --> you are here (click to zoom) - discover the stack .context-box-summary .browser-interact, .context-box-summary .process-apis { visibility: visible; } All WebAPI calls in Dnn, Oqtane and 2sxc have some security features. In the basic use cases it's straightforward: the current user may do some things, and that should be allowed. These docs should help you understand where these things are configured and what to change if you need adjustments. Request Security Each request contains information needed for the backend to determine if this request should be answered or not. In Dnn and Oqtane this is the User Identity and the RequestVerificationToken . User Identity By default, the user is logged in using normal web conventions and from then on the user will have an encrypted cookie identifying this person. In advanced scenarios you may also use JWT aka Json Web Tokens . This is useful in mobile app scenarios and scenarios where the client application is remote (like a web-server or a SPA). Consult the docs of Dnn or Oqtane to find out how to use this. You could also use custom login systems like OAuth, but in these cases you will really need to figure out how to implement it in Dnn or Oqtane. Anti Forgery Token: RequestVerificationToken ASP.net has a feature to prevent XSS (Cross Site Scripting / Cross-Site Request Forgery). To make this possible, pages viewed by a user have some hidden key included which is encrypted to include identity-information for this user. It is included in all HTTP requests except for GET requests. If an endpoint is secured to check for this using [ValidateAntiForgeryToken] , then only requests containing this header will be processed. Tip Not all endpoints require this, but many do. It's commonly enforced on admin-endpoints and on any endpoint which are not expected to be used from outside of the site. It's best practice to require this where possible. Warning GET requests don't include this header, so don't enforce checking this in the backend for GET endpoints. When you use standard 2sxc JS WebAPI calls, the RequestVerificationToken is automatically included in the request. If you use your own JS API stack or plain vanilla browser implementations, make sure you add it. REST Content and Query Endpoint Security The built-in Content and Query endpoints use configuration based security. Prerequisites: Platform Permissions are OK Just to be aware of the obvious: if the platform (Dnn/Oqtane) don't allow access to the endpoints for whatever reason, then even the built-in endpoints won't do anything. Default Security Configuration: Nothing is allowed Both Content and Query are by default only available to admins and super-users. To make these available to other users (incl. Anonymous) this must be configured. Opening Security Configuration These are the places you can configure to open security: On an App you can give general permissions that apply to all content types. This is usually not recommended. On a Query you can configure read permissions for specific users or user groups. On a Content-Type (the schema that says what fields exist) you can configure many permissions incl. read and write. You can even configure more exotic permissions like: Anonymous users can create data, but they are set to draft and not visible Registered users can create data and only edit data which they created Note Permissions are all locked by default, and adding permissions will only open up permissions. There are no deny-permissions. Warning Some permissions like If the user has View permissions, allow Read require a Module Context since that's required to detect if the condition View Permissions is met. Custom WebAPI Permissions This is documented separately in Security & Permissions in Custom WebAPIs Read also DotNet WebApi Context for 2sxc WebAPI and REST APIs - every request has a context, it's best you read up on that Concepts: Polymorphisms Demo App and further links You should find some code examples in this demo App Razor Web API tutorials REST and WebApi Tutorial Mobius Forms App History Introduced in 2sxc 5.x Query added in 2sxc 8.10 Enhanced with Polymorph Editions in 2sxc 9.35 (allowing edition-folder/api)"
  },
  "web-api/content-rest-web-api.html": {
    "href": "web-api/content-rest-web-api.html",
    "title": "Content REST and CRUD Web API | 2sxc and EAV 10",
    "keywords": "Content REST and CRUD Web API <!-- Data Highlights --> <!-- ADAM --> <!-- Server --> <!-- Prepare --> <!-- Data Source --> <!-- Optimzers --> <!-- Process / Awesomize --> <!-- Libraries --> <!-- data formats --> <!-- Browser --> <!-- Frameworks --> <!-- App show parts --> <!-- Interact parts --> <!-- Edit parts --> <!-- Edit UI parts --> <!-- SPA parts --> <!-- Custom highlight boxes - can be controlled by in-page CSS --> you are here (click to zoom) - discover the stack .context-box-summary .browser-interact, .context-box-summary .process-headless { visibility: visible; } 2sxc provides a full set of REST endpoints for CRUD (Create, Read, Update, Delete) operations like: Read a list of all items/entities Read a single item/entity Create an item/entity Update an item/entity Delete an item/entity Tip Starting in 2sxc 11.10+ the admin-UI has built-in help to get started. These UIs also show sample code and everything. So you probably don't need to read the stuff here and just go ahead with that. How to Read Content-Items/Entities Assume you have the blog-app installed and your JS would request a JSON from this endpoint (logged in as host, so security is not an issue): [root-path]/app/auto/content/BlogPost ...then your JS would receive a JSON with all BlogPost items. Reading [root-path]/app/auto/content/BlogPost/1050 would give you exactly one BlogPost item (with the id 1050) Tip To figure out the exact path and the [root-path] part, best read about it in the admin-ui or work your way into the URLs for 2sxc WebAPI and REST APIs How to Create Content-Items/Entities Doing an http POST to this [root-path]/app/auto/content/BlogPost with a POST body of { \"Title\": \"changed title\"} would let you create the item. You will get a return message containing ID, GUID etc. of the new item. If your POST package also contains an EntityGuid then this will be used as the GUID for the new item. How to Update Content-Items/Entities Doing an http POST to this [root-path]/app/auto/content/BlogPost/1050 with a POST body of { \"Title\": \"changed title\"} would let you update the item 1050. How to Delete Content-Items/Entities Doing an http DELETE to this [root-path]/app/auto/content/BlogPost/1050 would delete the item 1050. JavaScript Helpers The $2sxc and the sxc Controller make it really easy to use this. Best to get familiar with them. About Security / Permissions Warning You are usually developing as a super-user, in which case these endpoints automatically work. If you want normal users to do certain things like create items, you need to configure the permissions . To use these endpoints for normal users, you would need to enable the permissions and then you can access them using the REST URLs. reading data requires read-permissions on that content-type writing data requires write-permissions or a content-type or on a specific item (owner-permissions) Use this Checklist to get started: Recommended Reading General WebApi Specs URL Schema History Introduced Content-REST API in 2sxc 5.x Added in-admin help to access it in 11.10"
  },
  "js-code/toolbars/advanced.html": {
    "href": "js-code/toolbars/advanced.html",
    "title": "Toolbars and Buttons | 2sxc and EAV 10",
    "keywords": "Toolbars and Buttons <!-- Data Highlights --> <!-- ADAM --> <!-- Server --> <!-- Prepare --> <!-- Data Source --> <!-- Optimzers --> <!-- Process / Awesomize --> <!-- Libraries --> <!-- data formats --> <!-- Browser --> <!-- Frameworks --> <!-- App show parts --> <!-- Interact parts --> <!-- Edit parts --> <!-- Edit UI parts --> <!-- SPA parts --> <!-- Custom highlight boxes - can be controlled by in-page CSS --> you are here (click to zoom) - discover the stack .context-box-summary .edit-custom { visibility: visible; } When a user is logged on and has edit permissions, he should see buttons to edit his content or perform other actions. This is all done in HTML / JavaScript. How to use The most common use-case is actually to provide some HTML, which the JavaScript will pick up automatically and convert into a menu. You can read more about this in Html Toolbars and Buttons . You can also generate the html as needed - for example when working with a javascript template in AngularJS, React, Ember etc. Here's a small example: var btnHtml = $2sxc(740).manage.getButton({ action: \"new\", contentType: \"BlogPost\" }); var toolbarHtml = $2sxc(740).manage.getToolbar({ action: \"new,edit,add\", entityId: 203 }); So this is really it. There are only two commands you must know: ...getButton(...) ...getToolbar(...) The rest of the magic lies in the configuration objects which you pass into these buttons. So let's continue with that. A Deeper Look Inside the System The following terms help you understand what we're doing: 2sxc has many commands like new , edit etc. which you can run with parameters like: command = { action: 'new', contentType: 'BlogPost'}; a button will run such a command when clicked, but for it to work, the button must have the command ready, including the necessary parameters. In JavaScript a button is defined like: btn = { command: { action: \"...\", ...}, icon: \"...\", ... }; and will later be converted to HTML like <a onclick='$2sxc(this).manage.run({\"action\": \"new\", \"contentType\": \"Dummy\"})'>new</a> a button group is an array of buttons, plus some shared specs like group = { buttons: [ { command: ...}, { }, { }], defaults: {...}, ... }; this will later be converted to a list of <li> nodes containing buttons a toolbar contains an array of button groups and again some shared specs / defaults, like toolbar = { groups: [ ... ], defaults: ...}; which will also be converted to the list of <li> nodes, but shows only one group at a time until the user presses a more button The full object tree of a toolbar is fairly sophisticated, and in most cases you can use shorthands which will be expanded internally before use. So you'll write // this is what you would normally write var toolbar = { action: \"new,edit,sort\", contentType: \"BlogPost\", useModuleList: true, sortOrder: 2 }; // which internally expands to this: var toolbar = { groups: [{ buttons: [{ title: \"Toolbar.New\", command: { action: \"new\", contentType: \"BlogPost\" }, icon: \"icon-sxc-plus\", addCondition: true, // more stuff here },{ title: \"Toolbar.Edit\", command: { action: \"edit\", useModuleList: true, sortOrder: 2 }, icon: \"icon-sxc-pencil\", addCondition: true, // more stuff here }, { // etc. }] }] } In most cases you just care about the shorthand. But in advanced cases where you really want to affect the behavior, you may go want to go deeper. Buttons and Commands Buttons are explained in more details here Commands which run when a button is pressed are here Custom commands which run your JS are here Button group This is just a simple object containing an array of buttons and some more settings which are rarely used and not documented yet. var group = { name: \"...\", buttons: \"...\", defaults: { // ... } }; var group2 = { buttons: [ { action: \"new\" }, { action: \"edit\", icon: \"icon-sxc-bomb\" }, \"button3\", { title: \"hello there\", command: { action: \"new\", } } ], defaults: { // todo } } Toolbar and Toolbar Configuration The toolbar can be defined very precisely, but in most cases you will opt for a short format which is expanded internally. Let's look at it: // very compact version var tb1 = { action: \"new,edit,moveup\", contentType: \"BlogPost\", entityId: 17 }; // array version var tb2 = [{ button1 }, { button2 }] // very expanded edition var tb2 = { groups: [ { name: \"group 1\", buttons: \"new,edit,more\" }, { name: \"group 2\", buttons: \"moveup,movedown,more\" } ], defaults: { contentType: \"BlogPost\", //... } }; Toolbar settings You can customize hover behavior , show behavior and more. Read about it in the toolbar settings . Custom Buttons with Custom Commands You can easily create custom buttons with custom icons, parameters and even custom scripts. It's not well documented yet, but it's best to just look through the tutorial app below. It's also explained more in the Html Custom Code Demo App and further links You should find some code examples in this demo App JS Manage / Toolbar API Tutorial App History Introduced in 2sxc v01.00 Public API since 2sxc v08.06"
  },
  "specs/cms/dnn-evoq-page-publishing.html": {
    "href": "specs/cms/dnn-evoq-page-publishing.html",
    "title": "Moved to | 2sxc and EAV 10",
    "keywords": "Moved to DNN/Evoq Page Versioning / Publishing and Workflow"
  },
  "specs/roadmap/history.html": {
    "href": "specs/roadmap/history.html",
    "title": "History of the EAV and 2sxc Code Base | 2sxc and EAV 10",
    "keywords": "History of the EAV and 2sxc Code Base Here we'll track important changes, especially feature additions. Breaking Changes in EAV and 2sxc may also be relevant to you. Version 1-7 (2012-2016) Didn't find time to document this :) Version 8 Version 8.00 - 8.8 Didn't find time to document this :) Version 8.09 [x] Very Rich Content (Inner Content 2.0) [x] Item-Delete directly from in-page toolbar Version 8.10 [x] Shuffle data sources (to randomize items) [x] Public (anonyomous) REST API for query and read/write content-items Version 8.11-8.12 Mostly smaller bugfixes Version 9 Version 9.0 [x] Change data access to Entity Framework Core 1.1 [x] Change IoC Layer to use .net Core mechanisms [x] Replace Quick-Dialogs with Angular4 implementation Version 9.1 [x] Move primary quick-dialog GUI to bottom of page Version 9.3 [x] Item-Level versioning, history and rollback Version 9.4 [x] Drop all dependencies to Telerik - file browser using ADAM Version 9.5 [x] Support for DNN/Evoq Page Publishing Version 9.6 [x] Extensive logging system to watch all internals Version 9.7 - the JSON-Content-Types & Entities Upgrade [x] New features in entity json serialization [x] Support for schema-free (very dynamic) entities [x] new features in content-type json serialization [x] defined json format for content-types [x] full serialization and deserialization of json-based content types [x] SQL IRepository storage enhancements [x] extended SQL table Entities to also store AppId and ContentType (name) to ensure that json-entities can be stored [x] Support to persist entities as JSON in repository (DB) [x] file-storage implementation of IRepository loader, to created a standard-based app-content-types provider [x] Ability to provide file-based json content-types at a system level, which is probably the better solution for most scenarios (more flexible, easier to spot changes, etc.) [x] global content-types system [x] Support for code-provided content-types, which allows faster feature-evolution [x] Support for JSON based i18n on code-provided content-types, to allow better translation removed again, as not needed [x] Ensure export/import of data of these new content-types (req. extensive refactoring) [x] extensive automated testing of these new features Version 9.8 - the Visual Query Upgrade [x] SqlDataSource in Visual Query Designer [x] Show DataSources which have Fallback-In-Streams in Visual Query Designer [x] UI Updates on Visual Query Designer, to better fit current needs [x] More help documentation for various data sources in Visual Query Designer [x] Shuffle DataSource now configurable in visual query [x] Support for Schema-Free Content (dynamic, without existing content-type) Version 9.9 - another Visual Query Upgrade [x] Enhance relationship filter to enable filtering on other fields of related items [x] Enhance other data sources with features which so far were not available in the visual designer Version 9.10 - Combobox and more DataSources (WIP) [x] Combobox input type allowing a dropdown with values , but also allowing manual typing (to select pre-defined values, but also use Tokens) [x] StreamMerge DataSource [x] ItemFilterDuplicates DataSource [x] feature to export Json ContentTypes [x] multiple file-repos which deliver Content-Types, allows for any module to provide additional contenttypes Version 9.11 - Query-Picker & more DataSources [x] Entity-Picker delivering items from a query, instead of a type [x] string-dropdown-query to pick string-items from a query instead of pre-filled [x] query export / import [x] multi-select items in a string-query-picker Version 9.12 [x] Json-based global query definitions [x] Method to add parameters to a called query (like when using an entity-pickers which uses a query) [x] pre-build queries for things like zones, apps, content-types, fields, query-info etc. [x] data sources for Zones, Apps, Queries, Attributes, etc. [x] limit streams returned by a query Version 9.13 [x] Enhanced API to create custom DataSources + ca. 10 blog posts for that [x] Standalone FnL / UDT DataSource (removed it from core distribution) Version 9.14 LTS [x] New LTS Concept - see blog post about LTS 9.14 Version 9.15-9.42 LTS Didn't have time to document this yet, sorry. If you need to know, best check the git-history. Version 10 Version 10.01 - 10.09 LTS Develop and fine-tuning of the new Edit-UI based on Angular 8 Version 10.20-00 to 10.20-05 Enhanced ListCache so it will prevent parallel buildup - important for long-loading DataSources like SharePoint DataSources Updating to RazorBlade 3.1 which doesn't need extension methods Version 10.20-06 Created AsDynamic(string) Created AsDynamic(DataSource) to enable AsDynamic(Data) instead of AsDynamic(Data[\"Default\"]) Version 10.21 New AsList() for better code New AsDynamic(string) to work with json /dist/ is now cleaned up on every update, to better distribute changing JS file structures Version 10.22 Query Params added for Visual Query Created QueryRun DataSource Insights now includes the code file and line numbers Insights now also measures time needed to execute some code Various performance enhancements Improved SoC for AppsCache and AppRoot DataSource Version 10.23 Lots of logging enhancements Version 10.24 LTS New stable LTS Improved/fixed QueryRun DataSource Improved Insights Enhancements to use 2sxc with Redis Cache WYSIWYG enhancements for better H1-Hx, P and Blockquote Performance enhancements Intenal refactoring for APIs Introduced an internal Compatibility-Level to disable very old features when using new RazorComponents Version 10.25 LTS Changed how the $2sxc client JavaScripts are loaded for much better performance and better Google PageSpeed Enabled various features for the Content area which previously were hidden, like Resources and Settings Released brand new Content-Templates App with best-practices for 10.25 Fixed bugs with Evoq Page Publishing Enhanced the ValueFilter DataSource to handle dates which were null Version 10.26 TinyMCE Updated to 5.1 Enhanced CreateInstance API to also work when compiling Razor files from a WebApi New DataSource StreamPick New automatic Param called [Params:ShowDrafts] to be used in VisualQuery - returns True or False New tokens [App:AppId] and [App:ZoneId] to use in VisualQuery calles (dropdown from query) Changed List-Caching behaviour to create more reliable cache-keys for complex queries (previously it only went through Default streams to generate the cache-key) Version 10.27 Possibly breaking changes Because the dynamic entity list now has a type which is dynamic, it cannot be cast to List<dynamic> any more. IList<dynamic> works, but in case you have any code casting it to List<dynamic> you'll need to change that to either IList<dynamic> or IEnumerable<dynamic> . New Features / Major Improvements Changed DynamicEntity so that accessing a property which contains many other entities it will return a DynamicEntityWithList . This allows Razor files to access the properties like .EntityId or .FirstName of the main entity in a sub-list easily without requiring AsList(...) #1993 Updated Quick-Dialog to use Angular 9, Ivy and the latest Dnn-Sxc-Angular #1992 New DataSource AttributeRename #2004 Completely refactored internal list management API #1995 Complete refactoring of the inpage code to make it typesafe (no more any types) Created brand-new, simpler way to create custom Toolbars and specs Introduces JS/API 2sxc-Insights for debugging In-Page code Enhancements Performance-Enhance App DataSource to delay building objects until needed #1991 Performance-Enhance internal Token Lookup #1998 Enhanced DNN Search Index logging #1997 Corrected help-links on all data sources #1994 Bugfixes Cache-All-Streams only used the Default-Streams for Cache-Key identification #1988 QueryRun DataSource doesn't show statitics on all streams #1989 Modified date and Owner information were missing on json stored entities #2005 / #2006 Fixed bug in JS API for non-2sxc endpoint resolution #2000 Queries didn't resolve DNN tokens when accessed in the Search Index #1999 Version 11 Version 11.00 Breaking Changes The following changes are all super-low-profile, but we want to document them just to be through: DataStream and IDataStream loses a very old property called .LightList - we're pretty sure it's not in use anywhere, if you have it, just use .List instead. Enhancements Brand new Admin UI based on Angular 9 and Ivy with new Code-Editor, new Visual Query and much more Razor CodeBehind Automatic Polymorphism Updated Razor Blades to 3.02 with the new Tags.SafeUrl(...) command Field: Boolean-Tristate which saves true/false/null App.Data.Create(...) now returns entities it just created Version 11.01 Enhancements In-Page Toolbar now recognises sub-item lists and provides sorting and editing buttons #2009 Item-lists now have a button to add existing items to them #1278 New system to create extensions in an app, in the system folder Ability to create custom Input Fields just by placing them in the system folder #2070 Minor Improve Equality Check for DynamicEntities and EntitiesInList #2075 Data-table in admin UI now shows Title field no matter if there is another field which is the title #1639 Button to flush app-cache in admin-ui #2073 2sxc Insights now available from the super-user toolbar #2069 PT translations are added again #2064 Loads of enhancements and minor issues in the UI Version 11.02 Enhancements App-Extensions system in the folder system Custom WebComponent based input fields #2082 API to reconfigure the wysiwyg input control #2090 Show view use with links to pages and more #2077 UI - fields can now be set to not-translate #2086 UI - boolean can now show different labels based on the value it has #2085 Minor Add HR language pack for editor #2087 show app-name in admin ui show app-icon in apps-management #2078 Version 11.03 - todo Version 11.04 - todo Version 11.05 Old Edit UI be removed Old Admin-UI be removed APIs which only the old UIs used be removed Old helper JS for AngularJS apps (located in /js/angularjs ) will be removed from the distribution. They had not been updated for over 3 years and we believe they were not widely used. Anybody upgrading will still preserve the files that are there. If you really need them, download an old release of 2sxc and get them manually. Github Release Notes You can always find the latest and detailed release notes on the github releases"
  },
  "js-code/toolbars/buttons.html": {
    "href": "js-code/toolbars/buttons.html",
    "title": "Toolbar Button Definitions | 2sxc and EAV 10",
    "keywords": "Toolbar Button Definitions <!-- Data Highlights --> <!-- ADAM --> <!-- Server --> <!-- Prepare --> <!-- Data Source --> <!-- Optimzers --> <!-- Process / Awesomize --> <!-- Libraries --> <!-- data formats --> <!-- Browser --> <!-- Frameworks --> <!-- App show parts --> <!-- Interact parts --> <!-- Edit parts --> <!-- Edit UI parts --> <!-- SPA parts --> <!-- Custom highlight boxes - can be controlled by in-page CSS --> you are here (click to zoom) - discover the stack .context-box-summary .edit-custom { visibility: visible; } When you create custom buttons in a floating toolbar you can customize everything including the icon and more. This is explained here. Buttons are of html, basically a <a click=\"...\">[some-icon]</a> . When the button is created, it must already know what it's for, which is why the command must be prepared when the button is created. How to use A short example of a slightly customized button definition: var btns = [{ command: { action: \"new\", contentType: \"Category\" }, title: \"create Category\" }, { command: { action: \"new\", contentType: \"Author\" }, title: \"create Author\" }]; This simple example shows two new buttons creating different kinds of things, and we customized the label so the mouse-over would tell the editor which button is which. Let's get a bit more sophisticated var btn = { command: { // some command here }, icon: \"icon-sxc-code\", title: \"this is my special button\", classes: \"redButton\", }; The above example shows all than can currently be configured one a button. And here's a much more complex example. This is the full object-structure which the button generator getButton(...) understands: // full version var btn = { title: \"some title - ideally from translation table\", icon: \"some icon like icon-sxc-bomb\", command: { action: \"some action name like new\", moreParamsAsNeeded: \"...\" }, showCondition: someValueOr function(itemSettings) { return true; }, classes: \"btn-xyz my-class\", dynamicClasses: function(itemSettings) { if( (new Date()).getDay() === 1 ) return \"color-monday\"; } }; // typically more compact edition (will be expanded at runtime) var btn2 = { title: \"my button!\", icon: \"icon-sxc-list\", action: \"layout\" }; // or the totally compact edition var btn3 = \"layout\"; Some functioning code You may wonder how to actually use this. Here's an JSON example: <p class=\"sc-element\"> mouse over this to see inline-json version <ul class=\"sc-menu\" data-toolbar='[{ \"command\": { \"action\": \"new\", \"contentType\": \"Category\" }, \"title\": \"create Category\" }, { \"command\": { \"action\": \"new\", \"contentType\": \"Author\" }, \"title\": \"create Author\" }]'></ul> </p> Here's a more sophisticated (but also more reusable) example: <p class=\"sc-element\"> mouse over this to see the js toolbar generated by the buttons-list <toolbars2Buttons></toolbars2Buttons> </p> <script> var toolbars2Buttons = [{ command: { action: \"new\", contentType: \"Category\" }, title: \"create Category\" }, { command: { action: \"new\", contentType: \"Author\" }, title: \"create Author\" }]; // note that we cannot create the toolbars before the page-onready. Because of this // our code which creates the toolbar must be delayed, like in a $(our-code); $(function(){ if(typeof $2sxc != \"undefined\") // continue if $2sxc exists; it may be missing in non-edit modes $(\"toolbars2Buttons\").each(function(index, element){ var controller = $2sxc(element); if(!controller.isEditMode()) // check if this specific module currently allows editing return; var toolbar = controller.manage.getToolbar(toolbars2Buttons); $(element).replaceWith(toolbar); }); }); </script> How it works Buttons are used in toolbars all the time, and before they are rendered, the must be fully configured/expanded, as shown in the larger example. Internally the button is built with whatever is given, and anything not defined yet is automatically filled with the defaults. The defaults are taken from the commands definitions . Here's how the get defaults works: if all that is knows about a button is the name like var btn = \"new\" , then it gets all the configuration from the defaults if some properties are known, like var btn = { command: {action: \"new\"}, icon: \"myicon\" } , then only the missing properties are taken from the defaults. Note that retrieving defaults requires the button to know which command it's for, so the name of the command is essential. The Button Properties object command the internal command which will be called, should contain both the name and the parameters like { action: \"new\", contentType: \"BlogPost\"} see also commands string icon a css class giving the button the icon. It can be one of the icons 2sxc provides, or it can be your own - just be sure to include a CSS & font which resolves the icon string title a text which is shown on mouse-over. Note that 2sxc will try to run it through the translator, so you can also use placeholders like Toolbar.Metadata string classes comma separated list of class-names like makeRed,glowHover function dynamicClasses(settings) can be used to dynamically build classes depending on the situation bool/function showCondition ( API still experimental ) - used to dynamically choose if this button should be shown or not bool disabled ( API still experimental ) would disable the click on a button bool partOfPage ( API still experimental , new in 2sxc 9.5 ) determines if resulting changes should effect the Evoq/DNN Page Publishing - note that it only effects the page-lifecyle, if the resulting dialogs and APIs respect this setting Some more Notes Because the button is often passed around as plain text/html, it can't rely on hidden variables to keep track of anything. This is why the onclick is so verbose, like onclick=\"$2sxc(4030).manage.run({\"action\": \"edit\", \"entityId\": 42 }) . This is to ensure it always survives the text-round-trip. Demo App and further links You should find some code examples in this demo App JS Manage / Toolbar API Tutorial App History Introduced in 2sxc 08.06"
  },
  "specs/cms/hide-advanced-features.html": {
    "href": "specs/cms/hide-advanced-features.html",
    "title": "Moved to | 2sxc and EAV 10",
    "keywords": "Moved to Hide Advanced Features From Non-Admins"
  },
  "api/dot-net/ToSic.Sxc.Dnn.Code.IDnnDynamicCode.html": {
    "href": "api/dot-net/ToSic.Sxc.Dnn.Code.IDnnDynamicCode.html",
    "title": "Interface IDnnDynamicCode | 2sxc and EAV 10",
    "keywords": "Interface IDnnDynamicCode This interface extends the IAppAndDataHelpers with the DNN Context. It's important, because if 2sxc also runs on other CMS platforms, then the Dnn Context won't be available, so it's in a separate interface. Inherited Members IDynamicCode.GetService<TService>() IDynamicCode.App IDynamicCode.Data IDynamicCode.Content IDynamicCode.Header IDynamicCode.AsAdam(IDynamicEntity, String) IDynamicCode.AsAdam(IEntity, String) IDynamicCode.Link IDynamicCode.Edit IDynamicCode.AsDynamic(String, String) IDynamicCode.AsDynamic(IEntity) IDynamicCode.AsDynamic(Object) IDynamicCode.AsEntity(Object) IDynamicCode.AsList(Object) IDynamicCode.CreateSource<T>(IDataStream) IDynamicCode.CreateSource<T>(IDataSource, ILookUpEngine) IDynamicCode.CmsContext ICreateInstance.CreateInstancePath ICreateInstance.CreateInstance(String, String, String, String, Boolean) ICompatibilityLevel.CompatibilityLevel IHasLog.Log Namespace : ToSic.Sxc.Dnn.Code Assembly : ToSic.Sxc.Dnn.dll Syntax [PublicApi_Stable_ForUseInYourCode] public interface IDnnDynamicCode : IDynamicCode, ICreateInstance, ICompatibilityLevel, IHasLog Properties | Improve this Doc View Source Dnn The DNN context. Declaration IDnnContext Dnn { get; } Property Value Type Description IDnnContext The DNN context."
  },
  "api/dot-net/ToSic.Sxc.Dnn.Web.IDynamicWebApi.html": {
    "href": "api/dot-net/ToSic.Sxc.Dnn.Web.IDynamicWebApi.html",
    "title": "Interface IDynamicWebApi | 2sxc and EAV 10",
    "keywords": "Interface IDynamicWebApi This interface extends the IAppAndDataHelpers with the DNN Context. It's important, because if 2sxc also runs on other CMS platforms, then the Dnn Context won't be available, so it's in a separate interface. Inherited Members IDnnDynamicCode.Dnn IDynamicCode.GetService<TService>() IDynamicCode.App IDynamicCode.Data IDynamicCode.Content IDynamicCode.Header IDynamicCode.AsAdam(IDynamicEntity, String) IDynamicCode.AsAdam(IEntity, String) IDynamicCode.Link IDynamicCode.Edit IDynamicCode.AsDynamic(String, String) IDynamicCode.AsDynamic(IEntity) IDynamicCode.AsDynamic(Object) IDynamicCode.AsEntity(Object) IDynamicCode.AsList(Object) IDynamicCode.CreateSource<T>(IDataStream) IDynamicCode.CreateSource<T>(IDataSource, ILookUpEngine) IDynamicCode.CmsContext ICreateInstance.CreateInstancePath ICreateInstance.CreateInstance(String, String, String, String, Boolean) ICompatibilityLevel.CompatibilityLevel IHasLog.Log Namespace : ToSic.Sxc.Dnn.Web Assembly : ToSic.Sxc.Dnn.dll Syntax [PublicApi_Stable_ForUseInYourCode] public interface IDynamicWebApi : IDnnDynamicCode, IDynamicCode, ICreateInstance, ICompatibilityLevel, IHasLog Methods | Improve this Doc View Source SaveInAdam(String, Stream, String, String, Nullable<Guid>, String, String) Save a file from a stream (usually an upload from the browser) into an adam-field of an item. Read more about this in the the WebAPI docs for SaveInAdam Declaration IFile SaveInAdam(string dontRelyOnParameterOrder = \"all params must be named, like 'enable: true, language: ''de-ch''\", Stream stream = null, string fileName = null, string contentType = null, Guid? guid = default(Guid? ), string field = null, string subFolder = \"\") Parameters Type Name Description System.String dontRelyOnParameterOrder ensure that all parameters use names, so the api can change in future System.IO.Stream stream the stream System.String fileName file name to save to System.String contentType content-type of the target item (important for security checks) System.Nullable < System.Guid > guid System.String field System.String subFolder Returns Type Description IFile"
  },
  "api/dot-net/ToSic.Sxc.Dnn.html": {
    "href": "api/dot-net/ToSic.Sxc.Dnn.html",
    "title": "Namespace ToSic.Sxc.Dnn | 2sxc and EAV 10",
    "keywords": "Namespace ToSic.Sxc.Dnn This contains interfaces that are specific to 2sxc in DNN. The purpose is that both the EAV and 2sxc are meant to be platform agnostic, but Razor and WebApi developers in DNN still need access to some helpers. Classes ApiController This is the base class for all custom API Controllers. With this, your code receives the full context incl. the current App, DNN, Data, etc. DynamicCode This is a base class for custom code files with context. If you create a class file for dynamic use and inherit from this, then the compiler will automatically add objects like Link, Dnn, etc. The class then also has AsDynamic(...) and AsList(...) commands like a normal razor page. Factory This is a factory to create CmsBlocks, Apps etc. and related objects from DNN. RazorComponent The base class for Razor-Components in 2sxc 10+ Provides context infos like the Dnn object, helpers like Edit and much more. RazorComponentCode This is the type used by code-behind classes of razor components. Use it to move logic / functions etc. into a kind of code-behind razor instead of as part of your view-template."
  },
  "api/dot-net/ToSic.Sxc.Dnn.ApiController.html": {
    "href": "api/dot-net/ToSic.Sxc.Dnn.ApiController.html",
    "title": "Class ApiController | 2sxc and EAV 10",
    "keywords": "Class ApiController This is the base class for all custom API Controllers. With this, your code receives the full context incl. the current App, DNN, Data, etc. Tip We strongly suggest you check out the tutorials and guidance for custom WebAPIs here Inheritance System.Object System.Web.Http.ApiController DotNetNuke.Web.Api.DnnApiController ToSic.Sxc.Dnn.WebApi.DnnApiControllerWithFixes ToSic.Sxc.WebApi.SxcApiControllerBase ToSic.Sxc.WebApi.DynamicApiController ApiController Implements IDynamicWebApi IDnnDynamicCode IDynamicCode ICreateInstance ICompatibilityLevel IHasLog Namespace : ToSic.Sxc.Dnn Assembly : ToSic.SexyContent.WebApi.dll Syntax [PublicApi_Stable_ForUseInYourCode] public abstract class ApiController : DynamicApiController, IHttpController, IDisposable, IHasDynCodeContext, IDynamicWebApi, IDnnDynamicCode, IDynamicCode, ICreateInstance, ICompatibilityLevel, IHasLog, IDynamicCodeBeforeV10 Properties | Improve this Doc View Source App A fully prepared IApp object letting you access all the data and queries in the current app. You'll usually want to access the data, like App.Data[\"Categories\"] or the queries App.Query[\"AllPosts\"] . foreach(var cat in AsDynamic(App.Data[\"Categories\"])) { @cat.Name } Declaration public IApp App { get; } Property Value Type Description IApp The current app | Improve this Doc View Source CmsContext Declaration public ICmsContext CmsContext { get; } Property Value Type Description ICmsContext | Improve this Doc View Source Content The content object of the current razor view - IF the current view has content. If the view is a list, it will return the first item. Will be null otherwise. To tell if it's the demo/default item, use IsDemoItem . Declaration public dynamic Content { get; } Property Value Type Description System.Object A IDynamicEntity object with the current content - or null. | Improve this Doc View Source Data The data prepared for the current Code. Usually user data which was manually added to the instance, but can also be a query. You'll usually want to access the \"Default\" stream like Data[\"Default\"] . foreach(var person in AsDynamic(Data[\"Default\"])) { @person.Name } Declaration public IBlockDataSource Data { get; } Property Value Type Description IBlockDataSource An IBlockDataSource which is as IDataSource . | Improve this Doc View Source Dnn The DNN context. Declaration public IDnnContext Dnn { get; } Property Value Type Description IDnnContext The DNN context. | Improve this Doc View Source Edit Helper commands to enable in-page editing functionality Use it to check if edit is enabled, generate context-json infos and provide toolbar buttons Declaration public IInPageEditingSystem Edit { get; } Property Value Type Description IInPageEditingSystem An IInPageEditingSystem object. | Improve this Doc View Source Header The header object of the current razor view, if it's a list and has a header object. If it's a list and doesn't have a header (and no default), it will return null. To tell if it's the demo/default item, use IsDemoItem . Declaration public dynamic Header { get; } Property Value Type Description System.Object A IDynamicEntity object with the current content. Remarks Introduced in 2sxc 10.10 - previously it was called ListContent, now deprecated. | Improve this Doc View Source Link Link helper object to create the correct links Declaration public ILinkHelper Link { get; } Property Value Type Description ILinkHelper A ILinkHelper object. Methods | Improve this Doc View Source AsAdam(IEntity, String) Provides an Adam instance for this item and field Declaration public IFolder AsAdam(IEntity entity, string fieldName) Parameters Type Name Description IEntity entity The entity, often Content or similar System.String fieldName The field name, like \"Gallery\" or \"Pics\" Returns Type Description IFolder An Adam object for navigating the assets | Improve this Doc View Source AsAdam(IDynamicEntity, String) Provides an Adam instance for this item and field Declaration public IFolder AsAdam(IDynamicEntity entity, string fieldName) Parameters Type Name Description IDynamicEntity entity The entity, often Content or similar System.String fieldName The field name, like \"Gallery\" or \"Pics\" Returns Type Description IFolder An Adam object for navigating the assets | Improve this Doc View Source AsDynamic(Object) Convert a dynamic entity and return itself again. This is so coders don't have to worry if the original object was an IEntity or a IDynamicEntity in the first place. Declaration public dynamic AsDynamic(object dynamicEntity) Parameters Type Name Description System.Object dynamicEntity the original object Returns Type Description System.Object a dynamic object for easier coding | Improve this Doc View Source AsDynamic(String, String) Take a json and provide it as a dynamic object to the code Declaration public dynamic AsDynamic(string json, string fallback = \"{}\") Parameters Type Name Description System.String json the original json string System.String fallback Alternate string to use, if the original json can't parse. Can also be null or the word \"error\" if you would prefer an error to be thrown. Returns Type Description System.Object A dynamic object representing the original json. If it can't be parsed, it will parse the fallback, which by default is an empty empty dynamic object. If you provide null for the fallback, then you will get null back. Remarks New in 2sxc 10.20 | Improve this Doc View Source AsDynamic(IEntity) Wraps an entity into a IDynamicEntity Declaration public dynamic AsDynamic(IEntity entity) Parameters Type Name Description IEntity entity the original object Returns Type Description System.Object a dynamic object for easier coding | Improve this Doc View Source AsEntity(Object) Unwraps a dynamic entity back into the underlying IEntity Declaration public IEntity AsEntity(object dynamicEntity) Parameters Type Name Description System.Object dynamicEntity the wrapped IEntity Returns Type Description IEntity A normal IEntity | Improve this Doc View Source AsList(Object) Converts a list of IEntity objects into a list of IDynamicEntity objects. Declaration public IEnumerable<dynamic> AsList(object list) Parameters Type Name Description System.Object list typically a List/IEnumerable of Entities or DynamicEntities. Can also be a IDataSource in which case it uses the default stream. Returns Type Description System.Collections.Generic.IEnumerable < System.Object > a list of IDynamicEntity objects Remarks Added in 2sxc 10.21.00 | Improve this Doc View Source CreateSource<T>(IDataSource, ILookUpEngine) Create a IDataSource which will process data from the given stream. Declaration public T CreateSource<T>(IDataSource inSource = null, ILookUpEngine configurationProvider = null) where T : IDataSource Parameters Type Name Description IDataSource inSource The data source which will be the default In of the new data-source. ILookUpEngine configurationProvider An alternate configuration provider for the DataSource Returns Type Description T A typed DataSource object Type Parameters Name Description T A data-source type - must be inherited from IDataSource | Improve this Doc View Source CreateSource<T>(IDataStream) Create a IDataSource which will process data from the given stream. Declaration public T CreateSource<T>(IDataStream inStream) where T : IDataSource Parameters Type Name Description IDataStream inStream The stream which will be the default In of the new data-source. Returns Type Description T A typed DataSource object Type Parameters Name Description T A data-source type - must be inherited from IDataSource | Improve this Doc View Source SaveInAdam(String, Stream, String, String, Nullable<Guid>, String, String) Save a file from a stream (usually an upload from the browser) into an adam-field of an item. Read more about this in the the WebAPI docs for SaveInAdam Declaration public IFile SaveInAdam(string dontRelyOnParameterOrder = \"all params must be named, like 'enable: true, language: ''de-ch''\", Stream stream = null, string fileName = null, string contentType = null, Guid? guid = default(Guid? ), string field = null, string subFolder = \"\") Parameters Type Name Description System.String dontRelyOnParameterOrder ensure that all parameters use names, so the api can change in future System.IO.Stream stream the stream System.String fileName file name to save to System.String contentType content-type of the target item (important for security checks) System.Nullable < System.Guid > guid System.String field System.String subFolder Returns Type Description IFile Implements IDynamicWebApi IDnnDynamicCode IDynamicCode ICreateInstance ICompatibilityLevel IHasLog"
  },
  "api/dot-net/ToSic.Sxc.Code.DynamicCode.html": {
    "href": "api/dot-net/ToSic.Sxc.Code.DynamicCode.html",
    "title": "Class DynamicCode | 2sxc and EAV 10",
    "keywords": "Class DynamicCode This is a base class for dynamic code which is compiled at runtime. It delegates all properties like App and methods like AsDynamic() to the parent item which initially caused it to be compiled. Inheritance System.Object HasLog DynamicCode DynamicCode Implements IDynamicCode ICreateInstance ICompatibilityLevel IHasLog IWrapper < IDynamicCode > Inherited Members HasLog.Log HasLog.InitLog(String, ILog, String) HasLog.InitLog(String, ILog, String, CodeRef) Namespace : ToSic.Sxc.Code Assembly : ToSic.Sxc.dll Syntax [PublicApi_Stable_ForUseInYourCode] public abstract class DynamicCode : HasLog, IDynamicCode, ICreateInstance, ICompatibilityLevel, IHasLog, IWrapper<IDynamicCode>, ICoupledDynamicCode Constructors | Improve this Doc View Source DynamicCode() Main constructor, may never have parameters, otherwise inheriting code will run into problems. Declaration protected DynamicCode() Properties | Improve this Doc View Source App A fully prepared IApp object letting you access all the data and queries in the current app. Declaration public IApp App { get; } Property Value Type Description IApp The current app | Improve this Doc View Source CmsContext The CmsContext tells you about the environment, like what page and module we're running in. It's supposed to replace the Dnn object in Razor and WebAPI code. Declaration public ICmsContext CmsContext { get; } Property Value Type Description ICmsContext Remarks New in v11.11 | Improve this Doc View Source Content The content object of the current razor view - IF the current view has content. If the view is a list, it will return the first item. Will be null otherwise. To tell if it's the demo/default item, use IsDemoItem . Declaration public dynamic Content { get; } Property Value Type Description System.Object A IDynamicEntity object with the current content - or null. | Improve this Doc View Source CreateInstancePath Location of the current code. This is important when trying to create instances for other code in relative folders - as this is usually not known. Declaration public string CreateInstancePath { get; set; } Property Value Type Description System.String The real path to the currently executed code - important for dynamically compiled code like WebApis | Improve this Doc View Source Data The data prepared for the current Code. Usually user data which was manually added to the instance, but can also be a query. Declaration public IBlockDataSource Data { get; } Property Value Type Description IBlockDataSource An IBlockDataSource which is as IDataSource . | Improve this Doc View Source Edit Helper commands to enable in-page editing functionality Use it to check if edit is enabled, generate context-json infos and provide toolbar buttons Declaration public IInPageEditingSystem Edit { get; } Property Value Type Description IInPageEditingSystem An IInPageEditingSystem object. | Improve this Doc View Source Header The header object of the current razor view, if it's a list and has a header object. If it's a list and doesn't have a header (and no default), it will return null. To tell if it's the demo/default item, use IsDemoItem . Declaration public dynamic Header { get; } Property Value Type Description System.Object A IDynamicEntity object with the current content. Remarks Introduced in 2sxc 10.10 - previously it was called ListContent, now deprecated. | Improve this Doc View Source Link Link helper object to create the correct links Declaration public ILinkHelper Link { get; } Property Value Type Description ILinkHelper A ILinkHelper object. | Improve this Doc View Source UnwrappedContents Declaration public IDynamicCode UnwrappedContents { get; } Property Value Type Description IDynamicCode Remarks The parent of this object. It's not called Parent but uses an exotic name to ensure that your code won't accidentally create a property with the same name. Methods | Improve this Doc View Source AsAdam(IEntity, String) Provides an Adam instance for this item and field Declaration public IFolder AsAdam(IEntity entity, string fieldName) Parameters Type Name Description IEntity entity The entity, often Content or similar System.String fieldName The field name, like \"Gallery\" or \"Pics\" Returns Type Description IFolder An Adam object for navigating the assets | Improve this Doc View Source AsAdam(IDynamicEntity, String) Provides an Adam instance for this item and field Declaration public IFolder AsAdam(IDynamicEntity entity, string fieldName) Parameters Type Name Description IDynamicEntity entity The entity, often Content or similar System.String fieldName The field name, like \"Gallery\" or \"Pics\" Returns Type Description IFolder An Adam object for navigating the assets | Improve this Doc View Source AsDynamic(Object) Convert a dynamic entity and return itself again. This is so coders don't have to worry if the original object was an IEntity or a IDynamicEntity in the first place. Declaration public dynamic AsDynamic(object dynamicEntity) Parameters Type Name Description System.Object dynamicEntity the original object Returns Type Description System.Object a dynamic object for easier coding | Improve this Doc View Source AsDynamic(String, String) Take a json and provide it as a dynamic object to the code Declaration public dynamic AsDynamic(string json, string fallback = \"{}\") Parameters Type Name Description System.String json the original json string System.String fallback Alternate string to use, if the original json can't parse. Can also be null or the word \"error\" if you would prefer an error to be thrown. Returns Type Description System.Object A dynamic object representing the original json. If it can't be parsed, it will parse the fallback, which by default is an empty empty dynamic object. If you provide null for the fallback, then you will get null back. Remarks New in 2sxc 10.20 | Improve this Doc View Source AsDynamic(IEntity) Wraps an entity into a IDynamicEntity Declaration public dynamic AsDynamic(IEntity entity) Parameters Type Name Description IEntity entity the original object Returns Type Description System.Object a dynamic object for easier coding | Improve this Doc View Source AsEntity(Object) Unwraps a dynamic entity back into the underlying IEntity Declaration public IEntity AsEntity(object dynamicEntity) Parameters Type Name Description System.Object dynamicEntity the wrapped IEntity Returns Type Description IEntity A normal IEntity | Improve this Doc View Source AsList(Object) Converts a list of IEntity objects into a list of IDynamicEntity objects. Declaration public IEnumerable<dynamic> AsList(object list) Parameters Type Name Description System.Object list typically a List/IEnumerable of Entities or DynamicEntities. Can also be a IDataSource in which case it uses the default stream. Returns Type Description System.Collections.Generic.IEnumerable < System.Object > a list of IDynamicEntity objects Remarks Added in 2sxc 10.21.00 | Improve this Doc View Source CreateInstance(String, String, String, String, Boolean) Create an instance of code lying in a file near this Declaration public dynamic CreateInstance(string virtualPath, string dontRelyOnParameterOrder = \"all params must be named, like 'enable: true, language: ''de-ch''\", string name = null, string relativePath = null, bool throwOnError = true) Parameters Type Name Description System.String virtualPath path to the other code file to compile System.String dontRelyOnParameterOrder dummy parameter to ensure all other parameters are called using named parameters, so that the API can change in future System.String name Override the class name to compile - usually not required as it should match the file name System.String relativePath optional relative path, will usually use the CreateInstancePath System.Boolean throwOnError throw errors if compiling fails, recommended Returns Type Description System.Object An object of the class in the file Remarks Note that the C# code which we are creating an instance of inherits from DynamicCode then it will automatically be initialized to support App, AsDynamic etc. | Improve this Doc View Source CreateSource<T>(IDataSource, ILookUpEngine) Create a IDataSource which will process data from the given stream. Declaration public T CreateSource<T>(IDataSource inSource = null, ILookUpEngine configurationProvider = null) where T : IDataSource Parameters Type Name Description IDataSource inSource The data source which will be the default In of the new data-source. ILookUpEngine configurationProvider An alternate configuration provider for the DataSource Returns Type Description T A typed DataSource object Type Parameters Name Description T A data-source type - must be inherited from IDataSource | Improve this Doc View Source CreateSource<T>(IDataStream) Create a IDataSource which will process data from the given stream. Declaration public T CreateSource<T>(IDataStream inStream) where T : IDataSource Parameters Type Name Description IDataStream inStream The stream which will be the default In of the new data-source. Returns Type Description T A typed DataSource object Type Parameters Name Description T A data-source type - must be inherited from IDataSource | Improve this Doc View Source GetService<TService>() Get a service from the EAV / 2sxc Dependency Injection. Declaration public TService GetService<TService>() Returns Type Description TService An object of the type or interface requested Type Parameters Name Description TService Interface (preferred) or Class which is needed Implements IDynamicCode ICreateInstance ICompatibilityLevel IHasLog IWrapper<T>"
  },
  "api/dot-net/ToSic.Sxc.Code.DynamicCodeRoot.html": {
    "href": "api/dot-net/ToSic.Sxc.Code.DynamicCodeRoot.html",
    "title": "Class DynamicCodeRoot | 2sxc and EAV 10",
    "keywords": "Class DynamicCodeRoot Base class for any dynamic code root objects. Root objects are the ones compiled by 2sxc - like the RazorComponent or ApiController. If you create code for dynamic compilation, you'll always inherit from ToSic.Sxc.Dnn.DynamicCode. Note that other DynamicCode objects like RazorComponent or ApiController reference this object for all the interface methods of IDynamicCode . Inheritance System.Object HasLog DynamicCodeRoot Implements IDynamicCode ICreateInstance ICompatibilityLevel IHasLog Inherited Members HasLog.Log HasLog.InitLog(String, ILog, String) HasLog.InitLog(String, ILog, String, CodeRef) Namespace : ToSic.Sxc.Code Assembly : ToSic.Sxc.dll Syntax [PublicApi_Stable_ForUseInYourCode] public abstract class DynamicCodeRoot : HasLog, IDynamicCode, ICreateInstance, ICompatibilityLevel, IHasLog Constructors | Improve this Doc View Source DynamicCodeRoot(DynamicCodeRoot.Dependencies, String) Declaration protected DynamicCodeRoot(DynamicCodeRoot.Dependencies dependencies, string logPrefix) Parameters Type Name Description ToSic.Sxc.Code.DynamicCodeRoot.Dependencies dependencies System.String logPrefix Properties | Improve this Doc View Source App A fully prepared IApp object letting you access all the data and queries in the current app. Declaration public IApp App { get; } Property Value Type Description IApp The current app | Improve this Doc View Source Content The content object of the current razor view - IF the current view has content. If the view is a list, it will return the first item. Will be null otherwise. To tell if it's the demo/default item, use IsDemoItem . Declaration public dynamic Content { get; } Property Value Type Description System.Object A IDynamicEntity object with the current content - or null. | Improve this Doc View Source CreateInstancePath Location of the current code. This is important when trying to create instances for other code in relative folders - as this is usually not known. Declaration public string CreateInstancePath { get; set; } Property Value Type Description System.String The real path to the currently executed code - important for dynamically compiled code like WebApis | Improve this Doc View Source Data The data prepared for the current Code. Usually user data which was manually added to the instance, but can also be a query. Declaration public IBlockDataSource Data { get; } Property Value Type Description IBlockDataSource An IBlockDataSource which is as IDataSource . | Improve this Doc View Source Edit Helper commands to enable in-page editing functionality Use it to check if edit is enabled, generate context-json infos and provide toolbar buttons Declaration public IInPageEditingSystem Edit { get; } Property Value Type Description IInPageEditingSystem An IInPageEditingSystem object. | Improve this Doc View Source Header The header object of the current razor view, if it's a list and has a header object. If it's a list and doesn't have a header (and no default), it will return null. To tell if it's the demo/default item, use IsDemoItem . Declaration public dynamic Header { get; } Property Value Type Description System.Object A IDynamicEntity object with the current content. Remarks Introduced in 2sxc 10.10 - previously it was called ListContent, now deprecated. | Improve this Doc View Source Link Link helper object to create the correct links Declaration public ILinkHelper Link { get; protected set; } Property Value Type Description ILinkHelper A ILinkHelper object. Methods | Improve this Doc View Source AsAdam(IEntity, String) Provides an Adam instance for this item and field Declaration public IFolder AsAdam(IEntity entity, string fieldName) Parameters Type Name Description IEntity entity The entity, often Content or similar System.String fieldName The field name, like \"Gallery\" or \"Pics\" Returns Type Description IFolder An Adam object for navigating the assets | Improve this Doc View Source AsAdam(IDynamicEntity, String) Provides an Adam instance for this item and field Declaration public IFolder AsAdam(IDynamicEntity entity, string fieldName) Parameters Type Name Description IDynamicEntity entity The entity, often Content or similar System.String fieldName The field name, like \"Gallery\" or \"Pics\" Returns Type Description IFolder An Adam object for navigating the assets | Improve this Doc View Source AsDynamic(Object) Convert a dynamic entity and return itself again. This is so coders don't have to worry if the original object was an IEntity or a IDynamicEntity in the first place. Declaration public dynamic AsDynamic(object dynamicEntity) Parameters Type Name Description System.Object dynamicEntity the original object Returns Type Description System.Object a dynamic object for easier coding | Improve this Doc View Source AsDynamic(String, String) Take a json and provide it as a dynamic object to the code Declaration public dynamic AsDynamic(string json, string fallback = \"{}\") Parameters Type Name Description System.String json the original json string System.String fallback Alternate string to use, if the original json can't parse. Can also be null or the word \"error\" if you would prefer an error to be thrown. Returns Type Description System.Object A dynamic object representing the original json. If it can't be parsed, it will parse the fallback, which by default is an empty empty dynamic object. If you provide null for the fallback, then you will get null back. Remarks New in 2sxc 10.20 | Improve this Doc View Source AsDynamic(IEntity) Wraps an entity into a IDynamicEntity Declaration public dynamic AsDynamic(IEntity entity) Parameters Type Name Description IEntity entity the original object Returns Type Description System.Object a dynamic object for easier coding | Improve this Doc View Source AsEntity(Object) Unwraps a dynamic entity back into the underlying IEntity Declaration public IEntity AsEntity(object dynamicEntity) Parameters Type Name Description System.Object dynamicEntity the wrapped IEntity Returns Type Description IEntity A normal IEntity | Improve this Doc View Source AsList(Object) Converts a list of IEntity objects into a list of IDynamicEntity objects. Declaration public IEnumerable<dynamic> AsList(object list) Parameters Type Name Description System.Object list typically a List/IEnumerable of Entities or DynamicEntities. Can also be a IDataSource in which case it uses the default stream. Returns Type Description System.Collections.Generic.IEnumerable < System.Object > a list of IDynamicEntity objects Remarks Added in 2sxc 10.21.00 | Improve this Doc View Source CreateInstance(String, String, String, String, Boolean) Create an instance of code lying in a file near this Declaration public virtual dynamic CreateInstance(string virtualPath, string dontRelyOnParameterOrder = \"all params must be named, like 'enable: true, language: ''de-ch''\", string name = null, string relativePath = null, bool throwOnError = true) Parameters Type Name Description System.String virtualPath path to the other code file to compile System.String dontRelyOnParameterOrder dummy parameter to ensure all other parameters are called using named parameters, so that the API can change in future System.String name Override the class name to compile - usually not required as it should match the file name System.String relativePath optional relative path, will usually use the CreateInstancePath System.Boolean throwOnError throw errors if compiling fails, recommended Returns Type Description System.Object An object of the class in the file Remarks Note that the C# code which we are creating an instance of inherits from DynamicCode then it will automatically be initialized to support App, AsDynamic etc. | Improve this Doc View Source CreateSource<T>(IDataSource, ILookUpEngine) Create a IDataSource which will process data from the given stream. Declaration public T CreateSource<T>(IDataSource inSource = null, ILookUpEngine configurationProvider = null) where T : IDataSource Parameters Type Name Description IDataSource inSource The data source which will be the default In of the new data-source. ILookUpEngine configurationProvider An alternate configuration provider for the DataSource Returns Type Description T A typed DataSource object Type Parameters Name Description T A data-source type - must be inherited from IDataSource | Improve this Doc View Source CreateSource<T>(IDataStream) Create a IDataSource which will process data from the given stream. Declaration public T CreateSource<T>(IDataStream inStream) where T : IDataSource Parameters Type Name Description IDataStream inStream The stream which will be the default In of the new data-source. Returns Type Description T A typed DataSource object Type Parameters Name Description T A data-source type - must be inherited from IDataSource | Improve this Doc View Source GetService<TService>() Get a service from the EAV / 2sxc Dependency Injection. Declaration public TService GetService<TService>() Returns Type Description TService An object of the type or interface requested Type Parameters Name Description TService Interface (preferred) or Class which is needed Implements IDynamicCode ICreateInstance ICompatibilityLevel IHasLog"
  },
  "api/dot-net/ToSic.Sxc.Dnn.DynamicCode.html": {
    "href": "api/dot-net/ToSic.Sxc.Dnn.DynamicCode.html",
    "title": "Class DynamicCode | 2sxc and EAV 10",
    "keywords": "Class DynamicCode This is a base class for custom code files with context. If you create a class file for dynamic use and inherit from this, then the compiler will automatically add objects like Link, Dnn, etc. The class then also has AsDynamic(...) and AsList(...) commands like a normal razor page. Inheritance System.Object HasLog DynamicCode DynamicCode Implements IWrapper < IDynamicCode > IDnnDynamicCode IDynamicCode ICreateInstance ICompatibilityLevel IHasLog Inherited Members DynamicCode.UnwrappedContents DynamicCode.App DynamicCode.Data DynamicCode.GetService<TService>() DynamicCode.Content DynamicCode.Header DynamicCode.Link DynamicCode.Edit DynamicCode.CreateInstancePath DynamicCode.CreateInstance(String, String, String, String, Boolean) DynamicCode.CmsContext DynamicCode.AsDynamic(String, String) DynamicCode.AsDynamic(IEntity) DynamicCode.AsDynamic(Object) DynamicCode.AsEntity(Object) DynamicCode.AsList(Object) DynamicCode.CreateSource<T>(IDataStream) DynamicCode.CreateSource<T>(IDataSource, ILookUpEngine) DynamicCode.AsAdam(IDynamicEntity, String) DynamicCode.AsAdam(IEntity, String) HasLog.Log HasLog.InitLog(String, ILog, String) HasLog.InitLog(String, ILog, String, CodeRef) Namespace : ToSic.Sxc.Dnn Assembly : ToSic.Sxc.Dnn.dll Syntax [PublicApi_Stable_ForUseInYourCode] public abstract class DynamicCode : DynamicCode, IWrapper<IDynamicCode>, ICoupledDynamicCode, IDnnDynamicCode, IDynamicCode, ICreateInstance, ICompatibilityLevel, IHasLog, IHasDynCodeContext Properties | Improve this Doc View Source Dnn The DNN context. Declaration public IDnnContext Dnn { get; } Property Value Type Description IDnnContext The DNN context. Implements IWrapper<T> IDnnDynamicCode IDynamicCode ICreateInstance ICompatibilityLevel IHasLog"
  },
  "api/dot-net/ToSic.Sxc.Code.IDynamicCode.html": {
    "href": "api/dot-net/ToSic.Sxc.Code.IDynamicCode.html",
    "title": "Interface IDynamicCode | 2sxc and EAV 10",
    "keywords": "Interface IDynamicCode Dynamic code files like Razor or WebApis. Supports many properties like App, etc. to ensure that the dynamic code has everything you need. Also provides many Conversions between IEntity and IDynamicEntity . Important for dynamic code files like Razor or WebApi. Note that there are many overloads to ensure that AsDynamic and AsEntity \"just work\" even if you give them the original data. Inherited Members ICreateInstance.CreateInstancePath ICreateInstance.CreateInstance(String, String, String, String, Boolean) ICompatibilityLevel.CompatibilityLevel IHasLog.Log Namespace : ToSic.Sxc.Code Assembly : ToSic.Sxc.dll Syntax [PublicApi_Stable_ForUseInYourCode] public interface IDynamicCode : ICreateInstance, ICompatibilityLevel, IHasLog Properties | Improve this Doc View Source App A fully prepared IApp object letting you access all the data and queries in the current app. Declaration IApp App { get; } Property Value Type Description IApp The current app | Improve this Doc View Source CmsContext The CmsContext tells you about the environment, like what page and module we're running in. It's supposed to replace the Dnn object in Razor and WebAPI code. Declaration ICmsContext CmsContext { get; } Property Value Type Description ICmsContext Remarks New in v11.11 | Improve this Doc View Source Content The content object of the current razor view - IF the current view has content. If the view is a list, it will return the first item. Will be null otherwise. To tell if it's the demo/default item, use IsDemoItem . Declaration dynamic Content { get; } Property Value Type Description System.Object A IDynamicEntity object with the current content - or null. | Improve this Doc View Source Data The data prepared for the current Code. Usually user data which was manually added to the instance, but can also be a query. Declaration IBlockDataSource Data { get; } Property Value Type Description IBlockDataSource An IBlockDataSource which is as IDataSource . | Improve this Doc View Source Edit Helper commands to enable in-page editing functionality Use it to check if edit is enabled, generate context-json infos and provide toolbar buttons Declaration IInPageEditingSystem Edit { get; } Property Value Type Description IInPageEditingSystem An IInPageEditingSystem object. | Improve this Doc View Source Header The header object of the current razor view, if it's a list and has a header object. If it's a list and doesn't have a header (and no default), it will return null. To tell if it's the demo/default item, use IsDemoItem . Declaration dynamic Header { get; } Property Value Type Description System.Object A IDynamicEntity object with the current content. Remarks Introduced in 2sxc 10.10 - previously it was called ListContent, now deprecated. | Improve this Doc View Source Link Link helper object to create the correct links Declaration ILinkHelper Link { get; } Property Value Type Description ILinkHelper A ILinkHelper object. Methods | Improve this Doc View Source AsAdam(IEntity, String) Provides an Adam instance for this item and field Declaration IFolder AsAdam(IEntity entity, string fieldName) Parameters Type Name Description IEntity entity The entity, often Content or similar System.String fieldName The field name, like \"Gallery\" or \"Pics\" Returns Type Description IFolder An Adam object for navigating the assets | Improve this Doc View Source AsAdam(IDynamicEntity, String) Provides an Adam instance for this item and field Declaration IFolder AsAdam(IDynamicEntity entity, string fieldName) Parameters Type Name Description IDynamicEntity entity The entity, often Content or similar System.String fieldName The field name, like \"Gallery\" or \"Pics\" Returns Type Description IFolder An Adam object for navigating the assets | Improve this Doc View Source AsDynamic(Object) Convert a dynamic entity and return itself again. This is so coders don't have to worry if the original object was an IEntity or a IDynamicEntity in the first place. Declaration dynamic AsDynamic(object dynamicEntity) Parameters Type Name Description System.Object dynamicEntity the original object Returns Type Description System.Object a dynamic object for easier coding | Improve this Doc View Source AsDynamic(String, String) Take a json and provide it as a dynamic object to the code Declaration dynamic AsDynamic(string json, string fallback = \"{}\") Parameters Type Name Description System.String json the original json string System.String fallback Alternate string to use, if the original json can't parse. Can also be null or the word \"error\" if you would prefer an error to be thrown. Returns Type Description System.Object A dynamic object representing the original json. If it can't be parsed, it will parse the fallback, which by default is an empty empty dynamic object. If you provide null for the fallback, then you will get null back. Remarks New in 2sxc 10.20 | Improve this Doc View Source AsDynamic(IEntity) Wraps an entity into a IDynamicEntity Declaration dynamic AsDynamic(IEntity entity) Parameters Type Name Description IEntity entity the original object Returns Type Description System.Object a dynamic object for easier coding | Improve this Doc View Source AsEntity(Object) Unwraps a dynamic entity back into the underlying IEntity Declaration IEntity AsEntity(object dynamicEntity) Parameters Type Name Description System.Object dynamicEntity the wrapped IEntity Returns Type Description IEntity A normal IEntity | Improve this Doc View Source AsList(Object) Converts a list of IEntity objects into a list of IDynamicEntity objects. Declaration IEnumerable<dynamic> AsList(object list) Parameters Type Name Description System.Object list typically a List/IEnumerable of Entities or DynamicEntities. Can also be a IDataSource in which case it uses the default stream. Returns Type Description System.Collections.Generic.IEnumerable < System.Object > a list of IDynamicEntity objects Remarks Added in 2sxc 10.21.00 | Improve this Doc View Source CreateSource<T>(IDataSource, ILookUpEngine) Create a IDataSource which will process data from the given stream. Declaration T CreateSource<T>(IDataSource inSource = null, ILookUpEngine configurationProvider = null) where T : IDataSource Parameters Type Name Description IDataSource inSource The data source which will be the default In of the new data-source. ILookUpEngine configurationProvider An alternate configuration provider for the DataSource Returns Type Description T A typed DataSource object Type Parameters Name Description T A data-source type - must be inherited from IDataSource | Improve this Doc View Source CreateSource<T>(IDataStream) Create a IDataSource which will process data from the given stream. Declaration T CreateSource<T>(IDataStream inStream) where T : IDataSource Parameters Type Name Description IDataStream inStream The stream which will be the default In of the new data-source. Returns Type Description T A typed DataSource object Type Parameters Name Description T A data-source type - must be inherited from IDataSource | Improve this Doc View Source GetService<TService>() Get a service from the EAV / 2sxc Dependency Injection. Declaration TService GetService<TService>() Returns Type Description TService An object of the type or interface requested Type Parameters Name Description TService Interface (preferred) or Class which is needed"
  },
  "api/dot-net/ToSic.Sxc.Code.html": {
    "href": "api/dot-net/ToSic.Sxc.Code.html",
    "title": "Namespace ToSic.Sxc.Code | 2sxc and EAV 10",
    "keywords": "Namespace ToSic.Sxc.Code Classes DynamicCode This is a base class for dynamic code which is compiled at runtime. It delegates all properties like App and methods like AsDynamic() to the parent item which initially caused it to be compiled. DynamicCodeRoot Base class for any dynamic code root objects. Root objects are the ones compiled by 2sxc - like the RazorComponent or ApiController. If you create code for dynamic compilation, you'll always inherit from ToSic.Sxc.Dnn.DynamicCode. Note that other DynamicCode objects like RazorComponent or ApiController reference this object for all the interface methods of IDynamicCode . Interfaces ICreateInstance Marks objects - usually DynamicCode - which can create instances of other C# files. A special feature is that it must store a reference to the path it's in (provided by the compiler that created this instance). This is important, so that CreateInstance knows what path to start in. IDynamicCode Dynamic code files like Razor or WebApis. Supports many properties like App, etc. to ensure that the dynamic code has everything you need. Also provides many Conversions between IEntity and IDynamicEntity . Important for dynamic code files like Razor or WebApi. Note that there are many overloads to ensure that AsDynamic and AsEntity \"just work\" even if you give them the original data."
  },
  "api/dot-net/ToSic.Sxc.Web.html": {
    "href": "api/dot-net/ToSic.Sxc.Web.html",
    "title": "Namespace ToSic.Sxc.Web | 2sxc and EAV 10",
    "keywords": "Namespace ToSic.Sxc.Web This contains stuff that are specific to 2sxc for all web platforms (Dnn, NopCommerce, Oqtane, etc.) Basically it's the CMS parts, without being specific to DNN implementations. Interfaces IHttp Goal is that anything on this will be able to provide HttpContext operations as needed To abstract .net451 and .net core IInPageEditingSystem Contains status and commands to configure the in-page editing system. ILinkHelper Helpers to create links with parameters or base-tag links (important for SPAs)"
  },
  "api/dot-net/ToSic.Sxc.Dnn.Web.IRazorComponent.html": {
    "href": "api/dot-net/ToSic.Sxc.Dnn.Web.IRazorComponent.html",
    "title": "Interface IRazorComponent | 2sxc and EAV 10",
    "keywords": "Interface IRazorComponent All DNN Razor Pages inherit from this class Inherited Members IDnnDynamicCode.Dnn IDynamicCode.GetService<TService>() IDynamicCode.App IDynamicCode.Data IDynamicCode.Content IDynamicCode.Header IDynamicCode.AsAdam(IDynamicEntity, String) IDynamicCode.AsAdam(IEntity, String) IDynamicCode.Link IDynamicCode.Edit IDynamicCode.AsDynamic(String, String) IDynamicCode.AsDynamic(IEntity) IDynamicCode.AsDynamic(Object) IDynamicCode.AsEntity(Object) IDynamicCode.AsList(Object) IDynamicCode.CreateSource<T>(IDataStream) IDynamicCode.CreateSource<T>(IDataSource, ILookUpEngine) IDynamicCode.CmsContext ICreateInstance.CreateInstancePath ICreateInstance.CreateInstance(String, String, String, String, Boolean) ICompatibilityLevel.CompatibilityLevel IHasLog.Log Namespace : ToSic.Sxc.Dnn.Web Assembly : ToSic.SexyContent.Razor.dll Syntax [PublicApi_Stable_ForUseInYourCode] public interface IRazorComponent : IDnnDynamicCode, IDynamicCode, ICreateInstance, ICompatibilityLevel, IHasLog Properties | Improve this Doc View Source Html Helper for Html.Raw - for creating raw html output which doesn't encode > and < Declaration IHtmlHelper Html { get; } Property Value Type Description IHtmlHelper | Improve this Doc View Source Purpose The purpose of the current execution. The code might be called for showing to a user, or search-indexing. Declaration Purpose Purpose { get; } Property Value Type Description Purpose The value of the current purpose. Methods | Improve this Doc View Source CustomizeData() Override this to have your code change the (already initialized) Data object. If you don't override this, nothing will be changed/customized. Declaration void CustomizeData() | Improve this Doc View Source CustomizeSearch(Dictionary<String, List<ISearchItem>>, IModule, DateTime) Customize how the search will process data on this page. Declaration void CustomizeSearch(Dictionary<string, List<ISearchItem>> searchInfos, IModule moduleInfo, DateTime beginDate) Parameters Type Name Description System.Collections.Generic.Dictionary < System.String , System.Collections.Generic.List < ISearchItem >> searchInfos ToSic.Sxc.Context.IModule moduleInfo System.DateTime beginDate"
  },
  "api/dot-net/ToSic.Sxc.Dnn.Code.html": {
    "href": "api/dot-net/ToSic.Sxc.Dnn.Code.html",
    "title": "Namespace ToSic.Sxc.Dnn.Code | 2sxc and EAV 10",
    "keywords": "Namespace ToSic.Sxc.Dnn.Code Interfaces IDnnDynamicCode This interface extends the IAppAndDataHelpers with the DNN Context. It's important, because if 2sxc also runs on other CMS platforms, then the Dnn Context won't be available, so it's in a separate interface."
  },
  "api/dot-net/ToSic.Sxc.Blocks.html": {
    "href": "api/dot-net/ToSic.Sxc.Blocks.html",
    "title": "Namespace ToSic.Sxc.Blocks | 2sxc and EAV 10",
    "keywords": "Namespace ToSic.Sxc.Blocks A unit of output it 2sxc is called a Block . In DNN-Link, this can be like a Module , except that blocks can be inside other blocks. Looking at it from the Platform like DNN, the entry object is an ICmsBlock which contains context information (in DNNs case, ModuleId etc.). Inside it is an IBlock which can itself contain more IBlocks. Note that each Block itself has Views IView and data specific to that block. Classes Render Block-Rendering system. It's responsible for taking a Block and delivering HTML for the output. It's used for InnerContent, so that Razor-Code can easily render additional content blocks. See also Inner Content (Content Within Other Content) Interfaces IBlock A unit / block of output in a CMS. IView Defines a view configuration which is loaded from an EntityBasedType . Enums Purpose These are the purposes of a block as it's being built. It can be built to generate a web-view, juts for indexing or possibly also for json publishing."
  },
  "api/dot-net/ToSic.Sxc.Blocks.Render.html": {
    "href": "api/dot-net/ToSic.Sxc.Blocks.Render.html",
    "title": "Class Render | 2sxc and EAV 10",
    "keywords": "Class Render Block-Rendering system. It's responsible for taking a Block and delivering HTML for the output. It's used for InnerContent, so that Razor-Code can easily render additional content blocks. See also Inner Content (Content Within Other Content) Inheritance System.Object Render Namespace : ToSic.Sxc.Blocks Assembly : ToSic.Sxc.dll Syntax [PublicApi_Stable_ForUseInYourCode] public class Render Methods | Improve this Doc View Source All(DynamicEntity, String, String, String, Int32, String) Render content-blocks into a larger html-block containing placeholders Declaration public static IHtmlString All(DynamicEntity context, string dontRelyOnParameterOrder = \"all params must be named, like 'enable: true, language: ''de-ch''\", string field = null, string apps = null, int max = 100, string merge = null) Parameters Type Name Description DynamicEntity context The parent-item containing the content-blocks and providing edit-context System.String dontRelyOnParameterOrder System.String field Required: Field containing the content-blocks. System.String apps BETA / WIP System.Int32 max BETA / WIP System.String merge Optional: html-text containing special placeholders. Returns Type Description System.Web.IHtmlString | Improve this Doc View Source One(DynamicEntity, String, IDynamicEntity, String, Nullable<Guid>) Render one content block This is accessed through DynamicEntity.Render() At the moment it MUST stay internal, as it's not clear what API we want to surface Declaration public static IHtmlString One(DynamicEntity dynParent, string dontRelyOnParameterOrder = \"all params must be named, like 'enable: true, language: ''de-ch''\", IDynamicEntity item = null, string field = null, Guid? newGuid = default(Guid? )) Parameters Type Name Description DynamicEntity dynParent The parent-item containing the content-blocks and providing edit-context System.String dontRelyOnParameterOrder IDynamicEntity item The content-block item to render. Optional, by default the same item is used as the context. System.String field Optional: System.Nullable < System.Guid > newGuid Internal: this is the guid given to the item when being created in this block. Important for the inner-content functionality to work. Returns Type Description System.Web.IHtmlString"
  },
  "api/dot-net/ToSic.Sxc.Web.IInPageEditingSystem.html": {
    "href": "api/dot-net/ToSic.Sxc.Web.IInPageEditingSystem.html",
    "title": "Interface IInPageEditingSystem | 2sxc and EAV 10",
    "keywords": "Interface IInPageEditingSystem Contains status and commands to configure the in-page editing system. Namespace : ToSic.Sxc.Web Assembly : ToSic.Sxc.dll Syntax [PublicApi_Stable_ForUseInYourCode] public interface IInPageEditingSystem Properties | Improve this Doc View Source Enabled If editing is enabled or not Declaration bool Enabled { get; [PrivateApi(\"hide the set - it's only used for demo code\")] set; } Property Value Type Description System.Boolean True if enabled, false if not. Methods | Improve this Doc View Source Attribute(String, Object) Generate an HTML attribute by converting the value to JSON but only in edit mode Declaration HtmlString Attribute(string name, object value) Parameters Type Name Description System.String name the attribute name, used for ...= System.Object value the attribute value, used for =\"...\" Returns Type Description System.Web.HtmlString A string but as HtmlString, so it can be used with @Attribute(...) | Improve this Doc View Source Attribute(String, String) Generate an HTML attribute by converting the value to JSON but only in edit mode Declaration HtmlString Attribute(string name, string value) Parameters Type Name Description System.String name the attribute name, used for ...= System.String value the attribute value, used for =\"...\" Returns Type Description System.Web.HtmlString A string but as HtmlString, so it can be used with @Attribute(...) | Improve this Doc View Source ContextAttributes(IDynamicEntity, String, String, String, Nullable<Guid>, String, Int32) Get html-attributes to mark the current context these will be added to a wrapper tag (usually a div) so that in-page editing knows what the context is Please read more about Inner Content (Content Within Other Content) Declaration HtmlString ContextAttributes(IDynamicEntity target, string noParameterOrder = \"all params must be named, like 'enable: true, language: ''de-ch''\", string field = null, string contentType = null, Guid? newGuid = default(Guid? ), string apps = null, int max = 100) Parameters Type Name Description IDynamicEntity target The content-item for which the new context should be. This item usually has a field which has Inner Content (Content Within Other Content) System.String noParameterOrder see Convention: Named Parameters System.String field the field of this content-item, which contains the inner-content-items System.String contentType type name used for 'new' items in a toolbar - usually for inner-content and list-contexts System.Nullable < System.Guid > newGuid the guid of a new item - use null for auto-generate System.String apps Beta / WIP System.Int32 max Beta / WIP Returns Type Description System.Web.HtmlString An System.Web.HtmlString object containing an html-attribute to add to the wrapper of the inner content Remarks History Introduced in 2sxc 8.4 Enhanced with apps in 10.27 | Improve this Doc View Source Enable(String, Nullable<Boolean>, Nullable<Boolean>, Nullable<Boolean>, Nullable<Boolean>, Nullable<Boolean>, Nullable<Boolean>) Ensure that the UI will load the correct assets to enable editing. See How to use Edit.Enable Declaration string Enable(string noParameterOrder = \"all params must be named, like 'enable: true, language: ''de-ch''\", bool? js = default(bool? ), bool? api = default(bool? ), bool? forms = default(bool? ), bool? context = default(bool? ), bool? autoToolbar = default(bool? ), bool? styles = default(bool? )) Parameters Type Name Description System.String noParameterOrder see Convention: Named Parameters System.Nullable < System.Boolean > js optional, default false. automatically true if api or forms is true Will add the basic JS APIs ($2sxc) usually for enabling WebApi calls from your JS code. added in v10.20 System.Nullable < System.Boolean > api optional, default false. automatically true, if forms is true If JS etc. should be included to enable editing API - ensures javascripts are loaded enabling commands to run System.Nullable < System.Boolean > forms optional, default false. Ensures javascripts are loaded enabling forms to open System.Nullable < System.Boolean > context optional, default false. If context (@Specs.Cms.EditContext) should be added, to ensure in-instance data editing System.Nullable < System.Boolean > autoToolbar optional, default false. Disables the automatic generation of a toolbar (this is important, as there usually won't be a toolbar in public pages, which would then trigger the fallback-toolbar to be generated) System.Nullable < System.Boolean > styles optional, default false. Ensures styles to be loaded, which would be necessary for the standard toolbars to look right Returns Type Description System.String null - but we wanted to make sure it returns something, so you can use it in razor like @Edit.Enable(...) Remarks History Introduced in 2sxc 9.30 Enhanced with parameter jsApi in 10.20 | Improve this Doc View Source TagToolbar(Object, String, String, String, Object, Object, Object) Generate a toolbar attribute inside an html-tag See also @HowTo.Razor.Edit.Toolbar Declaration HtmlString TagToolbar(object target = null, string noParameterOrder = \"all params must be named, like 'enable: true, language: ''de-ch''\", string actions = null, string contentType = null, object prefill = null, object toolbar = null, object settings = null) Parameters Type Name Description System.Object target The content-item this toolbar is for, can be null. Usually a @NetCode.DynamicCode.DynamicEntity?text=DynamicEntity or a @HowTo.DynamicCode.Entity?text=Entity System.String noParameterOrder see Convention: Named Parameters System.String actions List of actions on this toolbar. If null, will use default actions for this item. If provided, must be comma-separated action-names - see @Specs.Js.Commands. System.String contentType Content-type of this toolbar, used when it has new or add buttons. This allows you to create a button for a new \"Category\" and another button for a new \"BlogPost\" etc. System.Object prefill Allows a new dialog to receive values as a prefill. For example to already specify a date, title, category, etc. It's a dynamic object, see also the JS documentation on the prefill. System.Object toolbar Full manual toolbar configuration. Setting this will cause actions to be ignored. See @Specs.Js.Toolbar.Js System.Object settings Toolbar settings controlling hover etc. See @Specs.Js.Toolbar.Settings Returns Type Description System.Web.HtmlString If the user is an editor, it returns the attribute containing all the toolbar configuration. Remarks History Added in 2sxc 9.40 | Improve this Doc View Source Toolbar(Object, String, String, String, Object, Object, Object) Generate a toolbar tag - must be used in normal html, not as an attribute. See also @HowTo.Razor.Edit.Toolbar Declaration HtmlString Toolbar(object target = null, string noParameterOrder = \"all params must be named, like 'enable: true, language: ''de-ch''\", string actions = null, string contentType = null, object prefill = null, object toolbar = null, object settings = null) Parameters Type Name Description System.Object target The content-item this toolbar is for, can be null. Usually a @NetCode.DynamicCode.DynamicEntity?text=DynamicEntity or a @NetCode.DynamicCode.Entity?text=Entity System.String noParameterOrder see Convention: Named Parameters System.String actions List of actions on this toolbar. If null, will use default actions for this item. If provided, must be comma-separated action-names - see @Specs.Js.Commands. System.String contentType Content-type of this toolbar, used when it has new or add buttons. This allows you to create a button for a new \"Category\" and another button for a new \"BlogPost\" etc. System.Object prefill Allows a new dialog to receive values as a prefill. For example to already specify a date, title, category, etc. It's a dynamic object, see also the JS documentation on the prefill. System.Object toolbar Full manual toolbar configuration. Setting this will cause actions to be ignored. See @Specs.Js.Toolbar.Js System.Object settings Toolbar settings controlling hover etc. See @Specs.Js.Toolbar.Settings Returns Type Description System.Web.HtmlString If the user is an editor, it returns HTML UL tag containing all the toolbar configuration. Remarks History Added in 2sxc 8.04"
  },
  "api/dot-net/ToSic.Sxc.Dnn.Web.html": {
    "href": "api/dot-net/ToSic.Sxc.Dnn.Web.html",
    "title": "Namespace ToSic.Sxc.Dnn.Web | 2sxc and EAV 10",
    "keywords": "Namespace ToSic.Sxc.Dnn.Web Classes DnnLinkHelper The DNN implementation of the ILinkHelper . Interfaces IDynamicWebApi This interface extends the IAppAndDataHelpers with the DNN Context. It's important, because if 2sxc also runs on other CMS platforms, then the Dnn Context won't be available, so it's in a separate interface. IHtmlHelper helper to quickly \"raw\" some html IRazorComponent All DNN Razor Pages inherit from this class"
  },
  "net-code/razor/blocks.html": {
    "href": "net-code/razor/blocks.html",
    "title": "Razor: Rendering Content-Blocks | 2sxc and EAV 10",
    "keywords": "Razor: Rendering Content-Blocks When using Inner Content the linked content-blocks (apps or pieces of content) must be rendered into the template. Here's how to do it in Razor. Discover More in the Razor Tutorials We have an rich series of Razor tutorials . You should really check them out üëç. How to use There are two common use cases Virtual Panes at item level - in this case, the item has it's own pane for placing apps and content-blocks Very Rich Text - where you add content-blocks and apps in the WYSIWYG Item-Level Virtual Panes Here's a quick example which renders an area with all content-blocks: @ToSic.Sxc.Block.Render.All(Content, field: \"InnerContent\") This example creates the area for the content-blocks (important so that the UI appears for editors to add more blocks) and renders all existing content-blocks in the predefined order into that area. Here's a more manual example of doing the same thing, but done manually to demonstrate what happens and to allow myself to add more css-classes: <div class=\"some-class sc-content-block-list\" @Edit.ContextAttributes(post, field: \"DesignedContent\")> @foreach(var cb in @post.DesignedContent) { @cb.Render(); } </div> If you care about doing it manually, read more about the Edit object . Very Rich Text / Inner-Content Here's an example how to merge content-blocks with a html-text which has placeholders for each content-block, allowing a mix of text/apps. @ToSic.Sxc.Blocks.Render.All(post, field: \"WysiwygContent\", merge: post.Body) There is a new parameter merge, where you fill in your WYSIWYG-field that contains the content-block(s). Here is a blog tutorial on implementing Very Rich Text . Notes and Clarifications The Edit-Object is of type IInPageEditingSystem . Read also Read more on [Razor Edit.ContextAttributes](xref:Razor.ContextAttributes] Demo App and further links You should find some code examples in this demo App Blog App History Introduced in 2sxc 8.4 Clean API and merge capabilitien in 8.9"
  },
  "net-code/razor/edit.contextattributes.html": {
    "href": "net-code/razor/edit.contextattributes.html",
    "title": "ContextAttributes in Razor-Output | 2sxc and EAV 10",
    "keywords": "ContextAttributes in Razor-Output Technically the entire Edit-UI is JavaScript based, so all the buttons, events etc. are client side scripts. These scripts need to know what Context they are in, meaning which DNN-Module, which 2sxc-App, which Zone, permissions etc. By default, this context is already provided by the environment, but sometimes a new context must provide overrides. This is rare, but important, for example using Inner Content (Content Within Other Content) . So the ContextAttributes will provide this information in some hidden html. Discover More in the Razor Tutorials We have an rich series of Razor tutorials . You should really check them out üëç. How it works The Edit.ContextAttributes(...) is always used inside an HTML-tag and will add some attributes with JSON. Any buttons or actions inside that tag will then find this information, and assume that it is has precendence over the global information. What do You need to do? By default, this context is already provided by the 2sxc-environment, but sometimes a new context must provide overrides. For example using Inner Content (Content Within Other Content) . For this you need the Edit.ContextAttributes - see docs here . How to use This example shows the title and will add the standard editing-buttons for the Content item. Here's an Inner Content (Content Within Other Content) example: <div class=\"app-blog-text sc-content-block-list\" @Edit.ContextAttributes(post, field: \"DesignedContent\")> @foreach(var cb in @post.DesignedContent) { @cb.Render(); } </div> In this example, the Edit.ContextAttributes will add some attributes with JSON, which will help the toolbars inside that loop to correctly edit those items, and not the main item around it. How it works The Edit.ContextAttributes(...) is always used inside an HTML-tag and will add some attributes with JSON. Any buttons or actions inside that tag will then find this information, and assume that it is has precendence over the global information. Using ContextAttributes These context-attributes enhance an HTML-tag, so that buttons inside that tag can be in a different context than the original context. Here's a common example: imagine you have a 2sxc-instance (a module showing 2sxc-data) and all the buttons there know the App-ID, the Zone, the Content-Type etc. Inside this module, you can have multiple items but they all still work well in the original context (all items are in the same app, so an edit-dialog will also know the AppId). Read also Inner Content (Content Within Other Content) Demo App and further links You should find some code examples in this demo App Blog App History Introduced in 2sxc 8.4"
  },
  "net-code/razor/edit.html": {
    "href": "net-code/razor/edit.html",
    "title": "Edit / Object in Razor / .net | 2sxc and EAV 10",
    "keywords": "Edit / @Edit Object in Razor / .net The entire Edit-UI is JavaScript based, so all the buttons, events etc. are client side scripts. Writing this JS would be complicated to say the least, so the Edit object provides the Razor-Template an intelligent, fast way to generate what's necessary. Discover More in the Razor Tutorials We have an rich series of Razor tutorials . You should really check them out üëç. How to use Here's a quick example of using the Edit object in a Razor template: <h1 @Edit.TagToolbar(Content)> @Content.Title </h1> <div>...</div> This example shows the title and will add the standard editing-buttons for the Content item. Here's an Inner Content (Content Within Other Content) example: <div class=\"app-blog-text sc-content-block-list\" @Edit.ContextAttributes(post, field: \"DesignedContent\")> @foreach(var cb in @post.DesignedContent) { @cb.Render(); } </div> In this example, the Edit.ContextAttributes will add some attributes with JSON, which will help the toolbars inside that loop to correctly edit those items, and not the main item around it. What's In the Edit Object The Edit -object is always available in all Razor-templates. Read the API: IInPageEditingSystem . A short summary of what's inside Check or Enable Editing Mode Edit.Enable(...) allows you to enable editing functionality even if it's not available by user permissions, see more Edit.Enabled (boolean) Tells you if it's edit-mode or not, allowing your code to output other things if edit is enabled. Work with Toolbars Creates a Toolbar, see Razor Edit Toolbar . Edit.TagToolbar(...) attribute ( 2sxc 9.40+ , recommended) it is used inside a tag like <div @Edit.TagToolbar(Content)> to create best-practice hover toolbars Edit.Toolbar(...) ( 2sxc 8.04+ ) is used like a tag (it generates an invisible <ul> tag) and is used for non-hover toolbars. Create HTML Attributes if in Edit Mode Edit.Attribute create any attribute on the condition that the user may edit the page, using Edit.Attribute(name, string|object) for use in things like <div class=\"...\" @Edit.Attribute(\"data-enable-edit\", \"true\") >...</div> Create Context-Attributes for the UI (advanced use cases) Edit.ContextAttributes(...) creates Context-Information for other edit-functionality. This is advanced, and currently only needed for Inner Content (Content Within Other Content) ) - read about it on [Razor Edit.ContextAttributes](xref:Razor.ContextAttributes] Demo App and further links You should find some code examples in this demo App Blog App History Introduced in 2sxc 8.04 Enhanced with Enable(...) method in 9.30 Enhanced with TagToolbar(...) in 9.40"
  },
  "net-code/razor/index.html": {
    "href": "net-code/razor/index.html",
    "title": "Razor Components / Templates | 2sxc and EAV 10",
    "keywords": "Razor Components / Templates Razor Templates will generate HTML - often based on the data a editor entered, and/or which was provided from the App. <!-- Data Highlights --> <!-- ADAM --> <!-- Server --> <!-- Prepare --> <!-- Data Source --> <!-- Optimzers --> <!-- Process / Awesomize --> <!-- Libraries --> <!-- data formats --> <!-- Browser --> <!-- Frameworks --> <!-- App show parts --> <!-- Interact parts --> <!-- Edit parts --> <!-- Edit UI parts --> <!-- SPA parts --> <!-- Custom highlight boxes - can be controlled by in-page CSS --> you are here (click to zoom) - discover the stack .context-box-process .process-razor { visibility: visible; } Here's an example: @inherits ToSic.Sxc.Dnn.RazorComponent <ul> @foreach(var person in AsList(App.Data[\"Persons\"])) { <li>@person.Name</li> } </ul> Razor Components/Templates are the most powerful templates in 2sxc since you can program anything you want using C#. They use the Asp.Net Razor engine and contain normal HTML intermixed with Razor placeholders like @Content.FirstName or longer code blocks usually marked with @{ ...} . The template files usually reside inside App root folder or sub folder. These always begin with an _ and end with .cshtml . Note The View Configuration determines which razor file is being loaded. If you are using Polymorphism then you may have multiple razor files with the same name in various folders, and Polymorph will decide which one will be shown. Get Started with Razor Templates Discover More in the Razor Tutorials We have an rich series of Razor tutorials . You should really check them out üëç. Install some Apps from the App Catalog - almost all apps use Razor Learn the APIs using The Razor Tutorials using these docs The technical RazorComponent API We also suggest you look into the RazorBlade library which has a lot of neat helpers Read also Views Templates Token Templates Razor Tutorial Tips Tip To use the latest features of 2sxc 10.20+, make sure your razor file begins with the line @inherits ToSic.Sxc.Dnn.RazorComponent Otherwise your Razor templates is based on the default, older component code. History Introduced in 2sxc 1.0"
  },
  "net-code/index.html": {
    "href": "net-code/index.html",
    "title": "C#, Razor & Dynamic Code | 2sxc and EAV 10",
    "keywords": "C#, Razor & Dynamic Code When you implement solutions using 2sxc, most of your server-side code will be written in C#. <!-- Data Highlights --> <!-- ADAM --> <!-- Server --> <!-- Prepare --> <!-- Data Source --> <!-- Optimzers --> <!-- Process / Awesomize --> <!-- Libraries --> <!-- data formats --> <!-- Browser --> <!-- Frameworks --> <!-- App show parts --> <!-- Interact parts --> <!-- Edit parts --> <!-- Edit UI parts --> <!-- SPA parts --> <!-- Custom highlight boxes - can be controlled by in-page CSS --> you are here (click to zoom) - discover the stack .context-box-process .process-cs { visibility: visible; } C# Files in 2sxc Apps You will create many dynamic .cs or .cshtml files in the App folder: Razor components , shared Razor and Razor Code-Behind ( _*.cshtml & _*.code.cshtml ) WebApi Controllers ( *Controller.cs files in the api folder) Shared code ( *.cs files in any folder) Tip These files are in your App folder as Dynamic Code and have three core features: The source code can be changed at any time Changes are immediately live without restarting the CMS Cool APIs üòé help you work with dynamic data (Entities) Quick Example The variable person in the following Razor template is a Dynamic Entity - meaning that it can have different properties depending on the configuration. In this case it seems to have FirstName , LastName and Gender . <div @Edit.Toolbar(person)> @person.FirstName @person.LastName - @Text.First(person.Gender, \"unknown\") </div> The code first creates a div tag which would show a hover-toolbar (to admins only) for editing the person . It then shows the names and the gender - which if not determined will show as unknown . Note This kind of code is easy understand for people who know HTML. It's also very easy to customize if you need a different output - since it's basically HTML and placeholders. What's Where This documentation contains the following sections Dynamic Data Everything you need to understand how data, especially dynamic data, works in 2sxc. Dynamic Code The shared API on all Dynamic Code - Razor, WebApi or other. Razor The APIs special to Razor templates Web API Everything you need to know to create/customize Web API Controllers External API Guides you to access 2sxc-instances on the server from the Theme, WebForms or other MVC components Important APIs when Working with Content-Items/Data TODO: this must be moved elsewhere DataSource and DataStream , the core concept for data read/processing/delivery List of all DataSource Objects how to create custom data sources"
  },
  "specs/cms/templates-razor.html": {
    "href": "specs/cms/templates-razor.html",
    "title": "page moved to | 2sxc and EAV 10",
    "keywords": "page moved to Razor Components / Templates"
  },
  "basics/data/fields/hyperlink-default.html": {
    "href": "basics/data/fields/hyperlink-default.html",
    "title": "Field Input-Type hyperlink-default | 2sxc and EAV 10",
    "keywords": "Field Input-Type hyperlink-default Use this field type for configuring normal links, page or file/image references, storing Hyperlink . It's an extension of the hyperlink field type . Features input field for normal links, page or file/image references ( like http://whatever/whatever , /some-relative-url , page:42 , page:42?something=value , file:2750 , file:2750?w=200 ...) allows users to pick files/images with ADAM (automatic digital asset manager) if activated allows users to pick page reference with the page picker if activated allows users to pick images with the the image manager if activated allows users to pick images with the the file manager if activated Configuring an Hyperlink-Default No relevant settings to be configured. History Introduced in EAV 1.0 / 2sxc 1.0, originally as part of the hyperlink field type Changed in EAV 3.0 / 2sxc 6.0 (it used to have many configuration fields for all kinds of uses, which were then moved to sub-types)"
  },
  "api/dot-net/ToSic.Sxc.Adam.html": {
    "href": "api/dot-net/ToSic.Sxc.Adam.html",
    "title": "Namespace ToSic.Sxc.Adam | 2sxc and EAV 10",
    "keywords": "Namespace ToSic.Sxc.Adam Everything related to ADAM - the automatic digital asset system in 2sxc. When you use AsAdam on any dynamic entity, you'll get IFolder objects which will also contain IFile files. Tip Read about adam in the ADAM specs Interfaces IAsset Describes an ADAM (Automatic Digital Asset Management) asset. This contains properties which both IFolder and IFile have in common. IFile An ADAM (Automatic Digital Asset Management) file This simple interface assumes that it uses int-IDs. IFolder An ADAM (Automatic Digital Asset Management) folder. This simple interface assumes that it uses int-IDs."
  },
  "basics/data/content-types/specs/index.html": {
    "href": "basics/data/content-types/specs/index.html",
    "title": "Content-Type Technical Specs | 2sxc and EAV 10",
    "keywords": "Content-Type Technical Specs This section explains Technical Specs of Content-Types . For an overview check out Understanding Data... . What is a Content-Type Scope? History Introduced in 2sxc 2.0"
  },
  "basics/data/index.html": {
    "href": "basics/data/index.html",
    "title": "Understanding Data... | 2sxc and EAV 10",
    "keywords": "Understanding Data... <!-- Data Highlights --> <!-- ADAM --> <!-- Server --> <!-- Prepare --> <!-- Data Source --> <!-- Optimzers --> <!-- Process / Awesomize --> <!-- Libraries --> <!-- data formats --> <!-- Browser --> <!-- Frameworks --> <!-- App show parts --> <!-- Interact parts --> <!-- Edit parts --> <!-- Edit UI parts --> <!-- SPA parts --> <!-- Custom highlight boxes - can be controlled by in-page CSS --> you are here (click to zoom) - discover the stack .context-box-summary .data-all { visibility: visible; } Data in 2sxc covers various aspects: Data as a developers sees it - as tables of items / Entities Content as an editor sees it - basically bundles of text/image shown on a specific page Content Presentation Settings which configure how the content should be shown for each item Settings at App-Level Language Resources at App-level for multilanguage output Assets (images, documents) belonging to this each data-item / Entity This kind of data is usually used to: Show in the browser with HTML Show in the browser in a JS-application or SPA Edit in the browser Export / import data Combine with other data Use in other sites or mobile apps with a headless backend This kind of data can be used in many ways. Let's start by looking where this fits in the stack: <!-- Data Highlights --> <!-- ADAM --> <!-- Server --> <!-- Prepare --> <!-- Data Source --> <!-- Optimzers --> <!-- Process / Awesomize --> <!-- Libraries --> <!-- data formats --> <!-- Browser --> <!-- Frameworks --> <!-- App show parts --> <!-- Interact parts --> <!-- Edit parts --> <!-- Edit UI parts --> <!-- SPA parts --> <!-- Custom highlight boxes - can be controlled by in-page CSS --> you are here (click to zoom) - discover the stack .context-box2 .data-data { visibility: visible; } Tip The Edit UIs are automatically generated based on the Content-Type Schema which says what fields each kind of data has. Let's look at each piece in detail. Content-types Content-types are the Schema . The are the rules which say that a Person has a FirstName , Photo and Birthday etc. Tip An App usually has a lot of Content-Types. Read more about Content-Type (Schema/Object-Type) Global / Shared Types Usually a Content-Type is part of the App and only available inside that App. In rare cases you may have many sites (Portals) or many Apps which need the same Content-Type . In this case it's smarter to store this in a shared location. Global-Types are Content-Types which are stored in a system folder so they can be used in all Apps of an installation. Entities / Content-Items Entities are Dynamic Data Items . They always belong to a Content-Type and have all the fields specified in that Content-Type . This makes them very dynamic. A Person has different fields than a BlogPost All the Values in an Entity can also be multi-language by default You may want to learn more about: TODO Permissions Owner Languages Assets (Images / Documents) Assets come in 2 Flavors: Private Assets and Shared Assets . Private Assets By default, assets uploaded in the UI belong to the Entity and to the Field they were added to. So the photo daniel.jpg belongs to the Field ProfilePhoto of the Entity Person #5020. Shared Assets If the editor expects to re-use an asset elsewhere and if the Content-Type configuration allows this, then the asset can also be stored in a shared location. ADAM - the Automatic Digital Asset Manager ADAM is a subsystem of 2sxc. It's responsible for managing the files and storing them in a way that assigns Private Assets to the Entities and Fields they belong to. External Data External Data can come from anywhere. Here are some common scenarios: SQL data coming from the DNN database or from another DB CSV data from a file which an editor updates from time to time SharePoint document lists or tables JSON data from another REST WebService External Data is retrieved using one of the following methods: a Visual Query which was configured to get / filter / sort this data C# code creating DataSource objects to retrieve this data C# code using standard .net APIs to get / use this data Once the data is retrieved it can be used in Templates, WebAPIs, JavaScript and SPAs. You may want to learn more about: Content-Types Content-Types in General Field data types Input fields Entities and Dynamic Entities List of Entities Using Entities as Content or as Data Assets ADAM - Automatic Digital Asset Management More Advanced Topics Visual Query Data Sources Headless APIs Metadata"
  },
  "basics/data/fields/string-dropdown.html": {
    "href": "basics/data/fields/string-dropdown.html",
    "title": "Field Input-Type string-dropdown | 2sxc and EAV 10",
    "keywords": "Field Input-Type string-dropdown Use this field type for configuring simple dropdown UI elements, storing string/text data . It's an extension of the string field type . Features provide values to select provide visible labels which are different from the stored value optionally allow users to type in something different (2sxc 9.10) Special Behaviour When the drop-down UI element finds data stored, which doesn't match any of the values it has available, it will leave that data intact unless the users selects something manually Configuring a String-Dropdown This shows the configuration dialog: Using the Dropdown with the optional free-text-entry (2sxc 9.10) This is what the UI looks like, if Enable Free Text is enabled If the user then clicks on the I-bar icon, the input will change to text so you could type something different - like a value which wasn't suggested, or a token. History Introduced in EAV 2.0 2sxc 2.0, originally as part of the string field type Changed in 2sxc 6.0 - Moved to it's own sub-type Enhanced in 2sxc 9.10 - definition moved to json-based and added feature for enabling manual text entry"
  },
  "basics/data/fields/string-dropdown-query.html": {
    "href": "basics/data/fields/string-dropdown-query.html",
    "title": "Field Input-Type string-dropdown-query | 2sxc and EAV 10",
    "keywords": "Field Input-Type string-dropdown-query Use this field type for configuring a dropdown UI elements, storing string/text data . It's an extension of the string field type . The special thing about this is that the items shown for selecting are retrieved from Query and not pre-defined as part of the the field definition. This allows you to look up any kind of data and offer it for selection. Features provide values to select from a query optionally provide query parameters optionally use tokens in query-parameters, to pass on values from other fields in the form provide visible labels which are different from the stored value you can configure which field is stored (like an ID etc.) you can configure which field is shown visible in the drop-down data is semi-lazy loaded, so the query is only hit again, if the dropdown is opened after parameters change optionally allow users to type in something different, in scenarios where this is important Configuring a String-Dropdown-Query This shows the configuration dialog: Query the name of the query to use Advanced Parameters a string like country=Switzerland or country=[Country] to parameterize the query Stream Name the stream name, in case you don't want the Default stream Value Field the value which is stored - basically the field you want in your string at the end Label Field the label which is shown - basically for nice display in the UI Multi-Select Multiple Items enable this if you want to allow multi-select Separator the character which will separate the selected items, like \"company1,company2,company3\" Special Behaviour When the drop-down UI element finds data stored, which doesn't match any of the values it has available, it will leave that data intact unless the users selects something manually History Introduced in EAV 4.5 2sxc 9.11 Enhanced with options to allow edit/delete in 10.20"
  },
  "basics/data/fields/string-font-icon-picker.html": {
    "href": "basics/data/fields/string-font-icon-picker.html",
    "title": "Field Input-Type string-font-icon-picker | 2sxc and EAV 10",
    "keywords": "Field Input-Type string-font-icon-picker Use this field type to create input-fields which let the user pick an icon. It stores a string/text data . It's an extension of the basic string field type . Features shows all icons from the icon-library allows searching supports libraries using prefixes (like font-awesome , which use fa-iconname ) supports libraries using double classes (like glyphicons , which use glyphicons glyphicons-plus ) supports custom libraries you can build, for example using fontello - see instructions lets you auto-load more css-files to load icon-definitions on the fly Result This is what it looks like for the user: Configuring a String-Font-Icon-Picker This shows the configuration dialog: CSS Prefix tells the UI to find all css-classes that start with this, and build icons with them Preview CSS Classes this tells the GUI to add this while showing a preview for icons in the library (so the preview works for Glyphicons etc.) Files tells the UI to load CSS files Important they should usually be in your project, because the UI-JavaScripts can't scan CSS files loaded from externally, like from a CDN Use the token [App:Path] to ensure that it's always loaded from the right Read more Read this post & watch the video which we created when we introduced it History Introduced in EAV 4.0 2sxc 8.4"
  },
  "basics/data/fields/string.html": {
    "href": "basics/data/fields/string.html",
    "title": "Field Data Type: String | 2sxc and EAV 10",
    "keywords": "Field Data Type: String This explains String Fields . For an overview check out Understanding Data... . String data is a basic data type and is very commonly used in many fields. It's used for any basic kind of text, be it a character, a single-line text or wysiwyg-content. Features The basic string field doesn't have any features, since all the features are in the sub-types. Sub-Types of String Fields string-default - simple one or multi-line inputs drop-down for simple dropdowns drop-down-query for dropdowns which retrieve the data from a server wysiwyg font-icon-picker url-path Shared Settings All string field types currently don't have shared settings. Technical Information Storage in the SQL Database in the EAV-Model This is simply stored as a string in the DB. Storage in the SQL Database in the JSON-Model This is simply stored as a JSON string. Null Value Possible In some cases you may add a field to a type which already has Entities created previously. In this case the old data doesn't have a value for the field. If this happens, the field will return null , so you may need to catch this special exception in your code. Read also RazorBlade Text.Has(...) Tutorial RazorBlade Text.First(...) Tutorial History Introduced in EAV 1.0 / 2sxc 1.0 Changed in EAV 3.0 / 2sxc 6.0 (it used to have many configuration fields for all kinds of uses, which were then moved to sub-types)"
  },
  "specs/adam/as-adam.html": {
    "href": "specs/adam/as-adam.html",
    "title": "AsAdam(...) Command | 2sxc and EAV 10",
    "keywords": "AsAdam(...) Command Moved to AsAdam(...) Command"
  },
  "basics/browser/index.html": {
    "href": "basics/browser/index.html",
    "title": "What Happens in the Browser... | 2sxc and EAV 10",
    "keywords": "What Happens in the Browser... <!-- Data Highlights --> <!-- ADAM --> <!-- Server --> <!-- Prepare --> <!-- Data Source --> <!-- Optimzers --> <!-- Process / Awesomize --> <!-- Libraries --> <!-- data formats --> <!-- Browser --> <!-- Frameworks --> <!-- App show parts --> <!-- Interact parts --> <!-- Edit parts --> <!-- Edit UI parts --> <!-- SPA parts --> <!-- Custom highlight boxes - can be controlled by in-page CSS --> you are here (click to zoom) - discover the stack .context-box-summary .browser-all { visibility: visible; } In 2sxc most things just work . These docs give you a deep understanding of how they work so you can figure out really cool stuff. But don't be intimidated - by default things just magically work. This is what web-systems do from a bird's-eyes perspective. On the top you see what happens in the browser (the purple boxes). Show : Output using HTML and a little CSS + JS. This is the simplest way to work with 2sxc. Interact : Content or SPAs where the UI does some hard work like reorganizing data and getting data from JSON endpoints. This requires additional skills. Edit : Editing is built into everything by default and you can customized it as much as you need, up to creating custom WebAPIs, forms and input fields. This document will go into more detail what happens at that level. To understand the server level go to 2sxc Basics Overview . Tip Everything that's green in the image can be customized. Standard CSS and JS Libraries and Frameworks A key goal of 2sxc is to stay out of the way and let you do things using your favorite CSS and JS Frameworks. So the frameworks-section is simply here for you to see that you can use any standard framework or library you want. <!-- Data Highlights --> <!-- ADAM --> <!-- Server --> <!-- Prepare --> <!-- Data Source --> <!-- Optimzers --> <!-- Process / Awesomize --> <!-- Libraries --> <!-- data formats --> <!-- Browser --> <!-- Frameworks --> <!-- App show parts --> <!-- Interact parts --> <!-- Edit parts --> <!-- Edit UI parts --> <!-- SPA parts --> <!-- Custom highlight boxes - can be controlled by in-page CSS --> you are here (click to zoom) - discover the stack .context-box2 .frameworks-browser { visibility: visible; } Basically you can simply add these frameworks to your Razor-template files as <script> or <link> tags, and everything will just work. You may want to learn more about Bundling / Optimizing assets Using Koi to detect if the Skin/Theme already has some frameworks (like Bootstrap) to not load them Custom App HTML is created by the Server-Templates The HTML you need is 100% customizable and comes from the server using your templates. Usually you'll use Razor templates to generate this. <!-- Data Highlights --> <!-- ADAM --> <!-- Server --> <!-- Prepare --> <!-- Data Source --> <!-- Optimzers --> <!-- Process / Awesomize --> <!-- Libraries --> <!-- data formats --> <!-- Browser --> <!-- Frameworks --> <!-- App show parts --> <!-- Interact parts --> <!-- Edit parts --> <!-- Edit UI parts --> <!-- SPA parts --> <!-- Custom highlight boxes - can be controlled by in-page CSS --> you are here (click to zoom) - discover the stack .context-box3 .show-html { visibility: visible; } Since it's just standard HTML there's not much to say about it here. You may want to learn more about: Learn Razor with placeholder to show your data Automatically resize images to your needs Create different output based on the CSS Framework of the page Use Polymorphism to stage changes for review while still running the original live edition SEO Optimize your HTML (google this topic) Custom CSS and JS Assets JS and CSS files are stored in your app folder and included in your output. <!-- Data Highlights --> <!-- ADAM --> <!-- Server --> <!-- Prepare --> <!-- Data Source --> <!-- Optimzers --> <!-- Process / Awesomize --> <!-- Libraries --> <!-- data formats --> <!-- Browser --> <!-- Frameworks --> <!-- App show parts --> <!-- Interact parts --> <!-- Edit parts --> <!-- Edit UI parts --> <!-- SPA parts --> <!-- Custom highlight boxes - can be controlled by in-page CSS --> you are here (click to zoom) - discover the stack .context-box4 .show-js { visibility: visible; } You may want to learn more about Bundling / Optimizing assets Using Webpack to prepare / optimize your assets (google it üòâ) Pointing your JS to target the HTML DOM you created in your templates Creating dynamic JavaScript or Styles based on values in the data Passing CMS data (content-items) to scripts using inline JSON using HTML attributes using REST APIs to get data / content-items the JSON format of data in the APIs Create Awesome SPAs (Single-Page-Applications) 2sxc is great and bundling SPA JS Applications built using Angular, React, Vue or whatever. <!-- Data Highlights --> <!-- ADAM --> <!-- Server --> <!-- Prepare --> <!-- Data Source --> <!-- Optimzers --> <!-- Process / Awesomize --> <!-- Libraries --> <!-- data formats --> <!-- Browser --> <!-- Frameworks --> <!-- App show parts --> <!-- Interact parts --> <!-- Edit parts --> <!-- Edit UI parts --> <!-- SPA parts --> <!-- Custom highlight boxes - can be controlled by in-page CSS --> you are here (click to zoom) - discover the stack .context-box5 .spa-all { visibility: visible; } You may want to learn more about: Bundling / Optimizing assets Using Webpack to prepare / optimize your assets (google it üòâ) Pointing your JS to target the HTML DOM you created in your templates Best practices for integrating Angular in DNN Develop locally and still see the results live in DNN Using dnn-sxc-angular to access data & content from 2sxc ensure that HTTP requests have the right security headers access 2sxc data / content and queries using simple JS APIs Edit data / content directly from the Angular App Customize the toolbar for an item Intercepting refreshes to reload the data instead of reloading the page after edit Automatic In-Page Editing Experience By default 2sxc creates hover toolbars to add modules and on most items which only a Content Editor can see. These let them edit the content or data. It's made possible thanks to the server helper @Edit.TagToolbar in your templates. <!-- Data Highlights --> <!-- ADAM --> <!-- Server --> <!-- Prepare --> <!-- Data Source --> <!-- Optimzers --> <!-- Process / Awesomize --> <!-- Libraries --> <!-- data formats --> <!-- Browser --> <!-- Frameworks --> <!-- App show parts --> <!-- Interact parts --> <!-- Edit parts --> <!-- Edit UI parts --> <!-- SPA parts --> <!-- Custom highlight boxes - can be controlled by in-page CSS --> you are here (click to zoom) - discover the stack .context-box6 .edit-auto { visibility: visible; } Custom In-Page Editing Experience The edit experience can be customized to a very large extent: <!-- Data Highlights --> <!-- ADAM --> <!-- Server --> <!-- Prepare --> <!-- Data Source --> <!-- Optimzers --> <!-- Process / Awesomize --> <!-- Libraries --> <!-- data formats --> <!-- Browser --> <!-- Frameworks --> <!-- App show parts --> <!-- Interact parts --> <!-- Edit parts --> <!-- Edit UI parts --> <!-- SPA parts --> <!-- Custom highlight boxes - can be controlled by in-page CSS --> you are here (click to zoom) - discover the stack .context-box-edit-js .edit-custom { visibility: visible; } You may want to learn more about: quickE / quick Edit to customize the toolbar which adds / deletes modules Specifying different buttons / commands on a toolbar in Razor Specifying different buttons / commands on a toolbar in JavaScript Adding completely custom buttons to the toolbar which will run your own JavaScript Reconfiguring buttons to show filter data to list of items belonging to the current module Modify the new button to include a prefill for new items Edit Form The edit form is generated automatically from the Content-Type information (Schema) and the template configuration. <!-- Data Highlights --> <!-- ADAM --> <!-- Server --> <!-- Prepare --> <!-- Data Source --> <!-- Optimzers --> <!-- Process / Awesomize --> <!-- Libraries --> <!-- data formats --> <!-- Browser --> <!-- Frameworks --> <!-- App show parts --> <!-- Interact parts --> <!-- Edit parts --> <!-- Edit UI parts --> <!-- SPA parts --> <!-- Custom highlight boxes - can be controlled by in-page CSS --> you are here (click to zoom) - discover the stack .context-box-edit-form .browser-edit-ui { visibility: visible; } You may want to learn more about: Configuring Content-Types Data-Types in 2sxc Input Fields in 2sxc Advanced fields like GPS-picker Rules like Enable, Can-be-Translated, Default-values Create custom Input Fields (like a custom color-picker)"
  },
  "basics/server/render/tokens/index.html": {
    "href": "basics/server/render/tokens/index.html",
    "title": "Token Templates | 2sxc and EAV 10",
    "keywords": "Token Templates Token Templates will generate HTML - often based on the data a editor entered, and/or which was provided from the App. Note The View determines which template file is being loaded. Tip Token templates are by far not as powerful as Razor Templates . We always recommend Razor. How it Works Token templates use a Token Engine to generate Html. The convention uses placeholders like [Scope:Property] to put data into the Html. The template files usually reside inside app root folder or sub folder. These end with .html . Placeholders and code usually is marked with [...] like [Content:Name] . Technical Conventions Internally the Token-Engine uses LookUp Objects to find what can be shown. Your most common sources will be App - the current App, which can give you folders (to link JS files) App:Settings - app settings App.Resources - app resources, for multi-language labels etc. Content - the current content Content:Presentation - presentation settings of the current content, if configured Tab - the current DNN page Module - the current DNN module Portal - the current DNN portal DateTime QueryString User Profile Server Tip You can find a complete list of tokens and possible properties here further below. There is also a repeater feature to go through many content-items, using <repeat> . Read more about it in the Token Basics Content and Header Tokens Use [Content:PropertyName] like [Content:FirstName] Use [Content:Presentation:PropertyName] like [Content:Presentation:UseLightbox] Use [ListContent:PropertyName] like [ListContent:Title] note: this is inconsistent with the latest Razor recommendations to use the Header object Use [ListContent:Presentation:PropertyName] like [ListContent:Presentation:UseLightbox] note: this is inconsistent with the latest Razor recommendations to use the Header.Presentation object 2sxc App Tokens The following tokens are related to App-Information and Resources. DNN/DotNetNuke does have these, you can only access them when in a 2sxc-App. Token Description Result [App:Path] /App-Demos/2sxc/Tutorial Tokens [App:PhysicalPath] \\nasw2\\P\\2sxc 2019b\\Web\\App-Demos\\2sxc\\Tutorial Tokens <!-- Internal note: these properties are not surfaced in the tokens ATM {\"DisplayName\", String.IsNullOrEmpty(appName) ? eavAppName : appName }, {\"Folder\", String.IsNullOrEmpty(appName) ? eavAppName : RemoveIllegalCharsFromPath(appName) }, {\"AllowTokenTemplates\", \"False\"}, {\"AllowRazorTemplates\", \"False\"}, {\"Version\", \"00.00.01\"}, {\"OriginalId\", \"\"} --> App Settings Token Description Result [App:Settings:<Property>] App Settings which the App-designer defined. - [App:Settings:UseLightbox] All the information (multi-lingual) true App Resources Token Description Result [App:Resources:<Property>] All the information (multi-lingual) - [App:Resources:GreetingText] All the information (multi-lingual) Hello there Token-Learner DNN Portal Tokens The following tokens are common DNN/DotNetNuke tokens which should work everywhere tokens are in use. Some very common extensions are in the other view Extended Tokens. Token Description Result [Portal:Currency] Currency String USD [Portal:Description] Portal Description [Portal:Email] Portal Admin Email the.admin@2sxc.org [Portal:FooterText] Portal Copyright Text Copyright 2019 by DotNetNuke Corporation [Portal:HomeDirectory] Portal Path (relative) of Home Directory /App-Demos/ [Portal:LogoFile] Portal Path to Logo File [Portal:PortalName] Portal Name DNN / DotNetNuke App Demos [Portal:PortalAlias] Portal URL [Portal:TimeZoneOffset] Difference in Minutes between Portal Default Time and UTC DNN User Tokens Token Description Result [User:DisplayName] User‚Äôs Display Name [User:Email] User‚Äôs Email Address [User:FirstName] User‚Äôs First Name [User:FullName] (deprecated) [User:LastName] User‚Äôs Last Name [User:Username] User‚Äôs Login User Name DNN Membership Tokens Token Description Result [Membership:Approved] Is User Approved? [Membership:CreatedOnDate] User Signup Date [Membership:IsOnline] Is User Currently Online? DNN User Profile Tokens Token Description Result [Profile:<property>] Use any default or custom Profile Property as listed in Profile Property Definition section of Manage User Accounts. Use non-localized Property Name only. - DNN Tab (Page) Tokens Token Description Result [Tab:Description] Page Description Text for Search Engine [Tab:EndDate] Page Display Until Date **** [Tab:FullUrl] Page Full URL https://2sxc.org/dnn-app-demos/en/Apps/Tutorial-Tokens [Tab:IconFile] Page Relative Path to Icon File [Tab:KeyWords] Page Keywords for Search Engine [Tab:PageHeadText] Page Header Text * [Tab:StartDate] Page Display from Date **** [Tab:TabName] Page Name Tutorial - Tokens [Tab:TabPath] Page Relative Path //Apps//Tutorial-Tokens [Tab:Title] Page Title (Window Title) [Tab:URL] Page URL DNN Module Tokens Token Description Result [Module:Description] Module Definition Description 2sxc App is an extension that allows to install and use a 2sxc app. [Module:EndDate] Module Display Until Date **** [Module:Footer] Module Footer Text [Module:FriendlyName] Module Definition Name App [Module:Header] Module Header Text [Module:HelpURL] Module Help URL [Module:IconFile] Module Path to Icon File [Module:ModuleTitle] Module Title App [Module:PaneName] Module Name of Pane (where the module resides) ContentPane [Module:StartDate] Module Display from Date **** DNN DateTime / Ticks Tokens Token Description Result [DateTime:Now] Current Date and Time 12/2/2019 3:05 AM [Ticks:Now] CPU Tick Count for Current Second 637108851369920459 [Ticks:Today] CPU Tick Count since Midnight 637108416000000000 [Ticks:TicksPerDay] CPU Ticks per Day (for calculations) 864000000000 Note that according to the DNN-Source-Code there are a total of 11 sources (status 2015-05-05). The ones not mentioned here are: Date (missing above) Culture (missing) Host (missing) ## QueryString Tokens Extended Standard Tokens The following tokens are still very \"normal\" but not part of the common DNN tokens. They work in 2sxc - but not in many DNN-Tools Token Description Result [QueryString:<Url-Param-Name>] String - [QueryString:TabId] String - this demo shows the TabId which is in the QueryString because of the internal URL-Rewrite. 730 [QueryString:Category] String - click here to see effect Form Tokens Token Description Result [Form:<Form-Param-Name>] Form post values. Usually not needed, but if you do need it, it's here. - Server Tokens Token Description Result [Server:<Server-Property>] Many Server-Properties - [Server:PATH_INFO] Example of a property /Default.aspx All Server variables Token/Variable Description Variable Description [Server:ALL_HTTP] Returns all HTTP headers sent by the client. Always prefixed with HTTP_ and capitalized [Server:ALL_RAW] Returns all headers in raw form [Server:APPL_MD_PATH] Returns the meta base path for the application for the ISAPI DLL [Server:APPL_PHYSICAL_PATH] Returns the physical path corresponding to the meta base path [Server:AUTH_PASSWORD] Returns the value entered in the client's authentication dialog [Server:AUTH_TYPE] The authentication method that the server uses to validate users [Server:AUTH_USER] Returns the raw authenticated user name [Server:CERT_COOKIE] Returns the unique ID for client certificate as a string [Server:CERT_FLAGS] bit0 is set to 1 if the client certificate is present and bit1 is set to 1 if the cCertification authority of the client certificate is not valid [Server:CERT_ISSUER] Returns the issuer field of the client certificate [Server:CERT_KEYSIZE] Returns the number of bits in Secure Sockets Layer connection key size [Server:CERT_SECRETKEYSIZE] Returns the number of bits in server certificate private key [Server:CERT_SERIALNUMBER] Returns the serial number field of the client certificate [Server:CERT_SERVER_ISSUER] Returns the issuer field of the server certificate [Server:CERT_SERVER_SUBJECT] Returns the subject field of the server certificate [Server:CERT_SUBJECT] Returns the subject field of the client certificate [Server:CONTENT_LENGTH] Returns the length of the content as sent by the client [Server:CONTENT_TYPE] Returns the data type of the content [Server:GATEWAY_INTERFACE] Returns the revision of the CGI specification used by the server [Server:HTTP_< HeaderName >] Returns the value stored in the header HeaderName [Server:HTTP_ACCEPT] Returns the value of the Accept header [Server:HTTP_ACCEPT_LANGUAGE] Returns a string describing the language to use for displaying content [Server:HTTP_COOKIE] Returns the cookie string included with the request [Server:HTTP_REFERER] Returns a string containing the URL of the page that referred the request to the current page using an <a> tag. If the page is redirected, HTTP_REFERER is empty [Server:HTTP_USER_AGENT] Returns a string describing the browser that sent the request [Server:HTTPS] Returns ON if the request came in through secure channel or OFF if the request came in through a non-secure channel [Server:HTTPS_KEYSIZE] Returns the number of bits in Secure Sockets Layer connection key size [Server:HTTPS_SECRETKEYSIZE] Returns the number of bits in server certificate private key [Server:HTTPS_SERVER_ISSUER] Returns the issuer field of the server certificate [Server:HTTPS_SERVER_SUBJECT] Returns the subject field of the server certificate [Server:INSTANCE_ID] The ID for the IIS instance in text format [Server:INSTANCE_META_PATH] The meta base path for the instance of IIS that responds to the request [Server:LOCAL_ADDR] Returns the server address on which the request came in [Server:LOGON_USER] Returns the Windows account that the user is logged into [Server:PATH_INFO] Returns extra path information as given by the client [Server:PATH_TRANSLATED] A translated version of PATH_INFO that takes the path and performs any necessary virtual-to-physical mapping [Server:QUERY_STRING] Returns the query information stored in the string following the question mark (?) in the HTTP request [Server:REMOTE_ADDR] Returns the IP address of the remote host making the request [Server:REMOTE_HOST] Returns the name of the host making the request [Server:REMOTE_USER] Returns an unmapped user-name string sent in by the user [Server:REQUEST_METHOD] Returns the method used to make the request [Server:SCRIPT_NAME] Returns a virtual path to the script being executed [Server:SERVER_NAME] Returns the server's host name, DNS alias, or IP address as it would appear in self-referencing URLs [Server:SERVER_PORT] Returns the port number to which the request was sent [Server:SERVER_PORT_SECURE] Returns a string that contains 0 or 1. If the request is being handled on the secure port, it will be 1. Otherwise, it will be 0 [Server:SERVER_PROTOCOL] Returns the name and revision of the request information protocol [Server:SERVER_SOFTWARE] Returns the name and version of the server software that answers the request and runs the gateway [Server:URL] Returns the base portion of the URL Read also Views Templates Razor Templates Razor Tutorial History Introduced in 2sxc 1.0"
  },
  "basics/data/content-types/specs/file-storage.html": {
    "href": "basics/data/content-types/specs/file-storage.html",
    "title": "File-Stored Content-Types | 2sxc and EAV 10",
    "keywords": "File-Stored Content-Types This section explains File-Stored Content-Types . For an overview check out Understanding Data... . Usually Content-Types are stored in the database . For a special use case, content-type definitions can also stored in a json-file. This is used for System Content-Types and Global Content-Types . Examples of such types are: configurations of data-sources (like the SqlDataSource in 2sxc 9.8) any kind of input-configuration types (like string-dropdown, etc. starting in 2sxc 9.10) any kind of global types like view metadata etc. Overview Basically the app-repository is a folder which contains content-type definitions in a contenttype sub folder. The format is the json-format V1 Storage of System Content-Types This is located in: /desktopmodules/ToSIC_SexyContent/.data/contenttypes/ Storage of Custom Global Shared Content-Types This is located in: /desktopmodules/ToSIC_SexyContent/.data-custom/contenttypes/ Storage of Content-Types which are Part of a DNN-Extension DNN Extensions can include content-types, for example to configure a DataSource which is part of that DNN Extension. These files can be anywhere in the system, but the DLL will have to tell 2sxc to load them. Limitation: No GUI As of now the system will pick up the content-types stored there and everything works. BUT there is no built-in UI to edit these. We (2sic) can easily create content-types in a normal 2sxc and export them to json for this purpose, but as of now there is no GUI to do so. This should not affect you, as it's not meant to be managed by anybody else than us as of now. When To Use You will almost never need these, except for 2 important scenarios: Shared Content-Types across all Apps (similar to Shared Content-Types ) When you create a custom data-source , and want to distribute the Configuration Content-Type along with your DLL Future Features & Wishes App level content-types. This would dramatically enhance our ability to upgrade existing apps, as it's easier to detect type-changes. History Added in 2sxc 9.7"
  },
  "basics/browser/edit-ux/context.html": {
    "href": "basics/browser/edit-ux/context.html",
    "title": "In-Page Editing Context (technical) | 2sxc and EAV 10",
    "keywords": "In-Page Editing Context (technical) To ensure that client-side commands like edit can work (this includes all toolbar functionalities), the in-page scripts must pick up various things like AppId and more. This is provided as an Edit-Context and looks a bit like this: <div data-edit-context='{ \"Environment\":{\"WebsiteId\":0,\"WebsiteUrl\":\"//.../en/\",\"PageId\":56,\"PageUrl\":\"http://.../en/\",\"parameters\":[{\"Key\":\"TabId\",\"Value\":\"56\"},{\"Key\":\"language\",\"Value\":\"en-US\"}],\"InstanceId\":421,\"SxcVersion\":\"9.30.0.40333\",\"SxcRootUrl\":\"/\",\"IsEditable\":true}, \"User\":{\"CanDesign\":true,\"CanDevelop\":true}, \"Language\":{\"Current\":\"en-us\",\"Primary\":\"en-us\",\"All\":[]}, \"ContentBlock\":{\"ShowTemplatePicker\":true,\"IsEntity\":false,\"VersioningRequirements\":\"DraftOptional\",\"Id\":421,\"ParentFieldName\":null,\"ParentFieldSortOrder\":0,\"PartOfPage\":true}, \"ContentGroup\":{\"IsCreated\":true,\"IsList\":false,\"TemplateId\":3770,\"QueryId\":null,\"ContentTypeName\":\"e2351b42-87f2-427e-9566-ff271e3e5a9f\",\"AppUrl\":\"/Portals/0/2sxc/Content\",\"AppSettingsId\":null,\"AppResourcesId\":null,\"IsContent\":true,\"HasContent\":true,\"SupportsAjax\":true,\"ZoneId\":2,\"AppId\":2,\"Guid\":\"c238e78b-a6e5-4811-a5c9-51d5ebf48b39\",\"Id\":3894}, \"error\":{\"type\":null}, \"Ui\":{\"AutoToolbar\":true}}'> <span>more stuff...</span> </div> How the Edit-Context is Added By default, it is automatically added if the system detects that the current user has edit-permissions. In 2sxc 9.30 a feature was added to add the context in code, using the Edit.Enable(...) command. Inner-Context for Inner Content When inner content is used, each block of inner-content will change the context, because it will have different IDs etc. So inner-content blocks will add their own context-attributes. See also [Edit.ContextAttributes](xref:Razor.ContextAttributes]. How JS Picks up the Context In most cases the context is picked up automatically - like in such a code: <a onclick=\"$2sxc(this).run('edit', ...)\">edit</a> This kind of code traverses the HTML to look for the closes context-node, and uses it to figure out everything automatically. The second auto-pickup method uses the module/content-block ID, like this: <a onclick=\"$2sxc(4203).run('edit', ...)\">edit</a> This will also find the context, but instead of traversing the DOM upwards, it will check all DOM objects on the page and find the appropriate one for this ID. What's in the Context This information is just conceptual. Do NOT try to access these values in your code, because they will change, and it's not part of any public API! . The concept contains things like: versions (so that the UI can behave as needed and correctly load scripts with cache-breaking) urls so the GUI can perform certain actions correctly language information for the GUI various IDs like the current zone/app, item-IDs, module-IDs etc. Using Edit Context in Your Code You should not use this in your code, as it's not a public api and will change from time to time. History Introduced in 2sxc 1.0 constantly modified/extended in future versions"
  },
  "basics/browser/edit-ux/fields.html": {
    "href": "basics/browser/edit-ux/fields.html",
    "title": "Customizing the Form - 2sxc v11! | 2sxc and EAV 10",
    "keywords": "Customizing the Form - 2sxc v11! 2sxc comes with thousands of features, and the more we add, the more features are requested üòâ. So it's important that you can implement many of these things yourself. Here's an overview over what's possible & how, + what's in store. Create Custom Input Fields This has been completely reworked in 2sxc 11. If you're new here, best watch this video: Then: Check out the Tutorial Examples Read the overview Read about the connector Object Read about customizing the WYSIWYG History Custom Form Fields introduced in 2sxc 7 Completely recreated the system in 2sxc 11 using WebComponents"
  },
  "basics/browser/edit-ux/hide-advanced-features.html": {
    "href": "basics/browser/edit-ux/hide-advanced-features.html",
    "title": "Hide Advanced Features From Non-Admins | 2sxc and EAV 10",
    "keywords": "Hide Advanced Features From Non-Admins For many users 2sxc is too powerful, so there are various mechanisms for hiding the complexity from normal editors. Overview You can auto-hide all advanced toolbar buttons using a special security group. You can create custom toolbars for all users, or even for certain user groups inside a Razor template You can see even more advanced stuff by going into a special debug mode You can see more internal code and messages by loading the JS-Code unminified Auto-Hide Advanced Buttons From Non-Admins This is very simple - 2sxc asks DNN if there is a security group called 2sxc Designers . If such a group exists, then only users in that group (and all host-users) see the advanced button, any other user will not see advanced buttons any more. You can find more instructions in this 2sxc Designers checklist . Custom Toolbars You can create any kind of toolbar, and you can decide to show/hide which ever you want based on security roles in DNN. This requires standard C# / Razor skills and is not explained more in detail right now. Note that you'll find some snippets which should help you in the snippets, to both check what group a user is in, and to generate various custom toolbars. Read also Checklist to setup 2sxc Designers security group History Added ca. 2sxc 2.x"
  },
  "basics/browser/edit-ux/index.html": {
    "href": "basics/browser/edit-ux/index.html",
    "title": "Edit Content or Data in DNN / 2sxc | 2sxc and EAV 10",
    "keywords": "Edit Content or Data in DNN / 2sxc <!-- Data Highlights --> <!-- ADAM --> <!-- Server --> <!-- Prepare --> <!-- Data Source --> <!-- Optimzers --> <!-- Process / Awesomize --> <!-- Libraries --> <!-- data formats --> <!-- Browser --> <!-- Frameworks --> <!-- App show parts --> <!-- Interact parts --> <!-- Edit parts --> <!-- Edit UI parts --> <!-- SPA parts --> <!-- Custom highlight boxes - can be controlled by in-page CSS --> you are here (click to zoom) - discover the stack .context-box-summary .browser-edit, .context-box-summary .browser-edit-ui { visibility: visible; } 2sxc has powerfull CMS features, most of them just work by magic. You can also modify the behavior to fit your needs. When users edit content they usually use in-page buttons to access edit-dialogs and more. Here is a short overview and links to what you need to know. The Standard Edit Dialogs Editing mostly happens in stand-alone dialogs which are JavaScript based (built using Angular). These dialogs are typically dialogs like edit an item edit a combination of items - like a content item and an assigned presentation-settings item Note that other edit-actions happen in-page directly, like move-up/down in a list etc. The configuration of these edit-dialogs happens in the Content Type configuration, which automatically generates the correct dialog for the user. To understand this better, you may want to research Content-Types which define what fields exist in the edit-dialog Field Data Types which determine what options a field has and how it's stored Custom input types for special input types not provided by default Presentation Settings which tell the view how an item is to be shown, check also the content/data differences View/Template configuration which assigns certain content-types to Templates - check out this tutorial Difference between Content and Data and how it affects the in-page editing features All about Toolbars and Editing In-Page Item Edit Toolbars Most of the concept is explained in InPage Toolbars . You will usually create such toolbars from the Razor templates - read about Edit.TagToolbar and Edit.Toolbar The hovering insert-modules toolbar-system is called quickE for quick-edit . There you will also see how to customize the editing experience. Customize Toolbars and Buttons If you want to do more than the default toolbars do, you want to read about: Html toolbars and buttons to customize the toolbars Toolbar settings to configure alignment, hover etc. Buttons to understand in details how buttons work and how to customize them There is also a more technical article if you want to see deeper into the JavaScript . Commands to understand which commands the CMS can run, and how to call them from normal links Custom Code Buttons to create buttons which run your custom code Customize QuickE (Quick Edit) You can also Customize / Configure QuickE (Quick Edit) . Create Custom Input Fields (in the Edit Form) How to create Custom Input Fields Customize the Inner-Content Editing Behaviors TODO: Inner Content - edit/config Documentation WIP - so for now just learn about Inner Content Read also Blog post about Introducing Shake - Mobile Content Editing just turned sexy Blog post about Toolbars for Designers and Developers Blog post about Customize in-page toolbars Blog post about Calling commands from links"
  },
  "basics/browser/edit-ux/quick-edit.html": {
    "href": "basics/browser/edit-ux/quick-edit.html",
    "title": "QuickE (Quick Edit) | 2sxc and EAV 10",
    "keywords": "QuickE (Quick Edit) QuickE (pronounced quick-e ) is the quick-edit feature inside 2sxc to quickly add / move modules and inner content blocks. It supports touch and usually is used with a mouseover. In the current version, it allows you to do the following in normal view-mode: add a content or app module on any position in a DNN panes move / delete any DNN module using a copy-paste concept send any DNN module to an empty pane (which couldn't do paste, as the target is invisible) add a content or app content-block to any inner-content area move / delete any content-block inside an inner-content area Since version 2.0 you can also configure some of this at skin and template level. How to use By default any page that has any 2sxc module added will automatically load quickE because it needs it to provide buttons/toolbars for inner content blocks. We also recommend to include the JS in the skin by default, so that quickE is already enabled on empty pages as well. You can find the necessary asp.net web-control in our Bootstrap Instant Theme Here's how: <%@ Register tagprefix=\"Edit\" tagname=\"QuickEdit\" src=\"~/DesktopModules/ToSIC_SexyContent/DnnWebForms/Skins/QuickEdit.ascx\" %> <Edit:QuickEdit runat=\"server\" /> The above lines first tell .net that this control QuickEdit exists, and then adds it to the page using the <Edit:...> tag. Note that this tag won't create any HTML, it will just tell DNN that it must load the relevant JavaScripts when a user is logged on. Once it's included, it will just work automatically. Auto-Disabled Module-Quick-Edit on Details Pages By default quickE will change it's behavior if it finds inner-content blocks. The reason is that often inner-blocks are found on child pages of something, for example in blog-post details. If the user could insert both modules and inner-content on a details page, then the user would often by accident insert modules (instead of content-blocks). The user would believe that he did the right thing, when in reality the newly added module would now show up on all other details-pages as well. Now there are cases where this auto-disable shouldn't happen - for example in accordeon-style modules which are used on normal pages. This can be configured as explained below: Configuring quickE Quick-Edit Since quickE 2.0 (released in 2sxc 8.7) you can now also configure it a bit. Here are the most important features enable / disable the entire quickE enable / disable module quick-edit enable / disable inner-block quick edit Read more about this in the Html Js documentation page Read also Inpage Toolbars - the item-scoped toolbars used for editing Inner Content Blocks - blog about inner content-blocks Demo App and further links You should find some code examples in this demo App 2sxc blog History quickE 1.0 in 2sxc v08.04 quickE 2.0 with move/delete dnn module and configurable in 2sxc 08.07.00"
  },
  "basics/browser/edit-ux/toolbars/customize.html": {
    "href": "basics/browser/edit-ux/toolbars/customize.html",
    "title": "Custom Toolbars - the Easy new Toolbar Building System | 2sxc and EAV 10",
    "keywords": "Custom Toolbars - the Easy new Toolbar Building System 2sxc 10.27+ offers a new way to build and create toolbars. Instead of the difficult to use object-structure it has a much simpler commands syntax. These are specs for the command syntax. Tip Read how to use in the How-To Customize Toolbars section. Overview The new toolbar builder works in this way: First, take a toolbar template - typically default or empty Then make changes like adding or removing buttons Optionally override certain defaults Render the toolbar with optional overrides These instructions are a simple list of strings. For example: toolbar=empty tells the system to load the empty template new?contentType=Person will add a button new for the type Person edit?entityId=5593 will add an edit button for the item 5593 These instructions are provided as a JSON array of strings - like this: [\"toolbar=empty\", \"new?contentType=Person\", \"edit?entityId=5593\"] Examples of Build-Instructions Every build instruction consists looks as follows: \"\" - an empty string is valid but not very useful \"/this is just a comment\" - a comment if you need to document something inline \"new\" or \"+new\" - add a new-button \"-edit\" - remove a button - like when slimming down a default toolbar \"%delete&show=true\" - a button modifier - to change a default (the delete button is always hidden by default) \"group=my-group\" or \"+group=my-group\" add a button-group \"+group=my-group&pos=2\" add a button group at index 2 (so in the 3rd-position, 0-based) \"new-quote=new?contentType=Quote\" - an identifier followed by a button name - when having multiple new buttons \"%more&color=red\" - a modifier which changes the color of the icon General Syntax of a Build-Instruction The general syntax is as follows (build-instruction)(&build-params optional )(?call-params optional ) Build Instructions A build instruction consist of 1-3 parts an optional prefix like + to add a button or group (this is the default if no prefix is given) % to modify a default thing - like change a the color of the new-button - to remove a button or group from the list $ for system/global things (this is the default if the command is toolbar , params or settings ) / a comment - like \"/here comes a special add-button\" a command and optional addition like toolbar - for setting the default toolbar template toolbar=default will load the default toolbar with all standard buttons toolbar=empty will load an empty toolbar without any buttons settings - for configuring the toolbar settings - see below params - for parameters which are used in all buttons - see below group - to add a group of buttons group=my-group-name gives the group a name, for placing buttons in it `-group= add , edit etc. - all known commands of buttons Build Parameters ( &... ) If you have a build-instruction and need to add some parameters you must separate them with an & and add the parameters in url-style, like &color=red . Build Parameters for Toolbar ( toolbar ) The toolbar currently doesn't have any additional parameters. But you can add &key=value which will be used as settings, if settings are not also provided. Build Parameters for Settings ( settings ) Settings affect how the toolbar is shown. These are the known settings: &color=... - specify a different button - see color &hover=left or =right or =none - default is right &class=my-class to add one or more classes to the toolbar Build Parameters for Params ( params ) Params don't have any additional settings - they only have parameters (after the ? ). See below. Build Parameters for Groups ( group ) Groups currently don't have additional parameters. Build Parameters for Buttons Buttons can have the following parameters: &icon=icon-class-name allows you to set an alternate icon &color=... gives the button another - see color &show=true or &show=false - force show/hide a button Most common use case is to force-show or hide an existing button. For example, if you think it's ok to show the delete button, just use delete&show=true &class=your-class add one or more classes to the button to affect styling &title=some-text - mouseover message Call Parameters ( ? ) Most instructions can have additional call-parameters - separated by a ?... . For example, this would create an additional + button to create a new contact: add-contact=add?contentType=Contact Call Parameters for Toolbars & Settings The toolbar and settings don't have any additional parameters. But you can use ?key=value&key2=value on the toolbar, which will be used as params if params are not provided. Call Parameters for Params Params at the global level will be used by all buttons. The most common params are entityId=some-number - mainly used for edit, delete etc. entityGuid=guid-guid-guid - mainly used for delete contentType=ContentTypeName - mainly used for adding new items title=some-text - mainly used to show a title when asking to delete something isPublished=true|false prefill:Field1=val1&prefill:Field2=val2 etc. for=someKey or for=targetType,keyType,key for list management useModuleList=true|false sortOrder=# Using Prefill Parameters Prefill parameteres are mainly used for creating new items like add?contentType=Book&prefill:Title=This is nice title The syntax is a bit special because you may need to add multiple prefill parameters, like: add?contentType=Book&prefill:Title=Please enter name&prefil:Author=unknown Since many things can go wrong with prefills, this is what you need to know All prefill parameters start with prefill: followed by the field name. The field name is case sensitive, so you'll probably have to write Title instead of title . You can use multiple prefills, like ...&prefill:Title=Hello&prefill:Intro=welcome! When using special characters which cause trouble in urls, make sure they are uriEncoded. If you do the prefill using the razor tag @Edit.Toolbar(...) or @Edit.TagToolbar(...) this happens automatically, but if you use JavaScript to prepare it, you should use encodeURIComponent to prepare the value (not the prefix prefill:... ) Special considerations for each type of field for text fields just write the text as is like prefill:Title=Todays News - remember to encode if you expect special characters. When you encode things, you can also prefill html. for number fields just use prefill:Priority=47 for boolean switch fields just use prefill:UseLightbox=true for dates we suggest to use the same ISO format prefill:PublicationDate=2020-04-01 as this will always be recognized correctly. If you use another format like 4/1/2020 you risk that the UI will auto-detect the date based on the user and maybe pick the wrong number as the month. for dates with time you should really use ISO with Zulu time code like prefill:ShowFrom=2020-04-01T10:30Z . The Z at the end means that it won't adjust for time zones - otherwise the UI may show a different time. for related entities (like prefilling a category) use the target Guid, like prefill:Category=b7c1c2e1-4896-4999-a0bc-87ddf3ce31cb . As of now, you must always use the Guid, IDs are not supported because as the app is exported and re-imported, the IDs will change. to assign multiple entities (like for category fields with multiple categories), separate them with commas, like prefill:Category=b7c1c2e1-4896-4999-a0bc-87ddf3ce31cb,91753b4d-4932-4b22-af1c-f6ac2b76c67a Using Filter Parameters Filter parameteres are mainly used for creating dialogs which show only some items like contentitems?contentType=Book&filter:ModuleId=573 The syntax is a bit special because you may need to add multiple filter parameters, like: contentitems?contentType=Book&filter:ModuleId=573&filter:Author=Daniel Since many things can go wrong with filters, this is what you need to know All prefill parameters start with filter: (without an s ) followed by the field name. The field name is case sensitive, so you'll probably have to write Title instead of title . You can use multiple filters, like ...&filter:Title=Hello&filter:ModuleId=52 When using special characters which cause trouble in urls, make sure they are uriEncoded. If you do the prefill using the razor tag @Edit.Toolbar(...) or @Edit.TagToolbar(...) this happens automatically, but if you use JavaScript to prepare it, you should use encodeURIComponent to prepare the value (not the prefix filter:... ) Using Metadata Parameters The metadata parameters are for creating new metadata or editing existing data. There is a short and a long syntax: for=key - for example, for=file:930 - this will create metadata for a CMS-object with the ID file:930 . for=targetType,keyType,key like for=10,string,file:930 which has the same effect as the previous example. Note Metadata buttons always also need a contentType parameter and usually an entityId parameter. So if an entity already has this metadata-assignment, the dialog will show an edit for that and not create a new one. The entityId should be 0 when no entity exists yet. To use metadata, read more about metadata (TODO). Special Notes Colors Both settings and buttons can have an &color=... parameter. The ... can be just one color or two, like &color=red,green or &color=brown . When specifying colors you can either use standard names like red or HEX-codes like FF0000 . You cannot use the # hash symbol, so when specifying hex-colors, always just write the characters. The button rendering system will auto-detect hex color codes. Note that you can also use semi-transparent hex-codes, like FF000088 . Groups The following button groups exist by default. You can target them to add your buttons, or remove them using -group=name : default - the main initial buttons like edit, add etc. list - anthing having to do with the current list - move-up/down etc. edit-advanced - advanced, not-recommended buttons like delete view - anything related to the view - edit template etc. app - app related buttons Read also check out the list of commands/buttons Demo App and further links You should find some code examples in this demo App TODO: History Added to 2sxc 10.27 .01 in March 2020 Prefill support added in 10.27 .02 in April 2020"
  },
  "basics/browser/edit-ux/toolbars/index.html": {
    "href": "basics/browser/edit-ux/toolbars/index.html",
    "title": "In-Page Edit-Item Toolbars and Buttons | 2sxc and EAV 10",
    "keywords": "In-Page Edit-Item Toolbars and Buttons 2sxc provides super-fast in-page buttons and toolbars for the content-editor to manage and edit everything. The system is very advanced, so what at first may seem trivial can become very complex as you go deeper into customizing it. This is why we are providing an overview. Best Practice: Hover vs. Inline Toolbars The toolbars for the editor can be hovering above the elements - usually appearing on mouse-over, or directly inline. Hover-toolbars can also be configured to always be visible, but this is a rare use case. Recommendation Hover-Toolbars are highly recommended. These appear when the mouse moves over the item to be edited. It gives the editor a perfect preview of the page, without cluttering the screen with buttons. Toolbars which hover and are always visible make sense for buttons which the editor may not discover on his own if they are not always visible, or when the item to hover on would be very small, and hard to discover. Inline (non-hovering) toolbars which are always visible should be used as rarely as possible. A good use for this are admin-tables where each row should directly show the edit-button in a buttons-column. How the System Work To make the magic work, these parts are involved: Server side code detects that editing is allowed. This automatically adds context-information to the module in the form of a hidden JSON attribute. You can see these large attributes in the source-code if you are logged in. It also ensures that the edit-javascripts are loaded by the page. This is either auto-detected, because the user has edit-rights Or it was explicitly enabled using @Edit.Enable(...) in razor . Server side code adds stuff to mark where toolbars should appear... ...either (new in 2sxc 9.40) it adds hidden JSON attributes called sxc-toolbar='{...}' to any tag that should have a hover-menu with the desired configuration and settings , added like this <div @Edit.TagToolbar(...)>...</div> in razor ...or it adds an empty <ul toolbar='{...}' settings='{...}> tag to the page, also with the configuration and settings , added using @Edit.Toolbar(...) in razor or the [Content.Toolbar] equivalent in tokens . These toolbars can also hover using an old convention of adding an sc-element class, but that is deprecated since 2sxc 9.40. JavaScript on the client looks at the HTML and picks up both the special <ul> tags as well as all tags having the sxc-toolbar attribute, reads the configuration and generates the necessary html-tags with the buttons and hover-effects. Based on the context-information and the configuration it will choose if advanced button should appear (like edit-template, which only admins should see). Special hover-placement and other visual things are picked up from the settings . If an editor interacts with the menu, each click will result in JavaScript looking at the closest context-information in the page, and using this information to run a command like edit , new or template-develop . When a command has completed, certain code may reload the view, either using ajax or by reloading the page if ajax is not supported by this particular view. Short Example The toolbar system is 100% JavaScript but offers special helpers to improve the experience in other dev-environments. Here's a simple example using Razor: <h1 @Edit.TagToolbar(Content)> @Content.Title </h1> This creates a invisible toolbar which appears and hovers when the mouse moves over the <h1> tag (if the user has edit-permissions). The toolbar has all the buttons for this Content item. The next example is similar, but instead of all default buttons it only shows the edit-button: <h1 @Edit.TagToolbar(Content, actions: \"edit\")> @Content.Title </h1> Basic Toolbar Concepts and Functionality each toolbar is specific to a content-item a page can have many toolbars, each for a different element / purpose usually toolbars are invisible until the mouse hovers over the area to be edited (best practice, but configurable) various show and hover/float behaviors each toolbar is fully customizable - both in regards to which buttons are shown as well as how they are grouped, how they look etc. toolbars are multi-language easy to add in your template or to your JS Apps mobile capable with shake support How to Use We'll try to provide you with full details of the toolbars for advanced use cases. But in most cases you will need the default toolbars minimal or no customizations. For these common cases you should continue on. Razor @Edit.TagToolbar(...) attribute (hovering, recommended) Razor @Edit.Toolbar(...) (non-hovering) Token Toolbars (using simpler placeholder templates) Core JavaScript Architecture Parts Commands This is what is executed when a button is clicked. Commands are things like edit . Some commands need additional parameters like EntityId , resulting in a command more like run('edit', {EntityId: 27}) . Commands can also be run without toolbars, for example from edit links in tables etc. You can read more about Commands, incl. the full list of current command, parameters and how to create custom commands in the Commands section. Buttons This is a square thingy with an icon, which is will run a Command . When the button is created, it is fully configured with icon, commmand and command-parameters. Button-Group : This is a set of one or more -Buttons_ which are shown together. Often there will be a more button at one end of the set, which will show another button-group when clicked. Toolbar : This is a set of one or more Button-Groups . Toolbar Builder : This is an API-layer which builds the HTML for the Toolbar . Toolbar Bootstrapper : This will pick up HTML placeholders for toolbars and run the Toolbar Builder for these. Defaults : For the entire chain to work properly, various initial configurations Read also quickE - the quick-edit hover toolbar - the quick-edit hover-toolbar for inserting/moving modules Inner Content Blocks - blog about inner content-blocks Demo App and further links You should find some code examples in this demo App 2sxc blog History Added toolbars in 2sxc 1.0 ca. 2011 hundreds of ongoing optimizations Added new feature with the Edit.TagToolbar which works using an sxc-toolbar attribute instead of an <ul> tag in 2sxc 9.40. In this version we also changed the CSS functionality to not use the sc-element attribute, but still support it for backward compatibility."
  },
  "basics/cms/index.html": {
    "href": "basics/cms/index.html",
    "title": "Content Management and Data Editing | 2sxc and EAV 10",
    "keywords": "Content Management and Data Editing Content management and editing data are core features of 2sxc. There are loads of features and functionalities you may want to discover, like: Basic content management Data management Permissions Page-Publishing Workflow - when changes are first in draft mode, till someone else publishes all the changes on the page Inner Content (placing content-in-content), like placing a gallery inside a blog post In-Page CMS Features Toolbars and Toolbar customizations Hide advanced features for normal editors Quick-Edit features - this is the small floating toolbar to add modules to a page without needing the clunky edit-mode"
  },
  "basics/cms/page-publishing/index.html": {
    "href": "basics/cms/page-publishing/index.html",
    "title": "DNN/Evoq Page Versioning / Publishing and Workflow | 2sxc and EAV 10",
    "keywords": "DNN/Evoq Page Versioning / Publishing and Workflow This page explains how a DNN / Evoq does page versioning and workflow, and how to leverage this with 2sxc. Background: DNN / Evoq Page/Module Versioning DNN / Evoq had a few different ways of doing versioning, but since DNN 7.4.2 it basically uses a model which works as follows: Each page has a live version number (for this demo we'll say version P27 - for page 27). On this page, various modules exist, each having their own version number. Let's say we have a gallery-module which is currently on version 6 (MG6) and a module with a form in version 12 (MF12). So the page information currently has: P27 live Module 1: MG6 live Module 2: MF12 live Basic Example with Adding Module If a new module with a form is added in between, DNN will do the following P28 draft (P27 is still live ) Mod 1: MG6 live (same version on live and draft ) Mod 2: MF1 new , regarded as draft Mod 3: MF13 draft (the position has changed, so the module info has changed) As further changes to modules additions / removals / reordering happen, this happens on the P28 version only. So even if we delete or rename a module, the live version will not show this. So DNN mechanims incl. moving/renaming of modules is a DNN/Evoq responsiblity, and is versioned by DNN/Evoq. We'll talk about the internal content of a module further down. Publishing a Page Basically when an editor publishes a page, DNN will do the following: set P28 to the published page tell each module to publish in that version (in case the module support inner versioning - read on...) DNN / Evoq Workflows Because these topics are almost undocumented - and exist in different implementations, they are confusing. You need to know the following about workflows: Workflows apply to the page only, so pages need to know if they have a workflow and which one Modules don't know about these workflows... ...because Modules only get notified when the workflow reaches a \"publish\" state Background: Module Inside/Inner Versioning Modules have their own content which may or may not be versioned. 99% of all modules don't version their content and have no history. And 99.9% don't support DNN/Evoq page versions & publishing . So IF a module doesn't know about these mechanisms, then changes inside that module will not be versioned and they will be live immediately as they are applied. But let's assume our modules do support this, and let's say the gallery with module-info in V6 (it was moved a few times, so it has 6 versions) still has the initial V1 content, which we'll call MGi1 (Module Gallery inside V1). Module Version Tree with Inner Version So let's look at the versioning tree as it really is P27 live Mod 1: MG6 live with MGi1 Mod 2: MF12 live with MFi26 (had made configuration changes, each versioned) Now let's simulate a change... Inner Content Changes Let's say the editor makes a small change to the Form-module. This will notify DNN of a change. As this happens, it must tell DNN that it has a new version - like this, so DNN will also place the page in a new version (for later publishing): P28 draft Mod 1: MG6 live with MGi1 live Mod 2: MF12 live with MFi27 draft Note that if the form module makes more changes, it can choose to report this or not, since basically the newest version is a draft already, on a draft-page. Inner Content Publishing Now once the user decides to publish this page, each module (incl. the Forms-Module) will be notified to publish it's version. DNN will tell the form which version it should publish (in this case v27). The form must take care of whatever processing to ensure that this version is now live / public. 2sxc Support for DNN / Evoq Publishing 2sxc support the core parts of DNN/Evoq Publishing and versioning. To be more specific, it will detect if the page requires a publishing workflow tell DNN/Evoq that on-page content was edited modify the GUI to only allow draft/publish options as it corresponds with the page information listen to DNN/Evoq messages to publish on-page information This sounds simple, but it's very complex because 2sxc can be used in many scenarios, and in some it's not always clear when to draft or publish something. So there are some exceptions, which are documented below. Activating Page Publishing Feature on 2sxc You don't have to do anything - 2sxc asks the environment (DNN/Evoq) it it expects any publishing steps, and will automatically adjust its behavoir. Making Changes Start a DNN-Page Versioning This too happens automatically, if the page has a publishing setup in DNN/Evoq. Auto-Draft and Auto-Publish explained To be sure you understand what's going on, please note the following: Only changes which directly relate to a page cause auto-draft / auto-publish Example 1: A user changes a blog post on a blog-page. The page will get a new draft version and the live blog will show the old one, while the draft will show the new one. When the page is published, the draft will become live. Changes to content-items which are not directly tied to a page, will not cause drafting / publishing Example 2: When the user edits the blog post he also creates another category (which is used as data and not as on-page content). This category is immediately live, but will probably not show up as it's only used in the edited blog-post. Example 3: An admin-user goes into the admin UI and creates a blog post from within the admin-UI. It will not auto-default to draft , as this is not specific to any page. But if the user manually sets it to draft, it will be published when a page showing it is released. Restoring Previous Versions DNN / Evoq has a mechanism for restoring previous page versions, and when implemented perfectly, all modules inside it could also revert back to the state it was in at that time. Such a perfect world is hard to implement and nearly impossible in a dynamic-content setup. For example, apps may have been deleted or content-types (schemas) may have changed. So the idea sounds good, but is impossible to implement correctly. So 2sxc goes the pragmatic way: You can restore any item to a previous version - so you can always roll back a blog-post to a previous copy, but putting the page back into an old version will not roll back anything inside a 2sxc-module. To Restore previous versions of content-items, use the history (clock) icon in the toolbar. Technical Deep Dive - Behind the Scenes In case you run into trouble or need to know more about the mechanisms, here's what you need to know What is an On-Page Change and What is Not By definition, any item created or modified directly from a toolbar button in the front end is regarded as an On-Page change and will start the page-draft process. This is basically all the buttons which normal (non-admin) users see. If you haven't heard of hiding admin-buttons, please read the concept on hiding advanced features . Specifically, this includes the following actions: editing content directly from a toolbar button adding new content to the page from a toolbar button moving items up/down in a content-item list using a toolbar button replacing an item on a page using the toolbar button The following actions are not regarded as on-page changes, and don't auto-force drafting: editing any data from the Admin-UI editing app-resources or app-settings creating / modifying views importing data / importing apps What is Published on Page-Publish and What Not When a page is published, DNN/Evoq will tell each module that it should now publish that specific version assigned to that page version. When this happens, 2sxc does the following: Retrieves the (usually invisible/secret) content-group entity which contains the information, what template and what items are shown on this module. This one is probably stored as a draft from previous changes, as this one keeps track of the items to show and the order to show them in. This draft is then published. Reviews all items on the four primary in-streams, checks each entity and publishes draft versions. The streams it will process are: Default (this is the one provided on Content) Presentation ListContent (the header-content item) ListPresentation (the header presentation item) Note that other streams are not auto-published. This is to prevent side-effects. For example, a Blog-View could have additional streams to visualize authors, categories etc. but these will not be auto-published, as it is assumed that these are helper-data and not specifically on-page data for this page. Publishing Additional Items If you want to auto-publish additional items, just add them to a stream PartOfPage . Inner Content Handling (Very Rich Content) Inner Content is not currently treated as belonging to the page, as it is inside content which is already drafted/published. So inner-content is always published when created. Note that this is not fully tested/implemented, you may have unexpected consequences when working with inner content. Image And Asset Handling Images and assets are not versioned / published, as DNN provides no effective way to enable this. So as of now, the following will happen: if a content-type has a file-field using ADAM with a single file (not library), then draging in an additional file will behave like the publishing, because the new file has a new number, and this is not in use till the item is published if the user drags in an updated file with the same name, it will internally receive a number at the end, and also stay unpublished, as it's a different file on the server if a user manually replaces a file (not drag-drop in ADAM) or deletes a file and then uploads the file with the same name, then this file is live, as it really changed the file on the server if you are using a library-field in ADAM (often used in galleries), then these files are automatically live as well, and deleted files are also removed immediately In case you are using an ADAM library and would like to only show the files which existed before you created an unpublished draft, this can be done in your template. Just remember that certain changes (like file-changes on the server) could change the modified date, and that deleting files also really removes live files as well. Here's how you can change your Razor: @* before, showing all files *@ @foreach(var pic in AsAdam(Content, \"Files\").Files) { <span>@pic.FileName, @pic.LastModificationTime</span><br> } @* only showing \"older\" files *@ @foreach(var pic in ((IEnumerable<ToSic.SexyContent.Adam.AdamFile>)AsAdam(Content, \"Files\").Files).Where(f => f.LastModificationTime <= Content.Modified)) { <span>@pic.FileName, @pic.LastModificationTime</span><br> } Notes and Clarifications As mentioned, this is the default setup. In the case of data-oriented apps, which query data from somewhere, you may have other expectations. At the moment there is no additional mechanism to customize this any further, but we believe that you can easily cover all possible scenarios with this setup. Read also Data Model of DNN-Modules mapping to content In-Depth information about content-binding History Introduces in 2sxc 9.5"
  },
  "basics/cms/permissions/index.html": {
    "href": "basics/cms/permissions/index.html",
    "title": "Permissions | 2sxc and EAV 10",
    "keywords": "Permissions 2sxc / EAV permissions help you configure who may edit/create data - optionally with \"may only save as draft\" (new in 9.30). Note that if something doesn't have custom permissions, you'll still have default permissions that apply (see below): Introduction to Permissions Permissions are usually a list of zero or more permissions - like this: When you edit a permission, it looks like this: To access the permissions, you'll usually find a person-button in the actions of an item: Permission Overview Items which can accept permissions are: Content Types - permissions regulate who can create / edit items of that type Views / Templates - permissions regulate, who can see this view if accessed through url-parameter Apps - permissions regulate across all content types, who may edit/create etc. new in 9.30 Fields - permissions regulate, who may upload files new in 9.30 Permissions consist of the following parts: Requirements - what the current user must fulfill, for it to apply Grants - what is allowed with this permission Understanding Requirements For a permission to apply, you must specify for whom this is. To do this, you can choose various requirements: DNN Permissions: in this case, you can specify if the user has view permissions, this applies User Identity: in this case you can specifiy a user GUID new in 9.30, requires the feature to be enabled Group ID(s): if a user is in any of these DNN groups, the rule applies new in 9.30, requires the feature to be enabled Understanding Grants If a permission applies, it will grant the current user some rights - like creating or editing data. Grants are internally coded as a letter of the alphabet, like: c for create d for delete ƒç for create drafts only f for full (all) permissions A grant can contain multiple rights - like crud for create, read, update, delete. Many grants like f will automatically grant other things (obviously). Default Permissions It's important to understand that for many scenarios, default permissions already apply. Super-users may always do everything, and admins may read/write all data. These default permissions cannot be reduced with new permissions at the moment, so an admin always has read/write and cannot be degraded to lower permissions. Using Permissions in Code As of now, the permissions API isn't final, so if you want to use it in code, you can immitate code you can find in the source. But these commands will change when the API is final, so you'll end up making adjustments. History Basic permissions (ContentType / View) added ca. 2sxc 7 Permissions for draft-save-only added in 2sxc 9.30 Permissions for user IDs and groups added in 2sxc 9.30"
  },
  "basics/data/fields/index.html": {
    "href": "basics/data/fields/index.html",
    "title": "Content-Type Fields | 2sxc and EAV 10",
    "keywords": "Content-Type Fields This explains Content-Type Fields . For an overview check out Understanding Data... . The EAV (Entity-Attribute-Value) system and 2sxc is all about data. The data in the Attributes (aka Fields, Properties) are have a Type This Value-Type or Data-Type describes how data is stored (persisted) in various formats (SQL, JSON, XML) and how it's used in code (C#, JavaScript, Tokens, Angular, ...). These are the core Field-Types . Each may have one or more Input-Types . Boolean - basic true/false or yes/no values Custom - a JSON data type for GPS and other JSON data DateTime - for dates and times Empty - a UI-only field for things like grouping fields together under a title Entity - an item-picker field to choose existing items, for relationships between items - like a book to the author or a blog-post to tags Hyperlink - a special string with helper objects which resolve \"file:72\" to the real link Number - for any kind of number like 1, 2, 3 or with decimals String - for string types or when you other options don't fit General Settings for all Fields @All is not a field-type, but contains core information about a field like name, help-text and more. Every field has these configurations. History Almost all types were introduced in EAV 1.0 2sxc 1.0 Changed continously - most of it in EAV 2-4 which matches 2sxc 4, 6 and 9"
  },
  "basics/data/fields/notes-null.html": {
    "href": "basics/data/fields/notes-null.html",
    "title": "Null Value Possible | 2sxc and EAV 10",
    "keywords": "Null Value Possible In some cases you may add a field to a type which already has Entities created previously. In this case the old data doesn't have a value for the field. If this happens, the field will return null , so you may need to catch this special exception in your code."
  },
  "basics/data/fields/string-url-path.html": {
    "href": "basics/data/fields/string-url-path.html",
    "title": "Field Input-Type string-url-path | 2sxc and EAV 10",
    "keywords": "Field Input-Type string-url-path Use this field type to manage url-paths which you'll usually use to identify an item. For example, if you have a blog and each post has a url with the name, this is the field that you need to match the url to the item. It stores a string/text data . It's an extension of the basic string field type . Features ensure that only url-safe characters are used automatically generate a url based on one or many other fields when editing the first time keeps the generated url stable later on also allows manual editing if needed Configuring a String-Url-Path This shows the configuration dialog: Auto Generate... here you can build a template how the url should be auto-generated Allow Slashes this let's you choose if slashes are desired in this url-fragment - in most cases you don't want slashes Read more Read this post & watch the video when we introduced it History Introduced in EAV 4.0 2sxc 8.3"
  },
  "basics/data/fields/string-wysiwyg.html": {
    "href": "basics/data/fields/string-wysiwyg.html",
    "title": "Field Input-Type string-wysiwyg | 2sxc and EAV 10",
    "keywords": "Field Input-Type string-wysiwyg Use this field type for configuring simple text UI elements, storing string/text data . It's an extension of the basic string field type . Features provide a wysiwyg text box rich WYSIWYG experience using TinyMCE ADAM support to drop images and documents Configuring a String-Wysiwyg TODO TODO is for todo History Introduced in EAV 1.0 2sxc 1.0, originally as part of the string field type Changed in 2sxc 6.0 - Moved to it's own sub-type Changed to be full-screen dialog editing only in 10.00 Added option to switch between full-screen or directly in the form in 10.09 Added options to enable / disable HTML and Advanced buttons in 10.09"
  },
  "basics/data/metadata/index.html": {
    "href": "basics/data/metadata/index.html",
    "title": "Metadata - WIP (not well documented) | 2sxc and EAV 10",
    "keywords": "Metadata - WIP (not well documented) ... Temporary notes on API C# API REST API ../eav/metadata/get appId targetType keyType key contentType (optional) Opening the Dialog for Metadata How to use TODO Introtext - then code: // Some Code Short explanation for the code // maybe more code More explanations How it works TODO ... Notes and Clarifications TODO ... Read also InstancePurpose - which tells you why the current code is running so you could change the data added CustomizeData Demo App and further links You should find some code examples in this demo App FAQ with Categories More links: Description of the feature on 2sxc docs History Introduced in 2sxc ??.??"
  },
  "basics/data/relationships/index.html": {
    "href": "basics/data/relationships/index.html",
    "title": "Entity Relationships | 2sxc and EAV 10",
    "keywords": "Entity Relationships This explains Entity Relationships . For an overview check out Understanding Data... . Data can be related to other data, like when a Book belongs to a Category and also has an Author . Since all data-items are called Entities we call this Entity Relationships . Additionally, there are also Entities which explicitly enhance/describes another thing , but that thing can be anything. That kind of relationship is called Metadata . How it Works Each Entity has many fields, some containing text, numbers etc. but some can also point to another item. These kinds of fields are called Entity Fields . When configured correctly, an entity-field shows a dropdown of items. So in the case of a book, the Author field may show a dropdown of Person items. There are different types of relationships: 1:n means that one thing can refer to many other things - like a book which points to many categories n:1 means that many things can refer to one thing - like many books pointing to the same author n:n means that many things can refer to many things - like many blog-posts pointing to many tags (the blog can refer to many tags, and each tag may be pointed to by many blogs) 1:1 relationships are when one thing refers to one other thing, and neither are re-used again. This is not often used in CMSs. Metadata Relationships This is a very different concept, where an Entity enriches something else. Read more about it in metadata . Advanced Topics Razor LINQ tutorial showing how to navigate between relationships APIs RelationshipFilter Data Source to find items related to another item History Introduced in 2sxc 2.0"
  },
  "basics/server/index.html": {
    "href": "basics/server/index.html",
    "title": "What Happens on the Server... | 2sxc and EAV 10",
    "keywords": "What Happens on the Server... You should get an idea of how the system works and all the things you can customize. This overview lets you see the essential parts of any App including the main Content . <!-- Data Highlights --> <!-- ADAM --> <!-- Server --> <!-- Prepare --> <!-- Data Source --> <!-- Optimzers --> <!-- Process / Awesomize --> <!-- Libraries --> <!-- data formats --> <!-- Browser --> <!-- Frameworks --> <!-- App show parts --> <!-- Interact parts --> <!-- Edit parts --> <!-- Edit UI parts --> <!-- SPA parts --> <!-- Custom highlight boxes - can be controlled by in-page CSS --> you are here (click to zoom) - discover the stack .context-box-summary .server-all { visibility: visible; } This is what web-systems do from a bird's-eyes perspective. The purple boxes show what happens in the browser . They gray boxes show what happens on the server: Awesomeize - this is where you tell the system how the output should look, what image sizes you want, how the HTML should be built etc. Prepare is a layer of data processing where the desired data is selected to be shown, filtered, sorted etc. By default this happens automatically, you don't have to do anything! But you can customize it anyhow you want. Your Data is the original material - probably created by an editor using the CMS UI or in advanced cases it's data coming from SQL, CSV or elsewhere. This data could also be combined from multiple sources. By default this just magically works, you don't have to do anything! Awesomeize / Customise <!-- Data Highlights --> <!-- ADAM --> <!-- Server --> <!-- Prepare --> <!-- Data Source --> <!-- Optimzers --> <!-- Process / Awesomize --> <!-- Libraries --> <!-- data formats --> <!-- Browser --> <!-- Frameworks --> <!-- App show parts --> <!-- Interact parts --> <!-- Edit parts --> <!-- Edit UI parts --> <!-- SPA parts --> <!-- Custom highlight boxes - can be controlled by in-page CSS --> you are here (click to zoom) - discover the stack .context-box-process .process-all { visibility: visible; } You may want to learn more about: Bundling / Optimizing Assets Image Resizing Create App Templates using Razor Create custom WebApi Controllers Using the Headless REST API Preparing Data Something must determine what data should be shown or worked on, which is what happens in the Prepare step. <!-- Data Highlights --> <!-- ADAM --> <!-- Server --> <!-- Prepare --> <!-- Data Source --> <!-- Optimzers --> <!-- Process / Awesomize --> <!-- Libraries --> <!-- data formats --> <!-- Browser --> <!-- Frameworks --> <!-- App show parts --> <!-- Interact parts --> <!-- Edit parts --> <!-- Edit UI parts --> <!-- SPA parts --> <!-- Custom highlight boxes - can be controlled by in-page CSS --> you are here (click to zoom) - discover the stack .context-box-prepare .prepare-all { visibility: visible; } There are a few standard use cases: When working with basic content, the editor has added content to a specific module, so the Prepare step will retrieve this data and give it to the template. If a template is configured to use a Query then 2sxc will prepare the query and give that to the template to work with. The template / WebAPI can also always access all the data in the App using App.Data If you need the data in JavaScript then the headless APIs provide access to both the items, lists and queries of the app. You may want to learn more about: ? Create queries using Visual Query Preparing data in code Preparing data for the full-text search index of the platform DataSources List of all DataSources and their APIs Creating Custom DataSource Understanding Data <!-- Data Highlights --> <!-- ADAM --> <!-- Server --> <!-- Prepare --> <!-- Data Source --> <!-- Optimzers --> <!-- Process / Awesomize --> <!-- Libraries --> <!-- data formats --> <!-- Browser --> <!-- Frameworks --> <!-- App show parts --> <!-- Interact parts --> <!-- Edit parts --> <!-- Edit UI parts --> <!-- SPA parts --> <!-- Custom highlight boxes - can be controlled by in-page CSS --> you are here (click to zoom) - discover the stack .context-box-data .data-all { visibility: visible; } Data has it's own chapter in the docs Understanding Data..."
  },
  "basics/server/assets/optimization.html": {
    "href": "basics/server/assets/optimization.html",
    "title": "Optimizing Template Assets / Client Dependencies (JS & CSS) | 2sxc and EAV 10",
    "keywords": "Optimizing Template Assets / Client Dependencies (JS & CSS) This page is about using DNN Client-Resource-Management aka DNN Client-Depedency-Management in 2sxc templates. Whenever a template needs additional files, specifically JavaScripts CSS Styles Image Resources Fonts These should be included in an optimized form to enhance performance dramatically. This is all about reducing the amount of server requests (very important for end-user performance) and delivering them in the order / places in the HTML-file, optimal for their purpose. So far 2sxc will take care of your JS/CSS files by bundling and minifying them, at the position and order you need. How to use Here's a trivial example for optimizing a CSS with default settings: <link rel=\"stylesheet\" href=\"/style.css\" data-enableoptimizations=\"true\" /> Here's a more typical example, showing an optimization for a style & js which are inside the app-folder. This example uses Razor, so we use @App.Path to ensure it's picking up the right folder (use [App:Path] in token-templates): <link rel=\"stylesheet\" href=\"@App.Path/assets/style.css\" data-enableoptimizations=\"150\" /> <link rel=\"stylesheet\" href=\"@App.Path/assets/lazy.css\" data-enableoptimizations=\"bottom\" /> <script type=\"text/javascript\" src=\"@App.Path/assets/scripts.js\" data-enableoptimizations=\"200:bottom\" /> </script> This shows: a CSS with lower priority (150 instead of the default 100) a css with which will be placed at the page bottom (so it will load later) a script-tag and specifies priority and placement inside the HTML document How it works Basically all <script> tags and all <link rel=\"stylesheet\"> tags can have a data-enableoptimizations attribute, which the system will parse according to the environments capabilities. In DNN 7/8/9 this means it can can assign priorities (to ensure load-order) can assign placement in the html-document (head, body, bottom) Understanding Priorities There is a fairly complicated article in the dnn wiki about client resource management which explains most of it. In general you can say that all DNN scripts load with priorities below 100, the default for all standard scripts is 100, and from there you can order things as you need them. We usually prioritize libraries like 2sxc or angular.min.js with 100 or larger, and then place our own script (like an app-blog.min.js) at numbers like 200. Understanding Placement Placement information can only be supplied in 2sxc 8.9 or higher. The three positions are: head meaning that the resulting data is requested in the HTML header. So it will be loaded before the page is rendered, meaning it's available right from the start but also delays page-build. This is often detrimental in terms of page-load times. this is the default location for CSS files body meaning it will be loaded in the beginning of the HTML body tag. Again this means it's there very early, but will slow down page buildup. this is the default location for JS files bottom meaning it will be loaded at the end of the html document. This is actually great for page-loading performance to improve above-the-fold loading. But it takes a bit of work to perfect its application. Read also DNN API Documentation Blog about problems with the DNN resource management in case you run into problems Demo App and further links You should find some code examples in this demo App basically this is used in every app in the app-catalog History Introduced in Version 04.00 with true/false Enhanced in Version 06.00 with priority numbers Enhanced in 08.09 with position head/body/bottom"
  },
  "basics/data/fields/custom-gps.html": {
    "href": "basics/data/fields/custom-gps.html",
    "title": "Field Input-Type custom-gps | 2sxc and EAV 10",
    "keywords": "Field Input-Type custom-gps Use this field type for selecting positions on a map, storing custom JSON data . Features Auto-find the location based on address data already added to the form Pin can be moved manually Configure Custom-Gps Configure which fields are to be used to find the coordinates History Introduced in 2sxc 2.0"
  },
  "basics/data/fields/custom.html": {
    "href": "basics/data/fields/custom.html",
    "title": "Field Data Type: Custom | 2sxc and EAV 10",
    "keywords": "Field Data Type: Custom This explains Custom Fields . For an overview check out Understanding Data... . Custom data is a basic data type . It's used to store JSON for special use cases. Sub-Types custom-gps custom-json Recommendation Since 2sxc 10 there is a special AsDynamic which you can use to work with JSON data in Razor templates. Technical Information Storage in the SQL Database in the EAV-Model This is converted to a string when stored as a string in the DB, and converted back to a boolean when the data is loaded. Storage in the SQL Database in the JSON-Model This is simply stored as a string value in json, so kind of JSON in JSON. History Introduced in EAV 1.0 2sxc 1.0"
  },
  "basics/data/fields/hyperlink-library.html": {
    "href": "basics/data/fields/hyperlink-library.html",
    "title": "Field Input-Type hyperlink-library | 2sxc and EAV 10",
    "keywords": "Field Input-Type hyperlink-library Use this field type for complete sets of files (like image galleries), storing Hyperlink . It's an extension of the hyperlink field type . Configuring an Hyperlink-Library This shows the configuration dialog: Folder Depth - if sub folders are allowed and how deply they may be nested. Use 0 for no sub folders, 1 for 1 level only, 2 for 2 levels (like /gallery/subgallery) etc. Use a large number like 100 for practically unlimited sub folders, but not recommended for realistic use cases. Allow assets In Root Folder - specifies if files may be placed in the core / root container, or if the user is required to create sub folders. This would be the case if you expect multiple groups of files, but never a top-level list. Metadata Content Types - the content-type (or types) to be used for assets in this library. To use this, first create a content-type (like DownloadMetadata or MugshotMetadata) and type the name of the content type into this field. History Introduced in EAV 1.0 / 2sxc 1.0, originally as part of the hyperlink field type Changed in EAV 3.0 / 2sxc 6.0 (it used to have many configuration fields for all kinds of uses, which were then moved to sub-types)"
  },
  "basics/data/fields/hyperlink.html": {
    "href": "basics/data/fields/hyperlink.html",
    "title": "Field Data Type: Hyperlink | 2sxc and EAV 10",
    "keywords": "Field Data Type: Hyperlink This explains Hyperlink Fields . For an overview check out Understanding Data... . Hyperlink data is a basic data type and is actually a string, but on reading it's automatically converts to an output-friendly format. It's used for normal links, page or file/image references as well as for complete sets of files (like image galleries). Features The basic hyperlink (links/files) field is used for normal links, page or file/image references as well as for complete sets of files (like image galleries) Sub-Types of Hyperlink Fields hyperlink-default - it's input field for normal links, page or file/image references. In menu it has ADAM (automatic digital asset manager), page picker, image manager and file manager. hyperlink-library - it's for complete sets of files (like image galleries). Shared Settings All Hyperlink-Field Types have the following settings: File Filter - list of extensions allowed in file/image picker. Example: .jpg, .bmp, .png, .gif Paths - this is only needed if you use the old file pickers (not ADAM). Root paths for the picker dialog - ideal if you want all images for this Content-Type to be in the same folder use the syntax foldername - without \"/\" in front to specify a subfolder of the portal-root. Examples are \"Apps\" or \"Gallery\" or \"Employees/Photos\" you can also use subfolders - that would be \"Employees/Photos\" always remember that this folder must already exist, and DNN must know that it is visible (readable) by the editing user. There are cases where the security settings were not set correctly in dnn - then the file picker won't show anything. Default Dialog - none, ADAM, page picker, image manager or file manager Show Page Picker - show page picker in the drop-down Show Image Manager - show image manager in the drop-down Show File Manager - show file manager in the drop-down Show Adam - show the ADAM (automatic digital asset manager) in the drop-down menu. Buttons - will let you specify which buttons are visible directly. The default is \"adam,more\" but you could also do \"adam,page,more\" or just \"page\". File / image are currently not supported, because as of now, DNN doesn't have a good image/file browser so we discourage its use. Automatic Conversions of file and page references The hyperlink data internally can contain values like: http://whatever/whatever - will not be converted /some-relative-url - will not be converted page:42 - will usually be converted to the real url of the page in DNN page:42?something=value - this will also be converted, but keeping the parameters page:42#something=value - this will also be converted, but keeping the parameters file:2750 - will usually be converted to the real url of the file in DNN file:2750?w=200 - this will also be converted, but keeping the parameters (like for thumbnails) file:2750#page=2 - this will also be converted, but keeping the parameters (like for pdf-page-links) In 99% of all use cases, you want to generate html with a real link, which is why the content-objects in Razor will deliver an http:... instead of file:27 . Some demo-code: // assume that Content is a dynamic entity // assume that Image actually contains \"file:274\" <img src=\"@Content.Image\"> // the result is now <img src=\"/portals/0/adam/20603963uaothutaoer/daniel.jpg\"> Accessing the Real Inner Value In rare cases you may want the originl page:22 instead of the converted value. To do this, use AsEntity(yourObject) and then use the EAV API on IEntity to read the underlying original value. Special: Hyperlink Libraries A special use case is Libraries - where a hyperlink-field doesn't actually contain anything, but is a placeholder for ADAM assets. In such a scenario, you will use AsAdam(...) in your code to get the folders/files in the ADAM repository. Null Value Possible In some cases you may add a field to a type which already has Entities created previously. In this case the old data doesn't have a value for the field. If this happens, the field will return null , so you may need to catch this special exception in your code. A common shorthand to work with this is either the ?? operator or using RazorBlade with Text.Has(...) or Text.First(...) . Technical Information Storage in the SQL Database in the EAV-Model This is simply stored as a string in the DB, in the original format like page:22 . Storage in the SQL Database in the JSON-Model This is simply stored as a JSON string in the original format like page:22 . Read also Field Data Type: Hyperlink RazorBlade Text.Has(...) Tutorial RazorBlade Text.First(...) Tutorial History Introduced in EAV 1.0 / 2sxc 1.0 Changed in EAV 3.0 / 2sxc 6.0 (it used to have many configuration fields for all kinds of uses, which were then moved to sub-types)"
  },
  "basics/data/content-types/specs/object-structure.html": {
    "href": "basics/data/content-types/specs/object-structure.html",
    "title": "Content-Type Object Structure | 2sxc and EAV 10",
    "keywords": "Content-Type Object Structure This section explains Content-Type Object Structure . For an overview check out Understanding Data... . Warning What follows is very technical. For most use cases you don't need to know this stuff. Content-Types are internally structured as follows (in C# / .net): Metadata of Content-Types and Attributes Both the Content-Type and Attributes can have Metadata providing more information about them. Since the Metadata for Content-Types and Attributes is stored as Entities, it's also multi-language History Added in 2sxc 1.0"
  },
  "basics/data/content-types/specs/sql-storage.html": {
    "href": "basics/data/content-types/specs/sql-storage.html",
    "title": "SQL-Stored Content-Types | 2sxc and EAV 10",
    "keywords": "SQL-Stored Content-Types This section explains SQL-Stored Content-Types . For an overview check out Understanding Data... . Usually Content-Types are stored in the database as part of the App they were defined in. This is how they are stored: A table contains the primary entry with StaticName (usually a GUID) and the nice Name - the one you give it. Other tables list the fields of this Content-Type and assigns them to the Type Description of the Content-Type is Metadata - so it's also a multi-lingual Entity which is stored in the App Descriptions of the Fields are also Metadata - so it's also a multi-lingual Entity which is stored in the App Nice to Know For advanced scenarios you can also share Content-Types across Apps In even more advanced scenarios you can use file based Content-Types History Added in 2sxc 1.0"
  },
  "basics/data/entities/index.html": {
    "href": "basics/data/entities/index.html",
    "title": "Entities (Data, Records, Items) | 2sxc and EAV 10",
    "keywords": "Entities (Data, Records, Items) This explains Entities aka Data Items . For an overview check out Understanding Data... . Every thing , record or object in 2sxc is called an Entity . So if you have a list of Book objects, then each Book is an entity. Many other systems use the term Record , Content Item , Item or Object . Tip Before you start: Remember that you usually don't need this if you are creating Razor templates or WebApi - for that, you want to read How to Use a Dynamic Entity . Entity - The Data / Content Items Entities are structured as follows: EAV+D = Entity-Attribute-Value + Dimension EAV stands for Entity , Attribute , Value The D stands for Dimension , it says what Dimension (Language) a Value is for How it Works Each Entity has many fields, some containing text, numbers etc. The fields an Entity can have is defined in the Content-Type , so each Entity is like a record of that type. This basic principle is used everywhere in 2sxc. For example, all these things are Entities: Simple Content items in the Content-App are entities containing a title, body and image View configurations are entities containing name, thumbnail, template-name etc. Blog posts in the Blog App are entities containing around 20 fields Tag items in the Blog App are also entities Anything you define in your apps will result in entities Multilanguage Data Each field can also be multilanguage, so there are actually many Descriptions in a multi-language product Entity. Relationships Entities are much more than just records, as they can have relationships . Input Forms and Fields (like WYSIWYG) The input mask is automatically generated from the Content-Type . Based on the specifications, it will generate the correct Input-Field like a simple text field, a multiline text field, a WYSIWYG or even a file-uploader. APIs ToSic.Eav.Data Namespace has almost everything you see here IEntity describes the main unit, the Entity IContentType defines what fields exist, it's the ContentType / Schema IAttributeBase , IAttribute , IAttribute<T> , Attribute<T> determine the internal model how an attribute is built IValue , IValue<T> , Value<T> determines how values in an attribute are stored, because an attribute like Description can have many values in different languages ILanguage , IDimension , Language languages and dimensions determine how the values are used in each language ITarget , Target this determines if the Entity is by itself, or if it's enriching something else - in which case this Entity is Metadata. sometimes an Entity may itself have more metadata, which would then be stored here. Future Features & Wishes Dynamic Attributes using JSON data or similar - see Field Data Type: Custom History Introduced in 2sxc 1.0"
  },
  "basics/data/fields/all.html": {
    "href": "basics/data/fields/all.html",
    "title": "General Field Settings (Input-Type | 2sxc and EAV 10",
    "keywords": "General Field Settings (Input-Type @All) This explains General Field Settings . For an overview check out Understanding Data... . Every field has some general settings which apply to all fields. It's the information every field has to describe it's label, help-text etc. Configuring the All field-type Any field you open will contain the UI to configure the All fields. This is what it looks like: Name is the is the label to be shown (multi-language) Important: the name is not the name used in code, which shouldn't change - this is the visible label Notes a short help-text which will appear in a (?) bubble Visible... show this field in the UI Required if it's required Default Value what is prefilled when you create a new item Disabled if it's disabled (grayed out) Validation... what rule it must match to allow saving History Introduced in EAV 1.0 / 2sxc 1.0"
  },
  "basics/data/fields/boolean-default.html": {
    "href": "basics/data/fields/boolean-default.html",
    "title": "Field Input-Type boolean-default | 2sxc and EAV 10",
    "keywords": "Field Input-Type boolean-default Use this field type for configuring simple true/false UI elements, storing boolean/boolean data . It's an extension of the basic boolean field type . Features provide a basic on/off input field (toggle switch) Configure Boolean-Default No relevant settings to be configured. To configure the default value, set it in the general settings. History Introduced in EAV 1.0 2sxc 1.0"
  },
  "basics/data/fields/empty-default.html": {
    "href": "basics/data/fields/empty-default.html",
    "title": "Field Input-Type empty-default | 2sxc and EAV 10",
    "keywords": "Field Input-Type empty-default Use this field type for grouping fields together under a title, storing empty (groups/title) . It's an extension of the basic empty field type . Features a UI-only field for grouping fields together under a title Configuring a Empty-Default This shows the configuration dialog: Collapsed by default is for setting whether the field group is collapsed by default. If set to true, then the field group is collapsed by default. History Introduced in EAV 1.0 2sxc 1.0"
  },
  "basics/data/fields/empty.html": {
    "href": "basics/data/fields/empty.html",
    "title": "Field Data Type: Empty | 2sxc and EAV 10",
    "keywords": "Field Data Type: Empty This explains Empty Fields . For an overview check out Understanding Data... . Empty data is a basic data type and is for adding things to the UI (input form) which doesn't actually save any data. A common use is group-headers which contain a text, but don't result in data being stored. Features The basic empty field doesn't have any features, since all the features are in the sub-types. Sub-Types of Empty Fields empty-default - a UI-only field for things like grouping fields together under a title Shared Settings Doesn't have shared settings. Technical Information Storage in the SQL Database in the EAV-Model This is not stored, as it is specifically meant to not store data. Storage in the SQL Database in the JSON-Model This is not stored, as it is specifically meant to not store data. History Introduced in EAV 1.0 2sxc 1.0"
  },
  "basics/data/fields/entity-default.html": {
    "href": "basics/data/fields/entity-default.html",
    "title": "Field Input-Type entity-default | 2sxc and EAV 10",
    "keywords": "Field Input-Type entity-default Use this field type for configuring an entity-picker storing Entity relationships . It's an extension of the entity field type . Features Selector where you can select entity items of a specific type Enables multiple items to select if activated Provide edit, add/remove, delete functionality if activated An order of the selected list is preserved and order can be changed with drag and drop Configuring an Entity-Default No relevant settings to be configured. History Introduced in EAV 1.0 / 2sxc 1.0, originally as part of the entity field type Changed in EAV 3.0 / 2sxc 6.0 (it used to have many configuration fields for all kinds of uses, which were then moved to sub-types) Enhanched in EAV 4 / 2sxc 7 when item-delete was introduced, to allow for \"private\" items"
  },
  "basics/data/fields/entity-query.html": {
    "href": "basics/data/fields/entity-query.html",
    "title": "Field Input-Type entity-query | 2sxc and EAV 10",
    "keywords": "Field Input-Type entity-query Use this field type for configuring an entity-picker storing relationships . It's an extension of the entity field type . The special thing about this is that the items shown for selecting are retrieved from Query and not based on a content-type name. This allows you to look up any kind of data and offer it for selection. Features provide values to select from a query optionally specify other streams than Default optionally provide query parameters optionally use tokens in query-parameters, to pass on values from other fields in the form todo/maybe data is lazy loaded, so the query is only hit when the dropdown is opened Configuring an Entity-Query This shows the configuration dialog: Query the name of the query to use Advanced Parameters a string like country=Switzerland or country=[Country] to parameterize the query Stream Name the stream name, in case you don't want the Default stream In addition to these settings, you also have the basic entity settings which enhance the features you are using here. Important Notes Note that this stores item-relationships so you can only use it to select items which exist in the 2sxc/EAV database. You cannot use it to select items provided from non-entity sources, like Sql-data or File-lists. To select such data, you'll need the String-Dropdown-Query instead. History Introduced in EAV 4.x 2sxc 9.11"
  },
  "basics/data/fields/number-default.html": {
    "href": "basics/data/fields/number-default.html",
    "title": "Field Input-Type number-default | 2sxc and EAV 10",
    "keywords": "Field Input-Type number-default Use this field type for configuring simple number UI elements, storing number . It's an extension of the basic number field type . Features Input field of type \"number\". Can be used for numbers like: Simple numbers Numbers with decimal digits GPS-Coordinates Configuring a Number-Default This shows the configuration dialog: Number of Decimals is for setting the number of decimals. If a value is 0 then only integers ergo whole numbers allowed. Minimum minimum value (for example, if a number should never be smaller than 1970) Maximum maximum value (eg. 2013) History Introduced in EAV 1.0 2sxc 1.0"
  },
  "basics/data/fields/number.html": {
    "href": "basics/data/fields/number.html",
    "title": "Field Data Type: Number | 2sxc and EAV 10",
    "keywords": "Field Data Type: Number This explains Number Fields . For an overview check out Understanding Data... . Number data is a basic data type and is for any kind of number 1,2,3 or very detailed numbers like 47.020503020400203 which are common in GPS coordinates. Features The basic number field doesn't have any features, since all the features are in the sub-types. Sub-Types of Empty Fields number-default - is the input field for any kind of numbers like simple numbers, numbers with decimal-digits or very detailed numbers like 47.020503020400203 which are common in GPS coordinates. Shared Settings Don't have shared settings. Technical Information Storage in the SQL Database in the EAV-Model This is converted to a string when stored as a string in the DB, and converted back to a boolean when the data is loaded. Storage in the SQL Database in the JSON-Model This is simply stored as a number in json. Null Value Possible In some cases you may add a field to a type which already has Entities created previously. In this case the old data doesn't have a value for the field. If this happens, the field will return null , so you may need to catch this special exception in your code. History Introduced in EAV 1.0 2sxc 1.0"
  },
  "basics/data/fields/string-default.html": {
    "href": "basics/data/fields/string-default.html",
    "title": "Field Input-Type string-default | 2sxc and EAV 10",
    "keywords": "Field Input-Type string-default Use this field type for configuring simple text UI elements, storing string/text data . It's an extension of the basic string field type . Features provide a textbox single-line or multi-line Configuring a String-Default This shows the configuration dialog: Row Count is for setting the text-box height. Empty means default = 1 History Introduced in EAV 1.0 2sxc 1.0, originally as part of the string field type Changed in 2sxc 6.0 - Moved to it's own sub-type"
  },
  "basics/cms/adam/index.html": {
    "href": "basics/cms/adam/index.html",
    "title": "ADAM - Automatic Digital Asset Management | 2sxc and EAV 10",
    "keywords": "ADAM - Automatic Digital Asset Management In a CMS environment, images and PDFs usually belong to a content-item. The user shouldn't have to worry about saving it in the right place. Ideally it's only used there, and when the content becomes obsolete, so do the assets that belong to it. Tip This is what ADAM is all about. It allows editors to just add images and files. ADAM will take these and magically store it somewhere so the user doesn't have to worry about folders and naming. Warning Since ADAM does everything behind the scenes, it's recommended that users don't try to link to files of another content-item, because that would defeat the purpose. It would also not allow any clean-up in future, because you wouldn't know if the asset was re-used. How ADAM works Internally ADAM creates a folder for each Entity (Content-Item) using the GUID of that item. It also creates a sub-folder for each field, so that a logo.png used in the Logo-field is separate from a my-case-study.pdf used in the CaseStudy-field. The final folder structure looks like this [portal-root]/adam/[app-folder-name]/[compact-entity-guid]/field/ How to Use ADAM is a standard part of 2sxc, it's automatically in use everywhere. Any link/file or wysiwyg field support drag-and-drop and will automatically store the file in the right place. Security Concerns ADAM uses the DNN file-numbering system by default, and keeps a reference to file:27 in the field linking such a file. In rare situations you may have many untrusted editors, where you want to prevent them asking the API for file:1 , file:2 , file:3 etc. There is an advanced switch to only allow resolving the file number if it's really part of the current item. Contact 2sxc for support on this. Also Read AsAdam(...) Command ToSic.Sxc.Adam To access ADAM files/links in a RazorTemplate, check out AsAdam(...) in the RazorComponent and ApiController History General Tokens introduced in 2sxc 8.0 Added extra security switch in 2sxc 9.32"
  },
  "net-code/dynamic-data/index.html": {
    "href": "net-code/dynamic-data/index.html",
    "title": "Dynamic Data | 2sxc and EAV 10",
    "keywords": "Dynamic Data 2sxc does a lot for you it making sure your templates get the right data. Once you've gotten the basics to work, it's important that you understand what's really happening in the background. This section should give you that overview. <!-- Data Highlights --> <!-- ADAM --> <!-- Server --> <!-- Prepare --> <!-- Data Source --> <!-- Optimzers --> <!-- Process / Awesomize --> <!-- Libraries --> <!-- data formats --> <!-- Browser --> <!-- Frameworks --> <!-- App show parts --> <!-- Interact parts --> <!-- Edit parts --> <!-- Edit UI parts --> <!-- SPA parts --> <!-- Custom highlight boxes - can be controlled by in-page CSS --> you are here (click to zoom) - discover the stack .context-box-process .process-cs { visibility: visible; } DynamicEntities vs. Entities When working with 2sxc data, there are two core data objects you for everything: Dynamic Entities These are simple, dynamic objects that allow you to write template with any property you believe the data should have, like @person.FirstName etc. They will automatically pick the right language and do a lot of magic üßô‚Äç‚ôÇÔ∏è in the background. Entities These are strongly typed objects for complex work, but getting values is much more difficult. You usually don't need this, but it's important that you know this exists. Each type can be converted to the other type using helpers like AsDynamic(...) , AsList(...) and AsEntity(...) . Learn more in Entity vs. Dynamic Entity Content-Items . Tip In most cases you'll always use Dynamic Entities and if you're not sure whan an object is, just run it through AsDynamic(...) . Instance Specific Data Note Instance specific data belongs to the module-instance on the page, either because it was manually added or because the module-instance uses a Query which is specific to this module. When a 2sxc module is added to a page the editor decides what should be shown. Based on configurations 2sxc will then ensure that the right data is provided to the template to match expectations. There are two scenarios: In the Content Mode the editor will add/edit content in the module, and this content is then linked to this module instance. 2sxc keeps track of where things are added. It then prepares this data before your code runs to make it super-easy for you to access these items. In the Data Mode the template has been configured to use a query. This query can be parameterized by the module instance (similar to the Content Mode ) but the data prepared for the template is retrieved from a query. In both of these cases, the following objects are then pre-populated with the correct data, making it easy to use in a template or Web API: Data This object gives you all the data which was meant to be used by this Templates Content The primary and often the only content-item in the Data for this template. Content.Presentation Can contain additional presentation settings for this content, like how to format it. Header The header data if the template expects to be a list and also needs a title or intro. Header.Presentation Can contain additional presentation settings for the header, like how to format it. Conversion Commands AsAdam(...) Gives you the ADAM parts (files, images, folders) of a field. AsDynamic(...) - takes just about anything (an iEntity, a list of iEntities, a dynamic, ...) and casts it to a DynamicEntity AsDynamic(jsonString) AsEntity(...) - takes just about anything (iEntity, DynamicEntity, list of that) and casts it to an iEntity Discover More in the Razor Tutorials We have an rich series of Razor tutorials . You should really check them out üëç."
  },
  "net-code/dynamic-code/as-adam.html": {
    "href": "net-code/dynamic-code/as-adam.html",
    "title": "AsAdam(...) Command | 2sxc and EAV 10",
    "keywords": "AsAdam(...) Command Note ADAM is the Automatic Digital Asset Manager. It manages files (Assets) for content in 2sxc. The files are managed so that they really belong to the item they are used in. Read more about ADAM When a content-item has a Library field (see Field Input-Type hyperlink-library ) your code needs to get a list of all the files and folders of that field. For example to show galleries. This is where AsAdam(...) comes in. It gives you the ADAM parts of this field. ‚ö° The official API docs . Basically all you need for AsAdam(...) is The Content Item (Entity or DynamicEntity) The field name of which you want the Adam objects As a result you'll get an IFolder object with which you can get all files in the folder or subfolders. Discover More in the Razor Tutorials We have an rich series of Razor tutorials . You should really check them out üëç. Example This example is taken from the Fancybox Gallery App @inherits ToSic.Sxc.Dnn.RazorComponent @using ToSic.Razor.Blade; @using Dynlist = System.Collections.Generic.IEnumerable<dynamic>; <div class=\"ga-wrapper\"> <div class=\"ga-albums row\"> @foreach (var album in AsList(Data)) { var images = AsAdam(album, \"Images\").Files as Dynlist; var albumThumbUrl = Text.Has(album.AlbumThumbnail) ? album.AlbumThumbnail : images.First().Url; <div class=\"ga-album col-12 col-sm-6 col-md-6 col-lg-4\" @Edit.TagToolbar(album)> <a href='@Tags.SafeUrl(Link.To(parameters: \"mid/\" + Dnn.Module.ModuleID + \"&album=\" + album.Path))'> <div class=\"ga-img\"> <div class=\"overlay\"> <div class=\"ga-album-title\"><h5 class=\"ga-title\">@album.Title</h5></div> <div class=\"ga-files-count\"><span class=\"badge badge-pill badge-dark float-right\">@images.Count()</span></div> </div> <img class=\"img-fluid\" src='@Tags.SafeUrl(albumThumbUrl + \"?w=720&h=500&mode=crop&scale=both&quality=80\")' alt=\"@album.Title\" /> </div> </a> </div> } </div> </div> We suggest you check out some apps which use ADAM to see how they work. Also Read ADAM - Automatic Digital Asset Management ToSic.Sxc.Adam check out AsAdam(...) in the RazorComponent and ApiController History General Tokens introduced in 2sxc 8.0 Added extra security switch in 2sxc 9.32"
  },
  "specs/adam/index.html": {
    "href": "specs/adam/index.html",
    "title": "Moved to | 2sxc and EAV 10",
    "keywords": "Moved to ADAM - Automatic Digital Asset Management"
  },
  "net-code/dynamic-code/index.html": {
    "href": "net-code/dynamic-code/index.html",
    "title": "Dynamic Code API | 2sxc and EAV 10",
    "keywords": "Dynamic Code API Every C# file in 2sxc is Dynamic Code as it's compiled on-the-fly and has a lot of helpers to work with Dynamic Data . <!-- Data Highlights --> <!-- ADAM --> <!-- Server --> <!-- Prepare --> <!-- Data Source --> <!-- Optimzers --> <!-- Process / Awesomize --> <!-- Libraries --> <!-- data formats --> <!-- Browser --> <!-- Frameworks --> <!-- App show parts --> <!-- Interact parts --> <!-- Edit parts --> <!-- Edit UI parts --> <!-- SPA parts --> <!-- Custom highlight boxes - can be controlled by in-page CSS --> you are here (click to zoom) - discover the stack .context-box-process .process-cs { visibility: visible; } The following APIs are available on all 2sxc Dynamic Code . You can use this in: Razor (including Code-Behind) WebAPI Controllers Helper Code files Discover More in the Razor Tutorials We have an rich series of Razor tutorials . You should really check them out üëç. Instance Data in Dynamic Code Note Instance specific data belongs to the module-instance on the page, either because it was manually added or because the module-instance uses a Query which is specific to this module. Learn more about this in Dynamic Data Data This object gives you all the data which was meant to be used by this Templates Content The primary and often the only content-item in the Data for this template. Content.Presentation Can contain additional presentation settings for this content, like how to format it. Header The header data if the template expects to be a list and also needs a title or intro. Header.Presentation Can contain additional presentation settings for the header, like how to format it. App and App-Data Objects App The current App with Settings , Resources , Path information and more. App.Data All the data of the current app for immediate use, fully cached in memory of the web server. App.Query Queries which were created using Visual Query and can be run to access prepared data. General Objects CmsContext Information about the system, page, module etc. Dnn The common Dnn object providing page, module, user information Edit Helper providing you with various edit-functionality like Toolbar(...) Link Helper to generate links, according to the DNN-environment configuration Conversion Commands AsAdam(...) Gives you the ADAM parts (files, images, folders) of a field. AsDynamic(...) - takes just about anything (an iEntity, a list of iEntities, a dynamic, ...) and casts it to a DynamicEntity AsDynamic(jsonString) AsEntity(...) - takes just about anything (iEntity, DynamicEntity, list of that) and casts it to an iEntity Helper Commands provided by 2sxc CreateInstance(...) To create an object of a parsed CSHTML file, for example to then access methods of that code CreateSource<T>() Get a DataSource object of type T (like filters, sorting, etc.) GetService<T>() Get a Service to help you (using Dependency Injection) Important Notes Important Your code must inherit the correct base class to get this API. You'll find the correct base classes in the documentations for Razor and Web API."
  },
  "basics/index.html": {
    "href": "basics/index.html",
    "title": "2sxc Basics Overview | 2sxc and EAV 10",
    "keywords": "2sxc Basics Overview In 2sxc most things just magically work . These docs give you a deep understanding of how they work so you can figure out really cool stuff. The Stack: How Systems and Users Interact This is what web-systems do from a bird's-eye perspective. On the top you see what happens in the browser : Show content / output using HTML Interact ive Content or SPAs where the UI is smart and works with data Edit ing content and data works by default, and you can do a lot more The bottom shows what happens on the server : Awesomeize is where you template the data and add logic. Prepare is a layer of data processing where the desired data is selected to be shown, filtered, sorted etc. Your Data is the original material - created by an editor in the CMS or it's data coming from SQL, CSV or elsewhere. How to Learn the Basics To learn the basics it's probably best tof first discover Tutorials and many example Apps The Stack in Detail <!-- Data Highlights --> <!-- ADAM --> <!-- Server --> <!-- Prepare --> <!-- Data Source --> <!-- Optimzers --> <!-- Process / Awesomize --> <!-- Libraries --> <!-- data formats --> <!-- Browser --> <!-- Frameworks --> <!-- App show parts --> <!-- Interact parts --> <!-- Edit parts --> <!-- Edit UI parts --> <!-- SPA parts --> <!-- Custom highlight boxes - can be controlled by in-page CSS --> you are here (click to zoom) - discover the stack Learn more about... What Happens in the Browser... What Happens on the Server... Understanding Data..."
  },
  "basics/app/folder-structure.html": {
    "href": "basics/app/folder-structure.html",
    "title": "Folder structure in the Content App folder | 2sxc and EAV 10",
    "keywords": "Folder structure in the Content App folder The content-app is simpler than all other apps, because it provides less features to stay focused on \"normal\" content. As such, there are no predefined folders. You can create your own to organize your templates as you need, but the structure is completely undefined. Folder structure and special files of a 2sxc App A 2sxc app can have no folders at all, or hundreds. The following folders and files are special though, so you should know about them when you need them. Note that all apps are located in [portal-root]\\2sxc\\[app-name] . System Folders api this folder contains c# files for the web services this app has node_modules is the default folders when you use JS-automation while developing; it can be very large. This folder will be ignored when you export an app bower_components contains bower (run-time) dependencies for your JS and can become very large. Normally you will not want this in your app (because it contains a lot of unneeded stuff) so it too will not be exported when you create an app-package. Recommended sub folder names The following folders have no technical relevance, but we recommend this naming to improve consistency. src and sub-folders should contain your javascript source files in original (unminified, etc.) dist should contain your processed, minified, uglified and combined JS files Special files app-icon.png this file is an icon for the app - and will soon be displayed in various dialogs. It should be square and at least 250x250, larger is better See also Icons in Apps"
  },
  "basics/cms/inner-content/index.html": {
    "href": "basics/cms/inner-content/index.html",
    "title": "Inner Content (Content Within Other Content) | 2sxc and EAV 10",
    "keywords": "Inner Content (Content Within Other Content) Inner Content is the feature to place content-blocks (apps or common content-items) inside another content-item. There are two common scenarios for this: Apps with list/details views, with a feature rich details-view . For example: a blog, which lets the editor add galleries and other apps into each blog-post. This is called a mashup app as it mixes apps together Apps which wrap other content/apps, for example an accordion-app which lets the editor add further content-blocks or apps into each collapsing segment. Basic Concept Inner Content links other content-blocks (apps, content) to a Content Item , allowing the template to then show this inner content where it wants to. An Item can have Many Sets of Inner-Content A template can have multiple sets of inner content. For example: a real-estate app showing a details-page with 2 columns, each containing an variety of content-items, different from house-item to house-item. One house could have a gallery-app in the first column, while the other house would have a 3D walkthrough app and preferr to use the gallery in the second column a Catalog app containing many WYSIWYG text blocks (ProductDescription, ShowCase, ApplicationSuggestions) shown in multiple tabs, each WYSIWYG containing apps inline between the paragraphs. To achieve this flexibility, the Inner Content items are linked not only to a Content Item but to a specific field in that item. So each set of related items is stored in one field, and by using multiple fields you can have multiple sets of items. This allows the template to handle each set separately. Standalone Inner-Content - like a DNN Pane just for this item A common use case is to provide the editor with an area into which he/she can add as many content-blocks/apps as they want to. This feels like a DNN-pane - the editor just adds apps as he needs them. This mode is common for mashup-apps and is mostly used on sophisticated details-pages with a clear area containing additional functionality. It's also common in layout-changing apps like the accordion app . In WYSIWYG Inner-Content this is new in 2sxc 8.9 Sometimes you may let the editor add inner-content blocks within a wysiwyg-field, so that normal written content can be interspersed with apps. This is common in news-style apps or blogs, where additional features are needed (galleries, code-snippets, etc.) but mixed with the main text and not in a separate area. Here is a blog tutorial on implementing Very Rich Text . The Parts that Make it Work For Inner Content to work, the following parts play together: Data storage : you need fields in your content-type to link to the external content blocks. Just create entity-fields and use the type Content Block Items . In many cases you also want to hide the field because it's not important to the content-editor. Just go to the field-settings and set Visible in Edit UI to off. Content-Block rendering in the templates, using the Razor API - it is prepared both for the standalone-area-mode as well as the merge-with-wysiwyg-mode. In-Page Editing : to allow the editor to add / edit content-blocks in the normal view, the UI must support it. This is handeled automatically by Quick-Edit . To do the in-page Editing, quickE needs to know some context information (what field to store the links in, etc.), provided in an HTML-attribute. It's either rendered in automatically when using the Razor commands or you can manually place them using [context attributes](xref:Razor.ContextAttributes]. If you want the WYSIWYG-integration the wysiwyg must know which field to use to manage the linked content-blocks. This is simply done by convention: as soon as a content-block field follows right after a wysiwyg-field, they will be linked and the button will appear. This also works it the content-block field is set to invisible. Read also Inner Content Blocks - blog about inner content-blocks V1 - the Area Mode Demo App and further links You should find some code examples in this demo App 2sxc blog History Inner Content 1.0 in 2sxc v08.04 Enhanced Razor API in v08.09 WYSIWYG mode in v08.09"
  },
  "basics/data/content-types/content-type-shared.html": {
    "href": "basics/data/content-types/content-type-shared.html",
    "title": "App Shared \"Ghost\" Content-Types (‚ö†) | 2sxc and EAV 10",
    "keywords": "App Shared \"Ghost\" Content-Types (‚ö†) This explains App Shared Content-Types which used to be called Ghost Content-Type . For an overview check out Understanding Data... . Warning This is a very advanced topic which less than 1% of all developers use. You almost certainly will not need this. So if you start playing around with this, make sure that you really need this. What is an App Shared Content-Type? App Shared Content Types are a Content Types which are defined in one App and re-used in specific other Apps. They can only be used inside the App which are configured to share the definition The App data is in the export/import, but not the Content-Type Definition If you import an App with such data, the App containing the definition must be imported first. These Content-Types are stored in the SQL database You rarely want to use this. How it works Shared Content-Types are defined in a Primary App which manages this type. Other Slave Apps are configured to also use this Content-Type. They automatically inherit every configuration of the primary App even when the schema changes. Why does this Feature exist? The feature was originally introduced in 2sxc 1.0 because at that time we didn't have Global Shared Content-Types It has since been used in various complex sites. An example is a installation which has many Sites, each having the same News App . In such scenarios it's hard to keep changes synchronized, so it's usually implemented as follows: A primary App is on a hidden Site which just manages the Content-Types A template App is configured to use thes Content-Types. It usually also uses shared Templates etc. The template App is then exported and imported in each site where needed. Why would you want to use this? If you are creating a complex system with many portals and apps which should share the schema Why would you not want to do this? Using Shared Content-Types is fairly technical, so the developer must understand what this is. History Introduced in 2sxc 1.0"
  },
  "basics/data/content-types/content-type-system.html": {
    "href": "basics/data/content-types/content-type-system.html",
    "title": "System Content-Types | 2sxc and EAV 10",
    "keywords": "System Content-Types This explains System Content-Types . For an overview check out Understanding Data... . What is an System Content-Type? System Content-Types are built-in Content-Types which are defined in the 2sxc/EAV installation. These are internal Content-Types which are used to configure Fields, Data-Sources etc. They can only be used in every App They are not included upon export/import as they will also exist in the target system These Content-Types are stored in the File system History Introduced in 2sxc 1.0 Changed concept to File Storage in 2sxc 10.0"
  },
  "basics/data/content-types/index.html": {
    "href": "basics/data/content-types/index.html",
    "title": "Content-Type (Schema/Object-Type) | 2sxc and EAV 10",
    "keywords": "Content-Type (Schema/Object-Type) This explains Content-Types . For an overview check out Understanding Data... . What is a Content-Type? Every Entity ( thing , record or object ) in 2sxc has a definition of fields it can have. So a Book may have fields like Name, Author, Title etc. The Content-Type will define what fields exist, what is required and what order the fields will appear in when editing the item. This definition of the Type is called a Content-Type and it contains specs as to the exact fields are used and what their field-types are. Other systems may call this Schema , Object-Type , Object-Structure or Table Definition Tip Before you start: Remember that you usually don't need this if you are creating Razor templates or WebApi - for that, you want to read How to Use a Dynamic Entity . Where are Content-Types App Content-Types - this is the default, these Types are part of an App App Shared Content-Types - for advanced use cases System Content-Types - included in the default installation Global Shared Content-Types - for very advanced use cases What's Defined in a Content-Type? Content-Types are a configuration which contains: The list of fields the Content-Type has with the technical name, like ProfilePhoto Edit-UI information for the edit form The order of the fields should be shown in when editing A user friendly name like Profile Photo and editing help texts like This should only contain head & shoulders The Input-Type which the UI should show, like Hyperlink (which means that it's a link or file) Input-Type configuration, for example AllowUpload etc. Optionally some of the Edit-UI information in more languages like Profilbild in German Optionally permission information like May be used in Mobile Apps for read-only Nice to Know: Edit Content-Types Content-Types are configured in the App-Management UIs You can create new Content-Types at any time You can rename a Content-Type at any time If you change the display-name (like Blog Post to Blog Entry ) then your code doesn't need changes. If you change the technical name ( BlogPost to BlogEntry ) then your code needs to be updated You can delete Content-Types at any time When you delete a Content-Type, all Entities/Items of that type are deleted Content-Types have additional descriptions and help-texts which are shown in the Edit-UI Content-Types can also have an icon, but that's only used in Content Mode Nice to Know: Edit Fields of a Content-Type You can always create new fields on a Content-Type When you add new fields, then existing data will have that field, but no values on these fields You can always delete existing fields on a Content-Type When you remove fields, existing data will lose those values You can always rename fields of a Content-Type When you change the display name of a field (like Persons Photo to Profile Picture ) the technical field name doesn't change, so your code doesn't need modification. If you change the technical field name (like ProfilePic to ProfilePhoto ) the code must be updated Nice to Know: Export / Import Content-Type Definition You can export a Content-Type into a JSON format You can import the Content-Type into another App using upload or drag-n-drop Important Exporting the Content Type Definition exports the schema / fields of that type. Exporting all the Items of a Content-Type is a table-export of all the data. Content-Type - More Information Identity of a Content Type: Name and StaticName Each content-type has a Name , which is nice for a human to read, use and program with. There is a second identifier called StaticName which is usually a GUID, but in rare cases it's a string like App-Settings . This identifier is used internally - for example when a View references a Content-Type. Storage Most Content-Types in your App are stored in the SQL database . System and global Content-Types are stored in the file system. These are called File-Stored Content-Types Field Types Each field will be of a simple type like text/string , number , boolean (yes/no) or other. You can find the list of types here . Relationships Fields can also be of type Entity in which case they point to other items. This would then establish a Relationship Input Forms and Fields (like WYSIWYG) The input mask is automatically generated from the Content-Type . Based on the specifications, it will generate the correct Input-Field like a simple text field, a multiline text field, a WYSIWYG or even a file-uploader. Scopes Content-Types have a Scope . Read about it Content-Type Scopes APIs @ ToSic.Eav.Data Namespace has almost everything you see here @ IContentType defines what fields exist, it's the ContentType / Schema @ IContentTypeAttribute , ContentTypeAttribute contains the definition of an attribute ContentTypeMetadata , contains information about the content-type (like nicer descriptions). This is also used for the Attribute-Metadata History Introduced in 2sxc 1.0"
  },
  "basics/data/content-types/scopes.html": {
    "href": "basics/data/content-types/scopes.html",
    "title": "Content-Type Scopes | 2sxc and EAV 10",
    "keywords": "Content-Type Scopes This explains Content-Type Scopes . For an overview check out Understanding Data... . What is a Content-Type Scope? Content-Types have a Scope . This is like a category for the Content-Type. Normally you only see the Content-Types and Entities of the default Scope. The other Scopes have internal and system Content-Types like @String . Here's the full list of current Scopes Here are instructions how to switch Scopes to manage data of other Scopes Nice to Know about Scopes You can easily create your own scope at any time. This is usually used for Global Content-Types (‚ö†) or if your App is getting really complex and has so many Content-Types that it confuses the Admin. History Introduced in 2sxc 2.0"
  },
  "basics/data/content-types/content-type-app.html": {
    "href": "basics/data/content-types/content-type-app.html",
    "title": "App Content-Types | 2sxc and EAV 10",
    "keywords": "App Content-Types This explains App Content-Types , the most common Content-Type. For an overview check out Understanding Data... . What is an App Content-Type? App Content-Types are the default kind of Content-Types which are defined in an app. They can only be used inside that App They are included upon export/import These Content-Types are stored in the SQL database History Introduced in 2sxc 1.0"
  },
  "basics/data/content-types/content-type-global.html": {
    "href": "basics/data/content-types/content-type-global.html",
    "title": "Global Content-Types (‚ö†) | 2sxc and EAV 10",
    "keywords": "Global Content-Types (‚ö†) This explains Global Content-Types . For an overview check out Understanding Data... . Warning This is a very advanced topic which less than 1% of all developers use. You almost certainly will not need this. So if you start playing around with this, make sure that you really need this. What is a Global Content-Type? Global Content Types are a Content Types which are defined in a central location and available in all Apps of your system. These are custom Content-Types which are treated like System Content-Types. They can be used inside every single App The App data is in the export/import, but not the Content-Type Definition . If you import an App with such data, the Global Type must be configured first. These Content-Types are stored in the file system For most scenarios you don't want to use this. How it works Global Content-Type are stored in special folders as JSON files and are loaded by the system when it starts. From then on they are automatically available in all apps for use. Since the schema is not stored in the SQL database, the Entities cannot use the normal storage system. Instead they are stored as JSON Entities in the SQL tables. Why does this Feature exist? 2sxc uses this concept for all the internal Content-Types. So any time you edit Field-settings or Visual-Query configurations, they use Global Content-Types. We also have some really sophisticated solutions which use this feature. Why would you want to use this? If you are creating a complex system with many portals and apps which should share the schema Why would you not want to do this? If you only want to share the Content-Type across 2-3 Apps, you should prefer App Shared Types instead If you have one specific App (like News) which is installed on many Sites you should prefer App Shared Types instead Important Warnings Since the data for the Global Content-Types is stored as JSON Entities there are a few drawbacks you should be aware of: If you plan on using the raw SQL data (not recommended anyhow) then the JSON format used in Global Content-Types adds quite a lot of complexity. If you ever rename fields in the Global Content-Type, the stored data will not follow the rename. From the systems perspective it has lost the old field and gotten a new one. Create a Global Content-Type Assume you really want to do this, here's how: Create the Content-Type in the normal way Export the Content-Type Definition as JSON Store it in your global custom folder (you may need to create these folders) In DNN: [system-root]/DesktopModules/ToSIC_SexyContent/.data-custom/contenttypes In Oqtane: TODO Restart the system You should now have this Content-Type show up in every App. Update a Global Content-Type Make the updates in the original system Re-export the JSON Overwrite the original file Restart your system Delete a Global Content-Type Remove the JSON file Restart the system Best Practices From our experience the main use case for Global Content-Types is very technical, so the content-editor usually doesn't need to see this. So we strongly recommend placing it in an own Scope . History Introduced in 2sxc 9.7"
  },
  "basics/app/icons.html": {
    "href": "basics/app/icons.html",
    "title": "Icons in Apps | 2sxc and EAV 10",
    "keywords": "Icons in Apps App icons are convention based, so there is no configuration for it. To give your app an icon, place a file called app-icon.png in the root folder of your app. It should be square, and at least 200x200 Pixels, but we recommend it's at least 500x500 pixels. Icons for Views / Templates This is also convention based, there is no configuration for it. To give your views/templates an icon, add an icon file with the same name as your template file. So if your template is called _overview.cshtml your icon should be _overview.png . Icons for Content-Types Content-Types don't have a folder dedicated to them, so this is configuration based. Just edit the Content-Type Metadata and on the Icon-field, drop the image you want for your content-type."
  },
  "basics/app/index.html": {
    "href": "basics/app/index.html",
    "title": "What is an App | 2sxc and EAV 10",
    "keywords": "What is an App An app is a standalone bundle of data and functionality. It contains the green and blue parts of the following diagram + any kind of additional material used to build these parts like JavaScript frameworks which are bundled in the App: <!-- Data Highlights --> <!-- ADAM --> <!-- Server --> <!-- Prepare --> <!-- Data Source --> <!-- Optimzers --> <!-- Process / Awesomize --> <!-- Libraries --> <!-- data formats --> <!-- Browser --> <!-- Frameworks --> <!-- App show parts --> <!-- Interact parts --> <!-- Edit parts --> <!-- Edit UI parts --> <!-- SPA parts --> <!-- Custom highlight boxes - can be controlled by in-page CSS --> you are here (click to zoom) - discover the stack .context-box-full .todo, { visibility: visible; } Tip Apps are installed per Site . So if your platform has multiple Sites, then each site can have different apps, or the same app may be installed multiple times. Everything belonging to the App is stored in two locations The App folder contains all the green parts in the image above, including templates, C# code, JavaScript files etc. The database contains all the data of the app Important An App doesn't need all of the parts above - they can be really trivial. For example they may only contain 1 simple Hello World template and no data at all. And they may also contain 100'000 data items and complex list/details templates. Types of Apps Your App can be anything you want it to be. The following types are more to give you a sense of how Apps can be used, but these types are not clearly defined. An App can also be many of these at the same time. Data Focused Apps This is the kind of App a developer usually thinks of - with lots of data and various list/details templates. The core idea of these apps is that the data is one or many shared tables and the output will show parts of this data based on rules, filters etc. Examples of such Apps would be: News Blog References FAQ Content Focused Apps This is the kind of App an editor usually thinks of. The core ideas is that the editor adds an App to a page, and adds data to that instance. The data belongs to that instance, so even if it's technically in a shared table, the user experience makes it feel like each use is autonomous. Examples of such Apps would be: Image Sliders Galleries Accordions QR Code Page Enhancing Apps This is an App which does something on every page of the Site. The core idea is that a functionality can be used on every page and the logic and data to ensure this is in the App. This kind of App is usually added to the Skin/Theme of the Site so it's available on all pages by default. Examples of such Apps would be: SEO or Open-Graph Enhancements on each page Page protection systems where a part of the page is overlayed until people subscribe Adding third-party extensions such as Disqus , AddSearch or Google Search/Analytics to a page SPA Apps (Single Page Applications) This is an App which contains a JavaScript SPA which will then be the entire UI for users. The data is usually accessed using either the Headless API or custom C# WebAPIs which are also part of the App. Examples of such Apps would be: Customer management SPA A complex search/filter SPA You can create such SPAs using any popular JavaScript Framework such as Angular React Vue The Content App The Content-App is a special App in each site which is automatically created whenever you start using 2sxc on a site. The core purpose is content-editing like adding text, images, links and simple decorations (like separation lines) to the page. Tip The content App has some special behavior and limitations by design. Special Behavior of The Content App When adding the Content-App to a page, the dialog which appears will ask the editor to choose the Content-Type (like Image ) and then how to show it (like Full-Size ). This is different from all other Apps where the editor will first choose the App (like Blog ), and then the functionality (like Tag-Cloud ). Special Limitations of The Content App Since the Content-App is always there by default and the purpose is to add/edit simple content, it's limited by design to not have some functionality other Apps have. This is mainly to protect the developer from building solutions with a bad user experience, since anything complex should be self-contained in it's own App. The limitations are: No Visual Query Now Custom Web APIs Previously the Content App also didn't have App Settings or App Resources, but that limitation has been removed in 2sxc 11. You may want to learn more about The App Folder Structure App Icons Bundling / Optimizing assets"
  },
  "basics/app/polymorphism.html": {
    "href": "basics/app/polymorphism.html",
    "title": "Polymorphism aka Open-Heart-Surgery | 2sxc and EAV 10",
    "keywords": "Polymorphism aka Open-Heart-Surgery Tip The key concept behind Polymorphism is having the same template and code in various editions (morphs) which are automatically used based on certain rules. Polymorphism Addresses 3 Problems #1 Workin on Live Sites aka Open-Heart-Surgery Imagine you have a running system and you want to make some changes on the live installation. During the time you work, you would always risk breaking the site, but we usually don't have the time to create a staging environment. #2 Creating Templates that work with Multiple CSS-Frameworks When the same design must work in various CSS-Frameworks, you actually need different templates for each - and switching between them must be automatic. #3 A/B Testing In marketing, we want to test various design with different audiences and measure what works best. Polymorph Folder Structure Let's compare the perfect multi-edition (polymorph) setup to the classic solution: Progress WebAPI Polymorphims was introduced in 2sxc 9.35 Manual View-Polymorphism was introduced in 2sxc 9.35 Automatic View-Polymorphism was introduced in 2sxc 11.00 Data Polymorphism has not been implemented yet Note Automatic View-Polymorphism replaces the manual approach for CSS-Framework and common Open-Heart-Surgery scenarios. The manual approach is still recommended for complex polymorphism as well as A/B Testing. View Polymorphism Automatic View Polymorphism based on CSS-Framework The system is fairly easy to understand. So if polymorphism is activated for CSS-Framework detection, here are the rules: The default template file is the one configured in the view configuration 2sxc will try to find file with the matching name in 2 locations using the name of css framework published by the skin in the koi.json beneath the current folder in the app root folder If nothing is found, the default template file is used If a match is found, it will load that. Note that if the theme does not have a koi.json, the code used is unk for unknown. Here's a checklist how start using View Polymorphism with CSS-Frameworks: Automatic View Polymorphism based on SuperUser Permissions This is meant for Open-Heart-Surgery - so you can work on templates on a live site without breaking the output for normal users. This is how it works (if you have turned it on): The default template is the one configured in the view configuration 2sxc will try to find a file with matching name in either the [root]/staging (for super users) or [root]/live (for normal users) If it is found, 2sxc will render that template Otherwise the default template is used Here's a checklist to get started: Manual View Polymorphs In case the automatic setup doesn't suit your needs, you can do it manually like this: WebAPI Polymorphims Api Controllers are already fully polymorph. They can be placed in a subfolder like [app-root]/live/api/WtfController.cs and can be accessed using a url with the edition in the name, allowing multiple identically named controllers to be used. Views are polymorph if you do the view selection manually. This means, you can place your views in a subfolder like [app-root]/live/list.cshtml and then have an entry-point [app-root]/list.cshtml which will choose which edition to use - then using @RenderPage to pick that edition. This is still manual, because we're not sure yet what the perfect implementation is, so we would rather wait before standardizing a bad solution. Everything that is data (schemas, items, queries, settings and resources) is still one edition only. The data model is able to perform multi-edition content-management, but we're not ready yet to provide the UIs etc. for this, as it could lead to confusion, so we'll hold back on this for now. How to use WebApi Polymorph As of now, to use the WebApi Polymorp, this is what you would do: instead of placing your WtfController.cs in the [app-root]/api/ folder, you place it in a [app-root]/live/api folder. the live, default JS would then access it using [dnn-api-root]/app/auto/live/api/Wtf You can then copy this controller to [app-root]/dev/api and make your changes there. In your JS, you would then (while testing/developing) access this edition using [dnn-api-root]/app/auto/dev/api/Wtf without causing problems on the live solution, as all other users are still accessing the live edition, while you're working on the dev edition. Once everything works, deploy (copy) the now modified WtfController.cs from the dev/api folder to live/api and all users benefit from the changes. Next Development Steps For now, Data-Polymorphism is low priority, because we're not sure yet if we can \"pull this off\" in a way that won't confuse the users. Read also WebApi DotNet-WebApi Checklist for Polymorphism Blog Post around Polymorphism Demo App and further links The default Content Templates use CSS-Framework Polymorphism to automatically look great in Bootstrap 3 and 4 The Mobius Forms App uses SuperUser Polymorphism so you can develop new forms in the background without breaking functionality History Introduced in 2sxc 9.35 - WebApi Polymorphism Automatic View Polymorphism introduced in 2sxc 11.0 (css-frameworks and super-user)"
  },
  "basics/app/templates.html": {
    "href": "basics/app/templates.html",
    "title": "Template Files | 2sxc and EAV 10",
    "keywords": "Template Files Template files will generate HTML - often based on the data a editor entered, and/or which was provided from the App. Note As of now there are two types of template files: Token and Razor. The system is built in a way, that other templating engines could also be implemented at any time. How it Works Each View has a configuration referencing a template file. 2sxc will then decide what type it is, and run the appropriate engine. The template files usually reside inside app root folder or sub folder. As of now, there are two types: Razor / MVC - These always begin with an _ and end with .cshtml . Placeholders and code usually is marked with @ like @Content.Name Tokens - these always end with .html . Placeholders usually look like [Content.Name] . Tokens cannot have any server-side code aside from the basic placeholders. Tip If your view just hosts a JavaScript SPA, it will also be one of these types of files. Re-Using Templates Note Re-Using in many Views Sometimes you'll want to use the same template file in multiple Views. This can just be configured at the View level Tip Re-Using Templates Across Portals Instead of placing the template in the App-folder of the current portal, you can also place it in a global App-folder in the _default portal of DNN. This is great if you have the same app in many portals, and want to centralize the template. Tip Razor Templates also support re-using template parts or any C# code. You can also pass parameters to these parts, which allows you to share template-code across templates. Future Features & Wishes Out-of the box support for Polymorphism aka Open-Heart-Surgery Read also Views and Templates Razor Tutorials RazorBlade Tutorials History Introduced in 2sxc 1.0"
  },
  "basics/app/views.html": {
    "href": "basics/app/views.html",
    "title": "Views and Templates | 2sxc and EAV 10",
    "keywords": "Views and Templates Views are what the user will see - and contains things like Html, CSS, Javascript and data from the content. How it Works Views configure what templates are combined with what Content-Type to then produce an output. Tip Views can also specify more Content-Types for using in the Header or Presentation. In addition, they could also say that the data comes from a Query instead of from user/editor input. Read more about Templates here The template-file is just part of the view. To be used as a view, it must be configured in the App configuration as a view, where you add things like Name or Thumbnail Image (for the preview when selecting the view) Data specs like what type of data is shown, if the data comes from a query etc. View Parameters to automatically show this view based on url-parameters Understanding the Configuration A view has a lot of configuration options, but they are all explained in the edit view dialog, so we're not documenting this here. Advanced Topics Switching between views based on the url Differences between features when using Content or App Protecting Views for certain users using permissions Future Features & Wishes Out-of the box support for polymorphism Read also Hide advanced features from normal editors Razor Tutorial History Introduced in 2sxc 1.0"
  },
  "basics/data/fields/boolean-tristate.html": {
    "href": "basics/data/fields/boolean-tristate.html",
    "title": "Field Input-Type boolean-tristate | 2sxc and EAV 10",
    "keywords": "Field Input-Type boolean-tristate Use this field type for configuring simple true/false UI elements, storing boolean/boolean data . It's an extension of the basic boolean field type . Features provide a basic on/off input field (toggle switch) can also be switched to null (not set) Configure Boolean-Default No relevant settings to be configured. To configure the default value, set it in the general settings. History Introduced in 2sxc 11.0"
  },
  "basics/data/fields/boolean.html": {
    "href": "basics/data/fields/boolean.html",
    "title": "Field Data Type: Boolean | 2sxc and EAV 10",
    "keywords": "Field Data Type: Boolean This explains Boolean Fields . For an overview check out Understanding Data... . The Boolean Data Type Boolean data is a basic data type and is for yes / no , true / false , 1 / 0 values. It can also contain null values. Features The basic boolean field doesn't have any features, since all the features are in the sub-types. Configuration Every boolean field can be configured to have special labels shown in each state. Input-Types of Boolean Fields boolean-default - simple on/off input field boolean-tristate on/off with optional null (not-defined) Technical Information Storage in the SQL Database in the EAV-Model This is converted to a string when stored as a string in the DB, and converted back to a boolean when the data is loaded. Storage in the SQL Database in the JSON-Model This is simply stored as a true , false or null in json. Null Value Possible In some cases you may add a field to a type which already has Entities created previously. In this case the old data doesn't have a value for the field. If this happens, the field will return null , so you may need to catch this special exception in your code. A common shorthand to work with nulls is the ?? operator: @(Content.IsAdult ?? false) History Introduced in EAV 1.0 2sxc 1.0"
  },
  "basics/data/fields/datetime-default.html": {
    "href": "basics/data/fields/datetime-default.html",
    "title": "Field Input-Type datetime-default | 2sxc and EAV 10",
    "keywords": "Field Input-Type datetime-default Use this field type for configuring dates and/or time values, storing date/datetime data . It's an extension of the basic datetime field type . Features allows users to enter a date through text input, or by choosing a date from the calendar also enables a time-choice if activated Configuring a DateTime-Default This shows the configuration dialog: Use Time-Picker is for enabling a time-choice. History Introduced in EAV 1.0 2sxc 1.0"
  },
  "basics/data/fields/datetime.html": {
    "href": "basics/data/fields/datetime.html",
    "title": "Field Data Type: DateTime | 2sxc and EAV 10",
    "keywords": "Field Data Type: DateTime This explains DateTime Fields . For an overview check out Understanding Data... . DateTime data is a basic data type and is used for dates and/or time values. Features The basic datetime field doesn't have any features, since all the features are in the sub-types. Sub-Types of DateTime Fields datetime-default - simple date and/or time input field (basic datepicker and/or timepicker) Shared Settings Don't have shared settings. Technical Information Storage in the SQL Database in the EAV-Model This is converted to a string when stored as a string in the DB, and converted back to a .net DateTime when the data is loaded. Storage in the SQL Database in the JSON-Model This is stored as a string-value in json using the standard ISO format, as there is no official format for dates or times in JSON. Null Value Possible In some cases you may add a field to a type which already has Entities created previously. In this case the old data doesn't have a value for the field. If this happens, the field will return null , so you may need to catch this special exception in your code. History Introduced in EAV 1.0 2sxc 1.0"
  },
  "basics/data/fields/entity.html": {
    "href": "basics/data/fields/entity.html",
    "title": "Field Data Type: Entity (List of Entity-Items) | 2sxc and EAV 10",
    "keywords": "Field Data Type: Entity (List of Entity-Items) This explains Entity Fields . For an overview check out Understanding Data... . Entity or Item data is a basic data type and is used to mark item-relationships, like books-to-authors or blog-to-tags. Features The basic entity field simply allows you to select items of a specific type, with various add/remove/create/delete features. Sub-Types of Entity Fields entity-default - standard selector with type, add/remove, one/multi, delete, etc. entity-query for picking entities which were pre-processed in a query Shared Settings All Entity-Field Types have the following settings: Basic Entity Type Advanced UI Settings Multiple Items Enable Edit Enable Create New Enable Add Existing Enable Remove Enable Delete Specials of the Entity type: The entity-type has these specials it's good to know about It's always a list It preserves the relationship order Special #1: It's always a List Since it could contain 1 or many items (and the configuration can change whenever you want), reading it always means reading a list. So you'll always use something like this (C#): // full name of author var fn = Book.Author[0].FullName; // in case you're not sure if the author was added or null, you can do var fn2 = (Book.Author.Any() ? Book.Author[0].FirstOrDefault : \"\"); // This will also work in newer versions of C# // making fullName either the name, or a null var fn3 = Book.Author.FirstOrDefault()?.FullName; // the following won't work! var wontWork = Book.Author.FullName; // this won't work Or the same in JavaScript: var fn = Book.Author[0].FullName; // in case you're not sure if it has any // this uses the JS-syntax which returns the last-value of an && condition var fn = Book.Author && Book.Author[0].FullName; Special #2: It preserves Order If the user said a book has 2 authors: Daniel Abraham Then it's sometimes usefull to preserve the order - in this case Daniel was probably the main author and Abraham helped out a bit. To allow for this, the Entity field will keep the order of items as they were added. Side-effect: Sometimes you want to have an A-Z order when showing items. As the order is not auto-sorted, you will have to do this yourself if you want to have them sorted. Use LINQ to do that. Technical Information Storage in the SQL Database in the EAV-Model This is stored in a special relationships-table, so internally the current DB IDs are used to track relationships. Storage in the SQL Database in the JSON-Model This is stored as an array of strings, which contain the GUIDs of the related information. Null Values not Possible These fields will never return a null. If there is no content, you'll just get an empty list. Read also Razor LINQ Tutorials History Introduced in EAV 1.0 / 2sxc 1.0 Changed in EAV 3.0 / 2sxc 6.0 (it used to have many configuration fields for all kinds of uses, which were then moved to sub-types) Enhanched in EAV 4 / 2sxc 7 when item-delete was introduced, to allow for \"private\" items"
  }
}