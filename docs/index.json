{
  "abyss/platforms/oqtane/index.html": {
    "href": "abyss/platforms/oqtane/index.html",
    "title": "Oqtane Platform | 2sxc 13 / EAV 13",
    "keywords": "Oqtane Platform Oqtane is a modern Blazor based platform similar to Dnn. It's inspired by the Dnn model but uses the latest .net core and more. üëâ As of May 2021 2sxc works great on Oqtane as well. Install Oqtane and 2sxc üëâ See Install Oqtane and 2sxc Features currently not implemented Global Content Files ADAM works and images uploaded will automatically work. But as of now, you cannot have shared files in a global folder structure for re-use in many places yet. You can of course re-use an entity with files, but not place a file in a global (like Portals) folder for use. Image Resizer won't work on Global Content Files Image Resizer works for app-assets (like the app-icon) and for ADAM assets, but not for files in the \\Tenants\\x\\Sites\\x\\ folder History 2sxc 12 was developed for Oqtane 2.0"
  },
  "abyss/platforms/oqtane/install.html": {
    "href": "abyss/platforms/oqtane/install.html",
    "title": "Install Oqtane and 2sxc | 2sxc 13 / EAV 13",
    "keywords": "Install Oqtane and 2sxc Read the blog + video + checklist we created on installing Oqtane and 2sxc. Oqtane and 2sxc Version Compatibilities Tip Oqtane is still being heavily improved and growing with the newest .net core frameworks. Because of this, extensions like 2sxc can quickly become incompatible with the latest enhancements, so here we'll maintain a list of Oqtane / 2sxc versions. Oqtane V. Best Compatible Incompatible Comments 2.0 12.00 ‚úÖ 12.00 - 12.02 ‚õî 12.04 2.1 12.04 ‚úÖ 12.04 ‚õî 12.05 Changes in Multi-Language 2.2 12.06 ‚úÖ 12.04+ ‚õî pre 12.04 Changes in Bootstrap / jQuery & Authentication 2.3 12.10 ‚úÖ 12.04+ ‚õî pre 12.04 3.0 12.10 ‚úÖ 12.10+ ‚õî pre 12.10 / 13.06+ Changes in .net 6 3.00.01 13.02 ‚úÖ 13.01+ ‚õî pre 13.01 / 13.06+ Oqtane save/delete module settings 3.00.02 13.02 ‚úÖ 13.01+ ‚õî pre 13.01 / 13.06+ 3.00.03 13.02 ‚úÖ 13.01+ ‚õî pre 13.01 / 13.06+ 3.01.00 13.06 ‚úÖ 13.06+ ‚õî pre 13.06 Changes in Oqtane 3.1 / .net 6.03 Upgrade Existing Installations When upgrading an existing Oqtane/2sxc you should follow these steps: make sure that a compatible 2sxc exists upgrade Oqtane first - possibly 2sxc then stops working then upgrade 2sxc"
  },
  "net-code/razor/razor-component.html": {
    "href": "net-code/razor/razor-component.html",
    "title": "RazorComponent API | 2sxc 13 / EAV 13",
    "keywords": "RazorComponent API As of 2sxc 12, all Razor templates should start with a line like @inherits Custom.Hybrid.Razor12 or @inherits Custom.Dnn.Razor12 to make sure that it has all the new features. Warning If you don't specify this first line, your code will inherit from a different class, so many features won't work as documented. Discover More in the Razor Tutorials We have an rich series of Razor tutorials . You should really check them out üëç. APIs in Razor Components / Templates Tip Most of these APIs can be seen live in action with source code in the Razor Tutorials Standard Dynamic Code API Razor templates / components have all the objects and APIs of Dynamic Code Additional Razor Component APIs In addition there are a few additional objects & commands which you will usually use, most of which are standard Razor APIs Edit Helper providing you with various edit-functionality like @Edit.TagToolbar(...) Code The object from the Code-Behind Common Standard Razor APIs and Keywords Html.Raw(string) Standard Razor API to output the HTML in a string instead of showing tags in the visible page RenderPage(path, data) Standard Razor API - google it if you need it or read about splitting code in Razor The following keywords are normal in any Razor system, but it's good if you know them. Google them to learn more. @functions @helpers Customizing Data & Search Templates can tell the platform how search results should be treated. This is important for list-details scenarios. It's not documented well, but you can check examples in the Blog App. It needs these evens / properties: CustomizeData - is like a \"before-data-is-used\" of the page, used to change what data is delivered to the page - or to the search. Note that this is an older feature and many things this does can also be done using the VisualQuery designer. But sometimes you will need code, and this is the place to do it. CustomizeSearch Purpose - tells you if the code is running to render into html, or for another reason like populating the search index - so your code can adapt"
  },
  "net-code/razor/edit.toolbar.html": {
    "href": "net-code/razor/edit.toolbar.html",
    "title": "and Methods in Razor / .net | 2sxc 13 / EAV 13",
    "keywords": "@Edit.TagToolbar and @Edit.Toolbar Methods in Razor / .net 2sxc has a cool in-page toolbar system - here you'll find a conceptual overview around the toolbar . These toolbars are usually hover-buttons like this: Technically the entire Edit-UI is JavaScript based, so all the buttons, events etc. are client side scripts. Writing this JS would be complicated to say the least, so the @Edit.TagToolbar(...) and @Edit.Toolbar(...) are your tools of choice for adding toolbars from Razor. Discover More in the Razor Tutorials We have an rich series of Razor tutorials . You should really check them out üëç. How to use Here's a quick example of using the Edit object in a Razor template: <h1 @Edit.TagToolbar(Content)> @Content.Title </h1> This example will output the item title in an h1 tag and add a hidden, appear-on-mouse-over toolbar with editing-buttons for the item named Content . Let's assume you're building the details-page of a news-app and you only want the edit/remove buttons, to improve the UI for your use case. Additionally, you want the mouse-hover to react on the whole article, not just oven the title. Here's how: Warning 2sxc 10.27 introduces a new, simpler API to customize the toolbar. So the instructions below are technically correct, but not recommended any more. Check out the much simpler toolbar customizations @* this will show an \"edit and remove\" button for the current item *@ <div @Edit.TagToolbar(Content, actions: \"edit,remove\")> <h1> @Content.Title </h1> @Html.Raw(Content.Body) </div> Here's a different example, how to create a toolbar with only one button, namely an add new item button to create a new BlogPost-item. @* this will show an \"add\" button if the current user is an editor *@ <h1 @Edit.TagToolbar(actions: \"new\", contentType: \"BlogPost\")> @Content.Title </h1> As you can see, the actions: \"new\" tells the toolbar to only show this one button, while the contentType: \"BlogPost\" says what content-type this new item should be. As this toolbar won't have buttons that modify an existing item, it doesn't need that parameter. How it works This command is part of the Edit object and used in Razor templates. It provides a simple API to generate in-page buttons if the current user is an editor. It also checks if edit should be enabled (based on security specs) and will then generate some HTML/JavaScript at that location. Common Tasks Here are a few snippets that you'll typically need, saving you from reading all the docs in common scenarios: Edit.Toolbar(employee) creates a default toolbar for the content-item employee with all default buttons like edit, change-view, more, etc. Edit.Toolbar(employee, actions: \"edit\") creates a toolbar for the item employee but only with the edit -button. Edit.Toolbar(employee, actions: \"edit,add,remove\") creates a toolbar with three buttons edit , add , remove Edit.Toolbar(actions: \"new\", contentType: \"BlogPost\") creates a toolbar with one button, namely new which will open a new BlogPost form. @Edit.Toolbar(actions: \"new\", contentType: \"BlogPost\", prefill: new { Title = \"Hello\", Color = \"red\" } ) creates a toolbar with one button, namely new which will open a new BlogPost form, and prefills the Title and Color field. The Toolbar Actions Note: at the moment, the buttons are grouped into bundles like initial buttons list buttons template / view buttons app buttons The actions can be a combination of known button-names. Here's the current JavaScript catalog of commands : The following commands all require target to be set, or they only make sense in a List-setup - see also content and not as data . new open a dialog to create a new item, requires a target or a contentType parameter edit to edit the current item publish will optionally show the publish-button, but only if the current item is not published. add opens a dialog to create a new item just like new, but will add it below the current item in the content list remove will remove (not delete) this item from the content list moveup will move the item up one position in the content list movedown will move the item down one position in the content list sort will open the sort dialog of the content list replace will open a dialog to swap the current item in the content list Note: the command metadata - is a bit special, not supported in the actions parameter - use the complex toolbar: instead and read the instructions for the JS Commands . For many more commands you should check the JS Commands ), which covers many more like app-import , layout , develop , contenttype , contentitems , app , zone , more etc. More About the Prefill Basically this is a .net object which will be serialized to JSON and used to prefill a new item. Usually you'll just create a new, anonymous object like new { Title = \"xyz\", Date = ... } . example @Edit.Toolbar(actions: \"new\", contentType: \"BlogPost\", prefill: new { Title = \"Hello\", Color = \"red\", Link = \"page:\" + Dnn.Tab.TabID } ) This example will prefill the title, the color and in the link field add a reference to the current page. Multiple Entities Prefil For this you must simply provide an array of strings, like this: @Edit.Toolbar(actions: \"new\", contentType: \"BlogPost\", prefill: new { Tags = new string[] {\"08387a10-1aac-494a-9eb5-1383e31490eb\",\"b498a694-047a-4e51-a285-50f9a64edda1\"} }) Styling the Toolbar As of now there are only limited stying functions: Floating the Toolbar This happens automatically, if a surrounding HTML-tag has a class \"sc-element\". more... What Really Happens with the toolbar As previously noted, the toolbar actually puts some html/js into the page, which the javascript $2sxc object will pick up and work with. Quite a lot happens on the client, and that will be documented some other day. Here just the short version: js runs, picks up Toolbars jc reviews DOM to see what context it's in (either the module-instance or an inner-content) js generates buttons if a button is clicked, an action-manager then executes the correct action on the correct item Older @Content.Toolbar Syntax Is Deprecated Note : there was an older @SomeContentItem.Toolbar syntax and this still works, but we ran into architecture issues, so we decided to place all advanced functions into the Edit.Toolbar(...) method. This is the way to go from now on, the old syntax will continue to work but is not recommended any more. Read also In-Page Edit Toolbars and Buttons Toolbar Settings Toolbar Button Definitions Demo App and further links FAQ with Categories More links: Description of the feature on 2sxc docs History .Toolbar() Introduced in 2sxc 8.04 .TagToolbar() introduced in 2sxc 9.40"
  },
  "net-code/razor/blocks.html": {
    "href": "net-code/razor/blocks.html",
    "title": "Razor: Rendering Content-Blocks | 2sxc 13 / EAV 13",
    "keywords": "Razor: Rendering Content-Blocks When using Inner Content the linked content-blocks (apps or pieces of content) must be rendered into the template. Here's how to do it in Razor. Discover More in the Razor Tutorials We have an rich series of Razor tutorials . You should really check them out üëç. How to use There are two common use cases Virtual Panes at item level - in this case, the item has it's own pane for placing apps and content-blocks Very Rich Text - where you add content-blocks and apps in the WYSIWYG Item-Level Virtual Panes Here's a quick example which renders an area with all content-blocks: @ToSic.Sxc.Block.Render.All(Content, field: \"InnerContent\") This example creates the area for the content-blocks (important so that the UI appears for editors to add more blocks) and renders all existing content-blocks in the predefined order into that area. Here's a more manual example of doing the same thing, but done manually to demonstrate what happens and to allow myself to add more css-classes: <div class=\"some-class sc-content-block-list\" @Edit.ContextAttributes(post, field: \"DesignedContent\")> @foreach(var cb in @post.DesignedContent) { @cb.Render(); } </div> If you care about doing it manually, read more about the Edit object . Very Rich Text / Inner-Content Here's an example how to merge content-blocks with a html-text which has placeholders for each content-block, allowing a mix of text/apps. @ToSic.Sxc.Blocks.Render.All(post, field: \"WysiwygContent\", merge: post.Body) There is a new parameter merge, where you fill in your WYSIWYG-field that contains the content-block(s). Here is a blog tutorial on implementing Very Rich Text . Read also Read more on Razor Edit.ContextAttributes Demo App and further links You should find some code examples in this demo App Blog App History Introduced in 2sxc 8.4 Clean API and merge capabilitien in 8.9"
  },
  "net-code/dynamic-code/object-edit.html": {
    "href": "net-code/dynamic-code/object-edit.html",
    "title": "Edit / in Dynamic Code | 2sxc 13 / EAV 13",
    "keywords": "Edit / @Edit in Dynamic Code The Edit object tells you if the user is an editor and has a lot of features which are only useful in Razor. Because of this, it's documented here: Edit / Object in Razor / .net"
  },
  "net-code/dynamic-code/objects/link.html": {
    "href": "net-code/dynamic-code/objects/link.html",
    "title": "Link / Object in Dynamic Code | 2sxc 13 / EAV 13",
    "keywords": "Link / @Link Object in Dynamic Code Basically you can always link around to other pages, websites or views using normal <a href=\"...\">text</a> html. And often you just want to add some parameters to the current Url like ?id=27 - but the behavior of this can be very different depending on the Dnn settings. The Link object helps you handle this. Note: Dnn often has a problem with links, because depending on what page you are on, the bbehavior is a bit different. This is especially important on the home page. Use @Link.To(...) to make sure everything works no matter what. Discover More in the Razor Tutorials We have an rich series of Razor tutorials . You should really check them out üëç. How it works The Link -object is always available in all Razor-templates. Internally it uses the Dnn API to get the correct url. Use @Link.To() for Linking Pages, Parameters and APIs üëâ See Link.To(...) / ...) Method in Dynamic Code Use @Link.Image(...) for Images with Resizing and more üÜï üëâ See Link.Image(...) / Method in Dynamic Code ‚ú® new! Use @Link.Base() for JavaScript SPA modules If you have a SPA on your page you will often need to set the proper base tag. To get it, use Link.Base() . üëâ See Link.Base() / Method in Dynamic Code Debugging Link Internal operations In rare cases you may get a link you don't expect. To help you figure out what happens, you can do this: Link.SetDebug(true); var x = Link.Image(\"my.jpg\", Settings.Images.Content, factor: 0.5); Link.SetDebug(false); This will add a lot more debug information in the Insights, so you should be able to figure out what happened. Notes and Clarifications The Link-Object is of type ILinkService . Demo App and further links You should find some code examples in this demo App Blog App History Introduced in 2sxc 8.4 Enhanced in 2sxc 9.5.1 with Base() and with parameter pageId on Link.To Link.To was enhanced with api in v12.02 Link.Image was created in v12.04"
  },
  "net-code/razor/edit.contextattributes.html": {
    "href": "net-code/razor/edit.contextattributes.html",
    "title": "ContextAttributes in Razor-Output | 2sxc 13 / EAV 13",
    "keywords": "ContextAttributes in Razor-Output Technically the entire Edit-UI is JavaScript based, so all the buttons, events etc. are client side scripts. These scripts need to know what Context they are in, meaning which Dnn-Module, which 2sxc-App, which Zone, permissions etc. By default, this context is already provided by the environment, but sometimes a new context must provide overrides. This is rare, but important, for example using Inner Content (Content Within Other Content) . So the ContextAttributes will provide this information in some hidden html. Discover More in the Razor Tutorials We have an rich series of Razor tutorials . You should really check them out üëç. How it works The Edit.ContextAttributes(...) is always used inside an HTML-tag and will add some attributes with JSON. Any buttons or actions inside that tag will then find this information, and assume that it is has precendence over the global information. What do You need to do? By default, this context is already provided by the 2sxc-environment, but sometimes a new context must provide overrides. For example using Inner Content (Content Within Other Content) . For this you need the Edit.ContextAttributes - see docs here . How to use This example shows the title and will add the standard editing-buttons for the Content item. Here's an Inner Content (Content Within Other Content) example: <div class=\"app-blog-text sc-content-block-list\" @Edit.ContextAttributes(post, field: \"DesignedContent\")> @foreach(var cb in @post.DesignedContent) { @cb.Render(); } </div> In this example, the Edit.ContextAttributes will add some attributes with JSON, which will help the toolbars inside that loop to correctly edit those items, and not the main item around it. How it works The Edit.ContextAttributes(...) is always used inside an HTML-tag and will add some attributes with JSON. Any buttons or actions inside that tag will then find this information, and assume that it is has precendence over the global information. Using ContextAttributes These context-attributes enhance an HTML-tag, so that buttons inside that tag can be in a different context than the original context. Here's a common example: imagine you have a 2sxc-instance (a module showing 2sxc-data) and all the buttons there know the App-ID, the Zone, the Content-Type etc. Inside this module, you can have multiple items but they all still work well in the original context (all items are in the same app, so an edit-dialog will also know the AppId). Read also Inner Content (Content Within Other Content) Demo App and further links You should find some code examples in this demo App Blog App History Introduced in 2sxc 8.4"
  },
  "net-code/razor/edit.html": {
    "href": "net-code/razor/edit.html",
    "title": "Edit / Object in Razor / .net | 2sxc 13 / EAV 13",
    "keywords": "Edit / @Edit Object in Razor / .net The entire Edit-UI is JavaScript based, so all the buttons, events etc. are client side scripts. Writing this JS would be complicated to say the least, so the Edit object provides the Razor-Template an intelligent, fast way to generate what's necessary. Discover More in the Razor Tutorials We have an rich series of Razor tutorials . You should really check them out üëç. How to use Here's a quick example of using the Edit object in a Razor template: <h1 @Edit.TagToolbar(Content)> @Content.Title </h1> <div>...</div> This example shows the title and will add the standard editing-buttons for the Content item. Here's an Inner Content (Content Within Other Content) example: <div class=\"app-blog-text sc-content-block-list\" @Edit.ContextAttributes(post, field: \"DesignedContent\")> @foreach(var cb in @post.DesignedContent) { @cb.Render(); } </div> In this example, the Edit.ContextAttributes will add some attributes with JSON, which will help the toolbars inside that loop to correctly edit those items, and not the main item around it. What's In the Edit Object The Edit -object is always available in all Razor-templates. Read the API: IEditService . A short summary of what's inside Check or Enable Editing Mode Edit.Enable(...) allows you to enable editing functionality even if it's not available by user permissions, see more Edit.Enabled (boolean) Tells you if it's edit-mode or not, allowing your code to output other things if edit is enabled. Work with Toolbars Creates a Toolbar, see Razor Edit Toolbar . Edit.TagToolbar(...) attribute ( 2sxc 9.40+ , recommended) it is used inside a tag like <div @Edit.TagToolbar(Content)> to create best-practice hover toolbars Edit.Toolbar(...) ( 2sxc 8.04+ ) is used like a tag (it generates an invisible <ul> tag) and is used for non-hover toolbars. Create HTML Attributes if in Edit Mode Edit.Attribute create any attribute on the condition that the user may edit the page, using Edit.Attribute(name, string|object) for use in things like <div class=\"...\" @Edit.Attribute(\"data-enable-edit\", \"true\") >...</div> Create Context-Attributes for the UI (advanced use cases) Edit.ContextAttributes(...) creates Context-Information for other edit-functionality. This is advanced, and currently only needed for Inner Content (Content Within Other Content) ) - read about it on [Razor Edit.ContextAttributes](xref:Razor.ContextAttributes] Demo App and further links You should find some code examples in this demo App Blog App History Introduced in 2sxc 8.04 Enhanced with Enable(...) method in 9.30 Enhanced with TagToolbar(...) in 9.40"
  },
  "net-code/dynamic-code/index.html": {
    "href": "net-code/dynamic-code/index.html",
    "title": "Dynamic Code API | 2sxc 13 / EAV 13",
    "keywords": "Dynamic Code API Every C# file in 2sxc is Dynamic Code as it's compiled on-the-fly and has a lot of helpers to work with Dynamic Data . <!-- Data Highlights --> <!-- ADAM --> <!-- Server --> <!-- Prepare --> <!-- Data Source --> <!-- Optimzers --> <!-- Process / Awesomize --> <!-- Libraries --> <!-- data formats --> <!-- Browser --> <!-- Frameworks --> <!-- App show parts --> <!-- Interact parts --> <!-- Edit parts --> <!-- Edit UI parts --> <!-- SPA parts --> <!-- Custom highlight boxes - can be controlled by in-page CSS --> you are here (click to zoom) - discover the stack .context-box-process .process-cs { visibility: visible; } The following APIs are available on all 2sxc Dynamic Code . You can use this in: Razor (including Code-Behind) WebAPI Controllers Helper Code files Discover More in the Razor Tutorials We have an rich series of Razor tutorials . You should really check them out üëç. Instance Data in Dynamic Code Note Instance specific data belongs to the module-instance on the page, either because it was added manually as Content or because the View of the module-instance uses a Query . Best read about App vs. Instance Data and Where Data Comes From Content The primary and often the only content-items for this template. Content.Presentation Can contain additional presentation settings for this content, like how to format it. Data One or more Streams (lists) of zero-or-more content items Header The header data if the template expects to be a list and also needs a title or intro. Header.Presentation Can contain additional presentation settings for the header, like how to format it. App and App-Data Objects App The current App with Settings , Resources , Path information and more. App.Data All the data of the current app for immediate use, fully cached in memory of the web server. App.Query Queries which were created using VisualQuery and can be run to access prepared data. General Objects CmsContext Information about the system, page, module etc. Dnn The common Dnn object providing page, module, user information Edit Helper providing you with various edit-functionality like Toolbar(...) Link Helper to generate links, according to the Dnn-environment configuration Conversion Commands AsAdam(...) Gives you the ADAM parts (files, images, folders) of a field. AsDynamic(...) - takes just about anything (an iEntity, a list of iEntities, a dynamic, ...) and casts it to a DynamicEntity AsDynamic(jsonString) AsEntity(...) - takes just about anything (iEntity, DynamicEntity, list of that) and casts it to an iEntity Helper Commands provided by 2sxc CreateInstance(...) To create an object of a parsed CSHTML file, for example to then access methods of that code CreateSource<T>() Get a DataSource object of type T (like filters, sorting, etc.) GetService<T>() Get a Service to help you (using Dependency Injection ) Important Notes Important Your code must inherit the correct base class to get this API. You'll find the correct base classes in the documentations for Razor and Web API."
  },
  "net-code/dynamic-code/objects/link.to.html": {
    "href": "net-code/dynamic-code/objects/link.to.html",
    "title": "Link.To(...) / ...) Method in Dynamic Code | 2sxc 13 / EAV 13",
    "keywords": "Link.To(...) / @Link.To(...) Method in Dynamic Code Basically you can always link around to other pages, websites or views using normal <a href=\"...\">text</a> html. And often you just want to add some parameters to the current Url like ?id=27 - but the behavior of this can be very different depending on the Dnn settings. The Link.To method on the Link object helps you handle this. Note: Dnn often has a problem with links, because depending on what page you are on, the bbehavior is a bit different. This is especially important on the home page. Use @Link.To(...) to make sure everything works no matter what. Discover More in the Razor Tutorials We have an rich series of Razor tutorials . You should really check them out üëç. Purpose of Link.To(...) The Link.To can be used for the following scenarios Linking to another page in the system, of which you know only the page-id Linking to the current page but adding various parameters Linking to an API endpoint, for example an XML RSS feed How to use Here's a quick example of using the Link object in a Razor template: <a href=\"@Link.To(parameters: \"id=\" + item.EntityId)\"> @item.Title </a> This example creates a link to the current page, adding either ?id=27 or /id/27 , depending on the Dnn configuration. How it works The Link -object is always available in all Razor-templates. Internally it uses the Dnn and Oqtane APIs to get the correct url. Using @Link.To() for Pages / Parameters Example: @Link.To(parameters: \"id=17\") @Link.To(parameters: \"id=403&category=all\") Linking to a target element with an assigned id For reference, see HTML Link Bookmarks Example: Let's assume you've build a target like this <div id=\"@(\"person-\" + person.EntityId)\"> ... </div> Then to link straight there in the same page <a href=\"@Link.To(parameters: \"#person-\" + person.EntityId)\"> Or on another page <a href=\"@Link.To(pageId: 40, parameters: \"#person-\" + person.EntityId)\"> Linking to APIs ‚ú® new! This was introduced in 2sxc 12.02, since APIs are becoming more important. Here's an example from the Blog 5: <a href='@Link.To(api: \"api/Blog/Rss\", parameters: filteredCategory == null ? \"\" : \"category=\" + filteredCategory.Key)' target=\"_blank\"> <i class=\"fas fa-rss align-self-center text-white\"></i> </a> Notes and Clarifications The Link-Object is of type ILinkService . Enforced Parameter Naming To promote long term API stability, we require all parameters to be named when used. This allows us to add further parameters later on, and the calls will still work. <!-- this will work --> @Link.To(parameters: \"id=17\") @Link.To(parameters: \"id=403&category=all\") <!-- new in 2sxc 9.5.1 --> @Link.To(pageId: 40, parameters: \"id=403&category=all\") <!-- this won't work --> @Link.To(\"id=17\") Demo App and further links You should find some code examples in this demo App Blog App History Introduced in 2sxc 8.4 Enhanced in 2sxc 9.5.1 with parameter pageId Added api parameter in v12.02 to allow linking to APIs"
  },
  "basics/browser/html.html": {
    "href": "basics/browser/html.html",
    "title": "HTML in the Browser | 2sxc 13 / EAV 13",
    "keywords": "HTML in the Browser <!-- Data Highlights --> <!-- ADAM --> <!-- Server --> <!-- Prepare --> <!-- Data Source --> <!-- Optimzers --> <!-- Process / Awesomize --> <!-- Libraries --> <!-- data formats --> <!-- Browser --> <!-- Frameworks --> <!-- App show parts --> <!-- Interact parts --> <!-- Edit parts --> <!-- Edit UI parts --> <!-- SPA parts --> <!-- Custom highlight boxes - can be controlled by in-page CSS --> you are here (click to zoom) - discover the stack .context-box-summary .show-html { visibility: visible; } The HTML which the browser receives comes directly from your Razor or Token templates. You have 100% control over the HTML which is generated, 2sxc does not get in your way. There's not much to add to that üòâ. Learn More About.. Learn Razor with placeholder to show your data Automatically resize images to your needs Use Koi to create different output based on the CSS Framework of the page Use Polymorphism to stage changes for review while still running the original live edition SEO Optimize your HTML (google this topic) History Added in 2sxc 1.0"
  },
  "basics/browser/css.html": {
    "href": "basics/browser/css.html",
    "title": "CSS in the Browser | 2sxc 13 / EAV 13",
    "keywords": "CSS in the Browser <!-- Data Highlights --> <!-- ADAM --> <!-- Server --> <!-- Prepare --> <!-- Data Source --> <!-- Optimzers --> <!-- Process / Awesomize --> <!-- Libraries --> <!-- data formats --> <!-- Browser --> <!-- Frameworks --> <!-- App show parts --> <!-- Interact parts --> <!-- Edit parts --> <!-- Edit UI parts --> <!-- SPA parts --> <!-- Custom highlight boxes - can be controlled by in-page CSS --> you are here (click to zoom) - discover the stack .context-box-summary .show-html { visibility: visible; } The Css which the browser receives can come from multiple sources: App Assets located in your App folder CDN (Content Delivery Network) - this is often used for common JS / Style libraries Recommendations In general you should bundle and pre-optimize any CSS / SASS code using automations such as WebPack for best possible performance. Use Asset Optimizations Where possible, use CDNs for common libraries Try to use deferred loading for JS and CSS where possible ...this is especially important if you use external fonts, which tend to drag down your Google PageSpeed Use Koi to Detect the CSS Framework of the Theme If you create Apps for re-distribution, it may run on sites having different Themes than what you used to develop. If you plan on handling this scenario you have two options Polymorphism where you have multiple templates for each kind of CSS framework Use Koi to detect the CSS framework and apply different CSS classes based on the CSS Framework History Added in 2sxc 1.0"
  },
  "basics/app/views/settings.html": {
    "href": "basics/app/views/settings.html",
    "title": "View Settings (Advanced ‚ö†) | 2sxc 13 / EAV 13",
    "keywords": "View Settings (Advanced ‚ö†) <!-- Data Highlights --> <!-- ADAM --> <!-- Server --> <!-- Prepare --> <!-- Data Source --> <!-- Optimzers --> <!-- Process / Awesomize --> <!-- Libraries --> <!-- data formats --> <!-- Browser --> <!-- Frameworks --> <!-- App show parts --> <!-- Interact parts --> <!-- Edit parts --> <!-- Edit UI parts --> <!-- SPA parts --> <!-- Custom highlight boxes - can be controlled by in-page CSS --> you are here (click to zoom) - discover the stack .context-box-summary .process-razor, .context-box-summary .data-configuration { visibility: visible; } Starting in 2sxc 12.02 you can also now create custom Settings for a a View . Why Use View Settings? This is great if you have multiple Views showing the same Template which has a list of settings to be applied. Or if you want to keep the aspects building a View be configurable in the UI. Simple Cases where the Identifier is Sufficient Tip In many cases it's easier to just use the Identifier and set some variables in your code. But in advanced cases where you may add more views in time and would like to have the variations configurable, the View Settings are the way to go. How do View Settings Work? View Settings are standard Entities in 2sxc. So you'll have to create a Content-Type for this containing the fields which you want to configure. To keep the normal Data section clean, the content-types are in the Scope System.Configuration . For multiple views you may end up using the same Settings Content-Type or create a new Content-Type for each view - as you need it. How to Setup View Settings? First create the Content-Type in the Scope Configuration and add the fields you want to configure Then in the view-configuration select that Content-Type (it will only show types on Configuration ) and either create a new entity or select an existing one. How Can I Access View Settings in Razor? These can be found on the Dynamic Stack Object on Settings - see Settings Docs . How Can I Access View Settings in Tokens? As of now this is not possible. History Made available to Razor in 2sxc 12.02"
  },
  "basics/app/views/resources.html": {
    "href": "basics/app/views/resources.html",
    "title": "View Resources (Advanced ‚ö†) | 2sxc 13 / EAV 13",
    "keywords": "View Resources (Advanced ‚ö†) <!-- Data Highlights --> <!-- ADAM --> <!-- Server --> <!-- Prepare --> <!-- Data Source --> <!-- Optimzers --> <!-- Process / Awesomize --> <!-- Libraries --> <!-- data formats --> <!-- Browser --> <!-- Frameworks --> <!-- App show parts --> <!-- Interact parts --> <!-- Edit parts --> <!-- Edit UI parts --> <!-- SPA parts --> <!-- Custom highlight boxes - can be controlled by in-page CSS --> you are here (click to zoom) - discover the stack .context-box-summary .process-razor, .context-box-summary .data-configuration { visibility: visible; } Starting in 2sxc 12.02 you can also now create custom Resources for a View . Why Use View Resources? If Views need multi-language texts or images then the Resources would be the right place to handle them. Examples button-labels Views whichs how tables may have a lot of row or column labels Tip View Resources complement App Resources . The difference is that App-Resources are available on all Templates while View-Resources are only available on the Views they are configured on. Tip If you can use View-Resources on multiple views. This is great in cases where the same template is used for multiple views. But you can also choose to use different Resources - just how you need it. Tip Remember that each Entity/Item can also be multi-language, so you only need View-Resources for static-localization. This means texts/labels/images which are the same every time the View is used. How do View Resources Work? View Resources are standard Entities in 2sxc. So you'll have to create a Content-Type for this containing the fields which you want to configure. To keep the normal Data section clean, the content-types are in the Scope System.Configuration . For multiple views you may end up using the same Resources Content-Type or create a new Content-Type for each view - as you need it. How to Setup View Resources? First create the Content-Type in the Scope Configuration and add the fields you want to configure Then in the view-configuration select that Content-Type (it will only show types on Configuration ) and either create a new entity or select an existing one. How Can I Access View Resources in Razor? These can be found as a Dynamic Stack Object on Resources - see Resources Docs . How Can I Access View Settings in Tokens? As of now this is not possible. History Made available to Razor in 2sxc 12.02"
  },
  "basics/app/views/index.html": {
    "href": "basics/app/views/index.html",
    "title": "Views and Templates | 2sxc 13 / EAV 13",
    "keywords": "Views and Templates <!-- Data Highlights --> <!-- ADAM --> <!-- Server --> <!-- Prepare --> <!-- Data Source --> <!-- Optimzers --> <!-- Process / Awesomize --> <!-- Libraries --> <!-- data formats --> <!-- Browser --> <!-- Frameworks --> <!-- App show parts --> <!-- Interact parts --> <!-- Edit parts --> <!-- Edit UI parts --> <!-- SPA parts --> <!-- Custom highlight boxes - can be controlled by in-page CSS --> you are here (click to zoom) - discover the stack .context-box-summary .process-razor, .context-box-summary .data-configuration { visibility: visible; } Views are what the user will see - and contains things like Html, CSS, Javascript and data from the content. How it Works Views configure what templates are combined with what Content-Type to then produce an output. Read more about Templates here The template-file is just part of the view. To be used as a view, it must be configured in the App configuration as a view, where you add things like Name or Thumbnail Image (for the preview when selecting the view) Data specs like what type of data is shown, if the data comes from a query etc. View Parameters to automatically show this view based on url-parameters Tip Views can also specify more Content-Types for using in the Header or Presentation. In addition, they could also say that the data comes from a Query instead of from user/editor input. View Configuration üëâ See View Configuration View Identifier 2sxc 12.02 introduces a the Identifier . This is useful in scenarios where the same Template is used in multiple views, and should result in slightly different output in each case. The Identifier let's you specify a key to differentiate which behavior the template should have. For example: Two views are configured, one with the name 2 Columns has an Identifier 2Col the other called 3 Columns has 3Col . Your razor code can then access this on CmsContext.View.Identifier and change what CSS classes it uses. In theory you could also check the Name property on CmsContext.View.Name but that could change based on the language, which is why you should use the Identifier . In more complex scenarios we suggest you use View Settings . View Settings üëâ See View Settings (Advanced ‚ö†) View Resources üëâ See View Resources (Advanced ‚ö†) View Polymorphism Polymorphism can be activated on views (new in v11). When you do this, you can choose between two modes Permission based: in this case SuperUsers get the template from the staging folder while public users get the template from live or the primary one which was configured in the View configuration CSS framework based: here the view will automatically try to pick the file from the folder matching the CSS framework set by the Theme/Skin Advanced Topics Switching between views based on the url Differences between features when using Content or App Protecting Views for certain users using permissions Hide advanced features from normal editors Razor Tutorial History Introduced in 2sxc 1.0 Automatic View-Polymorphism added in 2sxc 11 View Identifier added in 2sxc 12.02 View Settings added in 2sxc 12.02 View Resources added in 2sxc 12.02"
  },
  "net-code/data-sources/custom/tutorial-basic/basic-list.html": {
    "href": "net-code/data-sources/custom/tutorial-basic/basic-list.html",
    "title": "Tutorial Custom DataSources - BasicList | 2sxc 13 / EAV 13",
    "keywords": "Tutorial Custom DataSources - BasicList This explains the BasicList DataSource in the DataSource Tutorial . Add to VisualQuery This is what it looks like in VisualQuery : And this is what you see when you run it: Source of the BasicList DataSource This is the code for the simplest DataSource: using System; using System.Collections.Generic; using System.Collections.Immutable; using ToSic.Eav.Data; using ToSic.Eav.DataSources; using ToSic.Eav.DataSources.Queries; namespace ToSic.Tutorial.DataSource.Basic { // additional info so the VisualQuery can provide the correct buttons and infos [VisualQuery( NiceName = \"Demo DateTime List\", Icon = \"date_range\", GlobalName = \"10ebb0af-4b4e-44cb-81e3-68c3b0bb388d\" // random & unique Guid )] public class DateTimeDataSourceBasicList: ExternalData { public const string DateFieldName = \"Date\"; public const string IdField = \"Id\"; public const int ItemsToGenerate = 27; /// <summary> /// Constructor to tell the system what out-streams we have /// </summary> public DateTimeDataSourceBasicList() { Provide(GetList); // default out, if accessed, will deliver GetList } /// <summary> /// Get-List method, which will load/build the items once requested /// Note that the setup is lazy-loading, /// ...so this code will not execute unless it's really used /// </summary> /// <returns></returns> private ImmutableArray<IEntity> GetList() { var randomNumbers = new List<IEntity>(); for (var i = 0; i < ItemsToGenerate; i++) { var values = new Dictionary<string, object> { {IdField, i}, {DateFieldName, RandomDay()} }; var ent = DataBuilder.Entity(values, id: i, titleField: DateFieldName); randomNumbers.Add(ent); } return randomNumbers.ToImmutableArray(); } // helper to randomly generate dates private readonly Random _randomizer = new Random(); private readonly DateTime _start = new DateTime(1995, 1, 1); private DateTime RandomDay() { var range = (DateTime.Today - _start).Days; return _start.AddDays(_randomizer.Next(range)); } } } This is very similar to the Basic case, just that we're now creating a list of Entities and returning them. What this does is... Inform VisualQuery that there is a DataSource and registers it with a unique GUID The constructor says it provides one Default stream which can be built by GetList() GetList() will simply create a simple entity and return it as a list Read More Discover the Basic DataSourceTutorial with more examples History Created 2017 for 2sxc 7 Completely rebuilt for 2sxc 11.13 and VisualQuery 3"
  },
  "net-code/data-sources/custom/type-source.html": {
    "href": "net-code/data-sources/custom/type-source.html",
    "title": "DataSource API: Root DataSources which Introduce Data | 2sxc 13 / EAV 13",
    "keywords": "DataSource API: Root DataSources which Introduce Data <!-- Data Highlights --> <!-- ADAM --> <!-- Server --> <!-- Prepare --> <!-- Data Source --> <!-- Optimzers --> <!-- Process / Awesomize --> <!-- Libraries --> <!-- data formats --> <!-- Browser --> <!-- Frameworks --> <!-- App show parts --> <!-- Interact parts --> <!-- Edit parts --> <!-- Edit UI parts --> <!-- SPA parts --> <!-- Custom highlight boxes - can be controlled by in-page CSS --> you are here (click to zoom) - discover the stack .context-box-summary .datasource-custom { visibility: visible; } If your DataSource creates new items - like from memory or elsewhere - it's called a Root DataSource . Examples would be DataSources which... ...get data from a WebApi ...list files in a Folder ...reads image file properties You can find some simple examples in the Tutorial . Also make sure you mark your sources in the VisualQuery Attribute as DataSourceType.Source . Read Also Custom DataSources - Basic Tutorial History Introduced ca. EAV / 2sxc v6"
  },
  "basics/licenses-features/features.html": {
    "href": "basics/licenses-features/features.html",
    "title": "Features Management | 2sxc 13 / EAV 13",
    "keywords": "Features Management <!-- Data Highlights --> <!-- ADAM --> <!-- Server --> <!-- Prepare --> <!-- Data Source --> <!-- Optimzers --> <!-- Process / Awesomize --> <!-- Libraries --> <!-- data formats --> <!-- Browser --> <!-- Frameworks --> <!-- App show parts --> <!-- Interact parts --> <!-- Edit parts --> <!-- Edit UI parts --> <!-- SPA parts --> <!-- Custom highlight boxes - can be controlled by in-page CSS --> you are here (click to zoom) - discover the stack .context-box-summary .data-configuration { visibility: visible; } To increase the security of 2sxc, many features are only available if actively enabled . This reduced the security surface and hardens the installation . A feature is a functionality of 2sxc or EAV, which can be enabled/disabled at system level. Each feature is identified by a GUID, and all features are disabled by default. Some examples of features: define permissions by user ( new in 9.30 ) use the new (beta) Angular 5 UI for editing ( new in 9.30 ) use standard 2sxc forms to allow public users to submit data ( new in 9.30 ) let certain users save draft-only data ( new in 9.30 ) enable paste-image-from-clipboard (beta, new in 9.30 ) Behavior if Feature is Disabled If a feature is not enabled and code needs to use the feature, it will either show an error OR simply skip that functionality. This varies from feature to feature. If an error is thrown, the system will include a link to the missing feature as well as instructions to enable. Managing Features This is done through the Apps-Management. This is what it looks like: Read about managing features in the blog about features-management How the Feature-Configurations are Stored Features use a json-file called features.json located in the desktopmodules/tosic_sexycontent/.data-custom/configurations folder. Additional Security Mechanisms For added security, there are two layers of additional protection: The configuration contains a fingerprint of the current installation (so that an attacker cannot simply replace the features-configuration with an own copy). This fingerprint should match the fingerprint of the installation for the configuration to be valid. Read more about fingerprinting in this blog . When the configuration is created, it is signed by the 2sxc.org server using a digital certificate and verified when the features are loaded. Note: the security features are already built into 9.30 but not yet enforced. This is because it's a fairly new setup, and we want to be sure that we don't accidentally disable something if something doesn't work properly. Read also Blog about new security mechanisms in 9.30 History Feature system introduced in v9.30 Improved to work with licenses in v13.01 New IFeaturesService in v13.01"
  },
  "basics/image-resizer/index.html": {
    "href": "basics/image-resizer/index.html",
    "title": "Image Resizer | 2sxc 13 / EAV 13",
    "keywords": "Image Resizer <!-- Data Highlights --> <!-- ADAM --> <!-- Server --> <!-- Prepare --> <!-- Data Source --> <!-- Optimzers --> <!-- Process / Awesomize --> <!-- Libraries --> <!-- data formats --> <!-- Browser --> <!-- Frameworks --> <!-- App show parts --> <!-- Interact parts --> <!-- Edit parts --> <!-- Edit UI parts --> <!-- SPA parts --> <!-- Custom highlight boxes - can be controlled by in-page CSS --> you are here (click to zoom) - discover the stack .context-box-summary .image-resizer { visibility: visible; } 2sxc has an awesome Image Resizer built in. It's really easy to use - just add url parameters to the image. So instead of img.jpg add img.jpg?w=200 to resize it to 200px width. Internally it uses the amazing ImageFlow which has the same URL setup as the previous ImageResizer.net . Tip 2sic 12.04 introduces a helper command Link.Image(...) . This can be combined with global image-size settings to create consistent image sizes all across your site. The docs here are not ready, but you can find various examples here History Introduced in 2sxc 5.03 Special Razor API to create links called Link.Image introduced in 12.04 Introduced ImageFlow in v12 for Oqtane Switched to ImageFlow in 13.0 for both Dnn and Oqtane Introducing IImageService in 13.05 beta, to be released in 13.10"
  },
  "basics/app/assets.html": {
    "href": "basics/app/assets.html",
    "title": "App Assets | 2sxc 13 / EAV 13",
    "keywords": "App Assets <!-- Data Highlights --> <!-- ADAM --> <!-- Server --> <!-- Prepare --> <!-- Data Source --> <!-- Optimzers --> <!-- Process / Awesomize --> <!-- Libraries --> <!-- data formats --> <!-- Browser --> <!-- Frameworks --> <!-- App show parts --> <!-- Interact parts --> <!-- Edit parts --> <!-- Edit UI parts --> <!-- SPA parts --> <!-- Custom highlight boxes - can be controlled by in-page CSS --> you are here (click to zoom) - discover the stack .context-box-summary .data-assets-app { visibility: visible; } In the App Folder you can add any files you need in your App, like: CSS files JS files Images, Logos Note that they should not be content-files , but files your App and the templates need to work. Using App Assets in your Template These files will also be referenced in your template. Since the App may be installed in various places, you should always use the App Path to find the file, like this: <link rel=\"stylesheet\" href=\"@App.Path/assets/style.css\" data-enableoptimizations=\"150\" /> <link rel=\"stylesheet\" href=\"@App.Path/assets/lazy.css\" data-enableoptimizations=\"bottom\" /> <script type=\"text/javascript\" src=\"@App.Path/assets/scripts.js\" data-enableoptimizations=\"200:bottom\" /> </script> <img src=\"@App.Path/some-logo.png?w=200\"> Read More App Folder Structure Optimizing Template Assets / Client Dependencies (JS & CSS) Image Resizer Content Assets / Images / Documents"
  },
  "basics/polymorphism/index.html": {
    "href": "basics/polymorphism/index.html",
    "title": "Polymorphism aka Open-Heart-Surgery | 2sxc 13 / EAV 13",
    "keywords": "Polymorphism aka Open-Heart-Surgery Tip The key concept behind Polymorphism is having the same template and code in various editions (morphs) which are automatically used based on certain rules. Polymorphism Addresses 3 Problems #1 Workin on Live Sites aka Open-Heart-Surgery Imagine you have a running system and you want to make some changes on the live installation. During the time you work, you would always risk breaking the site, but we usually don't have the time to create a staging environment. #2 Creating Templates that work with Multiple CSS-Frameworks When the same design must work in various CSS-Frameworks, you actually need different templates for each - and switching between them must be automatic. #3 A/B Testing In marketing, we want to test various design with different audiences and measure what works best. Polymorph Folder Structure Let's compare the perfect multi-edition (polymorph) setup to the classic solution: Note Automatic View-Polymorphism replaces the manual approach for CSS-Framework and common Open-Heart-Surgery scenarios. The manual approach is still recommended for complex polymorphism as well as A/B Testing. View Polymorphism Automatic View Polymorphism based on CSS-Framework The system is fairly easy to understand. So if polymorphism is activated for CSS-Framework detection, here are the rules: The default template file is the one configured in the view configuration 2sxc will try to find file with the matching name in 2 locations using the name of css framework published by the skin in the koi.json beneath the current folder in the app root folder If nothing is found, the default template file is used If a match is found, it will load that. Note that if the theme does not have a koi.json, the code used is unk for unknown. Here's a checklist how start using View Polymorphism with CSS-Frameworks: Automatic View Polymorphism based on SuperUser Permissions This is meant for Open-Heart-Surgery - so you can work on templates on a live site without breaking the output for normal users. This is how it works (if you have turned it on): The default template is the one configured in the view configuration 2sxc will try to find a file with matching name in either the [root]/staging (for super users) or [root]/live (for normal users) If it is found, 2sxc will render that template Otherwise the default template is used Here's a checklist to get started: Manual View Polymorphs In case the automatic setup doesn't suit your needs, you can do it manually like this: Razor Guide to View Polymorphism Tip These are just a few hints for you as you work with it. Don't forget to activate it in the settings If the Razor code ever wants to know what edition (morph) it's in, check the CmsContext.View.Edition property. You would do this for things like If you need a JS or CSS from the same folder If you need to link to a WebApi of the same edition WebAPI Polymorphims Api Controllers are already fully polymorph. They can be placed in a subfolder like [app-root]/live/api/WtfController.cs and can be accessed using a url with the edition in the name, allowing multiple identically named controllers to be used. Views are polymorph if you do the view selection manually. This means, you can place your views in a subfolder like [app-root]/live/list.cshtml and then have an entry-point [app-root]/list.cshtml which will choose which edition to use - then using @RenderPage to pick that edition. This is still manual, because we're not sure yet what the perfect implementation is, so we would rather wait before standardizing a bad solution. Everything that is data (schemas, items, queries, settings and resources) is still one edition only. The data model is able to perform multi-edition content-management, but we're not ready yet to provide the UIs etc. for this, as it could lead to confusion, so we'll hold back on this for now. How to use WebApi Polymorph As of now, to use the WebApi Polymorp, this is what you would do: instead of placing your WtfController.cs in the [app-root]/api/ folder, you place it in a [app-root]/live/api folder. the live, default JS would then access it using [dnn-api-root]/app/auto/live/api/Wtf You can then copy this controller to [app-root]/dev/api and make your changes there. In your JS, you would then (while testing/developing) access this edition using [dnn-api-root]/app/auto/dev/api/Wtf without causing problems on the live solution, as all other users are still accessing the live edition, while you're working on the dev edition. Once everything works, deploy (copy) the now modified WtfController.cs from the dev/api folder to live/api and all users benefit from the changes. Data Polymorphism Data Polymorphism has not been implemented yet. The idea would be that changes to data or even schemas (fields of a type) would be staged as we work. For now, Data-Polymorphism is low priority, because we're not sure yet if we can \"pull this off\" in a way that won't confuse the users. Read also WebApi DotNet-WebApi Checklist for Polymorphism Blog Post around Polymorphism Demo App and further links The default Content Templates use CSS-Framework Polymorphism to automatically look great in Bootstrap 3 and 4 The Mobius Forms App uses SuperUser Polymorphism so you can develop new forms in the background without breaking functionality History WebAPI Polymorphims was introduced in 2sxc 9.35 Manual View-Polymorphism was introduced in 2sxc 9.35 Automatic View Polymorphism introduced in 2sxc 11.0 (css-frameworks and super-user)"
  },
  "basics/mobile-apps/index.html": {
    "href": "basics/mobile-apps/index.html",
    "title": "Native Mobile Apps & PWAs | 2sxc 13 / EAV 13",
    "keywords": "Native Mobile Apps & PWAs <!-- Data Highlights --> <!-- ADAM --> <!-- Server --> <!-- Prepare --> <!-- Data Source --> <!-- Optimzers --> <!-- Process / Awesomize --> <!-- Libraries --> <!-- data formats --> <!-- Browser --> <!-- Frameworks --> <!-- App show parts --> <!-- Interact parts --> <!-- Edit parts --> <!-- Edit UI parts --> <!-- SPA parts --> <!-- Custom highlight boxes - can be controlled by in-page CSS --> you are here (click to zoom) - discover the stack .context-box-summary .interact-mobile { visibility: visible; } 2sxc is great both for providing data to Native Mobile Apps as well as for creating PWAs and Mobile Web Apps . Native Mobile Apps If you have a Native Mobile App for Android or iOS and need to get either 2sxc Data or Dnn Data to that App, you should check out: Headless Web APIs Custom WebAPIs Automatically resizing images to any resolution Web Server Hosted PWA PWA s or Progressive Web Apps are technically web pages which look and behave like Native Apps. 2sxc is great for creating this and we've created our first PWAs in 2014."
  },
  "abyss/data-formats/json-v01/content-type.html": {
    "href": "abyss/data-formats/json-v01/content-type.html",
    "title": "JSON Content-Type V1 | 2sxc 13 / EAV 13",
    "keywords": "JSON Content-Type V1 JSON based content-types are type-definitions which are stored as JSON. As of now we're using it to provide system-level types to the application (see Concepts - file provided content-types ) and for various automated testing. Description As of now, it's using a envolope to package everything and includes a minimal header to ensure we know it's V1 . It then contains a ContentType node containing various identification and description optional Content-Type Metadata attributes (array) - often with attribute Metadata note that the attribute order is relevant Example This example is an extract of the Config Content-Type to manage the SqlDataSource (will be releasen in 2sxc 9.8 with more help-text etc.): { \"_\": { \"V\": 1 }, \"ContentType\": { \"Id\": \"|Config ToSic.Eav.DataSources.SqlDataSource\", \"Name\": \"|Config ToSic.Eav.DataSources.SqlDataSource\", \"Scope\": \"System\", \"Description\": \"todo\", \"Attributes\": [ { \"Name\": \"Title\", \"Type\": \"String\", \"IsTitle\": true, \"Metadata\": [ { \"Id\": 0, \"Version\": 1, \"Guid\": \"00000000-0000-0000-0000-000000000000\", \"Type\": { \"Name\": \"@All\", \"Id\": \"@All\" }, \"Attributes\": { \"String\": { \"DefaultValue\": { \"*\": \"Sql Query\" }, \"InputType\": { \"*\": \"string-default\" } }, \"Boolean\": { \"VisibleInEditUI\": { \"*\": true } } } } ] }, { \"Name\": \"ConnectionGroup\", \"Type\": \"Empty\", \"IsTitle\": false, \"Metadata\": [ { \"Id\": 0, \"Version\": 1, \"Guid\": \"00000000-0000-0000-0000-000000000000\", \"Type\": { \"Name\": \"@All\", \"Id\": \"@All\" }, \"Attributes\": { \"String\": { \"DefaultValue\": { \"*\": \"\" }, \"InputType\": { \"*\": \"empty-default\" } }, \"Boolean\": { \"VisibleInEditUI\": { \"*\": true } } } } ] }, { \"Name\": \"ConnectionStringName\", \"Type\": \"String\", \"IsTitle\": false, \"Metadata\": [ { \"Id\": 0, \"Version\": 1, \"Guid\": \"00000000-0000-0000-0000-000000000000\", \"Type\": { \"Name\": \"@All\", \"Id\": \"@All\" }, \"Attributes\": { \"String\": { \"DefaultValue\": { \"*\": \"SiteSqlServer\" }, \"InputType\": { \"*\": \"string-default\" } }, \"Boolean\": { \"VisibleInEditUI\": { \"*\": true } } } } ] }, ... { \"Name\": \"SelectCommand\", \"Type\": \"String\", \"IsTitle\": false, \"Metadata\": [ { \"Id\": 0, \"Version\": 1, \"Guid\": \"00000000-0000-0000-0000-000000000000\", \"Type\": { \"Name\": \"@All\", \"Id\": \"@All\" }, \"Attributes\": { \"String\": { \"DefaultValue\": { \"*\": \"/****** Script for SelectTopNRows command from SSMS ******/\\r\\nSELECT TOP (1000) PortalId as EntityId, HomeDirectory as EntityTitle\\r\\n ,[PortalID]\\r\\n ,[ExpiryDate]\\r\\n ,[AdministratorRoleId]\\r\\n ,[GUID]\\r\\n ,[DefaultLanguage]\\r\\n ,[HomeDirectory]\\r\\n ,[CreatedOnDate]\\r\\n ,[PortalGroupID]\\r\\n FROM [Portals]\\r\\n Where ExpiryDate is null\" }, \"InputType\": { \"*\": \"string-default\" } }, \"Boolean\": { \"VisibleInEditUI\": { \"*\": true } } } }, { \"Id\": 0, \"Version\": 1, \"Guid\": \"00000000-0000-0000-0000-000000000000\", \"Type\": { \"Name\": \"@string-default\", \"Id\": \"@string-default\" }, \"Attributes\": { \"Number\": { \"RowCount\": { \"*\": 10.0 } } } } ] } ... ], \"Metadata\": [] } } Details about the Format The format is currently in version 1, and looks like this: _ this is the header - containing the version, in case we introduce breaking changes in the future - see also format v1 ContentType - this is the content-type Id - internal identifier, also known as the static name - often a GUID Name - a nicer name Scope - a term which groups types together; mainly for hiding types the user should normally not see Description - a short description for internal use Attributes [array] [item] Name - the field-name Type - the primary type, like string, number, etc. Description - a short description IsTitle - is this the title field (there must always be one title field) Metadata [array] with more information about this field/attribute - see Metadata Metadata [array] with more information about the content-type - see Metadata Specials about the JSON Content-Types ID is not always a GUID The ID is usually a GUID, but for special system types it is not. This is mostly historic, as all new content-types will have GUIDs, but old types still exist in the system which have a nice name, but that's not ideal for various use cases. This corresponds to the StaticName in the C# API. Scope is Like a Virtual Group The Scope is a name - usually System or something like that. It's primarily used to group types together, so that the editor doesn't have to see the ca. 50 types in the background which make the solution work. See Content-Type Scopes Content Types Have Metadata Content-types can have a lot of metadata - also mostly for the UI. An example is the help-text which is shown. This too is stored as normal JSON. See JSON Metadata V1 . Attributes Have Metadata Each attribute - let's say a field \"Color\" has more information which is needed for scenarios like the edit-UI. These items are standard Metadata . Content Type Attributes must preserve Sort Order This is important, as it's relevant to the UI. Limitations As of now (2sxc 9.7) the system will pick up the content-types stored there and everything works. BUT there is no built-in mechanism to edit these. We (2sic) can easily create content-types in a normal 2sxc and export them to json for this purpose, but as of now there is no GUI to do so. This should not affect you, as it's not meant to be managed by anybody else than us as of now. Read also JSON Format V1 File-Stored Content-Types Blog post about json content-type definitions History Added in 2sxc 9.7"
  },
  "web-api/custom/custom-web-api-dotnet-api.html": {
    "href": "web-api/custom/custom-web-api-dotnet-api.html",
    "title": "C# APIs in ApiController | 2sxc 13 / EAV 13",
    "keywords": "C# APIs in ApiController Moved to C# APIs in ApiController"
  },
  "js-code/2sxc-api/sxc.webapi.html": {
    "href": "js-code/2sxc-api/sxc.webapi.html",
    "title": "| 2sxc 13 / EAV 13",
    "keywords": "Moved to The WebApi Helpers on the Sxc Controller"
  },
  "basics/data/fields/empty-default.html": {
    "href": "basics/data/fields/empty-default.html",
    "title": "Field Input-Type empty-default | 2sxc 13 / EAV 13",
    "keywords": "Field Input-Type empty-default Use this field type for grouping fields together under a title, storing empty (groups/title) . It's an extension of the basic empty field type . Features a UI-only field for grouping fields together under a title Configuring a Empty-Default This shows the configuration dialog: Collapsed by default is for setting whether the field group is collapsed by default. If set to true, then the field group is collapsed by default. History Introduced in EAV 1.0 2sxc 1.0"
  },
  "basics/data/fields/datetime.html": {
    "href": "basics/data/fields/datetime.html",
    "title": "Field Data Type: DateTime | 2sxc 13 / EAV 13",
    "keywords": "Field Data Type: DateTime This explains DateTime Fields . For an overview check out Understanding Data... . DateTime data is a basic data type and is used for dates and/or time values. Features The basic datetime field doesn't have any features, since all the features are in the sub-types. Sub-Types of DateTime Fields datetime-default - simple date and/or time input field (basic datepicker and/or timepicker) Shared Settings Don't have shared settings. Technical Information Storage in the SQL Database in the EAV-Model This is converted to a string when stored as a string in the DB, and converted back to a .net DateTime when the data is loaded. Storage in the SQL Database in the JSON-Model This is stored as a string-value in json using the standard ISO format, as there is no official format for dates or times in JSON. Null Value Possible In some cases you may add a field to a type which already has Entities created previously. In this case the old data doesn't have a value for the field. If this happens, the field will return null , so you may need to catch this special exception in your code. History Introduced in EAV 1.0 2sxc 1.0"
  },
  "basics/data/fields/datetime-default.html": {
    "href": "basics/data/fields/datetime-default.html",
    "title": "Field Input-Type datetime-default | 2sxc 13 / EAV 13",
    "keywords": "Field Input-Type datetime-default Use this field type for configuring dates and/or time values, storing date/datetime data . It's an extension of the basic datetime field type . Features allows users to enter a date through text input, or by choosing a date from the calendar also enables a time-choice if activated Configuring a DateTime-Default This shows the configuration dialog: Use Time-Picker is for enabling a time-choice. History Introduced in EAV 1.0 2sxc 1.0"
  },
  "basics/data/fields/custom.html": {
    "href": "basics/data/fields/custom.html",
    "title": "Field Data Type: Custom | 2sxc 13 / EAV 13",
    "keywords": "Field Data Type: Custom This explains Custom Fields . For an overview check out Understanding Data... . Custom data is a basic data type . It's used to store JSON for special use cases. Sub-Types custom-gps custom-json Recommendation Since 2sxc 10 there is a special AsDynamic which you can use to work with JSON data in Razor templates. Technical Information Storage in the SQL Database in the EAV-Model This is converted to a string when stored as a string in the DB, and converted back to a boolean when the data is loaded. Storage in the SQL Database in the JSON-Model This is simply stored as a string value in json, so kind of JSON in JSON. History Introduced in EAV 1.0 2sxc 1.0"
  },
  "net-code/data/linq-guide.html": {
    "href": "net-code/data/linq-guide.html",
    "title": "Guide to Working with LINQ and 2sxc/EAV Data | 2sxc 13 / EAV 13",
    "keywords": "Guide to Working with LINQ and 2sxc/EAV Data In many cases you will want to sort, filter or group some data, or quickly check if any data was found. When using Razor or working in WebApi, this is best done with LINQ. This guide will assist you to get everything working. For a more API-oriented documentation, see DotNet Query LINQ . We also recommend to play around with the Razor Tutorial App Discover More in the Razor Tutorials We have an rich series of Razor tutorials . You should really check them out üëç. LINQ Basics The way LINQ works is that the namespace System.Linq contains a bunch of extension methods like .Count() , .Where(...) and more. So to use LINQ you need to add a @using statement to razor or just using in a WebApi class. Here's a simple razor example: @using System.Linq; @{ var newestPosts = AsList(App.Data[\"BlogPost\"]) .OrderByDescending(b => b.PublicationDate) .Take(3); } This demonstrates: adding the using statement getting all the BlogPost items using App.Data[\"BlogPost\"] converting it to a list of dynamic objects which will allow the nice syntax using AsList(...) sorting these with newest on top using .OrderByDescending(...) on the property PublicationDate keeping only the first 3 using .Take(3) it also shows how placing the parts on separate lines makes the code easier to read Important: Working with LINQ and dynamic objects LINQ needs IEnumerable<...> Before we continue, it's important that you really understand that LINQ commands are stored as extension methods of IEnumerable<T> . So this works: @using System.Linq; @{ var list = new List<string> { \"word\", \"word\" }; var x = list.First(); } ...whereas this does not: @using System.Linq; @{ var y = 27.First(); } This sounds obvious, but there's an important catch: if the compiler doesn't know that something is an IEnumerable , it will not even try to use the LINQ extension methods, because it doesn't know that it can. So let's look at that... LINQs Problems with dynamic objects #1 Here's an example that would fail: @using System.Linq; @{ dynamic list = new List<string> { \"word\", \"word\" }; var x = list.First(); } The only difference to before is that list ist now dynamic . It contains the same object, but the compiler doesn't treat it that way. In Razor, we use dynamic objects all the time, where we run into this problem. Here's an example which fails: @using System.Linq; @{ var books = AsList(App.Data[\"Books\"]); var booksWithoutAuthors = books .Where(b => !b.Authors.Any()); } Internally the b.Authors returns a list of authors, but the compiler doesn't know this, since it's treated as a dynamic object. You would get an error. To solve this, we must tell the compiler that b.Authors is an IEnumerable, like this: @using System.Linq; @using System.Collections.Generic; @{ var books = AsList(App.Data[\"Books\"]); var booksWithoutAuthors = books .Where(b => !(b.Authors as IEnumerable<dynamic>).Any()); } But let's be honest - it's ugly, long and prone to typos. Especially in a complex query where you could have many of these. So we recommend to define a shorthand for it, like this: @using System.Linq; @using Dynlist = System.Collections.Generic.IEnumerable<dynamic>; @{ var books = AsList(App.Data[\"Books\"]); var booksWithoutAuthors = books .Where(b => !(b.Authors as Dynlist).Any()); } LINQs problem with dynamic objects #2 LINQ methods often have multiple signatures. This means the same command can be written in different ways and with different parameters. To detect the right method, the compiler needs to know the data-types used in the parameters. This causes problem with dynamic objects because the compiler doesn't know what it is until runtime. Check this out: @using System.Linq; @{ var dogString = \"dog\" dynamic dogDyn = \"dog\"; var list = new List<string> { \"dog\", \"cat\", \"hound\" }; var x = list.Contains(dogString); // this works var x = list.Contains(dogDyn); // this fails } To fix this, we must tell the compiler it's an object: @using System.Linq; @{ dynamic dynDog = \"dog\"; var list = new List<string> { \"dog\", \"cat\", \"hound\" }; var x = list.Contains(dynDog as object); } The above example is a bit trivial but here's a real life example, taken from the 2sxc razor tutorial : @using System.Linq; @using Dynlist = System.Collections.Generic.IEnumerable<dynamic>; @{ var persons = AsList(App.Data[\"Persons\"]); var books = AsList(App.Data[\"Books\"]); var booksWithAwardedAuthors = books .Where(b => (b.Authors as Dynlist) .SelectMany(a => a.Awards as Dynlist) .Any() ); var otherBooks = books .Where(b => !(booksWithAwardedAuthors as Dynlist) .Contains(b as object) ); } LINQs problem with dynamic object #3 The last bit has to do with how dynamic objects are built, since they are usually wrapper-objects to help write nicer template code. As wrappers, they are different objects every time. This shows the problem: @using System.Linq; @using Dynlist = System.Collections.Generic.IEnumerable<dynamic>; @{ // this is just the data object, \"@bookData.Author\" wouldn't work var bookData1 = App.Data[\"Books\"].First(); var bookData2 = App.Data[\"Books\"].First(); // this is now a dynamic object, allowing @bookDyn1.Author\" var bookDyn1 = AsList(bookData1); var bookDyn2 = AsList(bookData2); var dataIsSame = bookData1 == bookData2; // true var dynIsSame = bookDyn1 == bookDyn2; // false before 2sxc 9.42 } This doesn't sound like a big deal, but it is. Look at this code from the example above: var otherBooks = books .Where(b => !(booksWithAwardedAuthors as Dynlist) .Contains(b as object) ); The .Contains(...) clause receives a variable b which is actually the dynamic wrapper, and will not be the same as the dynamic wrapper of dynamic wrappers given in booksWithAwardedAuthors . So contains would always say \"nope, didn't find it\". Solving the comparison / equality problem requires the underlying wrapper object to tell the .net framework, that == , != and a few internal methods must work differently. 2sxc 9.42 does this, so the above code would actually work in 2sxc 9.42, but not in previous versions. If another system gives you dynamic objects, you will probably have to write it like this: // this example is for non-2sxc objects or 2sxc before 9.42 var otherBooks = books .Where(b => !(booksWithAwardedAuthors as Dynlist) .Contains(bookWithAward => bookWithAward != null && bookWithAward.SomeProperty == b.SomeProperty) ); LINQs problem with boolean null-objects In many cases, dynamic objects could have a property like Show which could be a boolean, but it could also be null . So this could cause an error: var show = links.Where(x => x.Show); To fix this, the easiest way is to really compare it with true or false as you want, each way will result in treating the null as the opposite (so you decide if null should be yes or no): @using System.Linq; @using Dynlist = System.Collections.Generic.IEnumerable<dynamic>; Dynlist list; list = links.Where(x => x.Show == true); // take true, skip false & null list = links.Where(x => x.Show != true); // take false & null, skip true list = links.Where(x => x.Show == false); // take false, skip true & null list = links.Where(x => x.Show != false); // take true & null, skip false list = links.Where(x => x.Show == null); // take null, skip true & false Read also, Demo App and further links LINQ API Docs Razor Tutorial App showing all kinds of Queries History Guide created 2019-03"
  },
  "net-code/index.html": {
    "href": "net-code/index.html",
    "title": "C#, Razor & Dynamic Code | 2sxc 13 / EAV 13",
    "keywords": "C#, Razor & Dynamic Code When you implement solutions using 2sxc, most of your server-side code will be written in C#. <!-- Data Highlights --> <!-- ADAM --> <!-- Server --> <!-- Prepare --> <!-- Data Source --> <!-- Optimzers --> <!-- Process / Awesomize --> <!-- Libraries --> <!-- data formats --> <!-- Browser --> <!-- Frameworks --> <!-- App show parts --> <!-- Interact parts --> <!-- Edit parts --> <!-- Edit UI parts --> <!-- SPA parts --> <!-- Custom highlight boxes - can be controlled by in-page CSS --> you are here (click to zoom) - discover the stack .context-box-process .process-cs { visibility: visible; } C# Files in 2sxc Apps You will create many dynamic .cs or .cshtml files in the App folder: Razor components , shared Razor and Razor Code-Behind ( _*.cshtml & _*.code.cshtml ) WebApi Controllers ( *Controller.cs files in the api folder) Shared code ( *.cs files in any folder) Tip These files are in your App folder as Dynamic Code and have three core features: The source code can be changed at any time Changes are immediately live without restarting the CMS Cool APIs üòé help you work with dynamic data (Entities) Quick Example The variable person in the following Razor template is a Dynamic Entity - meaning that it can have different properties depending on the configuration. In this case it seems to have FirstName , LastName and Gender . <div @Edit.Toolbar(person)> @person.FirstName @person.LastName - @Text.First(person.Gender, \"unknown\") </div> The code first creates a div tag which would show a hover-toolbar (to admins only) for editing the person . It then shows the names and the gender - which if not determined will show as unknown . Note This kind of code is easy understand for people who know HTML. It's also very easy to customize if you need a different output - since it's basically HTML and placeholders. What's Where This documentation contains the following sections Dynamic Data Everything you need to understand how data, especially dynamic data, works in 2sxc. Dynamic Code The shared API on all Dynamic Code - Razor, WebApi or other. Razor The APIs special to Razor templates Web API Everything you need to know to create/customize Web API Controllers External API Guides you to access 2sxc-instances on the server from the Theme, WebForms or other MVC components Important APIs when Working with Content-Items/Data TODO: this must be moved elsewhere DataSource and DataStream , the core concept for data read/processing/delivery List of all DataSource Objects how to create custom data sources"
  },
  "js-code/turn-on/specs.html": {
    "href": "js-code/turn-on/specs.html",
    "title": "turnOn JavaScript API Specs (WIP!) | 2sxc 13 / EAV 13",
    "keywords": "turnOn JavaScript API Specs (WIP!) The configuration is always a JSON. The simplest possible turnOn would be this: <em turn-on='{ \"run\": \"window.startSomething()\" }'></em> Longer name segments are automatically checked one by one, so this will also work reliably: <em turn-on='{ \"run\": \"window.appGallery.master.start()\" }'></em> Very often you'll then want to include data - either an identifier, a string or object: <em turn-on='{ \"run\": \"window.startMeaningOfLife()\", \"data\": \"42\" }'></em> <em turn-on='{ \"run\": \"window.startMeaningOfLife()\", \"data\": { \"answer\": \"42\", \"question\": null }'></em> In addition you can also specify one or more objects to wait for: <em turn-on='{ \"await\": [\"window.$\", \"window.fancybox\"], \"run\": \"window.appGallery.master.start()\" }'></em> You can also wait for a ready-check to exist and for it to return true: <em turn-on='{ \"await\": [\"window.appGallery.isReady()\"], \"run\": \"window.appGallery.master.start()\" }'></em> turnOn JSON Schema These are the properties you can set Property Type Comments await string[] Strings can be objects on window or functions to call for finding out if it's ready. run (req.) string The function to call once it exists data any data to give the run-command debug boolean will console-log what it's doing More on the await Property This is always a string array. As of v0.1 all values... must begin with window can end with just a name like window.something or with () like window.something() can have a much longer name like window.myTopic.mySubtopic.ready if it ends with () then it will be called repeatedly until it returns true experimental: if the node returns a promise object, will wait for that to complete (not fully tested) More on the run Property must begin with window can have a short name like window.ready() or a long name like window.myTopic.mySubtopic.ready() must end with () the run can be an isolated function or part of a larger object. It will preserve the this if it's part of a larger object Debug turnOn In some cases you may not get what you expect and need to debug what you're doing. There are two options: To debug a specific turnOn just add the \"debug\": true to the JSON To debug everything in turnOn, set window.debugTurnOn = true; anywhere on the page. this will flood your console Common Problems The most common cause of issues is an invalid JSON. You'll get errors in the console if you do this. This is especially common if you add dynamic data from the CMS to the object, as it could contain \" characters which break the json. Another common problem is converting boolean C# values to inject into the JSON. Here's why: <!-- this will fail --> <span turn-on='{ \"run\": \"window.load()\", \"data\": { \"show\": Settings.Show }}'></span> <!-- will produce this --> <span turn-on='{ \"run\": \"window.load()\", \"data\": { \"show\": True }}'></span> <!-- this will work --> <span turn-on='{ \"run\": \"window.load()\", \"data\": { \"show\": @(Settings.Show ? \"true\" : \"false\") }}'></span> <!-- will produce this --> <span turn-on='{ \"run\": \"window.load()\", \"data\": { \"show\": true }}'></span> Allowed HTML Tags Any valid HTML tag can be used, incl. existing div or span tags which just get a turn-on attribute added. So you can use <em> , <div> , <span> or even <turnOn> There are a few cases where problems could arise though: If you use a <script> tag, this may not work as expected, as additional processing layers may do something with these script tags. This is especially important in Oqtane, as there the script tags are filtered out and treated separately. If you use a tag which you will later modify in HTML (like using jQuery or Angular) this may fail, because turnOn will make status-updates to the tag and this could interfere with your code doing updates as well. History Introduced on 2sxc 12.02 Future features Get await-functions to preserve the this scope also await certain DOM events; ATM you can do this easily after turnOn has run it's magic, but it would be nice to specify it in the config load scripts and js"
  },
  "js-code/turn-on/index.html": {
    "href": "js-code/turn-on/index.html",
    "title": "turnOn JavaScript API üÜï in v12.04 | 2sxc 13 / EAV 13",
    "keywords": "turnOn JavaScript API üÜï in v12.04 The Problem turnOn Solves A core problem with all JavaScript is making sure that all scripts and dependencies are loaded, available and ready, and the data needed to init is available (usually in the Html itself). Even something as simple as this can fail... $(start); ...because even this example requires jQuery to already exist. turnOn solves this problem with a new architecture. Loading is now configuration based. No matter which parts load in what order, turnOn will work. Tip turnOn is also building an architecture which will reliably work even with very strict CSP enforced - which we believe will be essential in future. üëâ Check out the turnOn Tutorials Activate turnOn To use turnOn you must must tell the page that you need it. Here's how: var page = GetService<ToSic.Sxc.Services.IPageService>(); page.Activate(\"turnOn\"); üëâ Read more about the IPageService The turnOn Solution When using turnOn, the page will request the turnOn.js in any way. It can also be deferred . Then this will be used to turn-on your code: <div turn-on='{ \"await\": [\"window.$\"], \"run\": \"window.appContent.maps.load()\", \"data\": \"some-google-maps-key\" }'> <!-- more html --> </div> This is what happens The html will just be loaded and have no effects, throw no errors and nothing Once the turnOn.js loads it will find this and process it - it doesn't matter if turnOn was already loaded or deferred turnOn will then wait for all this to exist: window window.$ window.appContent window.appContent.maps window.appContent.maps.load It will then call window.appContent.maps.load(data) with the data provided Here's another example, taken from the new Content-App in 2sxc: <!-- Instruct turnOn to init this specific Map once everything is loaded --> <turnOn turn-on='{ \"run\": \"window.appContent.maps.configureMap()\", \"data\": { \"domId\": \"GoogleMap-@DynamicModel.mapId\", \"marker\": \"@Text.First(DynamicModel.markerImage, \"\")\", \"lat\": @DynamicModel.mapInfo.GpsLat.ToString(\"R\"), \"lng\": @DynamicModel.mapInfo.GpsLong.ToString(\"R\"), \"zoom\": @Content.Presentation.Zoom, \"info\": \"@DynamicModel.company\", \"warn\": @(Settings.GoogleMapsShowWarning ? \"true\" : \"false\") }}'></turnOn> This example will init a map with the configuration of the map incl. pin-image, coordinates and more. Advantages of Using turnOn Works, no matter in what order the scripts were loaded Works even if the HTML was created before or after loading the scripts Works for lazy-loaded HTML which can introduce new turnOn configurations Responsibility of Your Code There are a few things turnOn doesn't do, which you should be aware of: It doesn't load JS or CSS files (yet). As of now, you must still do this in the HTML template. The init code must still do it's work properly. If multiple inits should not be called, then your code must ensure that it detects this and skips multiple initializations. Your init-code should not auto-run when loading the script, as this could again be missing dependencies. Examples of the Full Challenge Common things which may be needed before the code starts: The main JS code Additional JS parts Some JS Libraries CSS DOM nodes which the JS should work on Configuration data like ModuleId which should be known. Dynamic pages make this even harder - like when Oqtane/Blazor reloads just parts of the page multiple times. We must ensure that the JS isn't re-initialized again and again, as that can cause issues like: The same code running in parallel - causing all sorts of damage Memory leaks where the same library and complex object states are loaded many times Issues where some code initialized and was then replaced by new, uninitialized code Our goal is to simplify this, so that your solution can simply state what it needs, and then run once all that has been provided. a dom node with a specific id like #module-57 an object on the window like window.someLibrary a js file which should be loaded if it's not loaded yet like /js/jquery.min.js a css file like /css/mycss.js History Added in 2sxc v12.04 Future features also await certain DOM events; ATM you can do this easily after turnOn has run it's magic, but it would be nice to specify it in the config load scripts and js"
  },
  "basics/query/streams/out.html": {
    "href": "basics/query/streams/out.html",
    "title": "VisualQuery: Out Streams | 2sxc 13 / EAV 13",
    "keywords": "VisualQuery: Out Streams <!-- Data Highlights --> <!-- ADAM --> <!-- Server --> <!-- Prepare --> <!-- Data Source --> <!-- Optimzers --> <!-- Process / Awesomize --> <!-- Libraries --> <!-- data formats --> <!-- Browser --> <!-- Frameworks --> <!-- App show parts --> <!-- Interact parts --> <!-- Edit parts --> <!-- Edit UI parts --> <!-- SPA parts --> <!-- Custom highlight boxes - can be controlled by in-page CSS --> you are here (click to zoom) - discover the stack .context-box-summary .query-app { visibility: visible; } All DataSources must have Out Streams. By convention, the primary Out is called Default . Such a Stream will contain zero, one or many Entities (items of data) depending on the logic in the DataSource and the data/configuration which was handed in. The counterpart of Out-Streams are In-Streams . Out Streams in VisualQuery These are predefined Out Streams where each DataSource declares what it can offer: Some Sources can have Dynamic Out where you can create as many Out streams as you want. Usually the name you give each stream will affect what is in it: Rename Out-Streams You can always rename a connection by clicking on the name and typing in a new name. Out-Streams are Run Once If an Out-Stream is accessed in a web-request it will run the code to create the Stream. If it is accessed again (re-used) within the same request, it will simply return the data from the first run. Out-Streams are Lazy An Out-Stream offers Data, but the underlying code is not executed unless accessed. This is for performance reasons. For an Out-Stream to be accessed, it must be connected to one or more In-Stream of other DataSource which in turn are accessed. Note that when debugging in VisualQuery, all Out-Streams of the final target are accessed to show statistis, but if the Query is used elsewhere very often not all streams are accessed. Unused Out-Streams If an out-stream is not connected to anything, it's not used and the underlying code which generates this data will not be accessed. Out-Streams can be Reused An Out-Stream can be connected to multiple In-Streams but the opposite is not possible. So an In can only have one source, but an Out can give it's data to multiple In sources. The underlying code will still only be run once. History Introduced ca. in 2sxc 6 Extended with Dynamic Out ca. 2sxc 8"
  },
  "net-code/dynamic-data/dynamic-list.html": {
    "href": "net-code/dynamic-data/dynamic-list.html",
    "title": "Dynamic Entity Lists | 2sxc 13 / EAV 13",
    "keywords": "<!-- Data Highlights --> <!-- ADAM --> <!-- Server --> <!-- Prepare --> <!-- Data Source --> <!-- Optimzers --> <!-- Process / Awesomize --> <!-- Libraries --> <!-- data formats --> <!-- Browser --> <!-- Frameworks --> <!-- App show parts --> <!-- Interact parts --> <!-- Edit parts --> <!-- Edit UI parts --> <!-- SPA parts --> <!-- Custom highlight boxes - can be controlled by in-page CSS --> you are here (click to zoom) - discover the stack .context-box-summary .data-all { visibility: visible; } Dynamic Entity Lists It's very common to work with a list of items, like a list of blog posts, tags etc. 2sxc has a lot of magic under the hood to just make it work. Here's an example: <ul> @foreach(var tag in blogPost.Tags) { <li>@tag.Name</li> } </ul> To get really good at coding lists, there are a few things you want to learn: Use list from different sources Entities which are a property of something (like blogPost.Tags ) Entities which belong to the Module Entities which come from a Query Entities of a specific Content-Type from App.Data Difference between Entity-lists and DynamicEntity-Lists Looping Using LINQ to sort, filter and more Basics First - What Are Lists of Dynamic Entities In the lingo of C# they are IEnumerable<IDynamicEntity> objects. But basically lists are objects that can be stepped through (iterated). You will usually use them to show the list of items (like a list of News items). And if the list has too much data or is in a weird sorting order, you'll usually want to filter and sort before doing this. How to Get a List of Dynamic Entities In many cases the list is aleady there for you to use. For example, if your BlogPost object has a property Tags which is an Entity-Picker in the Edit-UI, then this will automatically work: <ul> @foreach(var tag in blogPost.Tags) { <li>@tag.Name</li> } </ul> In other scenarios you may get objects which are still IEntity objects. For example, App.Data[\"BlogPost\"] will get you a list of IEntity objects. But these don't allow you to just access a property, so you'll have to use AsList(...) . @* this won't work *@ Find some information Whenever you create a content-type - like Person - and want to work with the data in your C# Razor templates, you'll be working with a Dynamic Entity . üëâ also read about AsDynamic(...) Code example using a Dynamic Entity We'll assume we have a Content Type called Book with the following properties: Title (text, 1-line) Teaser (text, multi-line) Description (text, html) ReleaseDate (date) Author (entity - another content item) Here's a code example in a C# Razor template: <!-- The default variable for the current item is Content, we'll just use another name for this sample note that .Title is automatically provided, because the content-type has the property title. --> <h1>@Content.Title</h1> <div>@Content.Description</div> <div>Author: @Content.Author.FullName</div> So basically all properties of this book can be shown using [Object].[PropertyName] - for example Content.ReleaseDate . What Dynamic Entity really does - and how... Technically the dynamic entity object is like a read-helper for the more complex IEntity . So actually the dynamic entity object will keep a reference to the underlying read-only IEntity item on a property Entity , and whenever your code accesses a property, the dynamic entity will query it from the underlying Entity . The main things that the dynamic entity does for you, are Give you a nice, short syntax to access a property - so Content.FirstName instead of Object.Attributes[\"FirstName\"][\"en\"] which would be necessary using the more advanced IEntity object Ensure that the language used in retrieving a value is the current user language Give conveniant access to related information like the Presentation object Automatically handle some data-not-found errors Automatically do conversions, like convert related entities (like .Children ) into dynamic objects to make your code more consistant How the Property Lookup Works Internally there are a few things that can returned if you do something like Content.SomeProperty If the SomeProperty is one of the internal properties like EntityId etc. (see below) this will be returned Topmost is a simple property of the underlying Entity, like FirstName Similar to that are relationship properties, like Tags which will return a special DynamicEntity that behaves as a list (see below) if the entity is a list (for example the result of var tags = Content.Tags ) then going deeper like tags.Name has the following behavior If the Tags-list had anything, then it will try to find a match on the first item according to these rules. new in v10.27 If up till then nothing was found, it will check if any of the items in the list has that Title property. This lets you write Tags.Webdesign.Name new in v12.04 Last but not least - if nothing matches, it's null Properties of a Dynamic Entity Read the API docs in the IDynamicEntity . Additional properties that work (they are dynamic, so don't appear in the code) EntityId int EntityGuid Guid EntityType string - the type name like Person IsPublished bool - true/false if this item is currently published AnyProperty dynamic, but actually bool | string | decimal | datetime | List any normal property of the content-item can be accessd directly. It's correctly .net typed (string, etc.) Tip In 2sxc 10.27 any property that returns a List<DynamicEntity> now returns a IDynamicEntity containing the list. This means that if you expect the list to just return one item, you can directly access its properties like this: Content.Author.FirstName . To otherwise enumerate the items, we recommend AsList(Object) so AsList(Content.Tags) Working with unpublished/draft items TODO: write something about how-to-check if published/unpublished, navigating it, etc. - or link to such a page Discover More in the Razor Tutorials We have an rich series of Razor tutorials . You should really check them out üëç. Appendix The following properties/methods exist, but shouldn't be used. They are documented here so that you know that they are not meant for public use: Created - the created date Modified - the modified date Owner - the current owner of the item, usually the author Metadadata - currently use AsEntity(theObject).Metadata Permissions - permissions of the current item (if any are defined) History Introduced in 2sxc 01.00 Changed to use interface IDynamicEntity in 6.x Draft/Published introduced in 2sxc 7.x Presentation introduced in 2sxc 7.x Modified introduced in 2sxc 8.x Implemented .net equality comparer in 2sxc 9.42 Parents added in 2sxc 9.42 Get added in 2sxc 9.42 and added to interface IDynamicEntity in 10.07 Parents introduced in 2sxc 9.42, and added to interface IDynamicEntity in 10.07 IsDemoItem property added in 2sxc 10.06 Changed dynamic access to a property to return a DynamicEntity which is enumerable in 10.27"
  },
  "net-code/dynamic-data/dynamic-entity.html": {
    "href": "net-code/dynamic-data/dynamic-entity.html",
    "title": "Dynamic Entity Objects | 2sxc 13 / EAV 13",
    "keywords": "<!-- Data Highlights --> <!-- ADAM --> <!-- Server --> <!-- Prepare --> <!-- Data Source --> <!-- Optimzers --> <!-- Process / Awesomize --> <!-- Libraries --> <!-- data formats --> <!-- Browser --> <!-- Frameworks --> <!-- App show parts --> <!-- Interact parts --> <!-- Edit parts --> <!-- Edit UI parts --> <!-- SPA parts --> <!-- Custom highlight boxes - can be controlled by in-page CSS --> you are here (click to zoom) - discover the stack .context-box-summary .data-all { visibility: visible; } Dynamic Entity Objects Whenever you create a content-type - like Person - and want to work with the data in your C# Razor templates, you'll be working with a Dynamic Entity . üëâ also read about AsDynamic(...) Code example using a Dynamic Entity We'll assume we have a Content Type called Book with the following properties: Title (text, 1-line) Teaser (text, multi-line) Description (text, html) ReleaseDate (date) Author (entity - another content item) Here's a code example in a C# Razor template: <!-- The default variable for the current item is Content, we'll just use another name for this sample note that .Title is automatically provided, because the content-type has the property title. --> <h1>@Content.Title</h1> <div>@Content.Description</div> <div>Author: @Content.Author.FullName</div> So basically all properties of this book can be shown using [Object].[PropertyName] - for example Content.ReleaseDate . What Dynamic Entity really does - and how... Technically the dynamic entity object is like a read-helper for the more complex IEntity . So actually the dynamic entity object will keep a reference to the underlying read-only IEntity item on a property Entity , and whenever your code accesses a property, the dynamic entity will query it from the underlying Entity . The main things that the dynamic entity does for you, are Give you a nice, short syntax to access a property - so Content.FirstName instead of Object.Attributes[\"FirstName\"][\"en\"] which would be necessary using the more advanced IEntity object Ensure that the language used in retrieving a value is the current user language Give conveniant access to related information like the Presentation object Automatically handle some data-not-found errors Automatically do conversions, like convert related entities (like .Children ) into dynamic objects to make your code more consistant How the Property Lookup Works Internally there are a few things that can returned if you do something like Content.SomeProperty If the SomeProperty is one of the internal properties like EntityId etc. (see below) this will be returned Next is a simple property of the underlying Entity, like FirstName which would be a string or a relationship property like Tags which will return a special DynamicEntity that behaves as a list (see below) <!-- 1. if the entity is a list (for example the result of var tags = Content.Tags ) then going deeper like tags.Name has the following behavior If the Tags-list had anything, then it will try to find a match on the first item according to these rules. new in v10.27 If up till then nothing was found, it will check if any of the items in the list has that Title property. This lets you write Tags.Webdesign.Name new in v12.04 --> Last but not least - if nothing matches, it's null Properties of a Dynamic Entity Read the API docs in the IDynamicEntity . Additional properties that work (they are dynamic, so don't appear in the code) EntityId int EntityGuid Guid EntityType string - the type name like Person IsPublished bool - true/false if this item is currently published AnyProperty dynamic, but actually bool | string | decimal | datetime | List any normal property of the content-item can be accessd directly. It's correctly .net typed (string, etc.) Tip In 2sxc 10.27 any property that returns a List<DynamicEntity> now returns a IDynamicEntity containing a list. This means that if you expect the list to just return one item, you can directly access its properties like this: Content.Author.FirstName . To otherwise enumerate the items, we recommend AsList(Object) so AsList(Content.Tags) Working with unpublished/draft items TODO: write something about how-to-check if published/unpublished, navigating it, etc. - or link to such a page Discover More in the Razor Tutorials We have an rich series of Razor tutorials . You should really check them out üëç. Appendix The following properties/methods exist, but shouldn't be used. They are documented here so that you know that they are not meant for public use: Created - the created date Modified - the modified date Owner - the current owner of the item, usually the author Metadadata - currently use AsEntity(theObject).Metadata Permissions - permissions of the current item (if any are defined) History Introduced in 2sxc 01.00 Changed to use interface IDynamicEntity in 6.x Draft/Published introduced in 2sxc 7.x Presentation introduced in 2sxc 7.x Modified introduced in 2sxc 8.x Implemented .net equality comparer in 2sxc 9.42 Parents added in 2sxc 9.42 Get added in 2sxc 9.42 and added to interface IDynamicEntity in 10.07 Parents introduced in 2sxc 9.42, and added to interface IDynamicEntity in 10.07 IsDemoItem property added in 2sxc 10.06 Changed dynamic access to a property to return a DynamicEntity which is enumerable in 10.27"
  },
  "net-code/dynamic-code/objects/link.base.html": {
    "href": "net-code/dynamic-code/objects/link.base.html",
    "title": "Link.Base() / Method in Dynamic Code | 2sxc 13 / EAV 13",
    "keywords": "Link.Base() / @Link.Base() Method in Dynamic Code If you have a SPA on your page you will often need to set the proper base tag. To get it, use Link.Base() . Discover More in the Razor Tutorials We have an rich series of Razor tutorials . You should really check them out üëç. Use @Link.Base() for JavaScript SPA modules Link.Base() ensures that the url can be used for SPAs, as some pages will otherwise provide a wrong link (like home) which then breaks the SPA. <base href=\"@Link.Base()\"> Demo App and further links You should find some code examples in this demo App Blog App History Link was Enhanced in 2sxc 9.5.1 with Base()"
  },
  "net-code/dynamic-code/object-link.html": {
    "href": "net-code/dynamic-code/object-link.html",
    "title": "Page Moved | 2sxc 13 / EAV 13",
    "keywords": "Page Moved Moved to Link / Object in Dynamic Code"
  },
  "basics/data/content-types/index.html": {
    "href": "basics/data/content-types/index.html",
    "title": "Content-Type (Schema/Object-Type) | 2sxc 13 / EAV 13",
    "keywords": "Content-Type (Schema/Object-Type) This explains Content-Types . For an overview check out Understanding Data... . What is a Content-Type? Every Entity ( thing , record or object ) in 2sxc has a definition of fields it can have. So a Book may have fields like Name, Author, Title etc. The Content-Type will define what fields exist, what is required and what order the fields will appear in when editing the item. This definition of the Type is called a Content-Type and it contains specs as to the exact fields are used and what their field-types are. Other systems may call this Schema , Object-Type , Object-Structure or Table Definition Tip Before you start: Remember that you usually don't need this if you are creating Razor templates or WebApi - for that, you want to read Dynamic Entity Objects . Where are Content-Types App Content-Types - this is the default, these Types are part of an App App Shared Content-Types - for advanced use cases System Content-Types - included in the default installation Global Shared Content-Types - for very advanced use cases What's Defined in a Content-Type? Content-Types are a configuration which contains: The list of fields the Content-Type has with the technical name, like ProfilePhoto Edit-UI information for the edit form The order of the fields should be shown in when editing A user friendly name like Profile Photo and editing help texts like This should only contain head & shoulders The Input-Type which the UI should show, like Hyperlink (which means that it's a link or file) Input-Type configuration, for example AllowUpload etc. Optionally some of the Edit-UI information in more languages like Profilbild in German Optionally permission information like May be used in Mobile Apps for read-only Nice to Know: Edit Content-Types Content-Types are configured in the App-Management UIs You can create new Content-Types at any time You can rename a Content-Type at any time If you change the display-name (like Blog Post to Blog Entry ) then your code doesn't need changes. If you change the technical name ( BlogPost to BlogEntry ) then your code needs to be updated You can delete Content-Types at any time When you delete a Content-Type, all Entities/Items of that type are deleted Content-Types have additional descriptions and help-texts which are shown in the Edit-UI Content-Types can also have an icon, but that's only used in Content Mode Nice to Know: Edit Fields of a Content-Type You can always create new fields on a Content-Type When you add new fields, then existing data will have that field, but no values on these fields You can always delete existing fields on a Content-Type When you remove fields, existing data will lose those values You can always rename fields of a Content-Type When you change the display name of a field (like Persons Photo to Profile Picture ) the technical field name doesn't change, so your code doesn't need modification. If you change the technical field name (like ProfilePic to ProfilePhoto ) the code must be updated Nice to Know: Export / Import Content-Type Definition You can export a Content-Type into a JSON format You can import the Content-Type into another App using upload or drag-n-drop Important Exporting the Content Type Definition exports the schema / fields of that type. Exporting all the Items of a Content-Type is a table-export of all the data. Content-Type - More Information Identity of a Content Type: Name and StaticName Each content-type has a Name , which is nice for a human to read, use and program with. There is a second identifier called StaticName which is usually a GUID, but in rare cases it's a string like App-Settings . This identifier is used internally - for example when a View references a Content-Type. Storage Most Content-Types in your App are stored in the SQL database . System and global Content-Types are stored in the file system. These are called File-Stored Content-Types Field Types Each field will be of a simple type like text/string , number , boolean (yes/no) or other. You can find the list of types here . Relationships Fields can also be of type Entity in which case they point to other items. This would then establish a Relationship Input Forms and Fields (like WYSIWYG) The input mask is automatically generated from the Content-Type . Based on the specifications, it will generate the correct Input-Field like a simple text field, a multiline text field, a WYSIWYG or even a file-uploader. Scopes Content-Types have a Scope . Read about it Content-Type Scopes APIs ToSic.Eav.Data Namespace has almost everything you see here IContentType defines what fields exist, it's the ContentType / Schema IContentTypeAttribute contains the definition of an attribute , IMetadataOf contains information about the content-type (like nicer descriptions). This is also used for the Attribute-Metadata History Introduced in 2sxc 1.0"
  },
  "abyss/releases/history/index.html": {
    "href": "abyss/releases/history/index.html",
    "title": "History of the EAV and 2sxc Code Base | 2sxc 13 / EAV 13",
    "keywords": "History of the EAV and 2sxc Code Base Here we'll track important changes, especially feature additions. You should check out üëâ All breaking changes üëâ All changes üëâ Changes per version - select version in the menu Github Release Notes You can always find the latest and detailed release notes on the github releases"
  },
  "api/dot-net/ToSic.Sxc.Services.ILogService.html": {
    "href": "api/dot-net/ToSic.Sxc.Services.ILogService.html",
    "title": "Interface ILogService | 2sxc 13 / EAV 13",
    "keywords": "Interface ILogService Service to add messages to the global log in any platform Dnn/Oqtane Namespace : ToSic.Sxc.Services Assembly : ToSic.Sxc.dll Syntax [PublicApi] public interface ILogService Remarks As of now this service is still very simple, later we may add methods like Warn() or Error() but let's wait and see what's needed Methods | Improve this Doc View Source Add(String, String) Add a general message to the log. Declaration void Add(string title, string message) Parameters Type Name Description System.String title System.String message"
  },
  "api/dot-net/ToSic.Sxc.Blocks.Purpose.html": {
    "href": "api/dot-net/ToSic.Sxc.Blocks.Purpose.html",
    "title": "Enum Purpose | 2sxc 13 / EAV 13",
    "keywords": "Enum Purpose These are the purposes of a block as it's being built. It can be built to generate a web-view, juts for indexing or possibly also for json publishing. Namespace : ToSic.Sxc.Blocks Assembly : ToSic.Sxc.dll Syntax [PublicApi(\"Deprecated - avoid using - still used in older Dnn APIs\")] public enum Purpose Fields Name Description IndexingForSearch The purpose is for the search-indexer to build the index. WebView This is a normal use case, web-view."
  },
  "api/dot-net/ToSic.Sxc.Blocks.IView.html": {
    "href": "api/dot-net/ToSic.Sxc.Blocks.IView.html",
    "title": "Interface IView | 2sxc 13 / EAV 13",
    "keywords": "Interface IView Defines a view configuration which is loaded from an EntityBasedType . Inherited Members IEntityBasedType.Title IEntityBasedType.Id IEntityBasedType.Guid IEntityBasedType.Metadata IEntityWrapper.Entity IHasDecorators<IEntity>.Decorators Namespace : ToSic.Sxc.Blocks Assembly : ToSic.Sxc.dll Syntax [PublicApi_Stable_ForUseInYourCode] public interface IView : IEntityBasedType, IEntityWrapper, IHasDecorators<IEntity>, IMultiWrapper<IEntity> Properties | Improve this Doc View Source Icon An optional Icon for this View configuration. Would be used instead of the file name in the App-folder. WIP Declaration string Icon { get; } Property Value Type Description System.String Remarks New in 12.02 | Improve this Doc View Source Identifier An optional unique identifier for this View configuration. Declaration string Identifier { get; } Property Value Type Description System.String Remarks New in 12.02 | Improve this Doc View Source IsHidden Determine if we should hide this view/template from the pick-UI. Declaration bool IsHidden { get; } Property Value Type Description System.Boolean | Improve this Doc View Source IsShared Translates the location to tell us if it's a shared view (the template is in a shared location) Declaration bool IsShared { get; } Property Value Type Description System.Boolean | Improve this Doc View Source Name The name, localized in the current UI language. Declaration string Name { get; } Property Value Type Description System.String | Improve this Doc View Source Path Path to the template Declaration string Path { get; } Property Value Type Description System.String | Improve this Doc View Source Query The query attached to this view (if one was specified) Declaration QueryDefinition Query { get; } Property Value Type Description QueryDefinition A query object or null | Improve this Doc View Source SearchIndexingDisabled Determines if search indexing should be disabled - so this view will not provide search data. Declaration bool SearchIndexingDisabled { get; } Property Value Type Description System.Boolean | Improve this Doc View Source SearchIndexingStreams Streams which should be included in the search index. If empty will use all streams. CSV Declaration string SearchIndexingStreams { get; } Property Value Type Description System.String | Improve this Doc View Source Type The underlying type name of the template, ATM they are unfortunately hard-coded as \"C# Razor\" and \"Token\" Declaration string Type { get; } Property Value Type Description System.String | Improve this Doc View Source ViewController The external class which should be compiled / used to customize search. In future this could do more, which is why it's called ViewController and not SearchController or something. Declaration string ViewController { get; } Property Value Type Description System.String"
  },
  "api/dot-net/ToSic.Sxc.DataSources.IBlockDataSource.html": {
    "href": "api/dot-net/ToSic.Sxc.DataSources.IBlockDataSource.html",
    "title": "Interface IBlockDataSource | 2sxc 13 / EAV 13",
    "keywords": "Interface IBlockDataSource This marks data sources which are meant for Blocks (Modules, Content-Block Instances). They have some internal functionality which isn't published as of now. Inherited Members IDataSource.Out IDataSource.Item[String] IDataSource.GetStream(String, String, Boolean, Boolean) IDataSource.List IDataSource.Configuration IDataSource.LogId IDataSource.CacheRelevantConfigurations IDataSource.CacheKey IZoneIdentity.ZoneId IAppIdentityLight.AppId ICacheKey.CachePartialKey ICacheKey.CacheFullKey ICacheExpiring.CacheChanged(Int64) ITimestamped.CacheTimestamp ICanPurgeListCache.PurgeList(Boolean) IHasLog.Log IDataTarget.In IDataTarget.Attach(IDataSource) IDataTarget.Attach(String, IDataSource, String) IDataTarget.Attach(String, IDataStream) IDataPartShared.Guid IDataPartShared.Name Namespace : ToSic.Sxc.DataSources Assembly : ToSic.Sxc.dll Syntax [PublicApi_Stable_ForUseInYourCode] public interface IBlockDataSource : IDataSource, IAppIdentity, IZoneIdentity, IAppIdentityLight, ICacheInfo, ICacheKey, ICacheExpiring, ITimestamped, ICanPurgeListCache, IHasLog, IDataTarget, IDataPartShared"
  },
  "api/dot-net/ToSic.Eav.DataSources.Queries.IQuery.html": {
    "href": "api/dot-net/ToSic.Eav.DataSources.Queries.IQuery.html",
    "title": "Interface IQuery | 2sxc 13 / EAV 13",
    "keywords": "Interface IQuery Marks a special IDataSource which is a query. It has an underlying QueryDefinition and Params which can be modified by code before running the query. Inherited Members IDataSource.Out IDataSource.Item[String] IDataSource.GetStream(String, String, Boolean, Boolean) IDataSource.List IDataSource.Configuration IDataSource.LogId IDataSource.CacheRelevantConfigurations IDataSource.CacheKey IDataPartShared.Guid IDataPartShared.Name IZoneIdentity.ZoneId IAppIdentityLight.AppId ICacheKey.CachePartialKey ICacheKey.CacheFullKey ICacheExpiring.CacheChanged(Int64) ITimestamped.CacheTimestamp ICanPurgeListCache.PurgeList(Boolean) IHasLog.Log Namespace : ToSic.Eav.DataSources.Queries Assembly : ToSic.Eav.DataSources.dll Syntax [PublicApi_Stable_ForUseInYourCode] public interface IQuery : IDataSource, IDataPartShared, IAppIdentity, IZoneIdentity, IAppIdentityLight, ICacheInfo, ICacheKey, ICacheExpiring, ITimestamped, ICanPurgeListCache, IHasLog Properties | Improve this Doc View Source Definition The underlying definition for the current query so you can check what's inside. Declaration QueryDefinition Definition { get; } Property Value Type Description QueryDefinition Methods | Improve this Doc View Source Params() Get the current list of params. Declaration IDictionary<string, string> Params() Returns Type Description System.Collections.Generic.IDictionary < System.String , System.String > The list of params as they are configured in this moment. | Improve this Doc View Source Params(IDictionary<String, String>) Add/Set a parameter for the query, which will be used by the [Params:Xxx] tokens. Declaration void Params(IDictionary<string, string> values) Parameters Type Name Description System.Collections.Generic.IDictionary < System.String , System.String > values dictionary with values Remarks If you set a param after accessing the query, an exception will occur unless you call Reset() first. | Improve this Doc View Source Params(String) Add/Set a parameter for the query, which will be used by the [Params:Xxx] tokens. Declaration void Params(string list) Parameters Type Name Description System.String list list of key=value on many lines Remarks If you set a param after accessing the query, an exception will occur unless you call Reset() first. | Improve this Doc View Source Params(String, String) Add/Set a parameter for the query, which will be used by the [Params:Xxx] tokens. Declaration void Params(string key, string value) Parameters Type Name Description System.String key Key - the part used in [Params:key] System.String value The value it will resolve to. Can also be another token. Remarks If you set a param after accessing the query, an exception will occur unless you call Reset() first. | Improve this Doc View Source Reset() Reset the query, so it can be run again. Requires all params to be set again. Declaration void Reset()"
  },
  "api/dot-net/ToSic.Eav.Metadata.ITargetTypes.html": {
    "href": "api/dot-net/ToSic.Eav.Metadata.ITargetTypes.html",
    "title": "Interface ITargetTypes | 2sxc 13 / EAV 13",
    "keywords": "Interface ITargetTypes This interface allows objects to lookup metadata-target id / name of the system. It basically translates the ToSic.Eav.Metadata.ITargetTypes.TargetTypes to name and vica versa Namespace : ToSic.Eav.Metadata Assembly : ToSic.Eav.Core.dll Syntax [InternalApi_DoNotUse_MayChangeWithoutNotice] public interface ITargetTypes Methods | Improve this Doc View Source GetId(String) Look up the target Id of a metadata target. These are registered somewhere (DB, file-system, etc.) Use this if you know the type-name, but need the type ID Declaration int GetId(string targetTypeName) Parameters Type Name Description System.String targetTypeName Returns Type Description System.Int32 the id of the target type | Improve this Doc View Source GetName(Int32) Look up the target name of a metadata target. These are registered somewhere (Db, file-system, etc.) Use this if you know the type-ID, but need the type name Declaration string GetName(int typeId) Parameters Type Name Description System.Int32 typeId the type id Returns Type Description System.String the name of the target type"
  },
  "api/dot-net/ToSic.Eav.Metadata.ITarget.html": {
    "href": "api/dot-net/ToSic.Eav.Metadata.ITarget.html",
    "title": "Interface ITarget | 2sxc 13 / EAV 13",
    "keywords": "Interface ITarget Reference to target. Usually used on IEntity to define what thing it provides additional metadata for. Basically it contains all the references necessary to identify what it belongs to. Namespace : ToSic.Eav.Metadata Assembly : ToSic.Eav.Core.dll Syntax [PublicApi_Stable_ForUseInYourCode] public interface ITarget Properties | Improve this Doc View Source IsMetadata Determines if the current thing is used as Metadata. Declaration [JsonIgnore] bool IsMetadata { get; } Property Value Type Description System.Boolean True if it's a metadata item, false if not. | Improve this Doc View Source KeyGuid A GUID key identifying a target. Declaration [JsonProperty(\"Guid\", NullValueHandling = NullValueHandling.Ignore)] Guid? KeyGuid { get; } Property Value Type Description System.Nullable < System.Guid > The GUID key of the target. Null if the identifier is not a string. | Improve this Doc View Source KeyNumber A number (int) key identifying a target. Declaration [JsonProperty(\"Number\", NullValueHandling = NullValueHandling.Ignore)] int? KeyNumber { get; } Property Value Type Description System.Nullable < System.Int32 > The number key of the target. Null if the identifier is not a string. | Improve this Doc View Source KeyString A string key identifying a target. Declaration [JsonProperty(\"String\", NullValueHandling = NullValueHandling.Ignore)] string KeyString { get; } Property Value Type Description System.String The string key of the target. Null if the identifier is not a string. | Improve this Doc View Source TargetType If this is metadata, then the target could be anything. This is an ID telling what kind of thing we're enhancing. Declaration [JsonProperty(\"Target\", NullValueHandling = NullValueHandling.Ignore)] int TargetType { get; } Property Value Type Description System.Int32 An ID from the system which registers all the types of things that can be described. See also ITargetTypes . Remarks In 2sxc 8 - 12 this is called AssignmentObjectTypeId in the DB, but will change some day. It must be an int, not a TargetTypes enum, because the DB could hold values which are not in the enum"
  },
  "api/dot-net/ToSic.Eav.DataSources.IDataSource.html": {
    "href": "api/dot-net/ToSic.Eav.DataSources.IDataSource.html",
    "title": "Interface IDataSource | 2sxc 13 / EAV 13",
    "keywords": "Interface IDataSource Public interface for an Eav DataSource. All DataSource objects are based on this. Inherited Members IDataPartShared.Guid IDataPartShared.Name IZoneIdentity.ZoneId IAppIdentityLight.AppId ICacheKey.CachePartialKey ICacheKey.CacheFullKey ICacheExpiring.CacheChanged(Int64) ITimestamped.CacheTimestamp ICanPurgeListCache.PurgeList(Boolean) IHasLog.Log Namespace : ToSic.Eav.DataSources Assembly : ToSic.Eav.DataSources.dll Syntax [PublicApi_Stable_ForUseInYourCode] public interface IDataSource : IDataPartShared, IAppIdentity, IZoneIdentity, IAppIdentityLight, ICacheInfo, ICacheKey, ICacheExpiring, ITimestamped, ICanPurgeListCache, IHasLog Properties | Improve this Doc View Source CacheKey Declaration ICacheKeyManager CacheKey { get; } Property Value Type Description ICacheKeyManager | Improve this Doc View Source CacheRelevantConfigurations Some configuration of the data source is cache-relevant, others are not. This list contains the names of all configuration items which are cache relevant. It will be used when generating a unique ID for caching the data. Declaration List<string> CacheRelevantConfigurations { get; set; } Property Value Type Description System.Collections.Generic.List < System.String > | Improve this Doc View Source Configuration The configuration system of this data source. Keeps track of all values which the data source will need, and manages the LookUp engine which provides these values. Declaration IDataSourceConfiguration Configuration { get; } Property Value Type Description IDataSourceConfiguration | Improve this Doc View Source Item[String] Gets the Out-Stream with specified Name. Declaration IDataStream this[string outName] { get; } Parameters Type Name Description System.String outName Property Value Type Description IDataStream an IDataStream of the desired name Exceptions Type Condition System.NullReferenceException if the stream does not exist | Improve this Doc View Source List The items in the data-source - to be exact, the ones in the Default stream. Declaration IEnumerable<IEntity> List { get; } Property Value Type Description System.Collections.Generic.IEnumerable < IEntity > A list of IEntity items in the Default stream. | Improve this Doc View Source LogId The short name to be used in logging. It's set in the code, and then used to initialize the logger. Declaration string LogId { get; } Property Value Type Description System.String | Improve this Doc View Source Out Gets the Dictionary of Out-Streams. This is the internal accessor, as usually you'll use this[\"name\"] instead. In rare cases you need the Out, for example to list the stream names in the data source. Declaration IDictionary<string, IDataStream> Out { get; } Property Value Type Description System.Collections.Generic.IDictionary < System.String , IDataStream > A dictionary of named IDataStream objects Methods | Improve this Doc View Source GetStream(String, String, Boolean, Boolean) Gets the Out-Stream with specified Name and allowing some error handling if not found. Declaration IDataStream GetStream(string name = null, string noParamOrder = \"Rule: All params must be named (https://r.2sxc.org/named-params)\", bool nullIfNotFound = false, bool emptyIfNotFound = false) Parameters Type Name Description System.String name The desired stream name. If empty, will default to the default stream. System.String noParamOrder see Convention: Named Parameters System.Boolean nullIfNotFound In case the stream name isn't found, will return null. Ideal for chaining with ?? System.Boolean emptyIfNotFound In case the stream name isn't found, will return an empty stream. Ideal for using LINQ directly. Returns Type Description IDataStream an IDataStream of the desired name Remarks Added in 2sxc 12.05 for more in-depth checking if a stream exists, you can access the Out which is an IDictionary Exceptions Type Condition System.NullReferenceException if the stream does not exist and nullIfNotFound is false"
  },
  "api/dot-net/ToSic.Eav.DataSources.Caching.IListCache.html": {
    "href": "api/dot-net/ToSic.Eav.DataSources.Caching.IListCache.html",
    "title": "Interface IListCache | 2sxc 13 / EAV 13",
    "keywords": "Interface IListCache Marks objects that can cache lists based on certain rules - including retention time and if up-stream changes should refresh the cache. Namespace : ToSic.Eav.DataSources.Caching Assembly : ToSic.Eav.DataSources.dll Syntax [InternalApi_DoNotUse_MayChangeWithoutNotice(\"this is just fyi\")] public interface IListCache Properties | Improve this Doc View Source DefaultDuration The time a list stays in the cache by default - default is 3600 = 1 hour. Is used in all Set commands where the default duration is needed. Declaration int DefaultDuration { get; } Property Value Type Description System.Int32 Methods | Improve this Doc View Source Get(String) Get a list from the cache Declaration ListCacheItem Get(string key) Parameters Type Name Description System.String key the identifier in the cache Returns Type Description ListCacheItem the cached list | Improve this Doc View Source Get(IDataStream) Get a list from the cache using a configured dataStream. The stream won't be queried, it serves as an identifier for the cache item. Declaration ListCacheItem Get(IDataStream dataStream) Parameters Type Name Description IDataStream dataStream the data stream, which can provide it's cache-key Returns Type Description ListCacheItem the cached list | Improve this Doc View Source GetOrBuild(IDataStream, Func<IImmutableList<IEntity>>, Int32) Get cached item if available and valid, or rebuild cache using a mutual lock Declaration ListCacheItem GetOrBuild(IDataStream stream, Func<IImmutableList<IEntity>> builderFunc, int durationInSeconds = 0) Parameters Type Name Description IDataStream stream The data stream on a data-source object System.Func < System.Collections.Immutable.IImmutableList < IEntity >> builderFunc a function which is only called if building is required System.Int32 durationInSeconds The cache validity duration in seconds. If 0 or omitted, default value will be used. Returns Type Description ListCacheItem The ListCacheItem - either from cache, or just created | Improve this Doc View Source Has(String) Check if it has this in the cache Declaration bool Has(string key) Parameters Type Name Description System.String key the identifier in the cache Returns Type Description System.Boolean true if found | Improve this Doc View Source Has(IDataStream) Check if it has this in the cache Declaration bool Has(IDataStream dataStream) Parameters Type Name Description IDataStream dataStream the data stream, which can provide it's cache-key Returns Type Description System.Boolean true if found | Improve this Doc View Source Remove(String) Remove an item from the list-cache using the string-key Declaration void Remove(string key) Parameters Type Name Description System.String key the identifier in the cache | Improve this Doc View Source Remove(IDataStream) Remove an item from the list cache using a data-stream key Declaration void Remove(IDataStream dataStream) Parameters Type Name Description IDataStream dataStream the data stream, which can provide it's cache-key | Improve this Doc View Source Set(String, IImmutableList<IEntity>, Int64, Int32, Boolean) Add an item to the list-cache Declaration void Set(string key, IImmutableList<IEntity> list, long sourceTimestamp, int durationInSeconds = 0, bool slidingExpiration = true) Parameters Type Name Description System.String key cache key System.Collections.Immutable.IImmutableList < IEntity > list items to put into the cache for this cache key System.Int64 sourceTimestamp System.Int32 durationInSeconds The cache validity duration in seconds. If 0 or omitted, default value will be used. System.Boolean slidingExpiration | Improve this Doc View Source Set(IDataStream, Int32, Boolean) Add an item to the list-cache Declaration void Set(IDataStream dataStream, int durationInSeconds = 0, bool slidingExpiration = true) Parameters Type Name Description IDataStream dataStream the data stream, which can provide it's cache-key System.Int32 durationInSeconds The cache validity duration in seconds. If 0 or omitted, default value will be used. System.Boolean slidingExpiration"
  },
  "api/dot-net/ToSic.Eav.Data.IValueConverter.html": {
    "href": "api/dot-net/ToSic.Eav.Data.IValueConverter.html",
    "title": "Interface IValueConverter | 2sxc 13 / EAV 13",
    "keywords": "Interface IValueConverter Marks objects that can convert values - like \"file:22\" to \"/images/logo.jpg\" and back. Namespace : ToSic.Eav.Data Assembly : ToSic.Eav.Core.dll Syntax [InternalApi_DoNotUse_MayChangeWithoutNotice] public interface IValueConverter Methods | Improve this Doc View Source ToReference(String) Resolve a value to a reference which is managed by the environment Declaration string ToReference(string value) Parameters Type Name Description System.String value the full value, like \"image/logo.jpg\" Returns Type Description System.String The reference, like \"file:22\". | Improve this Doc View Source ToValue(String, Guid) Resolve a reference to a value using the environment resolver Declaration string ToValue(string reference, Guid itemGuid = default(Guid)) Parameters Type Name Description System.String reference Reference code (or something else) - if not a code, will not resolve System.Guid itemGuid Guid of the item/entity which was using the reference. The Guid is used when security setting only allow resolving within the own item. This ensures that external requests cannot just number through all possible IDs. If you use Guid.Empty or don't supply it, it will usually work, except on systems where the security has been extra-hardened. Returns Type Description System.String The value, like the url."
  },
  "api/dot-net/ToSic.Eav.Data.IConvert-2.html": {
    "href": "api/dot-net/ToSic.Eav.Data.IConvert-2.html",
    "title": "Interface IConvert<TFrom, TTo> | 2sxc 13 / EAV 13",
    "keywords": "Interface IConvert<TFrom, TTo> Interface which converts one type into another, or a list of that type into a list of the resulting type. Commonly used to convert entities to dictionaries etc. Namespace : ToSic.Eav.Data Assembly : ToSic.Eav.Core.dll Syntax [InternalApi_DoNotUse_MayChangeWithoutNotice(\"Just FYI to understand the internals. It will probably be moved elsewhere in the namespace some day. \")] public interface IConvert<in TFrom, out TTo> Type Parameters Name Description TFrom The source type of this conversion TTo The target type for this conversion Methods | Improve this Doc View Source Convert(TFrom) Convert a single item to the target type - usually prepared for serialization or similar Declaration TTo Convert(TFrom item) Parameters Type Name Description TFrom item Returns Type Description TTo | Improve this Doc View Source Convert(IEnumerable<TFrom>) Return a list of converted objects - usually prepared for serialization or similar Declaration IEnumerable<TTo> Convert(IEnumerable<TFrom> list) Parameters Type Name Description System.Collections.Generic.IEnumerable <TFrom> list Returns Type Description System.Collections.Generic.IEnumerable <TTo>"
  },
  "api/dot-net/ToSic.Sxc.Services.html": {
    "href": "api/dot-net/ToSic.Sxc.Services.html",
    "title": "Namespace ToSic.Sxc.Services | 2sxc 13 / EAV 13",
    "keywords": "Namespace ToSic.Sxc.Services Interfaces IConvertService Conversion helper for things which are very common in web-code like Razor and WebAPIs. It's mainly a safe conversion from anything to a target-type. Some special things it does: Strings like \"4.2\" reliably get converted to int 4 which would otherwise return 0 Numbers like 42 reliably converts to bool true which would otherwise return false Numbers like 42.5 reliably convert to strings \"42.5\" instead of \"42,5\" in certain cultures IDynamicCodeService This is a service to give you DynamicCode outside of 2sxc. Use this to access 2sxc data from a Theme, a .ascx WebControl or anywhere else. IEditService Contains status and commands to configure the in-page editing system. You will never create this yourself, as get this automatically in Razor or WebAPIs on an object called Edit . IFeaturesService Features lets your code find out what system features are currently enabled/disabled in the environment. It's important to detect if the admin must activate certain features to let your code do it's work. IImageService BETA Service to help create responsive img and picture tags the best possible way. IJsonService Service to serialize/restore JSON. Get it using GetService < T > It works for 2sxc/EAV data but can be used for any data which can be serialized/deserialized. Since it's a data-operation, we keep it in this namespace, even if most other things in this namespace are 2sxc-data objects. Important This is simple object-string conversion. It doesn't change entity objects to be serializable. For that you should use the IConvertToEavLight which returns an object that can then be serialized. ILinkService Helpers to create links to Pages APIs Images As well as create base-tag links (important for SPAs) You will never create this yourself, as get this automatically in Razor or WebAPIs on an object called Link . ILogService Service to add messages to the global log in any platform Dnn/Oqtane IMailService Service to send mail messages cross-platform. Get this service in Razor or WebApi using GetService IPageService Make changes to the page - usually from Razor. IRenderService Block-Rendering system. It's responsible for taking a Block and delivering HTML for the output. It's used for InnerContent, so that Razor-Code can easily render additional content blocks. See also Inner Content (Content Within Other Content) ISecureDataService Helper to work with secure / encrypted data. IToolbarService Special helper to generate edit toolbars in the front-end. It is used in combination with @Edit.Toolbar(...) . It's especially useful for complex rules like Metadata-buttons which are more complex to create."
  },
  "api/dot-net/ToSic.Sxc.Edit.IToolbarBuilder.html": {
    "href": "api/dot-net/ToSic.Sxc.Edit.IToolbarBuilder.html",
    "title": "Interface IToolbarBuilder | 2sxc 13 / EAV 13",
    "keywords": "Interface IToolbarBuilder The toolbar builder helps you create Toolbar configurations for the UI. Note that it has a fluid API, and each method/use returns a fresh object with the updated configuration. Namespace : ToSic.Sxc.Edit Assembly : ToSic.Sxc.dll Syntax [PublicApi] public interface IToolbarBuilder : IHybridHtmlString, IHtmlString Remarks Your code cannot construct this object by itself, as it usually needs additional information. To get a ToolbarBuilder , use the IToolbarService . History Added in 2sxc 13 Methods | Improve this Doc View Source Add(String[]) Add one or more rules according to the conventions of the js toolbar Declaration IToolbarBuilder Add(params string[] rules) Parameters Type Name Description System.String [] rules Returns Type Description IToolbarBuilder Remarks History Added in 2sxc 13 | Improve this Doc View Source Metadata(Object, String, String, String, String) Create an add metadata rule to add or edit metadata to the specified object and using the content-type specified here. Declaration IToolbarBuilder Metadata(object target, string contentTypes, string noParamOrder = \"Rule: All params must be named (https://r.2sxc.org/named-params)\", string ui = null, string parameters = null) Parameters Type Name Description System.Object target The target object which should receive metadata. Must support IHasMetadata System.String contentTypes Name of one content-type for which to generate the button. In future may also allow more content-types System.String noParamOrder see Convention: Named Parameters System.String ui Parameters for the UI, like color=red - see toolbar docs for all possible options System.String parameters Parameters for the metadata-command Returns Type Description IToolbarBuilder Remarks History Added in 2sxc 13 | Improve this Doc View Source Settings(String, String, String, String, String, String, String, String) Add a settings rule to configure what the toolbar should look like. See Toolbar Settings Declaration IToolbarBuilder Settings(string noParamOrder = \"Rule: All params must be named (https://r.2sxc.org/named-params)\", string show = null, string hover = null, string follow = null, string classes = null, string autoAddMore = null, string ui = null, string parameters = null) Parameters Type Name Description System.String noParamOrder see Convention: Named Parameters System.String show System.String hover System.String follow System.String classes System.String autoAddMore System.String ui Parameters for the UI, like color=red - see toolbar docs for all possible options System.String parameters Parameters for the command - doesn't really have an effect on Settings, but included for consistency Returns Type Description IToolbarBuilder Remarks History Added in 2sxc 13 | Improve this Doc View Source ToString() Converts the configuration to a json-string according to the JS-Toolbar specs. Declaration string ToString() Returns Type Description System.String"
  },
  "basics/content/lists.html": {
    "href": "basics/content/lists.html",
    "title": "Content Lists | 2sxc 13 / EAV 13",
    "keywords": "Content Lists <!-- Data Highlights --> <!-- ADAM --> <!-- Server --> <!-- Prepare --> <!-- Data Source --> <!-- Optimzers --> <!-- Process / Awesomize --> <!-- Libraries --> <!-- data formats --> <!-- Browser --> <!-- Frameworks --> <!-- App show parts --> <!-- Interact parts --> <!-- Edit parts --> <!-- Edit UI parts --> <!-- SPA parts --> <!-- Custom highlight boxes - can be controlled by in-page CSS --> you are here (click to zoom) - discover the stack .context-box-summary .data-entities, .context-box-summary .process-razor-app { visibility: visible; } Any View can be configured to be a List of Content Items , and if it is a list, it can also have a Header Item. When a View is a List... All Content Items in the List share the same Content-Type - like BlogPost Each item in the list can have it's own Presentation Settings but these settings all share the same Content-Type - like BlogPresentation Lists can have a single Header item of another Content-Type - like BlogIntro If the list has a Header it can also have a Header Presentation of a type like BlogIntroPresentation the first item in the List is still given to the Template as the Content variable Lists preserve the order of the items added to it The automatic toolbars change a bit when a list is being used Use in Code In C# you will usually do things like @foreach(var item in AsDynamic(Data)) { ... } or similar. Check the C# API Docs for this . In Tokens you there is a special <repeat> tag. Check the Tokens docs . History Introduced in 2sxc v2.0 API was improved in 2sxc 8 The Header name was introduced to replace the confusing ListContent name in v10"
  },
  "basics/content/index.html": {
    "href": "basics/content/index.html",
    "title": "Content - Data made Useful | 2sxc 13 / EAV 13",
    "keywords": "Content - Data made Useful <!-- Data Highlights --> <!-- ADAM --> <!-- Server --> <!-- Prepare --> <!-- Data Source --> <!-- Optimzers --> <!-- Process / Awesomize --> <!-- Libraries --> <!-- data formats --> <!-- Browser --> <!-- Frameworks --> <!-- App show parts --> <!-- Interact parts --> <!-- Edit parts --> <!-- Edit UI parts --> <!-- SPA parts --> <!-- Custom highlight boxes - can be controlled by in-page CSS --> you are here (click to zoom) - discover the stack .context-box-summary .data-all { visibility: visible; } Data is just numbers and texts. Content extends Data to become information. Since this confuses many people, we must explain it in more depth. Important: This document is about the Concept of Content vs. Data . If you're looking for information about the Content-App go here . Content vs. Data Data in itself is just sets of values without context and meaning. An Entity containing a Title , Body and Image is Data. If you would find this in a database, and the title read Read more about this it would be fairly meaningless in itself. Tip A lot of data is managed in terms of lists and details which makes it useful that way. A Catalog is usually Data-Driven and this makes sense - the list/details templates will then make it useful. On the other hand we have Content placed on a specific page in a specific position, where the reader experiences it in the context and meaning of other stuff on the same page. Tip Content is created by editors on the page and the editor ensures that it makes sense together with other content on the same page. Content is Information The editor gives the Data context and meaning, and as such it becomes more useful. It becomes Information . So in summary: Data + Context = Meaning = Information The 2sxc/EAV CMS ensures that the editor experiences this as such, and doesn't feel like she's editing Data when adding Content . Content Blocks 2sxc keeps track of the pieces that belong together as Content Blocks . When Inner-Content is needed (placing content inside content) it uses Inner Content to keep track of that information. You may also want to know how Content Blocks fit into Dnn Modules . You may want to learn more about: Assets ADAM - Automatic Digital Asset Management"
  },
  "web-api/specs/webapi-security.html": {
    "href": "web-api/specs/webapi-security.html",
    "title": "Security for 2sxc WebAPI and REST APIs | 2sxc 13 / EAV 13",
    "keywords": "Security for 2sxc WebAPI and REST APIs <!-- Data Highlights --> <!-- ADAM --> <!-- Server --> <!-- Prepare --> <!-- Data Source --> <!-- Optimzers --> <!-- Process / Awesomize --> <!-- Libraries --> <!-- data formats --> <!-- Browser --> <!-- Frameworks --> <!-- App show parts --> <!-- Interact parts --> <!-- Edit parts --> <!-- Edit UI parts --> <!-- SPA parts --> <!-- Custom highlight boxes - can be controlled by in-page CSS --> you are here (click to zoom) - discover the stack .context-box-summary .browser-interact, .context-box-summary .process-apis { visibility: visible; } All WebAPI calls in Dnn, Oqtane and 2sxc have some security features. In the basic use cases it's straightforward: the current user may do some things, and that should be allowed. These docs should help you understand where these things are configured and what to change if you need adjustments. Request Security Each request contains information needed for the backend to determine if this request should be answered or not. In Dnn and Oqtane this is the User Identity and the RequestVerificationToken . User Identity By default, the user is logged in using normal web conventions and from then on the user will have an encrypted cookie identifying this person. In advanced scenarios you may also use JWT aka Json Web Tokens . This is useful in mobile app scenarios and scenarios where the client application is remote (like a web-server or a SPA). Consult the docs of Dnn or Oqtane to find out how to use this. You could also use custom login systems like OAuth, but in these cases you will really need to figure out how to implement it in Dnn or Oqtane. Anti Forgery Token: RequestVerificationToken ASP.net has a feature to prevent XSS (Cross Site Scripting / Cross-Site Request Forgery). To make this possible, pages viewed by a user have some hidden key included which is encrypted to include identity-information for this user. It is included in all HTTP requests except for GET requests. If an endpoint is secured to check for this using [ValidateAntiForgeryToken] , then only requests containing this header will be processed. Tip Not all endpoints require this, but many do. It's commonly enforced on admin-endpoints and on any endpoint which are not expected to be used from outside of the site. It's best practice to require this where possible. Warning GET requests don't include this header, so don't enforce checking this in the backend for GET endpoints. When you use standard 2sxc JS WebAPI calls, the RequestVerificationToken is automatically included in the request. If you use your own JS API stack or plain vanilla browser implementations, make sure you add it. REST Content and Query Endpoint Security The built-in Content and Query endpoints use configuration based security. Prerequisites: Platform Permissions are OK Just to be aware of the obvious: if the platform (Dnn/Oqtane) don't allow access to the endpoints for whatever reason, then even the built-in endpoints won't do anything. Default Security Configuration: Nothing is allowed Both Content and Query are by default only available to admins and super-users. To make these available to other users (incl. Anonymous) this must be configured. Opening Security Configuration These are the places you can configure to open security: On an App you can give general permissions that apply to all content types. This is usually not recommended. On a Query you can configure read permissions for specific users or user groups. On a Content-Type (the schema that says what fields exist) you can configure many permissions incl. read and write. You can even configure more exotic permissions like: Anonymous users can create data, but they are set to draft and not visible Registered users can create data and only edit data which they created Note Permissions are all locked by default, and adding permissions will only open up permissions. There are no deny-permissions. Warning Some permissions like If the user has View permissions, allow Read require a Module Context since that's required to detect if the condition View Permissions is met. Custom WebAPI Permissions This is documented separately in Security & Permissions in Custom WebAPIs Read also DotNet WebApi Context for 2sxc WebAPI and REST APIs - every request has a context, it's best you read up on that Concepts: Polymorphisms Demo App and further links You should find some code examples in this demo App Razor Web API tutorials REST and WebApi Tutorial Mobius Forms App History Introduced in 2sxc 5.x Query added in 2sxc 8.10 Enhanced with Polymorph Editions in 2sxc 9.35 (allowing edition-folder/api)"
  },
  "web-api/custom/custom-web-api-base-class.html": {
    "href": "web-api/custom/custom-web-api-base-class.html",
    "title": "Custom C# Web API Base Classes | 2sxc 13 / EAV 13",
    "keywords": "Custom C# Web API Base Classes Moved to Custom C# Web API Base Classes"
  },
  "api/dot-net/ToSic.Sxc.Dnn.RazorComponent.html": {
    "href": "api/dot-net/ToSic.Sxc.Dnn.RazorComponent.html",
    "title": "Class RazorComponent | 2sxc 13 / EAV 13",
    "keywords": "Class RazorComponent The base class for Razor-Components in 2sxc 10+ Provides context infos like the Dnn object, helpers like Edit and much more. To use this, create cshtml files like _person-list.cshtml in your app-folder. By default, they will be typed the old way - which continues to work for compatibility. We recommend to use this from now on. To do it, your code file must begin with an @inherits statement, like this: Tip We highly recommend you use @inherits Custom.Dnn.Razor12 instead @inherits ToSic.Sxc.Dnn.RazorComponent <h1>hello from RazorComponent</h1> Inheritance System.Object System.Web.WebPages.WebPageExecutingBase System.Web.WebPages.WebPageRenderingBase System.Web.WebPages.WebPageBase ToSic.Sxc.Web.RazorComponentBase RazorComponent RazorComponentCode Implements IDnnRazorCustomize IDnnDynamicCode IDynamicCode ICreateInstance ICompatibilityLevel IHasLog IDnnDynamicCodeAdditions Namespace : ToSic.Sxc.Dnn Assembly : ToSic.Sxc.Dnn.Razor.dll Syntax [PublicApi_Stable_ForUseInYourCode] public abstract class RazorComponent : RazorComponentBase, ITemplateFile, IRazor, IHasDynamicCodeRoot, INeedsDynamicCodeRoot, IDnnRazorCustomize, IDnnDynamicCode, IDynamicCode, ICreateInstance, ICompatibilityLevel, IHasLog, IDnnDynamicCodeAdditions, IDnnRazor, IDnnRazor11 Fields | Improve this Doc View Source NotImplementedUseCustomBase Declaration public const string NotImplementedUseCustomBase = \"Use a newer base class like Custom.Hybrid.Razor12 or Custom.Dnn.Razor12 to leverage this.\" Field Value Type Description System.String Properties | Improve this Doc View Source App A fully prepared IApp object letting you access all the data and queries in the current app. You'll usually want to access the data, like App.Data[\"Categories\"] or the queries App.Query[\"AllPosts\"] . foreach(var cat in AsDynamic(App.Data[\"Categories\"])) { @cat.Name } Declaration public IApp App { get; } Property Value Type Description IApp The current app | Improve this Doc View Source CmsContext The CmsContext tells you about the environment, like what page and module we're running in. It's supposed to replace the Dnn object in Razor and WebAPI code. Declaration public ICmsContext CmsContext { get; } Property Value Type Description ICmsContext Remarks New in v11.11 | Improve this Doc View Source Code Declaration public dynamic Code { get; } Property Value Type Description System.Object | Improve this Doc View Source Content The content object of the current razor view - IF the current view has content. If the view is a list, it will return the first item. Will be null otherwise. To tell if it's the demo/default item, use IsDemoItem . Declaration public dynamic Content { get; } Property Value Type Description System.Object A IDynamicEntity object with the current content - or null. | Improve this Doc View Source Data The data prepared for the current Code. Usually user data which was manually added to the instance, but can also be a query. You'll usually want to access the \"Default\" stream like Data[\"Default\"] . foreach(var person in AsDynamic(Data[\"Default\"])) { @person.Name } Declaration public IBlockDataSource Data { get; } Property Value Type Description IBlockDataSource An IBlockDataSource which is as IDataSource . | Improve this Doc View Source Dnn The DNN context. Declaration public IDnnContext Dnn { get; } Property Value Type Description IDnnContext The DNN context. | Improve this Doc View Source Edit Helper commands to enable in-page editing functionality Use it to check if edit is enabled, generate context-json infos and provide toolbar buttons Declaration public IEditService Edit { get; } Property Value Type Description IEditService An IEditService object. | Improve this Doc View Source Header The header object of the current razor view, if it's a list and has a header object. If it's a list and doesn't have a header (and no default), it will return null. To tell if it's the demo/default item, use IsDemoItem . Declaration public dynamic Header { get; } Property Value Type Description System.Object A IDynamicEntity object with the current content. Remarks Introduced in 2sxc 10.10 - previously it was called ListContent, now deprecated. | Improve this Doc View Source Link Link helper object to create the correct links Declaration public ILinkService Link { get; } Property Value Type Description ILinkService A ILinkService object. | Improve this Doc View Source Purpose The purpose of the current execution. The code might be called for showing to a user, or search-indexing. Declaration [Obsolete(\"Shouldn't be used any more, but will continue to work for indefinitely for old base classes, not in v12. There are now better ways of doing this\")] public Purpose Purpose { get; } Property Value Type Description Purpose The value of the current purpose. Methods | Improve this Doc View Source AsAdam(IEntity, String) Provides an Adam instance for this item and field Declaration public IFolder AsAdam(IEntity entity, string fieldName) Parameters Type Name Description IEntity entity The entity, often Content or similar System.String fieldName The field name, like \"Gallery\" or \"Pics\" Returns Type Description IFolder An Adam object for navigating the assets | Improve this Doc View Source AsAdam(IDynamicEntity, String) Provides an Adam instance for this item and field Declaration public IFolder AsAdam(IDynamicEntity entity, string fieldName) Parameters Type Name Description IDynamicEntity entity The entity, often Content or similar System.String fieldName The field name, like \"Gallery\" or \"Pics\" Returns Type Description IFolder An Adam object for navigating the assets | Improve this Doc View Source AsDynamic(Object) Convert a dynamic entity and return itself again. This is so coders don't have to worry if the original object was an IEntity or a IDynamicEntity in the first place. Declaration public dynamic AsDynamic(object dynamicEntity) Parameters Type Name Description System.Object dynamicEntity the original object Returns Type Description System.Object a dynamic object for easier coding | Improve this Doc View Source AsDynamic(String, String) Take a json and provide it as a dynamic object to the code Declaration public dynamic AsDynamic(string json, string fallback = \"{}\") Parameters Type Name Description System.String json the original json string System.String fallback Alternate string to use, if the original json can't parse. Can also be null or the word \"error\" if you would prefer an error to be thrown. Returns Type Description System.Object A dynamic object representing the original json. If it can't be parsed, it will parse the fallback, which by default is an empty empty dynamic object. If you provide null for the fallback, then you will get null back. Remarks Added in 2sxc 10.22.00 | Improve this Doc View Source AsDynamic(IEntity) Wraps an entity into a IDynamicEntity Declaration public dynamic AsDynamic(IEntity entity) Parameters Type Name Description IEntity entity the original object Returns Type Description System.Object a dynamic object for easier coding | Improve this Doc View Source AsEntity(Object) Unwraps a dynamic entity back into the underlying IEntity Declaration public IEntity AsEntity(object dynamicEntity) Parameters Type Name Description System.Object dynamicEntity the wrapped IEntity Returns Type Description IEntity A normal IEntity | Improve this Doc View Source AsList(Object) Converts a list of IEntity objects into a list of IDynamicEntity objects. Declaration public IEnumerable<dynamic> AsList(object list) Parameters Type Name Description System.Object list typically a List/IEnumerable of Entities or DynamicEntities. Can also be a IDataSource in which case it uses the default stream. Returns Type Description System.Collections.Generic.IEnumerable < System.Object > a list of IDynamicEntity objects Remarks Added in 2sxc 10.21.00 | Improve this Doc View Source CreateSource<T>(IDataSource, ILookUpEngine) Create a IDataSource which will process data from the given stream. Declaration public T CreateSource<T>(IDataSource inSource = null, ILookUpEngine configurationProvider = null) where T : IDataSource Parameters Type Name Description IDataSource inSource The data source which will be the default In of the new data-source. ILookUpEngine configurationProvider An alternate configuration provider for the DataSource Returns Type Description T A typed DataSource object Type Parameters Name Description T A data-source type - must be inherited from IDataSource | Improve this Doc View Source CreateSource<T>(IDataStream) Create a IDataSource which will process data from the given stream. Declaration public T CreateSource<T>(IDataStream inStream) where T : IDataSource Parameters Type Name Description IDataStream inStream The stream which will be the default In of the new data-source. Returns Type Description T A typed DataSource object Type Parameters Name Description T A data-source type - must be inherited from IDataSource | Improve this Doc View Source CustomizeData() Declaration [Obsolete(\"Shouldn't be used any more, but will continue to work for indefinitely for old base classes, not in v12. There are now better ways of doing this\")] public virtual void CustomizeData() | Improve this Doc View Source CustomizeSearch(Dictionary<String, List<ISearchItem>>, IModule, DateTime) Customize how the search will process data on this page. Declaration [Obsolete(\"Shouldn't be used any more, but will continue to work for indefinitely for old base classes, not in v12. There are now better ways of doing this\")] public virtual void CustomizeSearch(Dictionary<string, List<ISearchItem>> searchInfos, IModule moduleInfo, DateTime beginDate) Parameters Type Name Description System.Collections.Generic.Dictionary < System.String , System.Collections.Generic.List < ISearchItem >> searchInfos ToSic.Sxc.Context.IModule moduleInfo System.DateTime beginDate | Improve this Doc View Source GetService<TService>() Get a service from the EAV / 2sxc Dependency Injection. Declaration public TService GetService<TService>() Returns Type Description TService An object of the type or interface requested Type Parameters Name Description TService Interface (preferred) or Class which is needed Remarks Added in 2sxc 11.11 Implements IDnnRazorCustomize IDnnDynamicCode IDynamicCode ICreateInstance ICompatibilityLevel IHasLog IDnnDynamicCodeAdditions"
  },
  "api/dot-net/ToSic.Sxc.Context.ICmsUser.html": {
    "href": "api/dot-net/ToSic.Sxc.Context.ICmsUser.html",
    "title": "Interface ICmsUser | 2sxc 13 / EAV 13",
    "keywords": "Interface ICmsUser The user context of your code - so it's information about the user your code is using. Inherited Members IHasMetadata.Metadata Namespace : ToSic.Sxc.Context Assembly : ToSic.Sxc.dll Syntax [PublicApi] public interface ICmsUser : IHasMetadata Properties | Improve this Doc View Source Id User Id as int. Works in DNN and Oqtane. Use in Razor: CmsContext.User.Id Declaration int Id { get; } Property Value Type Description System.Int32 | Improve this Doc View Source IsSiteAdmin Information if the current user is Site Administrator. Basically this means a user has very high permissions - incl. the ability to create users in a site etc. ü™í Use in Razor: CmsContext.User.IsSiteAdmin Declaration bool IsSiteAdmin { get; } Property Value Type Description System.Boolean Remarks These are not the highest possible privileges For the site it would be IsSiteDeveloper For the entire system that would be IsSystemAdmin. New in 2sxc 12 | Improve this Doc View Source IsSiteDeveloper Information if the current user is Developer on the current site. Basically this means a user has maximum site permissions - incl. the ability to install additional components or do dangerous things like edit razor. ü™í Use in Razor: CmsContext.User.IsSiteDeveloper Declaration bool IsSiteDeveloper { get; } Property Value Type Description System.Boolean Remarks These are not the highest possible privileges For the entire system that would be IsSystemAdmin. New in 2sxc 12 | Improve this Doc View Source IsSystemAdmin Information if the current user is System Administrator. Basically this means a user has maximum permissions - incl. the ability to install additional components or do dangerous things like edit razor. ü™í Use in Razor: CmsContext.User.isSystemAdmin Declaration bool IsSystemAdmin { get; } Property Value Type Description System.Boolean Remarks New in 2sxc 12"
  },
  "api/dot-net/ToSic.Sxc.Context.ICmsSite.html": {
    "href": "api/dot-net/ToSic.Sxc.Context.ICmsSite.html",
    "title": "Interface ICmsSite | 2sxc 13 / EAV 13",
    "keywords": "Interface ICmsSite The site context of the code - so basically which website / portal it's running on. Inherited Members IHasMetadata.Metadata Namespace : ToSic.Sxc.Context Assembly : ToSic.Sxc.dll Syntax [PublicApi] public interface ICmsSite : IHasMetadata Properties | Improve this Doc View Source Id The Id of the site in systems like DNN and Oqtane. ü™í Use in Razor: CmsContext.Site.Id Declaration int Id { get; } Property Value Type Description System.Int32 Remarks In DNN this is the same as the PortalId | Improve this Doc View Source Url The site url with protocol. Can be variation of any such examples: https://website.org https://www.website.org https://website.org/products https://website.org/en-us https://website.org/products/en-us ü™í Use in Razor: CmsContext.Site.Url Declaration string Url { get; } Property Value Type Description System.String | Improve this Doc View Source UrlRoot The url root which identifies the current site / portal as is. It does not contain a protocol, but can contain subfolders. This is mainly used to clearly identify a site in a multi-site system or a language-variation in a multi-language setup. Declaration string UrlRoot { get; } Property Value Type Description System.String Remarks introduced in 2sxc 13"
  },
  "api/dot-net/ToSic.Eav.Security.IHasPermissions.html": {
    "href": "api/dot-net/ToSic.Eav.Security.IHasPermissions.html",
    "title": "Interface IHasPermissions | 2sxc 13 / EAV 13",
    "keywords": "Interface IHasPermissions Anything that uses IHasPermissions can have custom permissions. This interface provides access to the information stored in the custom permissions. Namespace : ToSic.Eav.Security Assembly : ToSic.Eav.Core.dll Syntax [InternalApi_DoNotUse_MayChangeWithoutNotice(\"this is just fyi\")] public interface IHasPermissions Properties | Improve this Doc View Source Permissions Permissions are also stored as entity items. Declaration IEnumerable<Permission> Permissions { get; } Property Value Type Description System.Collections.Generic.IEnumerable < Permission > List of permission entities for an item Remarks Currently still a private API, because the type could change to be a typed permission object"
  },
  "api/dot-net/ToSic.Eav.Run.html": {
    "href": "api/dot-net/ToSic.Eav.Run.html",
    "title": "Namespace ToSic.Eav.Run | 2sxc 13 / EAV 13",
    "keywords": "Namespace ToSic.Eav.Run Run is all about Runtime / Execution of the EAV. It contains things that describe the environment it's running in and has base material for specific implementations. For example, the ITenant and ITenant<T> are inherited by the DnnTenant . Interfaces ICompatibilityLevel Carries information about what compatibility level to use. Important for components that have an older and newer API."
  },
  "api/dot-net/ToSic.Sxc.Services.ILinkService.html": {
    "href": "api/dot-net/ToSic.Sxc.Services.ILinkService.html",
    "title": "Interface ILinkService | 2sxc 13 / EAV 13",
    "keywords": "Interface ILinkService Helpers to create links to Pages APIs Images As well as create base-tag links (important for SPAs) You will never create this yourself, as get this automatically in Razor or WebAPIs on an object called Link . Namespace : ToSic.Sxc.Services Assembly : ToSic.Sxc.dll Syntax [PublicApi_Stable_ForUseInYourCode] public interface ILinkService : ICanDebug, ILinkHelper, INeedsDynamicCodeRoot Remarks History Created ca. v2 as ToSic.Sxc.Web.ILinkHelper Moved to this new Services.ILinkService in v13.05. The previous name will continue to work, but newer features will be missing on that interface. Methods | Improve this Doc View Source Base() A base url for the current page, for use in html-base tags Declaration string Base() Returns Type Description System.String | Improve this Doc View Source Image(String, Object, Object, String, IDynamicField, Object, Object, Object, String, String, String, Object, String, Object) Generate an Image-Resizing link base on presets or custom parameters. It will also ensure that the final url is safe, so it will encode umlauts, spaces etc. Note that you can basically just use presets, or set every parameter manually. All params are optional. Some combinations are not valid - like setting a factor and a width doesn't make sense and will throw an error Most parameters if set to 0 will cause a reset so that this aspect is not in the URL Declaration string Image(string url = null, object settings = null, object factor = null, string noParamOrder = \"Rule: All params must be named (https://r.2sxc.org/named-params)\", IDynamicField field = null, object width = null, object height = null, object quality = null, string resizeMode = null, string scaleMode = null, string format = null, object aspectRatio = null, string type = null, object parameters = null) Parameters Type Name Description System.String url The image url. Use an empty string if you want to just get the params for re-use. System.Object settings A standardized Image-Settings object like Settings.Images.Content - see http://r.2sxc.org/settings Or a dynamic object containing settings properties (this can also be a merged custom + standard settings) Or a specially prepared IResizeSettings object containing all settings. If this is provided, only factor will still be respected, all other settings like width on this command will be ignored. System.Object factor A multiplier, usually used to create urls which resize to a part of the default content-size. Eg. 0.5. System.String noParamOrder see Convention: Named Parameters IDynamicField field WIP v13.04 - not final yet System.Object width Optional width parameter. Usually takes the default from the settings . System.Object height Optional height parameter. Usually takes the default from the settings . System.Object quality Optional quality parameter. Usually takes the default from the settings . System.String resizeMode Optional resize-mode, like crop or max . Usually takes the default from the settings . System.String scaleMode Optional scale-mode to allow up-scaling images like up or both . Usually takes the default from the settings . System.String format Optional file format like jpg or png System.Object aspectRatio Aspect Ratio width/height, only relevant if a width is supplied. Can't be used together with height. Usually takes default from the settings or is ignored. System.String type Optional type changes how the link is generated. Possible values are: null / not specified / empty = return link as is generated &quot;full&quot; return link with protocol and domain. If that was missing before, it will add current protocol/domain if possible, but not on relative ./ or ../ links &quot;//&quot; return link with //domain . If that was missing before, will add current domain if possible, but not on relative ./ or ../ links System.Object parameters the parameters either as id=47&amp;name=daniel (Dnn also supports /id/47/name/daniel ) in 2sxc 12.05+ it can also be an IParameters Returns Type Description System.String Remarks Usually a factor is applied to create a link which is possibly 50% of the content-width or similar. In these cases the height is not applied but the aspectRatio is used, which usually comes from settings if any were provided. History New in 2sxc 12.03 type added ca. v12.08 Option to use IResizeSettings added in v13.03 factor originally didn't influence width/height if provided here, updated it v13.03 to influence that as well field being added in 13.04, not ready yet | Improve this Doc View Source To(String, Nullable<Int32>, String, Object, String, String) returns a link to the current page with parameters resolved in a way that DNN wants it Declaration string To(string noParamOrder = \"Rule: All params must be named (https://r.2sxc.org/named-params)\", int? pageId = default(int? ), string api = null, object parameters = null, string type = null, string language = null) Parameters Type Name Description System.String noParamOrder see Convention: Named Parameters System.Nullable < System.Int32 > pageId optional page ID (TabId) - if not supplied, will use current page System.String api optional api url \"api/name/method?id=something\" System.Object parameters the parameters either as id=47&amp;name=daniel (Dnn also supports /id/47/name/daniel ) in 2sxc 12.05+ it can also be an IParameters System.String type Optional type changes how the link is generated. Possible values are: null / not specified / empty = return link as is generated &quot;full&quot; return link with protocol and domain. If that was missing before, it will add current protocol/domain if possible, but not on relative ./ or ../ links &quot;//&quot; return link with //domain . If that was missing before, will add current domain if possible, but not on relative ./ or ../ links System.String language If not set, null or empty &quot;&quot; will use the specified pageId (pageIds can be language specific); api would always be the current language If set to &quot;current&quot; will adjust pageId to use the language of the current language. API will be as before, as it was already current future (not implemented yet) &quot;primary&quot; would link to primary language future (not implemented yet) &quot;en&quot; or &quot;en-us&quot; would link to that specific language (page and API) Returns Type Description System.String Remarks History v12 added the api parameter for liking APIs of the current app In v12.05 the type of parameters was changed from string to object, to allow IParameters as well In v13.02 introduced language with \"current\""
  },
  "api/dot-net/ToSic.Sxc.Services.IJsonService.html": {
    "href": "api/dot-net/ToSic.Sxc.Services.IJsonService.html",
    "title": "Interface IJsonService | 2sxc 13 / EAV 13",
    "keywords": "Interface IJsonService Service to serialize/restore JSON. Get it using GetService < T > It works for 2sxc/EAV data but can be used for any data which can be serialized/deserialized. Since it's a data-operation, we keep it in this namespace, even if most other things in this namespace are 2sxc-data objects. Important This is simple object-string conversion. It doesn't change entity objects to be serializable. For that you should use the IConvertToEavLight which returns an object that can then be serialized. Namespace : ToSic.Sxc.Services Assembly : ToSic.Sxc.dll Syntax [PublicApi] public interface IJsonService Remarks Introduced in 2sxc 12.05. For previous versions of 2sxc, you can just write code to access Newtonsoft directly. For more control regarding serialization, also just work with Newtonsoft directly. Internally it uses Newtonsoft and preserves the case of keys. In future the internal engine may change (like for .net core), but we'll ensure that the result remains consistent. Methods | Improve this Doc View Source To<T>(String) Convert a JSON to a typed object. Declaration T To<T>(string json) Parameters Type Name Description System.String json Returns Type Description T Type Parameters Name Description T | Improve this Doc View Source ToJson(Object) Convert an object to JSON. If you need to add the JSON to HTML of a page, make sure you also use Html.Raw(...) , otherwise it will be encoded and not usable in JavaScript. Declaration string ToJson(object item) Parameters Type Name Description System.Object item The object to serialize Returns Type Description System.String | Improve this Doc View Source ToJson(Object, Int32) Convert an object to JSON - using nicer output / indentation. If you need to add the JSON to HTML of a page, make sure you also use Html.Raw(...) , otherwise it will be encoded and not usable in JavaScript. Declaration string ToJson(object item, int indentation) Parameters Type Name Description System.Object item The object to serialize System.Int32 indentation How much to indent the json - we recommend 4. As of now, it will always use 4, no matter what you set (see remarks) Returns Type Description System.String Remarks Added in 2sxc 12.11 But as of 2sxc 12.11 we're still using an old Newtonsoft, so we cannot really control the indentation depth. If you call this, it will always indent using 4 spaces. In a future release we'll probably use a newer Newtonsoft with which we can then use the indentation as needed. | Improve this Doc View Source ToObject(String) Convert a json to an anonymous object. This is a very technical thing to do, so only use it if you know why you're doing this. It's usually better to use AsDynamic(String, String) or To<T>(String) Declaration object ToObject(string json) Parameters Type Name Description System.String json Returns Type Description System.Object"
  },
  "api/dot-net/ToSic.Sxc.Dnn.Run.IDnnContext.html": {
    "href": "api/dot-net/ToSic.Sxc.Dnn.Run.IDnnContext.html",
    "title": "Interface IDnnContext | 2sxc 13 / EAV 13",
    "keywords": "Interface IDnnContext Provides information about the current context within DNN. This only applies to 2sxc running inside DNN, not inside another platform. This object is the root Dnn object, used mainly in older Razor. If possible, try to use CmsContext instead. Namespace : ToSic.Sxc.Dnn.Run Assembly : ToSic.Sxc.Dnn.Core.dll Syntax [PublicApi(\"This is DNN only, if possibly, try to use the hybrid CmsContext instead.\")] public interface IDnnContext Remarks It is currently on ToSic.Sxc.Run.IDnnContext but we plan to move it elsewhere Properties | Improve this Doc View Source Module The current DNN ModuleInfo - Dnn specific and with all the specials of the Dnn APIs. If possible, try to use CmsContext.Module instead. Declaration ModuleInfo Module { get; } Property Value Type Description DotNetNuke.Entities.Modules.ModuleInfo | Improve this Doc View Source Portal The current DNN Portal Settings. If possible, try to use CmsContext.Site instead. Declaration PortalSettings Portal { get; } Property Value Type Description DotNetNuke.Entities.Portals.PortalSettings | Improve this Doc View Source Tab The current DNN TabInfo (page). We also don't like the name Tab, but that's the DNN convention. If possible, try to use CmsContext.Page instead. Declaration TabInfo Tab { get; } Property Value Type Description DotNetNuke.Entities.Tabs.TabInfo | Improve this Doc View Source User The current DNN User. If possible, try to use CmsContext.User instead. Declaration UserInfo User { get; } Property Value Type Description DotNetNuke.Entities.Users.UserInfo"
  },
  "api/dot-net/ToSic.Sxc.Dnn.RazorComponentCode.html": {
    "href": "api/dot-net/ToSic.Sxc.Dnn.RazorComponentCode.html",
    "title": "Class RazorComponentCode | 2sxc 13 / EAV 13",
    "keywords": "Class RazorComponentCode This is the type used by code-behind classes of razor components. Use it to move logic / functions etc. into a kind of code-behind razor instead of as part of your view-template. Inheritance System.Object System.Web.WebPages.WebPageExecutingBase System.Web.WebPages.WebPageRenderingBase System.Web.WebPages.WebPageBase ToSic.Sxc.Web.RazorComponentBase RazorComponent RazorComponentCode Implements IDnnRazorCustomize IDnnDynamicCode IDynamicCode ICreateInstance ICompatibilityLevel IHasLog IDnnDynamicCodeAdditions Inherited Members RazorComponent.NotImplementedUseCustomBase RazorComponent.Code RazorComponent.Dnn RazorComponent.CustomizeSearch(Dictionary<String, List<ISearchItem>>, IModule, DateTime) RazorComponent.Purpose RazorComponent.Link RazorComponent.Edit RazorComponent.GetService<TService>() RazorComponent.App RazorComponent.Data RazorComponent.AsDynamic(String, String) RazorComponent.AsDynamic(IEntity) RazorComponent.AsDynamic(Object) RazorComponent.AsEntity(Object) RazorComponent.AsList(Object) RazorComponent.CreateSource<T>(IDataSource, ILookUpEngine) RazorComponent.CreateSource<T>(IDataStream) RazorComponent.Content RazorComponent.Header RazorComponent.AsAdam(IDynamicEntity, String) RazorComponent.AsAdam(IEntity, String) RazorComponent.CmsContext Namespace : ToSic.Sxc.Dnn Assembly : ToSic.Sxc.Dnn.Razor.dll Syntax [PublicApi_Stable_ForUseInYourCode] public abstract class RazorComponentCode : RazorComponent, ITemplateFile, IRazor, IHasDynamicCodeRoot, INeedsDynamicCodeRoot, IDnnRazorCustomize, IDnnDynamicCode, IDynamicCode, ICreateInstance, ICompatibilityLevel, IHasLog, IDnnDynamicCodeAdditions, IDnnRazor, IDnnRazor11 Methods | Improve this Doc View Source CustomizeData() Declaration [Obsolete(\"Shouldn't be used any more, but will continue to work for indefinitely. There are now better ways of doing this\")] public override void CustomizeData() Overrides RazorComponent.CustomizeData() | Improve this Doc View Source CustomizeSearch(Dictionary<String, List<ISearchItem>>, IContainer, DateTime) Declaration [Obsolete(\"Shouldn't be used any more, but will continue to work for indefinitely. There are now better ways of doing this\")] public override void CustomizeSearch(Dictionary<string, List<ISearchItem>> searchInfos, IContainer moduleInfo, DateTime beginDate) Parameters Type Name Description System.Collections.Generic.Dictionary < System.String , System.Collections.Generic.List < ISearchItem >> searchInfos ToSic.Eav.Run.IContainer moduleInfo System.DateTime beginDate Overrides ToSic.Sxc.Dnn.RazorComponent.CustomizeSearch(System.Collections.Generic.Dictionary<System.String, System.Collections.Generic.List<ToSic.Sxc.Search.ISearchItem>>, ToSic.Eav.Run.IContainer, System.DateTime) Implements IDnnRazorCustomize IDnnDynamicCode IDynamicCode ICreateInstance ICompatibilityLevel IHasLog IDnnDynamicCodeAdditions"
  },
  "api/dot-net/ToSic.Sxc.Context.html": {
    "href": "api/dot-net/ToSic.Sxc.Context.html",
    "title": "Namespace ToSic.Sxc.Context | 2sxc 13 / EAV 13",
    "keywords": "Namespace ToSic.Sxc.Context Context information for the current request / scenario. The Context gives your code information about the page / site / module etc. it's currently running in. All your code (Razor, WebApi) will have a property CmsContext which is of type ICmsContext . Note Your code will always have these objects, but they may sometimes be referencing unknown information. For example, if the current context doesn't have a known Module (like in API scenarios) then CmsContext.Module will return a valid object, but the ID will be < 0. Interfaces ICmsContext This is the runtime context of your code in the CMS. It can tell you about the site, page, module etc. that you're on. Note that it it Platform Agnostic so it's the same on Dnn, Oqtane etc. ICmsCulture Information about the cultures/languages used. ICmsModule Information about the module context the code is running in. ICmsPage Information about the page which is the context for the currently running code. ICmsPlatform General platform information ICmsSite The site context of the code - so basically which website / portal it's running on. ICmsUser The user context of your code - so it's information about the user your code is using. ICmsView View context information - this is Experimental / BETA WIP IParameters Collection of url parameters of the current page Has a special ToString() implementation, which gives you the parameters for re-use in other scenarios...? Enums PlatformType The types of platforms which 2sxc could be running on"
  },
  "api/dot-net/ToSic.Sxc.Context.PlatformType.html": {
    "href": "api/dot-net/ToSic.Sxc.Context.PlatformType.html",
    "title": "Enum PlatformType | 2sxc 13 / EAV 13",
    "keywords": "Enum PlatformType The types of platforms which 2sxc could be running on Namespace : ToSic.Sxc.Context Assembly : ToSic.Sxc.dll Syntax [PublicApi] [Flags] public enum PlatformType : long Fields Name Description Custom Custom platform - this should never occur in production code but could during automated testing Dnn Dnn aka. DotNetNuke - see https://dnncommunity.org/ Hybrid All platforms / hybrid. This should never be used to publish what a platform is, but to mark things that work on all platforms None No platform - this should never occur NopCommerce NopCommerce using .net Core 5 (not implemented yet) - see https://www.nopcommerce.com/ Oqtane Oqtane using .net Core 5 - see https://oqtane.org/ Test Test platform - this should never occur in production code but could during automated testing Unknown Unknown platform - this should never occur"
  },
  "api/dot-net/ToSic.Eav.Serialization.html": {
    "href": "api/dot-net/ToSic.Eav.Serialization.html",
    "title": "Namespace ToSic.Eav.Serialization | 2sxc 13 / EAV 13",
    "keywords": "Namespace ToSic.Eav.Serialization Classes EntitySerializationDecorator An entity should be able to specify if some properties should not be included"
  },
  "api/dot-net/ToSic.Eav.Serialization.EntitySerializationDecorator.html": {
    "href": "api/dot-net/ToSic.Eav.Serialization.EntitySerializationDecorator.html",
    "title": "Class EntitySerializationDecorator | 2sxc 13 / EAV 13",
    "keywords": "Class EntitySerializationDecorator An entity should be able to specify if some properties should not be included Inheritance System.Object EntitySerializationDecorator Implements IDecorator < IEntity > IDecorator Namespace : ToSic.Eav.Serialization Assembly : ToSic.Eav.Core.dll Syntax [InternalApi_DoNotUse_MayChangeWithoutNotice(\"Just fyi\")] public class EntitySerializationDecorator : IDecorator<IEntity>, IDecorator, IEntityIdSerialization Remarks Introduced v11.13 in a slightly different implementation Enhanced as a standalone decorator in 12.05 Properties | Improve this Doc View Source RemoveBoolFalseValues Declaration public bool RemoveBoolFalseValues { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source RemoveEmptyStringValues Declaration public bool RemoveEmptyStringValues { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source RemoveNullValues Declaration public bool RemoveNullValues { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source RemoveZeroValues Declaration public bool RemoveZeroValues { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source SerializeCreated Declaration public bool? SerializeCreated { get; set; } Property Value Type Description System.Nullable < System.Boolean > | Improve this Doc View Source SerializeGuid Declaration public bool? SerializeGuid { get; set; } Property Value Type Description System.Nullable < System.Boolean > | Improve this Doc View Source SerializeId Declaration public bool? SerializeId { get; set; } Property Value Type Description System.Nullable < System.Boolean > | Improve this Doc View Source SerializeMetadata Declaration public ISubEntitySerialization SerializeMetadata { get; set; } Property Value Type Description ToSic.Eav.Serialization.ISubEntitySerialization | Improve this Doc View Source SerializeMetadataFor Declaration public MetadataForSerialization SerializeMetadataFor { get; set; } Property Value Type Description ToSic.Eav.Serialization.MetadataForSerialization | Improve this Doc View Source SerializeModified Declaration public bool? SerializeModified { get; set; } Property Value Type Description System.Nullable < System.Boolean > | Improve this Doc View Source SerializeRelationships Declaration public ISubEntitySerialization SerializeRelationships { get; set; } Property Value Type Description ToSic.Eav.Serialization.ISubEntitySerialization | Improve this Doc View Source SerializeTitle Declaration public bool? SerializeTitle { get; set; } Property Value Type Description System.Nullable < System.Boolean > Implements IDecorator<T> IDecorator"
  },
  "api/dot-net/ToSic.Sxc.Blocks.Render.html": {
    "href": "api/dot-net/ToSic.Sxc.Blocks.Render.html",
    "title": "Class Render | 2sxc 13 / EAV 13",
    "keywords": "Class Render Block-Rendering system. It's responsible for taking a Block and delivering HTML for the output. It's used for InnerContent, so that Razor-Code can easily render additional content blocks. See also Inner Content (Content Within Other Content) Inheritance System.Object Render Namespace : ToSic.Sxc.Blocks Assembly : ToSic.Sxc.Dnn.Core.dll Syntax [PublicApi_Stable_ForUseInYourCode] [Obsolete(\"Deprecated in v12 - please use IRenderService instead - will not work in v12 Base classes like Razor12\")] public class Render Methods | Improve this Doc View Source All(DynamicEntity, String, String, String, Int32, String) Render content-blocks into a larger html-block containing placeholders Declaration public static IHtmlString All(DynamicEntity parent, string noParamOrder = \"Rule: All params must be named (https://r.2sxc.org/named-params)\", string field = null, string apps = null, int max = 100, string merge = null) Parameters Type Name Description DynamicEntity parent The parent-item containing the content-blocks and providing edit-context System.String noParamOrder System.String field Required: Field containing the content-blocks. System.String apps BETA / WIP System.Int32 max BETA / WIP System.String merge Optional: html-text containing special placeholders. Returns Type Description System.Web.IHtmlString | Improve this Doc View Source One(DynamicEntity, String, IDynamicEntity, String, Nullable<Guid>) Render one content block This is accessed through DynamicEntity.Render() At the moment it MUST stay internal, as it's not clear what API we want to surface Declaration public static IHtmlString One(DynamicEntity parent, string noParamOrder = \"Rule: All params must be named (https://r.2sxc.org/named-params)\", IDynamicEntity item = null, string field = null, Guid? newGuid = default(Guid? )) Parameters Type Name Description DynamicEntity parent The parent-item containing the content-blocks and providing edit-context System.String noParamOrder IDynamicEntity item The content-block item to render. Optional, by default the same item is used as the context. System.String field Optional: System.Nullable < System.Guid > newGuid Internal: this is the guid given to the item when being created in this block. Important for the inner-content functionality to work. Returns Type Description System.Web.IHtmlString"
  },
  "web-api/custom/index.html": {
    "href": "web-api/custom/index.html",
    "title": "2sxc Custom C# Web APIs | 2sxc 13 / EAV 13",
    "keywords": "2sxc Custom C# Web APIs Moved to 2sxc Custom C# Web APIs"
  },
  "web-api/custom/custom-web-api-security.html": {
    "href": "web-api/custom/custom-web-api-security.html",
    "title": "Security & Permissions in Custom WebAPIs | 2sxc 13 / EAV 13",
    "keywords": "Security & Permissions in Custom WebAPIs Moved to Security & Permissions in Custom WebAPIs"
  },
  "web-api/custom/custom-web-api-files.html": {
    "href": "web-api/custom/custom-web-api-files.html",
    "title": "Custom C# Web API File Structure | 2sxc 13 / EAV 13",
    "keywords": "Custom C# Web API File Structure Moved to Custom C# Web API File Structure"
  },
  "web-api/custom/custom-web-api-dotnet-saveinadam.html": {
    "href": "web-api/custom/custom-web-api-dotnet-saveinadam.html",
    "title": "SaveInAdam(...) Command in ApiController | 2sxc 13 / EAV 13",
    "keywords": "SaveInAdam(...) Command in ApiController Moved to SaveInAdam(...) Command in ApiController"
  },
  "abyss/platforms/oqtane/install-issue-hot-reload.html": {
    "href": "abyss/platforms/oqtane/install-issue-hot-reload.html",
    "title": "Problems Installing Apps with Hot Reload Enabled | 2sxc 13 / EAV 13",
    "keywords": "Problems Installing Apps with Hot Reload Enabled When using Oqtane in developer mode there is a feature called Hot Reload which restarts Oqtane when files change. Warning Installing Content-Templates and Apps with Hot Reload enabled causes problems. This is because the server will restart a few times during installation of the ZIP. Because of this you can only install Apps and Content-Templates if Hot Reload is disabled . Tip After installation you can re-enable Hot-Reload as you see fit. Checklist to Disable Hot Reload Temporarily Background: Hot-Reload Detection Just FYI in case the error is wrong / surprising. We detect Hot-Reload-Enabled by checking that this DLL is loaded in memory: Microsoft.AspNetCore.Watch.BrowserRefresh.dll If you believe that we are checking this incorrectly, please open an issue on Github. Shortlink to here: https://r.2sxc.org/oqt-hr"
  },
  "js-code/toolbars/simple.html": {
    "href": "js-code/toolbars/simple.html",
    "title": "How To Customize the Toolbars | 2sxc 13 / EAV 13",
    "keywords": "How To Customize the Toolbars <!-- Data Highlights --> <!-- ADAM --> <!-- Server --> <!-- Prepare --> <!-- Data Source --> <!-- Optimzers --> <!-- Process / Awesomize --> <!-- Libraries --> <!-- data formats --> <!-- Browser --> <!-- Frameworks --> <!-- App show parts --> <!-- Interact parts --> <!-- Edit parts --> <!-- Edit UI parts --> <!-- SPA parts --> <!-- Custom highlight boxes - can be controlled by in-page CSS --> you are here (click to zoom) - discover the stack .context-box-summary .edit-custom { visibility: visible; } A lot in 2sxc is fully automatic. But sometimes you want to customize how the content editor can work. Note 2sxc 10.27 introduces a much simpler system, which is what is shown here. Previously everything was possible, but quite complicated. So if you find examples out there which look very different - they work as well, but here's the simple system. Live Examples The Dnn Tutorials have a live demo of toolbar customization . Head over there while reading these docs to see all this in action. Overview - What You can Customize You can customize just about everything: hover-behavior - you may want hover, maybe not, and maybe to the right | left colors using color names, hex-codes or CSS classes of the entire toolbar or just of individual buttons you can just enhance/change the default toolbar or create a custom one with just your buttons you can change the button groups - add, remove etc. you can add/remove buttons as you need you can create buttons with custom icons you can even call custom code from your custom buttons Tip This overview will get you started, anything more advanced will need the specs . Important This will show you how to do things in Razor, but the same principles apply to plain HTML-Toolbars. We assume that 99% of all toolbars will be initiated from razor, so that's what we'll be showing here. Getting Started with Custom Toolbars Usually your code will look a bit like this: <div @Edit.TagToolbar(Content)> ... </div> This will create a standard hover-toolbar with some buttons and the more ellipsis button. Note that the exact combination of buttons is auto-detected. So you may just have an edit but you may also have an add etc. depending on the template and the data it receives. It looks approx. like this: Add our First Button Let's add an extra new button to create an item of the content-type Category . Note This code will make the button appear, but on click you may see an error, because you probably don't have a ContentType Category in your app. <div @Edit.TagToolbar(Content, toolbar: \"+new?contentType=Category\")> ... </div> You should now have an extra + button like this: Let's emphasize it, because for whatever reason it's a super important button. We'll also drop the leading + since it's optional and defaulted to: <div @Edit.TagToolbar(Content, toolbar: \"new&color=red?contentType=Category\")> ... </div> You should now have a red + button like this: Important The term new in this example means we want a button of type new which will open the dialog to create new entities. We could also write app&color=red which would add a button to manage the app. So new ‚â† 'new button' but 'button to add a new entity'. The full list of button names can be found in the CMS Commands list . Adding more Buttons Now we want to add another button - maybe to add a Tag . The toolbar attribute on the Edit.TagToolbar can take various kinds of objects, but for the new simple API it only accepts string objects or string[] arrays. So to make multiple changes to the toolbar, we'll have to give it a string[] array like this (note that we can use line-breaks, to make the code easier to read): <div @Edit.TagToolbar(Content, toolbar: new [] { \"new&color=red?contentType=Category\", \"new&color=teal?contentType=Tag\" })> ... </div> You should now see this: Tip When creating new items you can also add prefill default values. This is great for News-Apps where you want to prefill the date or for list of something where you want to prefill the category. Check out the specs . Removing Buttons with - Now maybe you don't like to allow your editors to change the view - so let's do the same but remove the view-switch button as well using the remove - prefix: <div @Edit.TagToolbar(Content, toolbar: new [] { \"-layout\", \"new&color=red?contentType=Category\", \"new&color=teal?contentType=Tag\" })> ... </div> So you can add / remove any button you want. You can find a full list of button names (command names) . Modifying Existing Buttons with % But what if we want to modify an existing button? Let's change the icon and both colors of the layout (view) button using the modify % prefix: <div @Edit.TagToolbar(Content, toolbar: new [] { \"%layout&icon=icon-sxc-replace&color=white,maroon\", \"new&color=red?contentType=Category\", \"new&color=teal?contentType=Tag\" })> ... </div> As you can see, we just used % to modify a button, set the icon and 2 colors. Show Only Our Buttons But maybe we would prefer to have a toolbar with only the two add buttons, and nothing else. By default, the toolbar uses a template called default which contains all these buttons. But you can always start with an empty template. You'll find the full list of templates here . <div @Edit.TagToolbar(Content, toolbar: new [] { \"toolbar=empty\", \"new&color=red?contentType=Category\", \"new&color=teal?contentType=Tag\" })> ... </div> Tip As you can see, the principle is to use a toolbar template and make modifications to it. Showing the Delete Button Warning A special case in modifying buttons is also to force-show the delete button which is hidden by default. The reason it's hidden is because in most content-editing scenarios the editor should be able to remove content, but not delete it - in case it's re-used elsewhere. But let's say you created a News App and want to allow the editor to also delete the news-items. Here's how: <div @Edit.TagToolbar(Content, toolbar: \"%delete&show=true\")> ... </div> The delete button is in the third group of buttons, so you'll have to hit the ellipsis a few times to see it. You'll then see: Adding Custom Groups Let's assume you understand the principle of adding, removing and changing buttons. Let's add a custom button group with only the buttons you want - followed by the normal ellipsis-button with the standard functionality: <div @Edit.TagToolbar(Content, toolbar: new [] { \"group=add-buttons\", \"new&color=red&group=add-buttons?contentType=Category\", \"new&color=teal&group=add-buttons?contentType=Tag\" })> ... </div> You'll get this result, and hitting the ellipsis will show you the default buttons as you can see in the second image: Note We had to give our new group a name - in this case add-buttons and told the new buttons that they should go inside that group. Tip A new group can also go after the default group of buttons. If you add a &pos=1 or another number the group will be placed later on in the sequence. You can also use &pos=-0 or &pos=-1 or similar to place it counting from the end of the list. Warning When using position like pos=# you may have unexpected results, because the button is added to the list before some buttons decide to hide themselves. So you may think you're adding it to pos=1 but if the edit button (which would be at position 0) shouldn't be shown, your button will still appear to be the first one. There is also a hidden group called edit-advanced - you can find the list of groups here. As of now, it only contains the delete button which is hidden by default. Attaching Custom JavaScript Code to a Button Now you may want to call your own code when you create a button. This is very advanced stuff, but here's how: <div class=\"demobox\" @Edit.TagToolbar(Content, toolbar: \"custom&title=Message?call=myMessage&id=17\") > This demonstrates a custom button with the call-name in the parameters. </div> <script> function myMessage(context, event) { console.log(context, event); alert('hello from my Message - got this id:' + context.button.command.params.id); } </script> You'll then see this toolbar, and on click this message: You'll notice that we have a ?call=functionName and also an id=17 just to show how additional information is passed around. Your function also gets an event from the browser, so you can check the event.target and other things to see what was actually clicked. Warning This is very advanced stuff, you may run into difficulties to get this to fly üòâ. Debugging Custom Toolbars In most cases if your problems will be caused by invalid syntax. It's easy to forget a closing quote \" or a comma , to separate values. So always check that first. If you really want to do deep debugging, you should use the $2sxc.insights() command in the console to see what whas processed and how. If you add ?debug=true to the url of the page, it will also log way more intermediate data for you to review. Read More Basically you have what it takes. To go further: review the specs . check out the list of commands/buttons"
  },
  "js-code/toolbars/settings.html": {
    "href": "js-code/toolbars/settings.html",
    "title": "Toolbar Settings | 2sxc 13 / EAV 13",
    "keywords": "Toolbar Settings <!-- Data Highlights --> <!-- ADAM --> <!-- Server --> <!-- Prepare --> <!-- Data Source --> <!-- Optimzers --> <!-- Process / Awesomize --> <!-- Libraries --> <!-- data formats --> <!-- Browser --> <!-- Frameworks --> <!-- App show parts --> <!-- Interact parts --> <!-- Edit parts --> <!-- Edit UI parts --> <!-- SPA parts --> <!-- Custom highlight boxes - can be controlled by in-page CSS --> you are here (click to zoom) - discover the stack .context-box-summary .edit-custom { visibility: visible; } Each in page toolbar can have some settings which control how it works and how it's shown. üëâ Best start with the Toolbar Tutorials These Settings control how the Toolbar works autoAddMore determines if an ellipsis button is added automatically hover determines where the toolbar appears when the mouse hovers over the area follow tells the toolbar to follow the mouse - ideal for large content blocks show determines if th toolbar is always visible, or only on hover classes let you add classes for custom styling How to Use in Razor This example uses the simple TagToolbar API: <div @Edit.TagToolbar(Content, toolbar: new[] { \"settings&hover=left&autoAddMore=start\" })> Stuff inside the div - hover over this would show the toolbar </div> Here's another example where it uses the explicit settings parameter: <div id='tagWithToolbar1' @Edit.TagToolbar( toolbar: new [] { \"toolbar=empty\", \"+new?contentType=UiEmptyHelloWorld\" }, settings: new { hover = \"left\", show = \"always\" } )> Float over this box to get a (+) button. </div> How to Use in JavaScript If you are writing code that doesn't have Razor (for example in a JS-SPA scenario) you would write the following (which is actually what the above sample creates): <div sxc-toolbar='[\"settings&hover=left&autoAddMore=start\"]'> Stuff inside the div - hover over this would show the toolbar </div> Settings and Values string autoAddMore : (null) | \"start\" | \"end\" will automatically add a \"...\" (more) button if multiple button groups are detected string hover : \"right\" | \"left\" | \"none\" (\"center\" ist still beta) determines where the toolbar appears when the mouse hovers over the area (usually a DIV) with the class sc-element string follow new in 11.06 \"none\" | \"initial\" | \"scroll\" | \"always\" tells the toolbar to follow the mouse - ideal for large content blocks where you need the toolbar even if otherwise it would be off-screen. Note: this used to default to scroll on the TagToolbar but was changed to none in 2sxc 11.06 because it caused too many UX issues. string show : \"hover\" | \"always\" by default any toolbar inside an element with a sc-element class will appear on hover string classes : (null) | any kind of string Old use Cases not Recommended Here's a quick example of how it used to be done - not recommended any more: <div style=\"height: 100px\" class=\"sc-element\"> 100px tall area to show alignments floating left with more to the left <ul class=\"sc-menu\" data-toolbar='' settings='{ \"hover\": \"left\", \"align\": \"left\" }'></ul> </div> The above example will hover the toolbar when the mouse moves over this DIV but place it to the left hover: \"left\" and place the more button on the left side as well align: \"left\" . Demo App and further links Toolbar Tutorials old! blog post on using toolbar settings History Introduced in 2sxc 8.06 follow introduced in 11.06"
  },
  "js-code/toolbars/old.html": {
    "href": "js-code/toolbars/old.html",
    "title": "Old APIs for In-Page Edit Toolbars and Buttons | 2sxc 13 / EAV 13",
    "keywords": "Old APIs for In-Page Edit Toolbars and Buttons <!-- Data Highlights --> <!-- ADAM --> <!-- Server --> <!-- Prepare --> <!-- Data Source --> <!-- Optimzers --> <!-- Process / Awesomize --> <!-- Libraries --> <!-- data formats --> <!-- Browser --> <!-- Frameworks --> <!-- App show parts --> <!-- Interact parts --> <!-- Edit parts --> <!-- Edit UI parts --> <!-- SPA parts --> <!-- Custom highlight boxes - can be controlled by in-page CSS --> you are here (click to zoom) - discover the stack .context-box-summary .edit-custom { visibility: visible; } Warning These are old APIs and fairly complicated. We suggest you don't use them any more! How to Use v9.40 (old, not recommended) The most common use-case is actually to provide some HTML, which the JavaScript will pick up automatically and convert into a menu. The syntax was revised in 2sxc 9.40+, which is what we show here. The previous syntax is still supported, but not recommended any more: <!-- this is the default toolbar for first content item assigned to this module --> <div sxc-toolbar='{ \"toolbar\": {\"sortOrder\":0,\"useModuleList\":true} }'> </div> <!-- this is a toolbar for a content-item with the id 6875 --> <div sxc-toolbar='{ \"toolbar\": {\"entityId\":6875} }'> </div> <!-- this could be a custom toolbar for showing a new-button only --> <div sxc-toolbar='{ \"toolbar\": {\"contentType\":\"BlogPost\",\"action\":\"new\"} }'> </div> <!-- this would have two buttons, each configured in a way --> <div sxc-toolbar='{ \"toolbar\": [{ \"action\":\"edit\", \"useModuleList\":true, \"sortOrder\": 0, \"prefill\": { \"DocumentedOnPage\": \"page:@Dnn.Tab.TabID\", \"title\": \"@Dnn.Tab.Title\" } }, { \"action\" : \"new\", \"contentType\" : \"BlogPost\" }] }'> </div> What was Changed/Enhanced in 2sxc 9.40 There were some things which worked well, but bothered us as perfectionists :). It boils down to how much of the page html must be different just because editing is used. So this is what we wanted to change: the previous implementation always used a special class sc-element to mark the tag which detects mouse-over. This was necessary, because the tag itself was added in another place in the code. This is not necessary any more, since the sxc-toolbar attribute is now on the tag which does the hover-detect. the previous implementation created a <ul> tag in the source code. Though this was not a big issue, it just didn't feel right. the previous implementation spread the information for the toolbar on two attributes toolbar and settings - this just wasn't perfect. Now it's both in the sxc-toolbar attribute. How to Use before 2sxc 9.40 <!-- this is the default toolbar for content assigned to this module --> <ul class=\"sc-menu\" toolbar='{\"sortOrder\":0,\"useModuleList\":true,\"isPublished\":true}'></ul> <!-- this is a default toolbar for content-items not assigned to this module --> <ul class=\"sc-menu\" toolbar='{\"isPublished\":true,\"entityId\":6875}'></ul> <!-- this could be a custom toolbar for showing a new-button only --> <ul class=\"sc-menu\" toolbar='{\"contentType\":\"BlogPost\",\"action\":\"new\"}'></ul> <!-- this would have two buttons, each configured in a way --> <ul class='sc-menu' toolbar='[{ \"action\":\"edit\", \"useModuleList\":true, \"sortOrder\": 0, \"prefill\": { \"DocumentedOnPage\": \"page:@Dnn.Tab.TabID\", \"title\": \"@Dnn.Tab.Title\" } }, { \"action\" : \"new\", \"contentType\" : \"BlogPost\" }]'></ul> How it Works Internally, a lot will happen to actually turn that into a real, usually floating, toolbar. Basically what happens is a script picks up all cases of <* sxc-toolbar=...> and <ul class=\"sc-menu ...\"></ul> it will then pass it to a toolbar creator which will either create a standard-list of buttons, or a custom one the resulting buttons/links will be placed in <li> items and added to the <ul> tag But you could also do a whole lot more, including custom buttons and code (since 2sxc 08.06) <div sxc-toolbar='{ \"toolbar\": { \"groups\": [ { \"name\": \"my default list\", \"buttons\": \"edit,add,more\" }, { \"name\": \"list buttons\", \"buttons: \"sort,moveup,movedown,more\" }, { \"name\": \"really advanced stuff\", \"buttons\": [ \"app\", \"zone\", { \"command\":{ \"action\": \"custom\", \"customCode\": \"alert(&apos;hello&apos;)\" } \"icon\": \"icon-sxc-bomb\" }, \"more\" ] } ], \"defaults\": { \"entityId\": 740, \"contentType\": \"BlogPost\" } }}'> ... </div> All the configuration is in the sxc-toolbar attribute, which contains two main nodes: toolbar - see below settings - see Toolbar Settings In the old syntax (before 2sxc 9.40, using the <ul> tag, two attributes are handled toolbar or data-toolbar - see below settings or data-settings - see Toolbar Settings More Background The toolbar information is: an object with some properties (like entityId ) and no action verbs --> then it will auto-generate all default buttons { entityId: 17, isPublished: true } an object with some properties and 1 or more action verbs --> generate only these buttons { actions: \"new,edit\", useModuleList: true, sortOrder: 1 } an array with commands (objects with 1 verb) --> generate these Buttons [{ action: ...}, { action: ...}] on object containing a buton-group like { buttons: [ { command: { action: ...}}, { command: ...}] } a group of button-groups [ { buttons: ... }, {buttons: ...}] a full toolbar configuration { groups: [...], defaults: {...}, params: {...} } For a full scope of what is possible, you should read the js toolbar documentation . Demo App and further links JS Manage / Toolbar API Tutorial App History Introduced in 2sxc v02.00 Published API for use in templates in 2sxc v08.06 Enhanced / Standardized in 2sxc v09.40"
  },
  "js-code/toolbars/buttons.html": {
    "href": "js-code/toolbars/buttons.html",
    "title": "Toolbar Button Definitions | 2sxc 13 / EAV 13",
    "keywords": "Toolbar Button Definitions <!-- Data Highlights --> <!-- ADAM --> <!-- Server --> <!-- Prepare --> <!-- Data Source --> <!-- Optimzers --> <!-- Process / Awesomize --> <!-- Libraries --> <!-- data formats --> <!-- Browser --> <!-- Frameworks --> <!-- App show parts --> <!-- Interact parts --> <!-- Edit parts --> <!-- Edit UI parts --> <!-- SPA parts --> <!-- Custom highlight boxes - can be controlled by in-page CSS --> you are here (click to zoom) - discover the stack .context-box-summary .edit-custom { visibility: visible; } When you create custom buttons in a floating toolbar you can customize everything including the icon and more. This is explained here. Warning Old Complicated Stuff This is old complicated stuff which you shouldn't need any more. We left it in the docs because we're not sure if some people still use this. But we strongy urge you not to use it, and use the simple toolbar APIs instead. Buttons are of html, basically a <a click=\"...\">[some-icon]</a> . When the button is created, it must already know what it's for, which is why the command must be prepared when the button is created. How to use A short example of a slightly customized button definition: var btns = [{ command: { action: \"new\", contentType: \"Category\" }, title: \"create Category\" }, { command: { action: \"new\", contentType: \"Author\" }, title: \"create Author\" }]; This simple example shows two new buttons creating different kinds of things, and we customized the label so the mouse-over would tell the editor which button is which. Let's get a bit more sophisticated var btn = { command: { // some command here }, icon: \"icon-sxc-code\", title: \"this is my special button\", classes: \"redButton\", }; The above example shows all than can currently be configured one a button. And here's a much more complex example. This is the full object-structure which the button generator getButton(...) understands: // full version var btn = { title: \"some title - ideally from translation table\", icon: \"some icon like icon-sxc-bomb\", command: { action: \"some action name like new\", moreParamsAsNeeded: \"...\" }, showCondition: someValueOr function(itemSettings) { return true; }, classes: \"btn-xyz my-class\", dynamicClasses: function(itemSettings) { if( (new Date()).getDay() === 1 ) return \"color-monday\"; } }; // typically more compact edition (will be expanded at runtime) var btn2 = { title: \"my button!\", icon: \"icon-sxc-list\", action: \"layout\" }; // or the totally compact edition var btn3 = \"layout\"; Some functioning code You may wonder how to actually use this. Here's an JSON example: <p class=\"sc-element\"> mouse over this to see inline-json version <ul class=\"sc-menu\" data-toolbar='[{ \"command\": { \"action\": \"new\", \"contentType\": \"Category\" }, \"title\": \"create Category\" }, { \"command\": { \"action\": \"new\", \"contentType\": \"Author\" }, \"title\": \"create Author\" }]'></ul> </p> Here's a more sophisticated (but also more reusable) example: <p class=\"sc-element\"> mouse over this to see the js toolbar generated by the buttons-list <toolbars2Buttons></toolbars2Buttons> </p> <script> var toolbars2Buttons = [{ command: { action: \"new\", contentType: \"Category\" }, title: \"create Category\" }, { command: { action: \"new\", contentType: \"Author\" }, title: \"create Author\" }]; // note that we cannot create the toolbars before the page-onready. Because of this // our code which creates the toolbar must be delayed, like in a $(our-code); $(function(){ if(typeof $2sxc != \"undefined\") // continue if $2sxc exists; it may be missing in non-edit modes $(\"toolbars2Buttons\").each(function(index, element){ var controller = $2sxc(element); if(!controller.isEditMode()) // check if this specific module currently allows editing return; var toolbar = controller.manage.getToolbar(toolbars2Buttons); $(element).replaceWith(toolbar); }); }); </script> How it works Buttons are used in toolbars all the time, and before they are rendered, the must be fully configured/expanded, as shown in the larger example. Internally the button is built with whatever is given, and anything not defined yet is automatically filled with the defaults. The defaults are taken from the commands definitions . Here's how the get defaults works: if all that is knows about a button is the name like var btn = \"new\" , then it gets all the configuration from the defaults if some properties are known, like var btn = { command: {action: \"new\"}, icon: \"myicon\" } , then only the missing properties are taken from the defaults. Note that retrieving defaults requires the button to know which command it's for, so the name of the command is essential. The Button Properties object command the internal command which will be called, should contain both the name and the parameters like { action: \"new\", contentType: \"BlogPost\"} see also commands string icon a css class giving the button the icon. It can be one of the icons 2sxc provides, or it can be your own - just be sure to include a CSS & font which resolves the icon string title a text which is shown on mouse-over. Note that 2sxc will try to run it through the translator, so you can also use placeholders like Toolbar.Metadata string classes comma separated list of class-names like makeRed,glowHover function dynamicClasses(settings) can be used to dynamically build classes depending on the situation bool/function showCondition ( API still experimental ) - used to dynamically choose if this button should be shown or not bool disabled ( API still experimental ) would disable the click on a button bool partOfPage ( API still experimental , new in 2sxc 9.5 ) determines if resulting changes should effect the Evoq/Dnn Page Publishing - note that it only effects the page-lifecyle, if the resulting dialogs and APIs respect this setting Some more Notes Because the button is often passed around as plain text/html, it can't rely on hidden variables to keep track of anything. This is why the onclick is so verbose, like onclick=\"$2sxc(4030).manage.run({\"action\": \"edit\", \"entityId\": 42 }) . This is to ensure it always survives the text-round-trip. Demo App and further links You should find some code examples in this demo App JS Manage / Toolbar API Tutorial App History Introduced in 2sxc 08.06"
  },
  "js-code/toolbars/advanced.html": {
    "href": "js-code/toolbars/advanced.html",
    "title": "Pure JS Mode (OLD) | 2sxc 13 / EAV 13",
    "keywords": "Pure JS Mode (OLD) <!-- Data Highlights --> <!-- ADAM --> <!-- Server --> <!-- Prepare --> <!-- Data Source --> <!-- Optimzers --> <!-- Process / Awesomize --> <!-- Libraries --> <!-- data formats --> <!-- Browser --> <!-- Frameworks --> <!-- App show parts --> <!-- Interact parts --> <!-- Edit parts --> <!-- Edit UI parts --> <!-- SPA parts --> <!-- Custom highlight boxes - can be controlled by in-page CSS --> you are here (click to zoom) - discover the stack .context-box-summary .edit-custom { visibility: visible; } When a user is logged on and has edit permissions, he should see buttons to edit his content or perform other actions. This is all done in HTML / JavaScript. How to use The most common use-case is actually to provide some HTML, which the JavaScript will pick up automatically and convert into a menu. You can read more about this in Html Toolbars and Buttons . You can also generate the html as needed - for example when working with a javascript template in AngularJS, React, Ember etc. Here's a small example: var btnHtml = $2sxc(740).manage.getButton({ action: \"new\", contentType: \"BlogPost\" }); var toolbarHtml = $2sxc(740).manage.getToolbar({ action: \"new,edit,add\", entityId: 203 }); So this is really it. There are only two commands you must know: ...getButton(...) ...getToolbar(...) The rest of the magic lies in the configuration objects which you pass into these buttons. So let's continue with that. A Deeper Look Inside the System The following terms help you understand what we're doing: 2sxc has many commands like new , edit etc. which you can run with parameters like: command = { action: 'new', contentType: 'BlogPost'}; a button will run such a command when clicked, but for it to work, the button must have the command ready, including the necessary parameters. In JavaScript a button is defined like: btn = { command: { action: \"...\", ...}, icon: \"...\", ... }; and will later be converted to HTML like <a onclick='$2sxc(this).manage.run({\"action\": \"new\", \"contentType\": \"Dummy\"})'>new</a> a button group is an array of buttons, plus some shared specs like group = { buttons: [ { command: ...}, { }, { }], defaults: {...}, ... }; this will later be converted to a list of <li> nodes containing buttons a toolbar contains an array of button groups and again some shared specs / defaults, like toolbar = { groups: [ ... ], defaults: ...}; which will also be converted to the list of <li> nodes, but shows only one group at a time until the user presses a more button The full object tree of a toolbar is fairly sophisticated, and in most cases you can use shorthands which will be expanded internally before use. So you'll write // this is what you would normally write var toolbar = { action: \"new,edit,sort\", contentType: \"BlogPost\", useModuleList: true, sortOrder: 2 }; // which internally expands to this: var toolbar = { groups: [{ buttons: [{ title: \"Toolbar.New\", command: { action: \"new\", contentType: \"BlogPost\" }, icon: \"icon-sxc-plus\", addCondition: true, // more stuff here },{ title: \"Toolbar.Edit\", command: { action: \"edit\", useModuleList: true, sortOrder: 2 }, icon: \"icon-sxc-pencil\", addCondition: true, // more stuff here }, { // etc. }] }] } In most cases you just care about the shorthand. But in advanced cases where you really want to affect the behavior, you may go want to go deeper. Buttons and Commands Buttons are explained in more details here Commands which run when a button is pressed are here Custom commands which run your JS are here Button group This is just a simple object containing an array of buttons and some more settings which are rarely used and not documented yet. var group = { name: \"...\", buttons: \"...\", defaults: { // ... } }; var group2 = { buttons: [ { action: \"new\" }, { action: \"edit\", icon: \"icon-sxc-bomb\" }, \"button3\", { title: \"hello there\", command: { action: \"new\", } } ], defaults: { // todo } } Toolbar and Toolbar Configuration The toolbar can be defined very precisely, but in most cases you will opt for a short format which is expanded internally. Let's look at it: // very compact version var tb1 = { action: \"new,edit,moveup\", contentType: \"BlogPost\", entityId: 17 }; // array version var tb2 = [{ button1 }, { button2 }] // very expanded edition var tb2 = { groups: [ { name: \"group 1\", buttons: \"new,edit,more\" }, { name: \"group 2\", buttons: \"moveup,movedown,more\" } ], defaults: { contentType: \"BlogPost\", //... } }; Toolbar settings You can customize hover behavior , show behavior and more. Read about it in the toolbar settings . Custom Buttons with Custom Commands You can easily create custom buttons with custom icons, parameters and even custom scripts. It's not well documented yet, but it's best to just look through the tutorial app below. It's also explained more in the Html Custom Code Demo App and further links You should find some code examples in this demo App JS Manage / Toolbar API Tutorial App History Introduced in 2sxc v01.00 Public API since 2sxc v08.06"
  },
  "js-code/tips/index.html": {
    "href": "js-code/tips/index.html",
    "title": "JavaScript Tips | 2sxc 13 / EAV 13",
    "keywords": "JavaScript Tips <!-- Data Highlights --> <!-- ADAM --> <!-- Server --> <!-- Prepare --> <!-- Data Source --> <!-- Optimzers --> <!-- Process / Awesomize --> <!-- Libraries --> <!-- data formats --> <!-- Browser --> <!-- Frameworks --> <!-- App show parts --> <!-- Interact parts --> <!-- Edit parts --> <!-- Edit UI parts --> <!-- SPA parts --> <!-- Custom highlight boxes - can be controlled by in-page CSS --> you are here (click to zoom) - discover the stack .context-box-summary .browser-all { visibility: visible; } Sometimes you just need a simple trick to get things working. We're collecting the most important ones here. Delay your Scripts till the Page is ready If your script runs too early, you will probably run into problems. Since Dnn always has jQuery included, you can do this to delay your code till the page is ready: $(function() { // your code here }) Use Module ID to point your JS to your Module Often you need to your script to work with your module only, and not accidentally work on other HTML. Here's how you can do it using Razor (Example from the Blueimp Gallery ): <div id=\"blueimp-gallery-items-@Dnn.Module.ModuleID\" style=\"display:none;\"> <!-- stuff --> </div> <script type=\"text/javascript\"> $(document).ready(function () { // initialize the carousel gallery blueimp.Gallery($('[data-gallery=\"#blueimp-gallery-@Dnn.Module.ModuleID\"]').get(), { container: '#blueimp-gallery-@Dnn.Module.ModuleID', carousel: true } ); }); </script> The example above will replace @Dnn.Modul.ModuleID on the server with the module instance id, so each use on the same page will result in another unique ID."
  },
  "basics/configuration/settings-system.html": {
    "href": "basics/configuration/settings-system.html",
    "title": "System Settings in 2sxc ‚ú® new! | 2sxc 13 / EAV 13",
    "keywords": "System Settings in 2sxc ‚ú® new! <!-- Data Highlights --> <!-- ADAM --> <!-- Server --> <!-- Prepare --> <!-- Data Source --> <!-- Optimzers --> <!-- Process / Awesomize --> <!-- Libraries --> <!-- data formats --> <!-- Browser --> <!-- Frameworks --> <!-- App show parts --> <!-- Interact parts --> <!-- Edit parts --> <!-- Edit UI parts --> <!-- SPA parts --> <!-- Custom highlight boxes - can be controlled by in-page CSS --> you are here (click to zoom) - discover the stack .context-box-summary .data-configuration { visibility: visible; } Note: The System Settings feature is new in 12.04 so only a few settings are predefined as of now. This will expand in future releases. Tip These are just the predefined settings. Remember you can create any other settings on the App-Settings ContentType Predefined System Settings Google Maps Settings Part Key Value in Default Introduced Comments GoogleMaps v12.04 Pls read special docs GoogleMaps InitialZoom # 14 v12.04 Initial maps zoom level GoogleMaps ApiKey $ AIzaSyAKEFB... v12.04 The API key used to show a Map GoogleMaps ShowApiKeyWarning b true v12.04 Show a warning if it's still the default key, which isn't meant for live sites GoogleMaps MarkerIcon $ (empty) v12.04 empty = google default üìç Images Settings Image settings are very sophisticated, so they are documented on an own page: üëâ see Image Resize Settings in 2sxc WebResources Find out more about the Settings.WebResources here WebResources in Settings Stack ‚ú® new! Work-in-Progress Settings Note: the following QuickEdit Settings exist but have no effect ATM Part Key Value in Default Introduced Comments QuickEdit.Default Enable b true v12.04 QuickEdit.Default AddApp b true v12.04 QuickEdit.Default AddContent b true v12.04 QuickEdit.Default Select b true v12.04 QuickEdit.Default Paste b true v12.04 QuickEdit.Default Move b true v12.04 QuickEdit.Module Enable b true v12.04 QuickEdit.Module AddApp b true v12.04 QuickEdit.Module AddContent b true v12.04 QuickEdit.Module Select b true v12.04 QuickEdit.Module Paste b true v12.04 QuickEdit.Module Move b true v12.04 QuickEdit.InnerContentArea Enable b true v12.04 QuickEdit.InnerContentArea AddApp b true v12.04 QuickEdit.InnerContentArea AddContent b true v12.04 QuickEdit.InnerContentArea Select b true v12.04 QuickEdit.InnerContentArea Paste b true v12.04 QuickEdit.InnerContentArea Move b false v12.04 QuickEdit.InnerContentDynamic Enable b true v12.04 QuickEdit.InnerContentDynamic AddApp b true v12.04 QuickEdit.InnerContentDynamic AddContent b true v12.04 QuickEdit.InnerContentDynamic Select b true v12.04 QuickEdit.InnerContentDynamic Paste b false v12.04 QuickEdit.InnerContentDynamic Move b false v12.04 Conventions used in System Settings ‚ö† Advanced The built-in system settings are meant to carry hundreds of settings. To enable that, the structure is always as follows: Every topic - like GoogleMaps will have an own configuration ContentType All the names of these will start with the emoji \"‚öôÔ∏è\" so the ContentType will have a name like ‚öôÔ∏èGoogleMaps It should always have a field called SettingsIdentifier repeating the name like GoogleMaps All of these fields should have an empty-state (like empty string, not-set-number) etc. ... Items and ... ItemIdentifier History Full Settings Stack introduced in 2sxc 12.04"
  },
  "basics/configuration/settings-stack.html": {
    "href": "basics/configuration/settings-stack.html",
    "title": "Settings Stack in 2sxc ‚ú® new! | 2sxc 13 / EAV 13",
    "keywords": "Settings Stack in 2sxc ‚ú® new! <!-- Data Highlights --> <!-- ADAM --> <!-- Server --> <!-- Prepare --> <!-- Data Source --> <!-- Optimzers --> <!-- Process / Awesomize --> <!-- Libraries --> <!-- data formats --> <!-- Browser --> <!-- Frameworks --> <!-- App show parts --> <!-- Interact parts --> <!-- Edit parts --> <!-- Edit UI parts --> <!-- SPA parts --> <!-- Custom highlight boxes - can be controlled by in-page CSS --> you are here (click to zoom) - discover the stack .context-box-summary .data-configuration { visibility: visible; } Settings come in 2 distinct flavors: Standardized Settings use a content-type called SettingsSystem with a predefined structure. These settings are meant to be used across tools and apps. Dynamic Settings use a custom App-Settings content-types which you define. These settings can have any keys and values you want. The effect/reach of this depends on the level where you add it (global, site, app). The code using these will usually come from you, as these settings are not standardized. Settings can be edited on many levels. The most general or fallback settings are presets in 2sxc. The most specific settings only apply to a specific view. In most cases your templates and code will simply want to get the most-relevant setting, no matter where it was configured. To make this possible, settings are treated as a stack. This is how it stacks up: The most-relevant setting is top-most setting and is the one which will be used. So if a View setting and a Site setting have the same key, the View setting will be preferred. Take a look at this illustration: Assume the Blog App has a List View which needs Settings.Images.Content . The first Blog will look for it in the sequence of the blue arrows. The second will look in the sequence of the yellow arrows. So each Blog could get a different Setting, depending on where it is configured or overwritten. Settings Sources and Priorities The Settings are stacked in the following priority: ViewCustom - dynamic settings configured in the View AppCustom - the dynamic App-Settings (see App-Settings ) of an App AppSystem - The SettingsSystem in the current App AncestorCustom - Optional, only on inherited Apps - App-Settings on ancestor app (v13) AncestorSystem - Optional, only on inherited Apps - SettingsSystem on ancestor app (v13) SiteCustom - an optional, manually created dynamic App-Settings on the Primary App of the current site SiteSystem - an optional SettingsSystem in the Primary App of the current site GlobalCustom - an optional, manually created dynamic App-Settings on the Global System App GlobalSystem - an optional SettingsSystem on the Global System App PresetSystem - the SettingsSystem which are included in the installation of 2sxc There is no setting called ViewSystem or PresetCustom . Review the Settings-Stack In case you need to see what setting applies to what view, you can easily analyze this in the App Administration . There you can see each setting and what source it came from + you can analyze all the sources which configure this setting: Next we'll explain where you can configure settings for different effects / scopes. Global Settings which Affect All Sites Global Settings for all sites are configured in the Global System App . It's usually on Zone 1 and App 1 . go to the Global System App using this checklist . for Global System-Settings just edit them here for Global Custom-Settings just edit the App-Settings of the global app Tip This stuff is fairly new, and in rare cases new global settings don't automatically propagate to the sites. If you experience this, just restart the system. As of now, this only affects new fields, so once a field has been available changes will propagate as expected. Site Settings which Affect an Entire Site These are configured in the Primary App of the site you want to configure. go to the Primary App of the Site using this checklist for Site System-Settings just edit them here for Site Custom-Settings just edit the App-Settings of this app Tip This stuff is fairly new, and in rare cases new site settings don't automatically propagate to the apps. If you experience this, just restart the system. As of now, this only affects new fields, so once a field has been available changes will propagate as expected. App Settings which Affect an Entire App These settings override previous settings but only for a specific App. Go to the the App Configuration using this checklist for App System-Settings just edit them here for App Custom-Settings aka App-Settings you can edit them here or configure fields etc. directly from this dialog. Thisis feature has existed long before the stack was invented. See App Settings . View Settings which Affect a specific View As of v12.04 Views are only meant to have Custom Settings. It is still possible to override SystemSettings just by creating a field which has the same name, but we don't recommend it. To create Custom View Settings, create a custom content-type in the Configuration scope and use it in the view. See View Settings (Advanced ‚ö†) . History Full Settings Stack introduced in 2sxc 12.04 Dropped SettingsCustom as a type in v13, as not needed any more because we changed how the site-level settings work Added AncestorCustom and AncestorSettings on v13 if the app inherits from an ancestor"
  },
  "basics/configuration/resources-system.html": {
    "href": "basics/configuration/resources-system.html",
    "title": "System Resources in 2sxc ‚ú® new! | 2sxc 13 / EAV 13",
    "keywords": "System Resources in 2sxc ‚ú® new! <!-- Data Highlights --> <!-- ADAM --> <!-- Server --> <!-- Prepare --> <!-- Data Source --> <!-- Optimzers --> <!-- Process / Awesomize --> <!-- Libraries --> <!-- data formats --> <!-- Browser --> <!-- Frameworks --> <!-- App show parts --> <!-- Interact parts --> <!-- Edit parts --> <!-- Edit UI parts --> <!-- SPA parts --> <!-- Custom highlight boxes - can be controlled by in-page CSS --> you are here (click to zoom) - discover the stack .context-box-summary .data-configuration { visibility: visible; } Note: The System Resources feature is new in 12.04 so only a few settings are predefined as of now. This will expand in future releases. Tip These are just the predefined resources. Remember you can create any other settings on your own Resources ContentType Predefined System Resources as of 2sxc 12.04 As of now there are none, the API was just ensured to already be consistent with Settings <!-- | Part | Key | Value in Default | Introduced | Comments | -------------------- | -------------------- | -------------------- | ------ | --- | GoogleMaps | InitialZoom | # `14` | v12.04 | Initial maps zoom level | GoogleMaps | ApiKey | $ `AIzaSyAKEFB...` | v12.04 | The API key used to show a Map | GoogleMaps | ShowApiKeyWarning | b `true` | v12.04 | Show a warning if it's still the default key, which isn't meant for live sites | GoogleMaps | MarkerIcon | $ (empty) | v12.04 | empty = google default üìç --> Conventions used in System Resources The built-in system settings are meant to carry hundreds of settings. To enable that, the structure is always as follows: Every topic - like Help will have an own configuration ContentType All the names of these will probably start with the emoji \"üåê\" so the ContentType will have a name like üåêHelp It should always have a field called SettingsIdentifier repeating the name like Help All of these fields should have an empty-state (like empty string, not-set-number) etc. ... Items and ... ItemIdentifier History Full Resources Stack introduced in 2sxc 12.04"
  },
  "basics/configuration/resources-stack.html": {
    "href": "basics/configuration/resources-stack.html",
    "title": "Resources Stack in 2sxc ‚ú® new! | 2sxc 13 / EAV 13",
    "keywords": "Resources Stack in 2sxc ‚ú® new! <!-- Data Highlights --> <!-- ADAM --> <!-- Server --> <!-- Prepare --> <!-- Data Source --> <!-- Optimzers --> <!-- Process / Awesomize --> <!-- Libraries --> <!-- data formats --> <!-- Browser --> <!-- Frameworks --> <!-- App show parts --> <!-- Interact parts --> <!-- Edit parts --> <!-- Edit UI parts --> <!-- SPA parts --> <!-- Custom highlight boxes - can be controlled by in-page CSS --> you are here (click to zoom) - discover the stack .context-box-summary .data-configuration { visibility: visible; } Resources come in 2 distinct flavors: Standardized Resources marked with üìã are edited in a content-type called ResourcesSystem with a predefined structure. These resources are meant to be used across tools and apps. Dynamic Resources marked with üí™ use content-types called App-Resources which you define. These resources can have any keys and values you want. The effect/reach of this depends on the level where you add it (global, site, app). The code using these will usually come from you, as these resources are not standardized. Resources are just like Settings The resources stack behaves just like the settings stack. So to keep things simple, we didn't repeat the documentation here. Please read about the Settings Stack to understand it. The only difference is The app-resources content-type is called App-Resources (this name is inconsistent for historical reason) the standard resources ContentType is called ResourcesSystem and ContentTypes for sub-configurations will always start with the emoji üåê. History Full Resources Stack introduced in 2sxc 12.04 Dropped ResourcesCustom as a type in v13, as not needed any more because we changed how the site-level settings work"
  },
  "api/dot-net/ToSic.Eav.LookUp.LookUpIn-1.html": {
    "href": "api/dot-net/ToSic.Eav.LookUp.LookUpIn-1.html",
    "title": "Class LookUpIn<T> | 2sxc 13 / EAV 13",
    "keywords": "Class LookUpIn<T> Inheritance System.Object LookUpBase LookUpIn<T> LookUpInEntity Implements ILookUp Inherited Members LookUpBase.Name LookUpBase.Get(String, String) LookUpBase.Get(String) LookUpBase.Format(Boolean) LookUpBase.Format(DateTime) Namespace : ToSic.Eav.LookUp Assembly : ToSic.Eav.Core.dll Syntax [PublicApi_Stable_ForUseInYourCode] public abstract class LookUpIn<T> : LookUpBase, ILookUp Type Parameters Name Description T Constructors | Improve this Doc View Source LookUpIn(T, String) Declaration protected LookUpIn(T data, string name = \"source without name\") Parameters Type Name Description T data System.String name Properties | Improve this Doc View Source Data Declaration public T Data { get; protected set; } Property Value Type Description T Implements ILookUp"
  },
  "api/dot-net/ToSic.Eav.Data.IDimension.html": {
    "href": "api/dot-net/ToSic.Eav.Data.IDimension.html",
    "title": "Interface IDimension | 2sxc 13 / EAV 13",
    "keywords": "Interface IDimension Represents a Dimension to assign values to. Dimensions are usually languages ( ILanguage ), but in future they could also be multi-dimensional, like values which are mapped to a language and to a specific edition, use case, etc. Namespace : ToSic.Eav.Data Assembly : ToSic.Eav.Core.dll Syntax [InternalApi_DoNotUse_MayChangeWithoutNotice(\"this is just fyi\")] public interface IDimension Properties | Improve this Doc View Source DimensionId Gets the internal DimensionId as it is stored in the DB. This is only used for scenarios where the dimensions are defined in relational data. Declaration int DimensionId { get; } Property Value Type Description System.Int32 | Improve this Doc View Source Key Gets the dimension Key. For languages it's usually values like en-US or de-DE Declaration string Key { get; } Property Value Type Description System.String | Improve this Doc View Source ReadOnly Gets whether Dimension is assigned read only. This affects the UI, so that the value cannot be edited in these dimensions. Declaration bool ReadOnly { get; } Property Value Type Description System.Boolean"
  },
  "api/dot-net/ToSic.Eav.Caching.ICacheKeyManager.html": {
    "href": "api/dot-net/ToSic.Eav.Caching.ICacheKeyManager.html",
    "title": "Interface ICacheKeyManager | 2sxc 13 / EAV 13",
    "keywords": "Interface ICacheKeyManager Generates cache-keys for certain objects and combines them with CacheKeys of parent-objects which this object relies on. Inherited Members ICacheKey.CachePartialKey ICacheKey.CacheFullKey Namespace : ToSic.Eav.Caching Assembly : ToSic.Eav.Core.dll Syntax [InternalApi_DoNotUse_MayChangeWithoutNotice(\"this is just fyi\")] public interface ICacheKeyManager : ICacheKey Properties | Improve this Doc View Source SubKeys Declaration string[] SubKeys { get; } Property Value Type Description System.String []"
  },
  "api/dot-net/ToSic.Eav.Apps.Assets.IFile.html": {
    "href": "api/dot-net/ToSic.Eav.Apps.Assets.IFile.html",
    "title": "Interface IFile | 2sxc 13 / EAV 13",
    "keywords": "Interface IFile Describes a file asset as provided by the underlying environment (like DNN) Inherited Members IAsset.Created IAsset.Id IAsset.ParentId IAsset.Modified IAsset.Name IAsset.Path IAsset.PhysicalPath Namespace : ToSic.Eav.Apps.Assets Assembly : ToSic.Eav.Apps.dll Syntax [PublicApi_Stable_ForUseInYourCode] public interface IFile : IAsset Properties | Improve this Doc View Source Extension The file extension of the real underlying file. Declaration string Extension { get; set; } Property Value Type Description System.String The extension, like \"pdf\" or \"jpg\" | Improve this Doc View Source Folder The folder of the file Declaration string Folder { get; set; } Property Value Type Description System.String The folder name | Improve this Doc View Source FolderId The folder ID of the file, if the underlying environment uses int IDs Declaration int FolderId { get; } Property Value Type Description System.Int32 an int with the id used by the environment to track this item | Improve this Doc View Source FullName The full file name of the original file Declaration string FullName { get; set; } Property Value Type Description System.String The full file name with extension. | Improve this Doc View Source Size The file size of the file, IF the underlying environment provides this. Declaration int Size { get; set; } Property Value Type Description System.Int32 the size in bytes"
  },
  "api/dot-net/ToSic.Eav.DataSources.Queries.QueryDefinition.html": {
    "href": "api/dot-net/ToSic.Eav.DataSources.Queries.QueryDefinition.html",
    "title": "Class QueryDefinition | 2sxc 13 / EAV 13",
    "keywords": "Class QueryDefinition This contains the structure / definition of a query, which was originally stored in an IEntity Inheritance System.Object EntityBasedType EntityBasedWithLog QueryDefinition Implements IEntityBasedType IEntityWrapper IHasDecorators < IEntity > IHasLog Inherited Members EntityBasedWithLog.Log EntityBasedType.Entity EntityBasedType.Decorators EntityBasedType.Title EntityBasedType.Id EntityBasedType.Guid EntityBasedType.Metadata EntityBasedType.Get<T>(String, T) Namespace : ToSic.Eav.DataSources.Queries Assembly : ToSic.Eav.DataSources.dll Syntax [InternalApi_DoNotUse_MayChangeWithoutNotice(\"this is just fyi\")] public class QueryDefinition : EntityBasedWithLog, IEntityBasedType, IEntityWrapper, IHasDecorators<IEntity>, IMultiWrapper<IEntity>, IHasLog Fields | Improve this Doc View Source AppId The appid inside which the query will run, not where it is stored! This can differ, because certain global queries (stored in the global app) will run in a specific app - for example to retrieve all ContentTypes of that app. Declaration public int AppId Field Value Type Description System.Int32 | Improve this Doc View Source ParamRegex Regex to detect key=value. Keys must always be the first thing optionally followed by a = and then anything till a newline. Anything that doesn't match will be ignored. Comments should start with a // Declaration public static Regex ParamRegex Field Value Type Description System.Text.RegularExpressions.Regex Properties | Improve this Doc View Source Connections Connections used in the query to map various DataSource Out-Streams to various other DataTarget In-Streams Declaration public IList<Connection> Connections { get; } Property Value Type Description System.Collections.Generic.IList < Connection > | Improve this Doc View Source Params The param-dictionary used for the LookUp. All keys will be available in the token [Params:key] Declaration public IDictionary<string, string> Params { get; } Property Value Type Description System.Collections.Generic.IDictionary < System.String , System.String > | Improve this Doc View Source ParamsLookUp The ILookUp for the params of this query - based on the Params. Declaration public ILookUp ParamsLookUp { get; } Property Value Type Description ILookUp Always returns a valid ILookup, even if no params found. | Improve this Doc View Source ParamsRaw The raw Params used in this query, as stored in the IEntity Declaration public string ParamsRaw { get; } Property Value Type Description System.String | Improve this Doc View Source Parts The parts of the query Declaration public List<QueryPartDefinition> Parts { get; } Property Value Type Description System.Collections.Generic.List < QueryPartDefinition > | Improve this Doc View Source TestParameters The test parameters as stored in the IEntity Declaration public string TestParameters { get; } Property Value Type Description System.String Methods | Improve this Doc View Source Reset() Will reset all the parameters so you can run the query again with different parameters. Declaration public void Reset() Implements IEntityBasedType IEntityWrapper IHasDecorators<T> IHasLog"
  },
  "api/dot-net/ToSic.Eav.DataSources.IDataSourceConfiguration.html": {
    "href": "api/dot-net/ToSic.Eav.DataSources.IDataSourceConfiguration.html",
    "title": "Interface IDataSourceConfiguration | 2sxc 13 / EAV 13",
    "keywords": "Interface IDataSourceConfiguration This helps a data source get configured. It manages all the properties which the data source will want to look up, as well as the LookUp engine which will perform the token resolution Namespace : ToSic.Eav.DataSources Assembly : ToSic.Eav.DataSources.dll Syntax [PublicApi_Stable_ForUseInYourCode] public interface IDataSourceConfiguration Properties | Improve this Doc View Source IsParsed Tell us if the values have already been parsed or not. Ideal to check / avoid multiple calls to parse, which would just slow the system down. Declaration bool IsParsed { get; } Property Value Type Description System.Boolean | Improve this Doc View Source Item[String] Quick read / add for values which the DataSource will use. Declaration string this[string key] { get; set; } Parameters Type Name Description System.String key The property name/key, like SortOrder or similar Property Value Type Description System.String | Improve this Doc View Source LookUpEngine The internal look up engine which manages value sources and will resolve the tokens Declaration ILookUpEngine LookUpEngine { get; } Property Value Type Description ILookUpEngine | Improve this Doc View Source Values The values (and keys) used in the data source which owns this Configuration Declaration IDictionary<string, string> Values { get; } Property Value Type Description System.Collections.Generic.IDictionary < System.String , System.String > Methods | Improve this Doc View Source Parse() Parse the values and change them so placeholders in the values are now the resolved value. This can only be called once - then the placeholder are gone. In scenarios where multiple parses are required, use the Parse(IDictionary) overload. Declaration void Parse() | Improve this Doc View Source Parse(IDictionary<String, String>) This will parse a dictionary of values and return the result. It's used to resolve the values list without actually changing the values on the configuration object, in scenarios where multiple parses will be required. Declaration IDictionary<string, string> Parse(IDictionary<string, string> values) Parameters Type Name Description System.Collections.Generic.IDictionary < System.String , System.String > values Returns Type Description System.Collections.Generic.IDictionary < System.String , System.String >"
  },
  "api/dot-net/ToSic.Eav.DataSources.Caching.ICanPurgeListCache.html": {
    "href": "api/dot-net/ToSic.Eav.DataSources.Caching.ICanPurgeListCache.html",
    "title": "Interface ICanPurgeListCache | 2sxc 13 / EAV 13",
    "keywords": "Interface ICanPurgeListCache Marks objects which can purge it's own cache, and also force upstream caches to be purged. This helps in scenarios where the code knows that the cache should be cleaned, but needs to rely on the whole tree to be cleaned. Without this, a cache would be cleared but the next-upstream would still be cached, so the next access would still return the same results. Namespace : ToSic.Eav.DataSources.Caching Assembly : ToSic.Eav.DataSources.dll Syntax [InternalApi_DoNotUse_MayChangeWithoutNotice(\"this is just fyi\")] public interface ICanPurgeListCache Methods | Improve this Doc View Source PurgeList(Boolean) Remove the current data from the cache, optionally also purge everything upstream Declaration void PurgeList(bool cascade = false) Parameters Type Name Description System.Boolean cascade true to purge all sources as well, default is false"
  },
  "api/dot-net/ToSic.Sxc.LookUp.html": {
    "href": "api/dot-net/ToSic.Sxc.LookUp.html",
    "title": "Namespace ToSic.Sxc.LookUp | 2sxc 13 / EAV 13",
    "keywords": "Namespace ToSic.Sxc.LookUp This extends the abilities of ToSic.Eav.LookUp with more look-up objects for things that are either web-specific (like request objects) or DynamicData specific. Classes LookUpForTokenTemplate LookUp for creating token based templates. In addition to retrieving values, it also resolves special tokens like repeater:index repeater:isfirst etc."
  },
  "api/dot-net/ToSic.Sxc.LookUp.LookUpForTokenTemplate.html": {
    "href": "api/dot-net/ToSic.Sxc.LookUp.LookUpForTokenTemplate.html",
    "title": "Class LookUpForTokenTemplate | 2sxc 13 / EAV 13",
    "keywords": "Class LookUpForTokenTemplate LookUp for creating token based templates. In addition to retrieving values, it also resolves special tokens like repeater:index repeater:isfirst etc. Inheritance System.Object LookUpForTokenTemplate Implements ILookUp Namespace : ToSic.Sxc.LookUp Assembly : ToSic.Sxc.dll Syntax [InternalApi_DoNotUse_MayChangeWithoutNotice(\"this is just fyi\")] public class LookUpForTokenTemplate : ILookUp Remarks Only use this for Token templates, do not use for normal lookups which end up in data-sources. The reason is that this tries to respect culture formatting, which will cause trouble (numbers with comma etc.) when trying to use in other systems. Fields | Improve this Doc View Source KeyAlternator2 Declaration public const string KeyAlternator2 = \"alternator2\" Field Value Type Description System.String | Improve this Doc View Source KeyAlternator3 Declaration public const string KeyAlternator3 = \"alternator3\" Field Value Type Description System.String | Improve this Doc View Source KeyAlternator4 Declaration public const string KeyAlternator4 = \"alternator4\" Field Value Type Description System.String | Improve this Doc View Source KeyAlternator5 Declaration public const string KeyAlternator5 = \"alternator5\" Field Value Type Description System.String | Improve this Doc View Source KeyCount Declaration public const string KeyCount = \"count\" Field Value Type Description System.String | Improve this Doc View Source KeyIndex Declaration public const string KeyIndex = \"index\" Field Value Type Description System.String | Improve this Doc View Source KeyIndex1 Declaration public const string KeyIndex1 = \"index1\" Field Value Type Description System.String | Improve this Doc View Source KeyIsFirst Declaration public const string KeyIsFirst = \"isfirst\" Field Value Type Description System.String | Improve this Doc View Source KeyIsLast Declaration public const string KeyIsLast = \"islast\" Field Value Type Description System.String | Improve this Doc View Source TokenRepeater Declaration public const string TokenRepeater = \"Repeater\" Field Value Type Description System.String Properties | Improve this Doc View Source Name Declaration public string Name { get; } Property Value Type Description System.String Methods | Improve this Doc View Source Get(String) Gets a value by Name/key, will simply return the string or an empty string, in rare cases a null-value. Declaration public virtual string Get(string key) Parameters Type Name Description System.String key Returns Type Description System.String The resolved value, or an empty string if not found. Note that it could also resolve to an empty string if found - use Has to check for that case. Implements ILookUp"
  },
  "api/dot-net/ToSic.Sxc.Dnn.Code.IDnnDynamicCodeAdditions.html": {
    "href": "api/dot-net/ToSic.Sxc.Dnn.Code.IDnnDynamicCodeAdditions.html",
    "title": "Interface IDnnDynamicCodeAdditions | 2sxc 13 / EAV 13",
    "keywords": "Interface IDnnDynamicCodeAdditions This interface extends the IAppAndDataHelpers with the DNN Context. It's important, because if 2sxc also runs on other CMS platforms, then the Dnn Context won't be available, so it's in a separate interface. Namespace : ToSic.Sxc.Dnn.Code Assembly : ToSic.Sxc.Dnn.Core.dll Syntax [PublicApi_Stable_ForUseInYourCode] public interface IDnnDynamicCodeAdditions Properties | Improve this Doc View Source Dnn The DNN context. Declaration IDnnContext Dnn { get; } Property Value Type Description IDnnContext The DNN context."
  },
  "api/dot-net/ToSic.Sxc.Dnn.Code.IDnnDynamicCode.html": {
    "href": "api/dot-net/ToSic.Sxc.Dnn.Code.IDnnDynamicCode.html",
    "title": "Interface IDnnDynamicCode | 2sxc 13 / EAV 13",
    "keywords": "Interface IDnnDynamicCode This interface extends the IAppAndDataHelpers with the DNN Context. It's important, because if 2sxc also runs on other CMS platforms, then the Dnn Context won't be available, so it's in a separate interface. Inherited Members IDynamicCode.GetService<TService>() IDynamicCode.App IDynamicCode.Data IDynamicCode.Content IDynamicCode.Header IDynamicCode.AsAdam(IDynamicEntity, String) IDynamicCode.AsAdam(IEntity, String) IDynamicCode.Link IDynamicCode.Edit IDynamicCode.AsDynamic(String, String) IDynamicCode.AsDynamic(IEntity) IDynamicCode.AsDynamic(Object) IDynamicCode.AsEntity(Object) IDynamicCode.AsList(Object) IDynamicCode.CreateSource<T>(IDataStream) IDynamicCode.CreateSource<T>(IDataSource, ILookUpEngine) IDynamicCode.CmsContext ICreateInstance.CreateInstancePath ICreateInstance.CreateInstance(String, String, String, String, Boolean) ICompatibilityLevel.CompatibilityLevel IHasLog.Log IDnnDynamicCodeAdditions.Dnn Namespace : ToSic.Sxc.Dnn.Code Assembly : ToSic.Sxc.Dnn.Core.dll Syntax [PublicApi_Stable_ForUseInYourCode] public interface IDnnDynamicCode : IDynamicCode, ICreateInstance, ICompatibilityLevel, IHasLog, IDnnDynamicCodeAdditions"
  },
  "api/dot-net/ToSic.Eav.Metadata.IHasMetadata.html": {
    "href": "api/dot-net/ToSic.Eav.Metadata.IHasMetadata.html",
    "title": "Interface IHasMetadata | 2sxc 13 / EAV 13",
    "keywords": "Interface IHasMetadata Anything with this interface has a property Metadata which can give us more information about that object. Namespace : ToSic.Eav.Metadata Assembly : ToSic.Eav.Core.dll Syntax [PublicApi_Stable_ForUseInYourCode] public interface IHasMetadata Properties | Improve this Doc View Source Metadata Additional information, specs etc. about this thing which has metadata Declaration IMetadataOf Metadata { get; } Property Value Type Description IMetadataOf"
  },
  "api/dot-net/ToSic.Sxc.Services.IMailService.html": {
    "href": "api/dot-net/ToSic.Sxc.Services.IMailService.html",
    "title": "Interface IMailService | 2sxc 13 / EAV 13",
    "keywords": "Interface IMailService Service to send mail messages cross-platform. Get this service in Razor or WebApi using GetService Namespace : ToSic.Sxc.Services Assembly : ToSic.Sxc.dll Syntax [PublicApi] public interface IMailService : INeedsDynamicCodeRoot Remarks New in 2sxc 12.05 Methods | Improve this Doc View Source Create(String, Object, Object, Object, Object, Object, String, String, Nullable<Boolean>, Encoding, Object) Quickly create a MailMessage object for further modification and then sending using Send(MailMessage) If you don't want to modify the resulting object, skip this and use the direct-send method. Declaration MailMessage Create(string noParamOrder = \"Rule: All params must be named (https://r.2sxc.org/named-params)\", object from = null, object to = null, object cc = null, object bcc = null, object replyTo = null, string subject = null, string body = null, bool? isHtml = default(bool? ), Encoding encoding = null, object attachments = null) Parameters Type Name Description System.String noParamOrder see Convention: Named Parameters System.Object from sender e-mail address in one of the following formats An e-mail string like &quot;info@somwhere.com\" An e-mail with name and address like \"iJungleboy &lt;ijungleboy@2sxc.org>\" A single System.Net.Mail.MailAddress object System.Object to Main recipient(s) of the mail in one of the following formats all the formats as available in from a CSV of such addresses like &quot;info@a.com, info@b.com\" An Array/List/IEnumerable of such strings An Array/List/IEnumerable of System.Net.Mail.MailAddress objects System.Object cc CC recipient(s) of the mail, in the same format as to System.Object bcc BCC recipient(s) of the mail, in the same format as to System.Object replyTo ReplyTo address(es) in the same format as to System.String subject The main subject System.String body The body / contents of the e-mail - can be text or HTML System.Nullable < System.Boolean > isHtml Set the body to be HTML - if not set, will auto-detect System.Text.Encoding encoding Encoding of subject and body - if not set, will default to UTF8. If you need different encodings on subject and body, set it on the resulting object. System.Object attachments One or more attachments to include. Could be any of the following A System.Net.Mail.Attachment object An IFile or an IFile object An Array/IEnumerable of these Returns Type Description System.Net.Mail.MailMessage The newly created MailMessage object | Improve this Doc View Source Send(MailMessage) Send a .net MailMessage object using the settings configured in Dnn or Oqtane. Declaration void Send(MailMessage message) Parameters Type Name Description System.Net.Mail.MailMessage message A prepared .net MailMessage object | Improve this Doc View Source Send(String, Object, Object, Object, Object, Object, String, String, Nullable<Boolean>, Encoding, Object) Quickly create and send an E-Mail. Declaration void Send(string noParamOrder = \"Rule: All params must be named (https://r.2sxc.org/named-params)\", object from = null, object to = null, object cc = null, object bcc = null, object replyTo = null, string subject = null, string body = null, bool? isHtml = default(bool? ), Encoding encoding = null, object attachments = null) Parameters Type Name Description System.String noParamOrder see Convention: Named Parameters System.Object from sender e-mail address in one of the following formats An e-mail string like &quot;info@somwhere.com\" An e-mail with name and address like \"iJungleboy &lt;ijungleboy@2sxc.org>\" A single System.Net.Mail.MailAddress object System.Object to Main recipient(s) of the mail in one of the following formats all the formats as available in from a CSV of such addresses like &quot;info@a.com, info@b.com\" An Array/List/IEnumerable of such strings An Array/List/IEnumerable of System.Net.Mail.MailAddress objects System.Object cc CC recipient(s) of the mail, in the same format as to System.Object bcc BCC recipient(s) of the mail, in the same format as to System.Object replyTo ReplyTo address(es) in the same format as to System.String subject The main subject System.String body The body / contents of the e-mail - can be text or HTML System.Nullable < System.Boolean > isHtml Set the body to be HTML - if not set, will auto-detect System.Text.Encoding encoding Encoding of subject and body - if not set, will default to UTF8. If you need different encodings on subject and body, set it on the resulting object. System.Object attachments One or more attachments to include. Could be any of the following A System.Net.Mail.Attachment object An IFile or an IFile object An Array/IEnumerable of these"
  },
  "basics/metadata/index.html": {
    "href": "basics/metadata/index.html",
    "title": "Metadata - (advanced ‚ö†) | 2sxc 13 / EAV 13",
    "keywords": "Metadata - (advanced ‚ö†) <!-- Data Highlights --> <!-- ADAM --> <!-- Server --> <!-- Prepare --> <!-- Data Source --> <!-- Optimzers --> <!-- Process / Awesomize --> <!-- Libraries --> <!-- data formats --> <!-- Browser --> <!-- Frameworks --> <!-- App show parts --> <!-- Interact parts --> <!-- Edit parts --> <!-- Edit UI parts --> <!-- SPA parts --> <!-- Custom highlight boxes - can be controlled by in-page CSS --> you are here (click to zoom) - discover the stack .context-box-summary .data-all { visibility: visible; } Metadata is Data which describes or adds information to other data . In 2sxc/EAV we talk about Metadata being Data which has a Target that it applies to. The 2sxc-EAV system has had extensive Metadata functionality built in since v2 but we haven't talked about it much yet. Example: File Metadata Imagine you have a file system containing images and the file system has standard functionality to store data like file name , path , file size and created / modified . Sometimes we need more. Let's assume you wanted to show a gallery with images and you want to manage additional information like Tags and a short Description . In this scenario the File is the Target and the additional Tags/Description data is the Metadata . Example: User Metadata Let's say you have a system which stores basic user data like UserId , UserName and Password and you want to manage additional information like Biography . IF the platform (Dnn) already offers features to manage such additional info, it is not Metadata . But if the information is added on top like with a third-party system (like 2sxc) then this is Metadata. How 2sxc/EAV uses Metadata Most internal configuration of 2sxc works as Metadata. Fields on a Content-Type is stored as just the technical Name (which is used in code). Any additional information for the Edit-UI like description, default-value, etc. is stored as Metadata. Content-Types just have some internal IDs and names. Any additional information like description, icon, help-text etc. is stored as Metadata. App Configuration is treated as Metadata and most of the stored values are available on the App object Various Apps like the Fancybox Gallery App allow the editor to add more information to uploaded images How 2sxc Metadata Works Every Entity in 2sxc can be assigned to any other Target data. This happens through a Target Identifier which consists of 2 parts: The Target ID which can be a number , guid or string The Target Type which is important to ensure that an ID like 5027 is pointing to the person 5027, not the page 5027 Noteworthy to know most entities don't have Target Identifiers so most of the data is not Metadata assigning an entity to a target can only be done when the Entity is created and not later on In the data-lists of the Admin-UI you can see if an item is Metadata - it will have a tag-icon in the ID column Discover More Create Metadata - (advanced ‚ö†) Read / Access Metadata - (advanced ‚ö†) Metadata Target Types ToSic.Eav.Metadata Demo App and further links Fancybox Gallery App History Introduced in 2sxc v2 Continuously improved in 2sxc 7, 8, 10 and 11"
  },
  "basics/metadata/for.html": {
    "href": "basics/metadata/for.html",
    "title": "Metadata For Something - (advanced ‚ö†) | 2sxc 13 / EAV 13",
    "keywords": "Metadata For Something - (advanced ‚ö†) <!-- Data Highlights --> <!-- ADAM --> <!-- Server --> <!-- Prepare --> <!-- Data Source --> <!-- Optimzers --> <!-- Process / Awesomize --> <!-- Libraries --> <!-- data formats --> <!-- Browser --> <!-- Frameworks --> <!-- App show parts --> <!-- Interact parts --> <!-- Edit parts --> <!-- Edit UI parts --> <!-- SPA parts --> <!-- Custom highlight boxes - can be controlled by in-page CSS --> you are here (click to zoom) - discover the stack .context-box-summary .data-all { visibility: visible; } Metadata is Data which describes or adds information to other data . When an Entity/Item is for something else (we call it the Owner ) then we call this item as being Metadata For the Owner . To be Metadata For something, an Entity must have Target information. Every Entity can be Metadata For something else An item can only be Metadata For one thing Tip When looking at Metadata from the Owner object, we call it Metadata Of the Owner . When looking at it from the Metadata-items point of view, they are Metadata-For the Owner . The MetadataFor Property To find out if an object is Metadata for something, check the .MetadataFor property which contains the Target Information . You can read about the Target APIs here. History Introduced in 2sxc v2 Continuously improved in 2sxc 7, 8, 10 and 11"
  },
  "js-code/angular/dnn-sxc-angular/context.html": {
    "href": "js-code/angular/dnn-sxc-angular/context.html",
    "title": "Context (dnn-sxc-angular) | 2sxc 13 / EAV 13",
    "keywords": "Context (dnn-sxc-angular) <!-- Data Highlights --> <!-- ADAM --> <!-- Server --> <!-- Prepare --> <!-- Data Source --> <!-- Optimzers --> <!-- Process / Awesomize --> <!-- Libraries --> <!-- data formats --> <!-- Browser --> <!-- Frameworks --> <!-- App show parts --> <!-- Interact parts --> <!-- Edit parts --> <!-- Edit UI parts --> <!-- SPA parts --> <!-- Custom highlight boxes - can be controlled by in-page CSS --> you are here (click to zoom) - discover the stack .context-box-summary .spa-2sxc-js { visibility: visible; } dnn-sxc-angular can give you a lot of Context Information like this: what Page the app is on what Module it's on the $2sxc object of the page the sxc object of the current module ...and more Example We'll explain how to get one or many items based on the Template App . Check out the team.service.ts - you'll see some code like this: @Injectable({ /* ... */ }) export class TeamService { private selectedBu$ = new BehaviorSubject<string>(''); /** This will contain the persons returned from the API */ team$: Observable<Person[]>; constructor(data: Data, context: Context) { // also get guid if in edit mode const withGuid = context.sxc?.isEditMode() ? '&includeGuid=true': ''; this.team$ = this.selectedBu$.pipe(switchMap(bu => data.query$<Person[]>(`BusinessUnitTeam?bu=${bu}${withGuid}`))); } } In the above example you'll see these lines: const withGuid = context.sxc?.isEditMode() ? '&includeGuid=true': ''; Here we're asking the context object for the current sxc instance (of this module) to find out if we're in edit-mode. In this example it will then affect the Query to include more data for the in-page editing experience. More APIs The Context has more to offer - just check out the intellisense in VS Code."
  },
  "js-code/angular/template-app.html": {
    "href": "js-code/angular/template-app.html",
    "title": "Angular Template App for Dnn / 2sxc | 2sxc 13 / EAV 13",
    "keywords": "Angular Template App for Dnn / 2sxc <!-- Data Highlights --> <!-- ADAM --> <!-- Server --> <!-- Prepare --> <!-- Data Source --> <!-- Optimzers --> <!-- Process / Awesomize --> <!-- Libraries --> <!-- data formats --> <!-- Browser --> <!-- Frameworks --> <!-- App show parts --> <!-- Interact parts --> <!-- Edit parts --> <!-- Edit UI parts --> <!-- SPA parts --> <!-- Custom highlight boxes - can be controlled by in-page CSS --> you are here (click to zoom) - discover the stack .context-box-summary .spa-all { visibility: visible; } To quickly get started we've created the Angular 11 Template App . It demonstrates how to... Integrate Angular in Dnn to run perfectly while using Dnn and 2sxc WebAPI endpoints during development with hot-reloading so you can see the real solution in Dnn while working Integrate Dnn into Angular So that all http-calls have all the necessary security headers So that hitting enter on an input-field doesn't reload the page Integrate 2sxc into Angular So it's easy to access Data like Content, Queries and custom WebAPI controllers So you can use CMS features like editing content directly from Angular Introduction Video Next Steps Install and try the Angular 11 Template App Maybe browse the code here Angular 11 Template App Github Repo Learn about the runtime integration or the development integration History First version for Angular 4 created in 2017 Enhanced for Angular 6 in 2019 Enhanced for Angular 8 in 2020 Enhanced for Angular 11 and dnn-sxc-angular 11 in February 2021"
  },
  "js-code/angular/integrate-angular-runtime.html": {
    "href": "js-code/angular/integrate-angular-runtime.html",
    "title": "Integrate Angular for Runtime in 2sxc / Dnn | 2sxc 13 / EAV 13",
    "keywords": "Integrate Angular for Runtime in 2sxc / Dnn <!-- Data Highlights --> <!-- ADAM --> <!-- Server --> <!-- Prepare --> <!-- Data Source --> <!-- Optimzers --> <!-- Process / Awesomize --> <!-- Libraries --> <!-- data formats --> <!-- Browser --> <!-- Frameworks --> <!-- App show parts --> <!-- Interact parts --> <!-- Edit parts --> <!-- Edit UI parts --> <!-- SPA parts --> <!-- Custom highlight boxes - can be controlled by in-page CSS --> you are here (click to zoom) - discover the stack .context-box-summary .spa-all { visibility: visible; } This explains how to best integrate Angular in Dnn. Note that you can find a working demo of this in the Template Angular App . Goals of the Runtime Integration The Angular App can be compiled using best-practices incl. partial loading and hashed files The Angular solution can be easily distributed to another Dnn/2sxc as a 2sxc App package We can run multiple editions of the same app, like a live and a staging edition for internal review The final page has the app tag and all the script/css resources as the Angular compiler generated them Changes to the Angular App are automatically included without manual changes Implementation In the Template App the compiled Angular SPA is in [app-root]/live/dist/ng-app/ . The way it's integrated in the template app is that the main file _AngularApp.cshtml has some code like this: @inherits Custom.Hybrid.Razor12 @using ToSic.Razor.Blade; @{ // ... // Add <base> tag using RazorBlade - Angular needs this so that links changing dialogs (routes) work properly HtmlPage.AddBase((Link.Base())); // ... // Create helper to integrate angular best-practice var ngHelpers = CreateInstance(\"./shared/_Angular.cshtml\"); // ... @Html.Raw(ngHelpers.ImportAngularHtml(editions.CurrentEdition)); } We've removed some of the code here for simplicity, but the important parts are Add <base> header to the page for Angular Routing to work properly ImportAngularHtml which will scan the index.html which Angular creates, extract all the important parts and add them to the page Note that there is a bit more magic happening to ensure we can run multiple editions ( live , staging , ...). To see the full source code, get the Angular 11 Template App or browse it here Angular 11 Template App Github Repo History First version for Angular 4 created in 2017 Enhanced for Angular 6 in 2019 Enhanced for Angular 8 in 2020 Enhanced for Angular 11 and dnn-sxc-angular 11 in February 2021"
  },
  "js-code/angular/integrate-angular-development.html": {
    "href": "js-code/angular/integrate-angular-development.html",
    "title": "Integrate Angular for Runtime in 2sxc / Dnn | 2sxc 13 / EAV 13",
    "keywords": "Integrate Angular for Runtime in 2sxc / Dnn <!-- Data Highlights --> <!-- ADAM --> <!-- Server --> <!-- Prepare --> <!-- Data Source --> <!-- Optimzers --> <!-- Process / Awesomize --> <!-- Libraries --> <!-- data formats --> <!-- Browser --> <!-- Frameworks --> <!-- App show parts --> <!-- Interact parts --> <!-- Edit parts --> <!-- Edit UI parts --> <!-- SPA parts --> <!-- Custom highlight boxes - can be controlled by in-page CSS --> you are here (click to zoom) - discover the stack .context-box-summary .spa-all { visibility: visible; } This explains how to best integrate Angular development in Dnn so you can enjoy hot-reloading while developing, and still use Dnn/2sxc Endpoints at the same time. Note that you can find a working demo of this in the Template Angular App . Goals of the Runtime Integration The Angular App can be developed using best-practices incl. partial loading and hashed files We can see the dev-build in Dnn in real-time The dev-build can access Dnn endpoints as if it were running in production Hot-reload works, so saving files automatically reloads the Dnn page Implementation The Template App is installed in Dnn and we have the full copy of it on our local dev environment. Dev-server will run on localhost:4200 . The way it's integrated in the template app is that the main file _AngularApp.cshtml has some code like this: @inherits Custom.Hybrid.Razor12 @using ToSic.Razor.Blade; @{ // ... // Add <base> tag using RazorBlade - Angular needs this so that links changing dialogs (routes) work properly HtmlPage.AddBase((Link.Base())); // ... // Create helper to integrate angular best-practice var ngHelpers = CreateInstance(\"./shared/_Angular.cshtml\"); // ... @ngHelpers.LoadFromNgServe() // ... } We've removed some of the code here for simplicity, but the important parts are Add <base> header to the page for Angular Routing to work properly LoadFromNgServe will load the standard Angular files from localhost:4200 To see the full source code, get the Angular 11 Template App or browse it here Angular 11 Template App Github Repo History First version for Angular 4 created in 2017 Enhanced for Angular 6 in 2019 Enhanced for Angular 8 in 2020 Enhanced for Angular 11 and dnn-sxc-angular 11 in February 2021"
  },
  "js-code/2sxc-api/sxc.manage.html": {
    "href": "js-code/2sxc-api/sxc.manage.html",
    "title": "| 2sxc 13 / EAV 13",
    "keywords": "Moved to Manage Everything With the manage Instance"
  },
  "js-code/2sxc-api/sxc.data.html": {
    "href": "js-code/2sxc-api/sxc.data.html",
    "title": "| 2sxc 13 / EAV 13",
    "keywords": "Moved to Data Services of the Sxc Instance"
  },
  "js-code/2sxc-api/index.html": {
    "href": "js-code/2sxc-api/index.html",
    "title": "JavaScript / HTML API Documentation for Dnn / 2sxc | 2sxc 13 / EAV 13",
    "keywords": "JavaScript / HTML API Documentation for Dnn / 2sxc <!-- Data Highlights --> <!-- ADAM --> <!-- Server --> <!-- Prepare --> <!-- Data Source --> <!-- Optimzers --> <!-- Process / Awesomize --> <!-- Libraries --> <!-- data formats --> <!-- Browser --> <!-- Frameworks --> <!-- App show parts --> <!-- Interact parts --> <!-- Edit parts --> <!-- Edit UI parts --> <!-- SPA parts --> <!-- Custom highlight boxes - can be controlled by in-page CSS --> you are here (click to zoom) - discover the stack .context-box-summary .interact-2sxc, .context-box-summary .edit-custom { visibility: visible; } You can create awesome solutions, customizing the edit-experience and working with 2sxc-data in your javascript. The Core JavaScript Helper Objects $2sxc Manager which is the page-scope manager for everything Sxc Instance with is the module-specific controller (TODO ca. 70% documented) The Editing Experience Overview to Editing Content Customize the edit experience (buttons, toolbars...) with the manage controller Toolbars, Buttons and Commands In-page edit toolbars for html or javascript with settings internals of a command (with full list) , of buttons and creating custom buttons The quickE (Quick Edit) experience customizing the quickE (quick edit) experience Using 2sxc with Popular JS Libraries Angular / dnn-sxc-angular"
  },
  "js-code/2sxc-api/2sxc.html": {
    "href": "js-code/2sxc-api/2sxc.html",
    "title": "| 2sxc 13 / EAV 13",
    "keywords": "Moved to The $2sxc Global Object"
  },
  "js-code/2sxc-api/2sxc.http.html": {
    "href": "js-code/2sxc-api/2sxc.http.html",
    "title": "| 2sxc 13 / EAV 13",
    "keywords": "Moved to The $2sxc.http API"
  },
  "basics/cms/content-blocks/content-blocks-in-dnn.html": {
    "href": "basics/cms/content-blocks/content-blocks-in-dnn.html",
    "title": "2sxc Content in Dnn | 2sxc 13 / EAV 13",
    "keywords": "2sxc Content in Dnn The vision of 2sxc is to be cross-platform, so we hope one day it will also run on NopCommerce and other systems. This is how it's integrated into Dnn. What Dnn References to Portal to ZoneId Mapping The EAV has a virtual container called a Zone which is similar to a Portal in Dnn. The IDs will not match though, so each Portal has a setting called ToSIC_SexyContent_ZoneID which contains the ZoneId for that portal. When 2sxc is used the first time on a portal, it will detect a missing ZoneId, which triggers zone creation and sets this value. Module-Installation to App-Installation Mapping A Dnn Module installation corresponds to an App installation. Internally there is no mapping, as it is not necessary. There is an important difference though: in Dnn, each installed Module is installed at the System level , so installed Modules are available on all Portals. On the other hand, Apps are installed at the Zone (Portal) level , so each app is only available on that portal. Customizations to the app also only affect that portal, and each Portal could have the same App installed in different versions. Note Technically there are a few ways to share Apps, their data, templates etc. across Portals, but these are fairly advanced scenarios. Module-On-Page to ContentBlock Mapping In Dnn each modules has Module Settings to store configuration. 2sxc stores these two pieces of information in the Module Settings: App ID - what app is being shown here Content Block ID - the GUID of the Content Block Entity containing the rest of the configuration Understanding how this ties in helps you make better decisions. Make sure you also read Content - Data made Useful Basic Setup: Content is assigned to the module This is the most common setup - and used in the Content module as well as in many App modules, which rely on the author to manually create content for this specific module. It's not usually used in data-oriented modules like news, blogs, etc. Here is how it's mapped: Also Read about Content Data Model Best also read about Content - Data made Useful in general. Blog about the internals of modules and content History Introduced in 2sxc 6, previously it was handled a bit differently 2sxc 11.02 added a feature to see where views are in use"
  },
  "basics/cms/adam/index.html": {
    "href": "basics/cms/adam/index.html",
    "title": "ADAM - Automatic Digital Asset Management | 2sxc 13 / EAV 13",
    "keywords": "ADAM - Automatic Digital Asset Management <!-- Data Highlights --> <!-- ADAM --> <!-- Server --> <!-- Prepare --> <!-- Data Source --> <!-- Optimzers --> <!-- Process / Awesomize --> <!-- Libraries --> <!-- data formats --> <!-- Browser --> <!-- Frameworks --> <!-- App show parts --> <!-- Interact parts --> <!-- Edit parts --> <!-- Edit UI parts --> <!-- SPA parts --> <!-- Custom highlight boxes - can be controlled by in-page CSS --> you are here (click to zoom) - discover the stack .context-box-summary .adam { visibility: visible; } In a CMS environment, images and PDFs usually belong to a content-item. The user shouldn't have to worry about saving it in the right place. Ideally it's only used there, and when the content becomes obsolete, so do the assets that belong to it. Tip This is what ADAM is all about. It allows editors to just add images and files. ADAM will take these and magically store it somewhere so the user doesn't have to worry about folders and naming. Warning Since ADAM does everything behind the scenes, it's recommended that users don't try to link to files of another content-item, because that would defeat the purpose. It would also not allow any clean-up in future, because you wouldn't know if the asset was re-used. How ADAM works Internally ADAM creates a folder for each Entity (Content-Item) using the GUID of that item. It also creates a sub-folder for each field, so that a logo.png used in the Logo-field is separate from a my-case-study.pdf used in the CaseStudy-field. The final folder structure looks like this [Content-Root]/adam/[App-Folder-Name]/[Compact-Entity-Guid]/[Field-Name]/ How to Use ADAM is a standard part of 2sxc, it's automatically in use everywhere. Any link/file or wysiwyg field support drag-and-drop and will automatically store the file in the right place. Security Concerns ADAM uses the Dnn file-numbering system by default, and keeps a reference to file:27 in the field linking such a file. In rare situations you may have many untrusted editors, where you want to prevent them asking the API for file:1 , file:2 , file:3 etc. There is an advanced switch to only allow resolving the file number if it's really part of the current item. Contact 2sxc for support on this. Also Read AsAdam(...) Command ToSic.Sxc.Adam To access ADAM files/links in a RazorTemplate, check out AsAdam(...) in the RazorComponent and ApiController Platform Differences Dnn ‚ò¢Ô∏è & Oqtane ü©∏ ADAM Content-Root Folder In Dnn ‚ò¢Ô∏è the adam root is: [Website-Root]\\Portals\\[site-id]\\adam\\ In Oqtane ü©∏ the adam root is: [Website-Root]\\Content\\Tenants\\[Tenant-Id]\\Sites\\[Site-Id]\\adam\\ Adam File URLs Dnn ‚ò¢Ô∏è urls look like this: [Domain]/Portals/[Site-Id]/adam/[App-Folder-Name]/[Short-Guid]/[Field-Name]/[Optional-Subfolders]/FileName.Ext Oqtane ü©∏ urls will probably look like this: [Domain]/adam/[App-Folder-Name]/[Short-Guid]/[Field-Name]/[Optional-Subfolders]/FileName.Ext History General Tokens introduced in 2sxc 8.0 Added extra security switch in 2sxc 9.32"
  },
  "basics/cms/index.html": {
    "href": "basics/cms/index.html",
    "title": "Content Management and Data Editing | 2sxc 13 / EAV 13",
    "keywords": "Content Management and Data Editing Content management and editing data are core features of 2sxc. There are loads of features and functionalities you may want to discover, like: Basic content management Multi-Language content management Data management Permissions Page-Publishing Workflow - when changes are first in draft mode, till someone else publishes all the changes on the page Inner Content (placing content-in-content), like placing a gallery inside a blog post In-Page CMS Features Toolbars and Toolbar customizations Hide advanced features for normal editors Quick-Edit features - this is the small floating toolbar to add modules to a page without needing the clunky edit-mode"
  },
  "net-code/dynamic-code/objects/link.image.html": {
    "href": "net-code/dynamic-code/objects/link.image.html",
    "title": "Link.Image(...) / Method in Dynamic Code ‚ú® new! | 2sxc 13 / EAV 13",
    "keywords": "Link.Image(...) / @Link.Image Method in Dynamic Code ‚ú® new! Linking images - especially images which should be automatically resized - can be tricky. This is where Link.Image(...) helps. Simple Examples <!-- simple example --> <img src='@Link.Image(Content.MainPicture)'> <!-- simple example with resize --> <img src='@Link.Image(url: \"test.jpg\", width: 250, height: 700)'> <!-- simple example with resize and custom quality --> <img src='@Link.Image(url: \"test.jpg\", width: 250, height: 700, quality: 75.2)'> Using Preconfigured Image Sizes The Image method can also use predefined image configuration. This uses the new Settings System . <!-- Resize an image to the default of content --> <img src='@Link.Image(url: \"test.jpg\", settings: Settings.Images.Content)'> <!-- Resize an image to the default of lightboxes --> <img src='@Link.Image(url: \"test.jpg\", settings: Settings.Images.Lightbox)'> <!-- Resize an image to the default of screen / backgrounds --> <img src='@Link.Image(url: \"test.jpg\", settings: Settings.Images.Screen)'> <!-- Resize an image to HALF the size of a default content --> <img src='@Link.Image(url: \"test.jpg\", settings: Settings.Images.Content, factor: 0.5)'> Tip This is very powerful and is the recommended way to resize images, because this way all images follow the same sizes / proportions in all your apps. Parameters To promote long term API stability, we require most parameters to be named when used. This allows us to add further parameters later on, and the calls will still work. The first three parameters don't need naming, as they will be the most used. They are these in this order: url - the only required parameter settings - optional, would be an image-settings configuration factor - optional multiplier - eg. 0.5 to be half the size of the preset configuration All other parameters need to be named: width width in pixels height height in pixels quality a quality factor between 1 and 100; eg. jpgs usually have 50 - 80 resizeMode which can be max , crop , pad etc. scaleMode which can be up , down (default) or both format which can be jpg , png , gif aspectRatio So this will work: @Link.Image(\"test.jpg\", Settings.Images.Content, 0.5) @Link.Image(url: \"test.jpg\", settings: Settings.Images.Content, factor: 0.5) @Link.Image(\"test.jpg\", width: 200) ...and this won't: @Link.Image(\"test.jpg\", 200) Demo App and further links You should find some code examples in this demo App TODO - History Introduced in 2sxc 12.04"
  },
  "net-code/dynamic-code/object-dnn.html": {
    "href": "net-code/dynamic-code/object-dnn.html",
    "title": "Dnn / Object in Dynamic Code ‚ò¢Ô∏è (Dnn only) | 2sxc 13 / EAV 13",
    "keywords": "Dnn / @Dnn Object in Dynamic Code ‚ò¢Ô∏è (Dnn only) The Dnn is a helper object which contains properties to access information about the current tab, portal, user, module etc. Discover More in the Razor Tutorials We have an rich series of Razor tutorials . You should really check them out üëç. How to use Here's a quick example of using the Dnn object in a Razor template: <!-- show the current users nice name --> @Dnn.User.DisplayName How it works There's not much to explain here, we're just providing the standard Dnn objects to the template. The Main Properties of the @Dnn Object These are the main properties: Module Portal Tab User The @Dnn.Module Properties The @Dnn.Module is of the type ModuleInfo . It has the following properties: Dnn.Module.AllModules Dnn.Module.AllTabs Dnn.Module.Border Dnn.Module.Cacheability Dnn.Module.CacheMethod Dnn.Module.CacheTime Dnn.Module.ContainerPath Dnn.Module.ContainerSrc Dnn.Module.DefaultCacheTime Dnn.Module.DesktopModule Dnn.Module.DesktopModuleId Dnn.Module.DisplayTitle Dnn.Module.EndDate - for show/hide Dnn.Module.Footer Dnn.Module.Header Dnn.Module.ModuleControl Dnn.Module.ModuleControlId Dnn.Module.ModuleDefID - note: large D Dnn.Module.ModuleDefinition Dnn.Module.ModuleID - probably the most used value, note the large ID Dnn.Module.ModuleName Dnn.Module.ModuleOrder Dnn.Module.ModulePermissions Dnn.Module.ModuleSettings Dnn.Module.ModuleTitle Dnn.Module.PaneModuleCount Dnn.Module.PaneModuleIndex Dnn.Module.PaneName Dnn.Module.ParentTab - a TabInfo, same as Dnn.Tab Dnn.Module.PortalID - note large D Dnn.Module.StartDate - for show/hide rules Dnn.Module.TabID - note large D Dnn.Module.TabModuleID - note large D Dnn.Module.TabModuleSettings Dnn.Module.UniqueId Dnn.Module.Visibility The @Dnn.Portal Properties The @Dnn.Portal is of the type PortalSettings . It has the following properties: Dnn.Portal.ActiveTab Dnn.Portal.AdministratorId Dnn.Portal.AdministratorRoleId Dnn.Portal.AdministratoRoleName Dnn.Portal.AdminTabId Dnn.Portal.CultureCode Dnn.Portal.Currency Dnn.Portal.Current - static method returning the current portal portal-settings Dnn.Portal.Default... (AdminContainer, AdminSkin, ControlPanelMode, etc.) Dnn.Portal.DefaultLanguage Dnn.Portal.DefaultModuleId Dnn.Portal.DefaultPortalContainer Dnn.Portal.DefaultTabId Dnn.Portal.Description Dnn.Portal.Email Dnn.Portal.EnableBrowserLanguage Dnn.Portal.EnableUrlLanguage Dnn.Portal.ExpiryDate Dnn.Portal.FooterText Dnn.Portal.GetProperty(string, string, cultureInfo, UserInfo, scope, boolean) - ? Dnn.Portal.GUID - notice all large letters Dnn.Portal.HomeDirectory Dnn.Portal.HomeDirectoryMapPath Dnn.Portal.HomeTabId - the root page Dnn.Portal.KeyWords Dnn.Portal.LoginTabId - where the normal login usually goes to Dnn.Portal.LogoFile Dnn.Portal.Pages Dnn.Portal.PortalAlias Dnn.Portal.PortalId - very important - notice the small d Dnn.Portal.PortalName Dnn.Portal.PortalSkin Dnn.Portal.RegisteredRoleId Dnn.Portal.RegisteredRoleName Dnn.Portal.RegisterTabId Dnn.Portal.Search... (various values like IncludeCommon, IncludeTagInfoFilter etc.) Dnn.Portal.SearchTabId Dnn.Portal.SiteLogHistory Dnn.Portal.SplashTabId Dnn.Portal.SSLEnabled Dnn.Portal.SSLEnforced Dnn.Portal.SSLURL - all caps Dnn.Portal.STDURL - all caps Dnn.Portal.SuperTabId Dnn.Portal.TimeZoneOffset Dnn.Portal.UserId Dnn.Portal.UserInfo Dnn.Portal.UserMode Dnn.Portal.UserQuota Dnn.Portal.UserRegistration Dnn.Portal.Users Dnn.Portal.UserTabId The @Dnn.Tab Properties The @Dnn.Tab is of the type TabInfo . It has the following properties: Dnn.Tab.ChildModules Dnn.Tab.ContainerPath Dnn.Tab.ContainerSrc Dnn.Tab.CultureCode Dnn.Tab.DefaultLanguageGuid Dnn.Tab.DefaultLanguageTab Dnn.Tab.Description Dnn.Tab.EndDate - for show/hide of this tab Dnn.Tab.FullUrl Dnn.Tab.HasChildren Dnn.Tab.IsDefaultLanguage Dnn.Tab.IsDeleted Dnn.Tab.IsNeutralCulture Dnn.Tab.IsSecure Dnn.Tab.IsTranslated Dnn.Tab.IsVisible Dnn.Tab.KeyWords Dnn.Tab.Level Dnn.Tab.LocalizedTabName Dnn.Tab.LocalizedTabs Dnn.Tab.Modules Dnn.Tab.PageHeadtext Dnn.Tab.Panes Dnn.Tab.ParentId Dnn.Tab.PermanentRedirect Dnn.Tab.PortalID - notice the large D Dnn.Tab.RefreshInterval Dnn.Tab.SiteMapPriority Dnn.Tab.SkinDoctype Dnn.Tab.SkinPath Dnn.Tab.SkinSrc Dnn.Tab.StartDate - for show/hide Dnn.Tab.TabID - the current Tab-number - notice the large D Dnn.Tab.TabName Dnn.Tab.TabOrder Dnn.Tab.TabPath Dnn.Tab.TabPermissions Dnn.Tab.TabSettings Dnn.Tab.TabType Dnn.Tab.Title Dnn.Tab.UniqueId - small \"d\" Dnn.Tab.Url The @Dnn.User Properties The @Dnn.User is of the type UserInfo . It has the following properties: Dnn.User.DisplayName Dnn.User.Email Dnn.User.FirstName Dnn.User.FullName Dnn.User.IsDeleted Dnn.User.IsInRole(string RoleName) Dnn.User.IsSuperUser Dnn.User.LastName Dnn.User.Membership - these are asp.net memberships, you probably don't need them Dnn.User.PortalId Dnn.User.Roles - these are Dnn roles Dnn.User.UserID - note the large D Dnn.User.Username History Introduced in 2sxc 1.0"
  },
  "net-code/debug/index.html": {
    "href": "net-code/debug/index.html",
    "title": "2sxc Insights for Debugging Server-Code | 2sxc 13 / EAV 13",
    "keywords": "2sxc Insights for Debugging Server-Code This should give you some minimal guidance into debugging 2sxc. You have the following tools at your disposal: 2sxc Insights is a real-time log of what's happening on each request. You can access it through the admin-toolbar (rotate the more-button till you see a speedometer and click on it). This is the most powerful and in-depth system which also gives you insights when no errors are thrown, but you expect different results. Dnn Event Log are a standard part of Dnn and give you error details when things break. Note that our documentation is not complete, but you should read the Blog Post about 2sxc Insights üëâ Here's more about 2sxc Insights on the Server This may Also be Helpfull Debug what's happening in the Network F12 is one of your most important friends when debugging what's happening. Watch the chrome-console for network trafic and JS errors. Debug Client Side Code 2sxc Insights has a client-side implementation as well. Open the F12 console and you'll see some messages that you can use $2sxc.insights() to see what's happening in the browser. Just follow the instructions shown as you call those functions in the console. History Introduced 2sxc Insights (server-side) v9.31 Major enhancements in v10.22"
  },
  "net-code/data-sources/use/query-parameters.html": {
    "href": "net-code/data-sources/use/query-parameters.html",
    "title": "Set Parameters for Queries in C# | 2sxc 13 / EAV 13",
    "keywords": "Set Parameters for Queries in C# <!-- Data Highlights --> <!-- ADAM --> <!-- Server --> <!-- Prepare --> <!-- Data Source --> <!-- Optimzers --> <!-- Process / Awesomize --> <!-- Libraries --> <!-- data formats --> <!-- Browser --> <!-- Frameworks --> <!-- App show parts --> <!-- Interact parts --> <!-- Edit parts --> <!-- Edit UI parts --> <!-- SPA parts --> <!-- Custom highlight boxes - can be controlled by in-page CSS --> you are here (click to zoom) - discover the stack .context-box-summary .query { visibility: visible; } If a Query has been configured to use Parameters then your C# code can set these parameters before running the query. This uses the Params LookUp todoc - explain how it's configured to use parameters In a Razor or WebApi file, you would write something like this: var allPosts = App.Query[\"AllBlogPosts\"]; allPosts.Params(\"Category\", \"Web\"); var posts = allPosts[\"Default\"]; var dynPosts = AsList(posts); Warning Query objects are single use - which is an internal optimization for reliable, rapid access. So if you retrieve various streams, the query still only executes once. But if you set a parameter after running the query, you will get an error, unless you call Reset() first. See the next example: var query = App.Query[\"AllBlogPosts\"]; query.Params(\"Category\", \"Web\"); var webPosts = AsList(query); // this would result in an error // allPosts.Params(\"Category\", \"IT\"); // this works query.Reset(); query.Params(\"Category\", \"IT\"); var itPosts = AsList(query); History Params was introduced in 2sxc 10.22"
  },
  "net-code/data-sources/use/index.html": {
    "href": "net-code/data-sources/use/index.html",
    "title": "Use DataSources in your C# Code | 2sxc 13 / EAV 13",
    "keywords": "Use DataSources in your C# Code <!-- Data Highlights --> <!-- ADAM --> <!-- Server --> <!-- Prepare --> <!-- Data Source --> <!-- Optimzers --> <!-- Process / Awesomize --> <!-- Libraries --> <!-- data formats --> <!-- Browser --> <!-- Frameworks --> <!-- App show parts --> <!-- Interact parts --> <!-- Edit parts --> <!-- Edit UI parts --> <!-- SPA parts --> <!-- Custom highlight boxes - can be controlled by in-page CSS --> you are here (click to zoom) - discover the stack .context-box-summary .datasource, .context-box-summary .process-razor-app, .context-box-summary .process-web-api-app { visibility: visible; } You will usually use DataSource objects in these common cases in both Razor and Custom WebApi: the Data object is a DataSource, usually having a Default stream ( Data[\"Default\"] ) and sometimes further streams like Data[\"ListContent\"] or Data[\"Categories\"] etc. the App.Data is also a DataSource providing a stream for each content-type in this app, like App.Data[\"BlogPost\"] or App.Data[\"Tag\"] every query is technically a DataSource, and in the query you define which DataStreams it has - if ever you use it in code, you'll see that App.Query[\"SortedTags\"] would be a DataSource and typically the Default stream would contain all these tags. a query is always a chain of DataSource doing one operation and passing it on to the next DataSource Discover More in the Razor Tutorials We have an rich series of Razor tutorials . You should really check them out üëç. Use The Data As Prepared In your code you'll usually work with these three sources which have been prepared for you: Data App.Data App.Query[...] If all you want is to loop through various lists already available, you'll usually work with AsList like this: @foreach(var item in AsList(Data)) { <li>@item.Title</li> } Note that this is a Shorthand for @foreach(var item in AsList(Data[\"Default\"].List)) { <li>@item.Title</li> } If your data-source Data , App.Data or App.Query[\"QueryName\"] has more than one stream, you would do this: @foreach(var item in AsList(App.Data[\"Categories\"])) { <li>@item.CategoryName</li> } Please read more about these in links. Create DataSource Objects in C#/Razor Code Sometimes you want to have full control over what a DataSource does or what parameters it's using. This is easy: // A source which can filter by Content-Type (EntityType) var allAuthors = CreateSource<ToSic.Eav.DataSources.EntityTypeFilter>(); allAuthors.TypeName = \"Authors\"; // access the data and automatically apply the filter/config var authors = allAuthors[\"Default\"]; üëâ Also read Set Parameters for DataSource Objects in C# Create a Query in Code by Piping / Chaining Data sources What the VisualQuery designer does is configure how DataSources are attached, mapping their in/out streams and adding parameters. You can also do this in code, but it's fairly advanced. You would usually want to do this, if you want to use a filter or something, but need to provide parameters which aren't available in the VisualQuery Designer. Here's a simple example: // A source which can filter by Content-Type (EntityType) var allAuthors = CreateSource<EntityTypeFilter>(); allAuthors.TypeName = \"Author\"; // Sort by FullName var sortedAuthors = CreateSource<ValueSort>(allAuthors); sortedAuthors.Attributes = \"FullName\"; // Sort by Fullname descending var sortedAuthorsDesc = CreateSource<ValueSort>(allAuthors); sortedAuthorsDesc.Attributes = \"FullName\"; sortedAuthorsDesc.Directions = \"desc\"; // Sort by 2 fields var sortedAuthorsMult = CreateSource<ValueSort>(allAuthors); sortedAuthorsMult.Attributes = \"Website,FullName\"; sortedAuthorsMult.Directions = \"asc, desc\"; // sort by internal EntityId var sortedAuthorsById = CreateSource<ValueSort>(allAuthors); sortedAuthorsById.Attributes = \"EntityId\"; Because the first allAuthors didn't specify an up-stream in the () empty brackes, it automatically gets attached to the App-Cache with all the data of the current app. So var allAuthors = CreateSource<EntityTypeFilter>(); will initially have all content-items at it's disposal. The most important thing to notice is that each additional data-source uses the first allAuthors DataSource as the default upstream DataSource. So when these sort/filter or do something, they will only receive the data already filtered by the allAuthors. Read also Data Sources Data Streams Dynamic Code CreateSource<T>(...) .net API Demo-App showing some coding of DataSources Blog about creating your own data-source History Introduced in 2sxc 04.00"
  },
  "basics/edit/edit-form/fields.html": {
    "href": "basics/edit/edit-form/fields.html",
    "title": "Fields in 2sxc | 2sxc 13 / EAV 13",
    "keywords": "Fields in 2sxc Fields are configured at the content-type level. These specs are not complete, but should mention a few special cases. Regular Expression Field Validation As of 2sxc 10.23 there are two kinds of field validations Invalid field - preventing the user from saving the data Warnings - showing a warning but allowing save Read also todo History Introduced in 2sxc 1.0 Field Validation added in 2sxc 2.0 Field Warnings added in 2sxc 10.23"
  },
  "basics/edit/edit-form/field-validation.html": {
    "href": "basics/edit/edit-form/field-validation.html",
    "title": "Field Validation in 2sxc TODO | 2sxc 13 / EAV 13",
    "keywords": "Field Validation in 2sxc TODO This is still incomplete Regular Expression Field Validation As of 2sxc 10.23 there are two kinds of field validations Invalid field - preventing the user from saving the data Warnings - showing a warning but allowing save Read also todo History Introduced in 2sxc 1.0 Field Validation added in 2sxc 2.0 Field Warnings added in 2sxc 10.23"
  },
  "basics/data/fields/ephemeral.html": {
    "href": "basics/data/fields/ephemeral.html",
    "title": "Temporary Variable Fields (Emphemeral Fields) | 2sxc 13 / EAV 13",
    "keywords": "Temporary Variable Fields (Emphemeral Fields) This explains Ephemeral aka Temporary Variable Fields . For an overview check out Understanding Data... . Sometimes you need fields which controle the Form UI without being real data. Some examples: Toggles which show/hide other fields or field groups Hidden calculations which will consolidate other field values to determine if something else is required We don't want to save these fields as the data is not relevant, and often the value should be calculated upon opening the form - so it's important that they are reset. These kinds of fields are ephemeral = temporary To configure a field to not save and be temporary / ephemeral, use this setting: Tip Since these fields are usually used as variables, we recommend that you name the Var... . Example: VarShowAdvanced . History Introduced in 2sxc 12.01"
  },
  "basics/data/fields/entity-default.html": {
    "href": "basics/data/fields/entity-default.html",
    "title": "Field Input-Type entity-default | 2sxc 13 / EAV 13",
    "keywords": "Field Input-Type entity-default Use this field type for configuring an entity-picker storing Entity relationships . It's an extension of the entity field type . Features Selector where you can select entity items of a specific type Enables multiple items to select if activated Provide edit, add/remove, delete functionality if activated An order of the selected list is preserved and order can be changed with drag and drop Configuring an Entity-Default No relevant settings to be configured. History Introduced in EAV 1.0 / 2sxc 1.0, originally as part of the entity field type Changed in EAV 3.0 / 2sxc 6.0 (it used to have many configuration fields for all kinds of uses, which were then moved to sub-types) Enhanched in EAV 4 / 2sxc 7 when item-delete was introduced, to allow for \"private\" items"
  },
  "web-api/content-rest-web-api.html": {
    "href": "web-api/content-rest-web-api.html",
    "title": "| 2sxc 13 / EAV 13",
    "keywords": "Moved to Data REST and CRUD Web API"
  },
  "net-code/web-api/hybrid/index.html": {
    "href": "net-code/web-api/hybrid/index.html",
    "title": "Custom C# Web API: Hybrid Dnn & Oqtane APIs | 2sxc 13 / EAV 13",
    "keywords": "Custom C# Web API: Hybrid Dnn & Oqtane APIs Dnn and Oqtane have a few differences because of these important factors: Different underlying C# and .net frameworks Different platforms (Dnn is different from Oqtane) Different security attributes for each platform Important This is very advanced stuff and only relevant if you want to create Apps which run on both Dnn and Oqtane. For most of your apps this is not relevant 2sxc Philosophy - Stay out of the Way Our philosophy is to not reinvent the wheel so it's important that we let you use the .net APIs as they are designed. Se we don't plan on creating another API which to hide the differences, but let you understand them and easily handle everything as needed. Core Strategies for Hybrid WebAPIs If you follow these three rules you should be good to go: Inherit from Custom.Hybrid.Api12 Use very common C# features and syntaxes which existed since C# 7.2 (so anything that runs in Dnn will also run in Oqtane) Use .net standard 2.0 APIs and avoid using System.Web Where necessary, use preprocessor directives as explained below The Preprocessor Directives C# has special #if preprocessor statements which are evaluated during compilation. Using this you can define which code should be used in Dnn and Oqtane. Here's an example: // Add namespaces to enable security in Oqtane & Dnn despite the differences #if OQTANE using Microsoft.AspNetCore.Authorization; // .net core [AllowAnonymous] & [Authorize] using Microsoft.AspNetCore.Mvc; // .net core [HttpGet] / [HttpPost] etc. using Oqtane.Shared; // Oqtane role names #else using System.Web.Http; // .net 4.5 [AllowAnonymous] / [HttpGet] using DotNetNuke.Web.Api; // [DnnModuleAuthorize] using DotNetNuke.Security; // SecurityAccessLevel.Xyz #endif // All commands can be accessed without security checks public class HybridController : ToSic.Custom.Api12 { [AllowAnonymous] // Works in Oqtane and Dnn [HttpGet] // Works in Oqtane and Dnn public string Hello() { return \"Hello from the basic controller in /api\"; } #if OQTANE [Authorize(Roles = RoleNames.Everyone)] #else [DnnModuleAuthorize(AccessLevel = SecurityAccessLevel.Anonymous)] #endif [HttpGet] public int Square(int number) { return number * number; } } The following symbols are set when Api Controllers are compiled: Key True for Dnn True for Oqtane Comments NETCOREAPP ‚õî ‚úÖ Only works in WebAPIs and code (.cs) OQTANE ‚õî ‚úÖ Only works in WebAPIs and code (.cs) Important: These don't work in Razor on Oqtane 3+ because we cannot activate these in the compiler - so they only work in .cs files Use like this: #if OQTANE ... #endif #if OQTANE ... #else ... #endif #if !OQTANE ... #endif #if !OQTANE ... #else ... #endif You can't use #if Dnn ... #endif because of limitations in the dynamic C# compiler of Dnn. Just use #if !OQTANE ... #endif . Different C# and .net Frameworks Part Dnn 7 Dnn 9 Oqtane C# Language ca. 7 ca. 7 C# 9 .net Framework 4.5.1 4.7.2 .net core 5 .net Standard 1.6 2.0 2.0 Any hybrid controller must limit itself to features in .net standard 1.6 or 2.0, depending on the platforms you want to support. Note that any 2sxc standard apps are meant to still run in Dnn 4.7.2, so we'll restrict our work to support .net standard 1.6 . This means our examples are more limited than what you will be doing. Differences in the Platforms If you are creating hybrid controllers, we'll assume that you usually don't need to access properties of Dnn or Oqtane. If you do, you'll have to use the standard mechanisms provided by these. In Dnn - use global objects like PortalSettings.Current In Oqtane use Dependency Injection To avoid the code from causing trouble during compilation, wrap the necessary differences in #if OQTANE ... #endif and #if !OQTANE ... #endif blocks Security Attribute Differences All APIs need to have the correct attributes to mark the security requirements. // Oqtane way [Authorize(Roles = RoleNames.Admin)] // Dnn way [DnnModuleAuthorize(AccessLevel = SecurityAccessLevel.Admin)] The Attributes come from these namespaces: Dnn: DotNetNuke.Web.Api [DnnModuleAuthorize] - the most common security attribute [DnnAuthorize] - for special cases, we're not sure if it's ever used. my understanding is that it's for protecting an endpoint that will be accessed by users, but not from a module on the page, so the module-context would be missing. note that it's very different from the DnnModuleAuthorize [SupportedModules] - to limit access to an API from specific modules. You probabably won't ever use this. Oqtane: Microsoft.AspNetCore.Authorization [Authorize] - standard Authorize of .net core The list of possible values come from these namespaces/enums/constants: Dnn: DotNetNuke.Security.SecurityAccessLevel Example: #todoc Oqtane Core Roles Oqtane.Shared.RoleNames Example: [Authorize(Roles = RoleNames.Host)] Multiple: [Authorize(Roles = RoleNames.Host, RoleNames.Admin)] Oqtane Common Permissions: Oqtane.Shared.PolicyNames Example: [Authorize(Policy = PolicyNames.ViewPage)] Multiple: [Authorize(Policy = PolicyNames.ViewPage, PolicyNames.ViewFolder)] Permissions of this using DnnModuleAuthorize or Authorize Target Permission DnnAuthorize DnnModuleAuthorize Oqtane Authorize System Admin ? SecurityAccessLevel.Host RoleNames.Host Site Admin ? SecurityAccessLevel.Admin RoleNames.Admin Registered users ? ? RoleNames.Registered Anybody ? Anonymous RoleNames.Everyone Module Editor ? SecurityAccessLevel.Edit PolicyNames.EditModule PolicyNames.EditPage Module Viewer ? SecurityAccessLevel.View PolicyNames.ViewModule PolicyNames.ViewPage Module Permissions Manager ? SecurityAccessLevel.ViewPermissions RoleNames.Admin Module ControlPanel ? SecurityAccessLevel.ControlPanel RoleNames.Admin Module SkinObjects ? ? SecurityAccessLevel.SkinObject RoleNames.Admin ValidateAntiForgeryToken Differences Comparison Purpose Attribute Dnn Namespace Oqtane/.net Core Namespace Enforce Anti-Forgery [ValidateAntiForgeryToken] DotNetNuke.Web.Api Microsoft.AspNetCore.Mvc Skip Enforcing on a method even if Class enforces it [IgnoreAntiforgeryToken] (doesn't exist) Microsoft.AspNetCore.Mvc Auto Enforce on unsafe calls (POST, etc.) [AutoValidateAntiforgeryToken] (doesn't exist) Microsoft.AspNetCore.Mvc Sidenote: in the .net core implementation the attributes can also accept an order parameter which defaults to 1000 . We believe you should never change this :) but it does allow for other security configurations than were possible in Dnn. HTTP Verbs like GET, POST All APIs need to have attributes like [HttpGet] and [HttpPost] . The main difference you need to be aware of is that they must come from a different namespace. Use the #if ... statements as shown in the example above. API Result JSON Output Standard Implementations: In Dnn WebApis all data is automatically converted to JSON. This was an early design decision of 2sxc and works great for most cases, but some edge cases (like responding with XML) is more difficult this way. In Oqtane (.net core 5) the default is more sophisticated. The methods return objects or values. In advanced cases they will return an ActionResult or ContentResult . The default encoding is as follows: Simple values like strings are returned just as-is Complex objects are serialized - by default as json So for anything more complex the behavior is often identical, but for simple values it's different unless you specify explicitly what you want: Value Type Dnn 2sxc API Oqtane Apis Comments 27 int 27 27 identical \"Hello World\" string \"Hello World\" Hello World Note missing quotes in Oqtane which makes this non-json [\"a\", \"b\"] string[] [\"a\", \"b\"] [\"a\", \"b\"] identical The most important difference is that by default, strings are not converted to JSON If you need to return a simple string and must ensure it's JSON on both platforms, add this attribute to your class or method: [Produces(\"application/json\")] This is in the namespace using Microsoft.AspNetCore.Mvc which you usually already have. Since Dnn won't know it, you will probably wrap it in an #if OQTANE like this: #if OQTANE [Produces(\"application/json\")] #endif History Introduced in 2sxc 12.00"
  },
  "net-code/razor-blade/index.html": {
    "href": "net-code/razor-blade/index.html",
    "title": "RazorBlade Library | 2sxc 13 / EAV 13",
    "keywords": "RazorBlade Library 2sxc includes RazorBlade - a very neat library of helper tools to get things done. It includes features such as: Text helpers to check if something has text, truncate/ellipsis text and more Tags helpers to strip HTML, make safe URLs and more Tag fluent API to create complex HTML using code HtmlPage helper to change the page title, add meta- and open-graph headers etc. Discover More in the RazorBlade Tutorials We have an rich series of RazorBlade tutorials . You should really check them out üëç. Example The following example is taken from the tutorials. It shows how to use @Text.Zip(...) to ensure that a string containing random white spaces is cleaned up. This is useful for counting visible characters or truncating text. @inherits Custom.Hybrid.Razor12 @using ToSic.Razor.Blade; @{ var samples = new string[] { \"This contains multi-spaces and \\t\\t\\t tabs\", \"This has \\n \\n line-breaks\" }; } <h2>Correct and incorrect Character Counts</h2> <table class=\"table table-hover\" width=\"100%\"> <!-- table header --> <tr> <th>Html output hides the problems</th> <th class=\"table-warning\">Whitespace output showing problems</th> <th>Length</th> <th class=\"table-success\">Output using Text.Zip(...)</th> <th>Zip Length</th> </tr> <!-- the real code --> @foreach(var s in samples) { <tr> <td>@s </td> <td class=\"table-warning\" style=\"white-space: pre-wrap;\">@s</td> <td>@s.Length </td> <td class=\"table-success\" style=\"white-space: pre-wrap;\">@Text.Zip(s)</td> <td>@Text.Zip(s).Length</td> </tr> } </table> Learn to Leverage RazorBlade Visit Razor-Blade.net Website Check out the RazorBlade Tutorials WolfExMachina tutorial for OpenGraph"
  },
  "net-code/razor/obsolete/index.html": {
    "href": "net-code/razor/obsolete/index.html",
    "title": "Obsolete, Old APIs in Razor | 2sxc 13 / EAV 13",
    "keywords": "Obsolete, Old APIs in Razor 2sxc has been around since 2012 and therefor has had various things which were redesigned and improved - sometimes making old implementations / APIs obsolete. We try very hard to ensure that old APIs still work - so most of the APIs you'll see here will actually continue to work, but you shouldn't use them as they fall into one of these categories: A better solution / API has been created Other new features are not compatible with the old implementation Older implementations may stop working some day Since you may still have code which uses these APIs you may want to fix something or migrate them to something newer. That's what this page is meant for. Data and Search Customization This section only applies to Dnn, as Oqtane doesn't have a search index built it yet. üëâ Read about Search Customization to discover how it should be done today. Evolution of Customizing Search Let's begin with the Evolution of Customizing Search as it helps to understand how this feature developed. First Implementation in 2sxc 6 The initial versions of 2sxc didn't offer this feature, it was added in v6. At that time, the idea was that you would create special functions in your Razor files which contained the logic for customizing the results. The methods used were CustomizeData and CustomizeSearch . That mechanism still works and you'll find it in many older apps, but we strongly discourage it's use. Neutralizing Changes in 2sxc 10 In 2sxc v10 we created a new improved base class for Razor files called RazorComponent and used the opportunity to improve the signature of the API because the original implementation used some Dnn objects, and we anticipated that we would make this available for other platforms as well. This was a minor change. It still works today, but we discourage it's use. Code Behind in 2sxc 11 Razor Files were getting very technical if they had this code, and we decided there must be a better way to do this. We invented the concept of Code Behind and let developers place the logic there. This was a major improvement, but still not perfect. We discourage it's use. Separate Search-Customization in 2sxc 12 When we finally implemented 2sxc for Oqtane we realized that our concept still had weaknesses: Razor files containing search-customization code were confusing Token templates were not able to customize their search result Search customizations may vary between platforms (and some may not offer search at all) Having the code in the Razor-file actually caused problem when creating hybrid apps Often customize search was used for simply disabling search results - which was overkill and confusing If many Views needed the same customizations it was hard to share the code Because of this we decided to change the implementation completely. As of 2sxc v12 the search customization happens in a special code file which can be anywhere in your App. Your view is then configured to use that code. üëâ Use the new mechanisms explained in Search Customizations"
  },
  "basics/edit/edit-ux/hide-advanced-features.html": {
    "href": "basics/edit/edit-ux/hide-advanced-features.html",
    "title": "Hide Advanced Features From Non-Admins | 2sxc 13 / EAV 13",
    "keywords": "Hide Advanced Features From Non-Admins <!-- Data Highlights --> <!-- ADAM --> <!-- Server --> <!-- Prepare --> <!-- Data Source --> <!-- Optimzers --> <!-- Process / Awesomize --> <!-- Libraries --> <!-- data formats --> <!-- Browser --> <!-- Frameworks --> <!-- App show parts --> <!-- Interact parts --> <!-- Edit parts --> <!-- Edit UI parts --> <!-- SPA parts --> <!-- Custom highlight boxes - can be controlled by in-page CSS --> you are here (click to zoom) - discover the stack .context-box-summary .browser-edit { visibility: visible; } For many users 2sxc is too powerful, so there are various mechanisms for hiding the complexity from normal editors. Overview You can auto-hide all advanced toolbar buttons using a special security group. You can create custom toolbars for all users, or even for certain user groups inside a Razor template You can see even more advanced stuff by going into a special debug mode You can see more internal code and messages by loading the JS-Code unminified Auto-Hide Advanced Buttons From Non-Admins This is very simple - 2sxc asks Dnn if there is a security group called 2sxc Designers . If such a group exists, then only users in that group (and all host-users) see the advanced button, any other user will not see advanced buttons any more. You can find more instructions in this 2sxc Designers checklist . Custom Toolbars You can create any kind of toolbar, and you can decide to show/hide which ever you want based on security roles in Dnn. This requires standard C# / Razor skills and is not explained more in detail right now. Note that you'll find some snippets which should help you in the snippets, to both check what group a user is in, and to generate various custom toolbars. Read also Checklist to setup 2sxc Designers security group History Added ca. 2sxc 2.x"
  },
  "abyss/releases/history/v13/_brc13.html": {
    "href": "abyss/releases/history/v13/_brc13.html",
    "title": "Breaking Changes in EAV and 2sxc v13 | 2sxc 13 / EAV 13",
    "keywords": "Breaking Changes in EAV and 2sxc v13 We try to minimize breaking changes, and most breaking changes won't affect your work, because it's internal API. We're documenting it here to ensure you know what happened, in case you still run into this. Summary V13 did some clean-up. It will rarely affect you, but if you are using the TimelineJs App it will. Breaking Changes in 2sxc 13.00 API Changes that may affect you An old, non-DI feature for Inner Content is being deprecated and will be removed in v14 see instructions An old feature for publishing module InstanceData as JSON is removed see instructions An old feature to create DataSources is removed see instructions Two old data-conversion features DataToDictionary and EntitiesToDictionary were removed see instructions Some internal functionality which enabled IEntity objects to convert links containing file:... and page:... has been removed. This only affects special deep code calls on IEntity and does _not affect DynamicEntity objects in Razor see instructions The old feature Eav.Factory.Resolve<T>() was deprecated and will be removed in v14 see instructions The old feature BlockDataSource.Cache.GetContentType(...) was removed see instructions The Dnn Static ToSic.Sxc.Dnn.Factory is being deprecated and will be removed in v14 see instructions Major Updates with may affect you The Image Resizer is being replaced with ImageFlow The App containing Site-wide settings is changed to Primary - previously it used the Content app for this. We believe this won't affect many users, as the settings-stack is still very new in v12 Things which probably don't affect anybody SQL changes - minor updates to the Database .net Framework and Dll Updated to Match Dnn 9 Requirements - but still works in Dnn 7.4.2 .net Framework 4.7.2 now required (previously .net Framework 4.5.1) .net Standard 2.0.3 required (previously .net Standard 1.6) Important : This will be referenced in the web.config upon installation Dependency Injection updated to .net core 2.1.1 (previously 1.1) Newtonsoft.Json updated to v10.0.3 Entity Framework updated to 2.1.1 (previously 1.1) - Oqtane is unmodified and uses 3.1.4 Dnn DLLs renamed ToSic.Sxc.Dnn.dll became ToSic.Sxc.Dnn.Core.dll for consistency ToSic.SexyContent.WebApi.dll became ToSic.Sxc.Dnn.WebApi.dll ToSic.SexyContent.Razor.dll became ToSic.Sxc.Dnn.Razor.dll An internal object ToSic.Eav.Apps.State was removed Internal APIs which were removed Static ToSic.Eav.Data.Builder.AttribBuilder.AddValue(...)"
  },
  "abyss/releases/history/v13/_brc13.00.html": {
    "href": "abyss/releases/history/v13/_brc13.00.html",
    "title": "Breaking Changes in 2sxc 13.00 | 2sxc 13 / EAV 13",
    "keywords": "Breaking Changes in 2sxc 13.00 API Changes that may affect you An old, non-DI feature for Inner Content is being deprecated and will be removed in v14 see instructions An old feature for publishing module InstanceData as JSON is removed see instructions An old feature to create DataSources is removed see instructions Two old data-conversion features DataToDictionary and EntitiesToDictionary were removed see instructions Some internal functionality which enabled IEntity objects to convert links containing file:... and page:... has been removed. This only affects special deep code calls on IEntity and does _not affect DynamicEntity objects in Razor see instructions The old feature Eav.Factory.Resolve<T>() was deprecated and will be removed in v14 see instructions The old feature BlockDataSource.Cache.GetContentType(...) was removed see instructions The Dnn Static ToSic.Sxc.Dnn.Factory is being deprecated and will be removed in v14 see instructions Major Updates with may affect you The Image Resizer is being replaced with ImageFlow The App containing Site-wide settings is changed to Primary - previously it used the Content app for this. We believe this won't affect many users, as the settings-stack is still very new in v12 Things which probably don't affect anybody SQL changes - minor updates to the Database .net Framework and Dll Updated to Match Dnn 9 Requirements - but still works in Dnn 7.4.2 .net Framework 4.7.2 now required (previously .net Framework 4.5.1) .net Standard 2.0.3 required (previously .net Standard 1.6) Important : This will be referenced in the web.config upon installation Dependency Injection updated to .net core 2.1.1 (previously 1.1) Newtonsoft.Json updated to v10.0.3 Entity Framework updated to 2.1.1 (previously 1.1) - Oqtane is unmodified and uses 3.1.4 Dnn DLLs renamed ToSic.Sxc.Dnn.dll became ToSic.Sxc.Dnn.Core.dll for consistency ToSic.SexyContent.WebApi.dll became ToSic.Sxc.Dnn.WebApi.dll ToSic.SexyContent.Razor.dll became ToSic.Sxc.Dnn.Razor.dll An internal object ToSic.Eav.Apps.State was removed Internal APIs which were removed Static ToSic.Eav.Data.Builder.AttribBuilder.AddValue(...)"
  },
  "abyss/releases/history/v13/_all13.html": {
    "href": "abyss/releases/history/v13/_all13.html",
    "title": "Version 13 | 2sxc 13 / EAV 13",
    "keywords": "Version 13 TODO New WebApi route app/auto/data to replace /app/auto/content - the old one will still work, but we won't document it any more, because it was a confusing name Lots of metadata stuff... TODO: New sxc.data and sxc.query Breaking Changes in 2sxc 13.00 API Changes that may affect you An old, non-DI feature for Inner Content is being deprecated and will be removed in v14 see instructions An old feature for publishing module InstanceData as JSON is removed see instructions An old feature to create DataSources is removed see instructions Two old data-conversion features DataToDictionary and EntitiesToDictionary were removed see instructions Some internal functionality which enabled IEntity objects to convert links containing file:... and page:... has been removed. This only affects special deep code calls on IEntity and does _not affect DynamicEntity objects in Razor see instructions The old feature Eav.Factory.Resolve<T>() was deprecated and will be removed in v14 see instructions The old feature BlockDataSource.Cache.GetContentType(...) was removed see instructions The Dnn Static ToSic.Sxc.Dnn.Factory is being deprecated and will be removed in v14 see instructions Major Updates with may affect you The Image Resizer is being replaced with ImageFlow The App containing Site-wide settings is changed to Primary - previously it used the Content app for this. We believe this won't affect many users, as the settings-stack is still very new in v12 Things which probably don't affect anybody SQL changes - minor updates to the Database .net Framework and Dll Updated to Match Dnn 9 Requirements - but still works in Dnn 7.4.2 .net Framework 4.7.2 now required (previously .net Framework 4.5.1) .net Standard 2.0.3 required (previously .net Standard 1.6) Important : This will be referenced in the web.config upon installation Dependency Injection updated to .net core 2.1.1 (previously 1.1) Newtonsoft.Json updated to v10.0.3 Entity Framework updated to 2.1.1 (previously 1.1) - Oqtane is unmodified and uses 3.1.4 Dnn DLLs renamed ToSic.Sxc.Dnn.dll became ToSic.Sxc.Dnn.Core.dll for consistency ToSic.SexyContent.WebApi.dll became ToSic.Sxc.Dnn.WebApi.dll ToSic.SexyContent.Razor.dll became ToSic.Sxc.Dnn.Razor.dll An internal object ToSic.Eav.Apps.State was removed Internal APIs which were removed Static ToSic.Eav.Data.Builder.AttribBuilder.AddValue(...) 13.01 JSON fields Link.Image with srcSet Parameter ? ToSic.Sxc.Services.IFeaturesService 13.02 JS Global Apps 13.03 TODO 13.04 TODO 13.05 Moved the Web.IInPageEditingHelper to Services.IEditService - this is non breaking and shouldn't matter, as people won't be using the direct inteface Moved the Web.ILinkHelper to Services.ILinkService - this is non breaking and shouldn't matter, as people won't be using the direct inteface"
  },
  "abyss/releases/history/v13/index.html": {
    "href": "abyss/releases/history/v13/index.html",
    "title": "All Changes in EAV and 2sxc v13 | 2sxc 13 / EAV 13",
    "keywords": "All Changes in EAV and 2sxc v13 Version 13 TODO New WebApi route app/auto/data to replace /app/auto/content - the old one will still work, but we won't document it any more, because it was a confusing name Lots of metadata stuff... TODO: New sxc.data and sxc.query Breaking Changes in 2sxc 13.00 API Changes that may affect you An old, non-DI feature for Inner Content is being deprecated and will be removed in v14 see instructions An old feature for publishing module InstanceData as JSON is removed see instructions An old feature to create DataSources is removed see instructions Two old data-conversion features DataToDictionary and EntitiesToDictionary were removed see instructions Some internal functionality which enabled IEntity objects to convert links containing file:... and page:... has been removed. This only affects special deep code calls on IEntity and does _not affect DynamicEntity objects in Razor see instructions The old feature Eav.Factory.Resolve<T>() was deprecated and will be removed in v14 see instructions The old feature BlockDataSource.Cache.GetContentType(...) was removed see instructions The Dnn Static ToSic.Sxc.Dnn.Factory is being deprecated and will be removed in v14 see instructions Major Updates with may affect you The Image Resizer is being replaced with ImageFlow The App containing Site-wide settings is changed to Primary - previously it used the Content app for this. We believe this won't affect many users, as the settings-stack is still very new in v12 Things which probably don't affect anybody SQL changes - minor updates to the Database .net Framework and Dll Updated to Match Dnn 9 Requirements - but still works in Dnn 7.4.2 .net Framework 4.7.2 now required (previously .net Framework 4.5.1) .net Standard 2.0.3 required (previously .net Standard 1.6) Important : This will be referenced in the web.config upon installation Dependency Injection updated to .net core 2.1.1 (previously 1.1) Newtonsoft.Json updated to v10.0.3 Entity Framework updated to 2.1.1 (previously 1.1) - Oqtane is unmodified and uses 3.1.4 Dnn DLLs renamed ToSic.Sxc.Dnn.dll became ToSic.Sxc.Dnn.Core.dll for consistency ToSic.SexyContent.WebApi.dll became ToSic.Sxc.Dnn.WebApi.dll ToSic.SexyContent.Razor.dll became ToSic.Sxc.Dnn.Razor.dll An internal object ToSic.Eav.Apps.State was removed Internal APIs which were removed Static ToSic.Eav.Data.Builder.AttribBuilder.AddValue(...) 13.01 JSON fields Link.Image with srcSet Parameter ? ToSic.Sxc.Services.IFeaturesService 13.02 JS Global Apps 13.03 TODO 13.04 TODO 13.05 Moved the Web.IInPageEditingHelper to Services.IEditService - this is non breaking and shouldn't matter, as people won't be using the direct inteface Moved the Web.ILinkHelper to Services.ILinkService - this is non breaking and shouldn't matter, as people won't be using the direct inteface"
  },
  "abyss/releases/history/v13/breaking.html": {
    "href": "abyss/releases/history/v13/breaking.html",
    "title": "Breaking Changes in EAV and 2sxc | 2sxc 13 / EAV 13",
    "keywords": "Breaking Changes in EAV and 2sxc Breaking Changes in EAV and 2sxc v13 We try to minimize breaking changes, and most breaking changes won't affect your work, because it's internal API. We're documenting it here to ensure you know what happened, in case you still run into this. Summary V13 did some clean-up. It will rarely affect you, but if you are using the TimelineJs App it will. Breaking Changes in 2sxc 13.00 API Changes that may affect you An old, non-DI feature for Inner Content is being deprecated and will be removed in v14 see instructions An old feature for publishing module InstanceData as JSON is removed see instructions An old feature to create DataSources is removed see instructions Two old data-conversion features DataToDictionary and EntitiesToDictionary were removed see instructions Some internal functionality which enabled IEntity objects to convert links containing file:... and page:... has been removed. This only affects special deep code calls on IEntity and does _not affect DynamicEntity objects in Razor see instructions The old feature Eav.Factory.Resolve<T>() was deprecated and will be removed in v14 see instructions The old feature BlockDataSource.Cache.GetContentType(...) was removed see instructions The Dnn Static ToSic.Sxc.Dnn.Factory is being deprecated and will be removed in v14 see instructions Major Updates with may affect you The Image Resizer is being replaced with ImageFlow The App containing Site-wide settings is changed to Primary - previously it used the Content app for this. We believe this won't affect many users, as the settings-stack is still very new in v12 Things which probably don't affect anybody SQL changes - minor updates to the Database .net Framework and Dll Updated to Match Dnn 9 Requirements - but still works in Dnn 7.4.2 .net Framework 4.7.2 now required (previously .net Framework 4.5.1) .net Standard 2.0.3 required (previously .net Standard 1.6) Important : This will be referenced in the web.config upon installation Dependency Injection updated to .net core 2.1.1 (previously 1.1) Newtonsoft.Json updated to v10.0.3 Entity Framework updated to 2.1.1 (previously 1.1) - Oqtane is unmodified and uses 3.1.4 Dnn DLLs renamed ToSic.Sxc.Dnn.dll became ToSic.Sxc.Dnn.Core.dll for consistency ToSic.SexyContent.WebApi.dll became ToSic.Sxc.Dnn.WebApi.dll ToSic.SexyContent.Razor.dll became ToSic.Sxc.Dnn.Razor.dll An internal object ToSic.Eav.Apps.State was removed Internal APIs which were removed Static ToSic.Eav.Data.Builder.AttribBuilder.AddValue(...)"
  },
  "abyss/releases/history/v12/_brc12.html": {
    "href": "abyss/releases/history/v12/_brc12.html",
    "title": "Breaking Changes in EAV and 2sxc v12 | 2sxc 13 / EAV 13",
    "keywords": "Breaking Changes in EAV and 2sxc v12 We try to minimize breaking changes, and most breaking changes won't affect your work, because it's internal API. We're documenting it here to ensure you know what happened, in case you still run into this. Summary V12 did a lot of internal rework to get it to run on Oqtane. Almost none of the changes will affect you. Breaking Change Version 12.10 Jquery is completely removed. This shouldn't affect your code, since all old code usually runs in DNN where jQuery is included by default. Breaking Change Version 12.05 V12 adds new properties to Razor and WebAPI which could result in some surprises: Path , Convert , Settings , Resources and DevTools . Especially the new Path and Convert could clash with existing code which had @using System or @using System.IO so the code would just read Path.GetFileName(...) or something. Because of this, we only give the latest classes Custom.Dnn.Razor12 , Custom.Dnn.Code12 , Custom.Hybrid.Razor12 , Custom.Hybrid.Api12 etc. these properties. This means that previous base classes do not have these by design, and we encourage you to move to these latest base classes. Important: 2sxc 12.00 - 12.04 also had some of these properties on ToSic.Sxc.Dnn.RazorComponent as well as ToSic.Sxc.Dnn.ApiController . So if you were eager to use these properties but didn't change the base class, you were able to use it. To protect thousands of upgrade-scenarios we had to take them away from the old base classes. Sorry! Possible Breaking Changes We believe nothing broke, but it could be that some commands on EntitiesToDictionary or DataToDictionary were accidentally changed. Pls report so we can fix that. The Link.To(...) now returns safe URLs. This should not be an issue, but in rare cases post-processing of the string returned may expect spaces or something, which are now %20 We disabled old obsolete APIs on the new Razor12, Api12 and Code12 base classes. In case you were using this (not likely) you'll get an error telling you about this. Breaking Change Version 12.04 DynamicEntity now has a property Count because it's a list as well, this could cause issues if a content-type has a property Count DynamicEntity is now always a list. Because of this we removed the DynamicEntityWithList object. We believe the type is never referenced in user code, but if it is, this would be a breaking change. Many parts that prepare Entities returned a Dictionary<string, object> and now return an IDictionary<string, object> . We believe this shouldn't hurt much, since the result would usually be in a var or returend directly to the API for streaming, but in case someone had used explicitly typed code, this will require a minor change"
  },
  "abyss/releases/history/v12/_brc12.10.html": {
    "href": "abyss/releases/history/v12/_brc12.10.html",
    "title": "Breaking Change Version 12.10 | 2sxc 13 / EAV 13",
    "keywords": "Breaking Change Version 12.10 Jquery is completely removed. This shouldn't affect your code, since all old code usually runs in DNN where jQuery is included by default."
  },
  "abyss/releases/history/v12/_brc12.05.html": {
    "href": "abyss/releases/history/v12/_brc12.05.html",
    "title": "Breaking Change Version 12.05 | 2sxc 13 / EAV 13",
    "keywords": "Breaking Change Version 12.05 V12 adds new properties to Razor and WebAPI which could result in some surprises: Path , Convert , Settings , Resources and DevTools . Especially the new Path and Convert could clash with existing code which had @using System or @using System.IO so the code would just read Path.GetFileName(...) or something. Because of this, we only give the latest classes Custom.Dnn.Razor12 , Custom.Dnn.Code12 , Custom.Hybrid.Razor12 , Custom.Hybrid.Api12 etc. these properties. This means that previous base classes do not have these by design, and we encourage you to move to these latest base classes. Important: 2sxc 12.00 - 12.04 also had some of these properties on ToSic.Sxc.Dnn.RazorComponent as well as ToSic.Sxc.Dnn.ApiController . So if you were eager to use these properties but didn't change the base class, you were able to use it. To protect thousands of upgrade-scenarios we had to take them away from the old base classes. Sorry! Possible Breaking Changes We believe nothing broke, but it could be that some commands on EntitiesToDictionary or DataToDictionary were accidentally changed. Pls report so we can fix that. The Link.To(...) now returns safe URLs. This should not be an issue, but in rare cases post-processing of the string returned may expect spaces or something, which are now %20 We disabled old obsolete APIs on the new Razor12, Api12 and Code12 base classes. In case you were using this (not likely) you'll get an error telling you about this."
  },
  "abyss/releases/history/v12/_brc12.04.html": {
    "href": "abyss/releases/history/v12/_brc12.04.html",
    "title": "Breaking Change Version 12.04 | 2sxc 13 / EAV 13",
    "keywords": "Breaking Change Version 12.04 DynamicEntity now has a property Count because it's a list as well, this could cause issues if a content-type has a property Count DynamicEntity is now always a list. Because of this we removed the DynamicEntityWithList object. We believe the type is never referenced in user code, but if it is, this would be a breaking change. Many parts that prepare Entities returned a Dictionary<string, object> and now return an IDictionary<string, object> . We believe this shouldn't hurt much, since the result would usually be in a var or returend directly to the API for streaming, but in case someone had used explicitly typed code, this will require a minor change"
  },
  "abyss/releases/history/v12/breaking.html": {
    "href": "abyss/releases/history/v12/breaking.html",
    "title": "Breaking Changes in EAV and 2sxc 12 | 2sxc 13 / EAV 13",
    "keywords": "Breaking Changes in EAV and 2sxc 12 Breaking Changes in EAV and 2sxc v12 We try to minimize breaking changes, and most breaking changes won't affect your work, because it's internal API. We're documenting it here to ensure you know what happened, in case you still run into this. Summary V12 did a lot of internal rework to get it to run on Oqtane. Almost none of the changes will affect you. Breaking Change Version 12.10 Jquery is completely removed. This shouldn't affect your code, since all old code usually runs in DNN where jQuery is included by default. Breaking Change Version 12.05 V12 adds new properties to Razor and WebAPI which could result in some surprises: Path , Convert , Settings , Resources and DevTools . Especially the new Path and Convert could clash with existing code which had @using System or @using System.IO so the code would just read Path.GetFileName(...) or something. Because of this, we only give the latest classes Custom.Dnn.Razor12 , Custom.Dnn.Code12 , Custom.Hybrid.Razor12 , Custom.Hybrid.Api12 etc. these properties. This means that previous base classes do not have these by design, and we encourage you to move to these latest base classes. Important: 2sxc 12.00 - 12.04 also had some of these properties on ToSic.Sxc.Dnn.RazorComponent as well as ToSic.Sxc.Dnn.ApiController . So if you were eager to use these properties but didn't change the base class, you were able to use it. To protect thousands of upgrade-scenarios we had to take them away from the old base classes. Sorry! Possible Breaking Changes We believe nothing broke, but it could be that some commands on EntitiesToDictionary or DataToDictionary were accidentally changed. Pls report so we can fix that. The Link.To(...) now returns safe URLs. This should not be an issue, but in rare cases post-processing of the string returned may expect spaces or something, which are now %20 We disabled old obsolete APIs on the new Razor12, Api12 and Code12 base classes. In case you were using this (not likely) you'll get an error telling you about this. Breaking Change Version 12.04 DynamicEntity now has a property Count because it's a list as well, this could cause issues if a content-type has a property Count DynamicEntity is now always a list. Because of this we removed the DynamicEntityWithList object. We believe the type is never referenced in user code, but if it is, this would be a breaking change. Many parts that prepare Entities returned a Dictionary<string, object> and now return an IDictionary<string, object> . We believe this shouldn't hurt much, since the result would usually be in a var or returend directly to the API for streaming, but in case someone had used explicitly typed code, this will require a minor change"
  },
  "abyss/releases/history/v11/_brc11.html": {
    "href": "abyss/releases/history/v11/_brc11.html",
    "title": "Breaking Changes in EAV and 2sxc v11 | 2sxc 13 / EAV 13",
    "keywords": "Breaking Changes in EAV and 2sxc v11 We try to minimize breaking changes, and most breaking changes won't affect your work, because it's internal API. We're documenting it here to ensure you know what happened, in case you still run into this. Summary There were small breaking changes in 11.00 to 11.11 but they were internal so shouldn't affect normal developers. Breaking Changes Version 11.07 - Drop the old edit UI In 11.07 the old edit UI was removed, so customizations for that UI would not be in effect any more. Breaking Changes Version 11.10 - Mainly Dependency Injection In v11.10 we used much more dependency injection than ever before and stopped using static values which were still in the API in many places. Because of this, certain helper objects to create entities or lookup values were changed and their constructors were changed. We invested a lot of time to try to ensure that old APIs still work, but in case you're hit by one of these, make sure you check the DI and switch to resolving the objects using DI. Breaking Changes Version 11.11 - Language Detection Previously the language detection used the Thread culture. Turns out this wasn't reliable because Dnn does some funny stuff (probably historical) which means that API-calls ended up using the language stored in some cookie instead of the one specified by the URL. We changed this, which should be more reliable. But if you were relying on this strange effect, then it may be a breaking change. Internally our tokens were also using the thread culture. When we changed this, we also had to change how tokens pick up the language. In rare cases this may affect you. We changed all tokens to always resolve boolean values to true / false (previously they would have been changed to the current language, like wahr for german). We believe this change is only an improvement, and should ensure that internal resolves in Queries etc. result in reliable output. Breaking Changes Version 11.11 - DataSources: DataSourceConfiguration Note that we also improved the DataSourceConfiguration to an interface IDataSourceConfiguration and documented this. As a side effect the API stays the same, but you will have to recompile your data sources for them to work again - sorry. Breaking Changes Version 11.11.03 - IEntity Values IEntity had a command called Value(fieldName) which was probably never used. The idea used to be that it does language lookup internally, but we refactored this out since it could never be fully reliable because the full language list wasn't known to the IEntity . So we re-purposed the method (assuming it's not used) to just lookup the first occurance of the value. This way it`s useful for configurations and similar which are not multi-language. IEntity also had a Value(fieldname, lookup) method. We are deprecating it, and making the lookup not happen from now on. We believe it was never used. IEntity had a command called PrimaryValue(fieldName) which was probably never ever used, so we're deprecating it. Use Value(fieldName) instead. Breaking Changes Version 11.11.03 - Other UI Toolbar dropped the button and command for item-history , as the history is now part of the edit dialog"
  },
  "abyss/releases/history/v10/_brc10.html": {
    "href": "abyss/releases/history/v10/_brc10.html",
    "title": "Breaking Changes in EAV and 2sxc | 2sxc 13 / EAV 13",
    "keywords": "Breaking Changes in EAV and 2sxc We try to minimize breaking changes, and most breaking changes won't affect your work, because it's internal API. We're documenting it here to ensure you know what happened, in case you still run into this. Summary Version 10 has a lot of small breaking changes because we restructured the internal API so it's consistent when we publish it. All these things shouldn't affect you, because they were internal APIs, but in case it does - here's what we did. Version 10.22 and 10.23 Renamed the RootDataSource and the Interface to IAppRoot Split SOC of the AppRoot DataSource so that caching, Root-Metadata and ListCache is fully separate Since the Logging system now auto-picks up the code lines and names of the methods, we simplified the commands and dropped some parameters. Moved quite a bit of the DataSource objects into sub-objects, again for SOC. Version 10.20-04 (ca. 2019-12-03) Renamed DataTableDataSource to DataTable , old name still works. Renamed ExternalDataDataSource to ExternalData , old name still works. Renamed ToSic.SexyContent.DataSources.ModuleDataSource to ToSic.Sxc.DataSources.CmsBlock , old name still works. Renamed ToSic.Eav.DataSources.VisualQuery.VisualQueryAttribute to ToSic.Eav.DataSources.Queries.VisualQueryAttribute , old name still works. Renamed ToSic.SexyContent.Environment.Dnn7.Factory to ToSic.Sxc.Dnn.Factory , old name still works. Renamed ToSic.Eav.DataSources.BaseDataSource to ToSic.Eav.DataSources.DataSourceBase for consistency, old name still works. Moved the LookUp namespaces into the Core DLL Version 10.20-02 (ca. 2019-11-22) More internal changes which shouldn't affect anybody, but make the API ready for public docs... Moved/renamed the internal Eav.AppDataPackage to Eav.Apps.AppState Moved/renamed some internal interfaces like Entity... Did a major change for how Attribute<T> for relationships work. Before they were Attribute<EntityRelationship> and now they are Attribute<IEnumerable<IEntity>> . This also affects Value<EntityRelationship> which is now Value<IEnumerable<IEntity>> Moved Tenant<T> and Container<T> including matching interfaces to Eav.Environment Renamed IAppIdentity to IInAppAndZone and IZoneIdentity to IInZone Renamed ICacheKeyProvider to ICacheKey Renamed CacheChainedIEnumerable<T> to SynchronizedList<T> Moved/Renamed MetadataFor to Eav.Metadata.Target . Left old name compatible. Moved some extension methods for IEntity from ToSic.Eav.Data.Query to ToSic.Eav.Data Changed Permissions to be strongly typed EntityBased objects Version 10.20.01 (2019-11-12) Internal code now uses the term Header instead of ListContent . External code provides both for backward-compatibility moved internal interfaces for engines (Razor/Token) to final namespaces ToSic.Sxc.Engines IEngine EngineBase ITokenEngine IRazorEngine corrected architecture - some template-management code had slipped into Eav.Apps , was moved back to Sxc.Apps The Template object was moved from Eav.Apps to Sxc.Views and we added an interface IView . We also renamed the internal properti ViewNameInUrl to UrlIdentifier . To correct the API a CmsManager was created extending the AppManager, which is in charge of Views Moving internal stuff related to content blocks IContentBlock from SexyContent.Interfaces to Sxc.Blocks from ToSic.SexyContent.ISxcInstance to ToSic.Sxc.Blocks.IBlockContext actually moved a lot of things there incl. ContentBlock now BlockConfiguration and more - all internal stuff Moving the ToSic.SexyContent.App to ToSic.Sxc.Apps.App In a razor page, we added the preferred Purpose . The old InstancePurpose will still work Placed some things we just moved in 10.20 to a final place - since it's a very recent change, we updated the docs in the 10.20.00 section Changed, but completely internal Some namespaces on SexyContent.ContentBlocks were moved to Sxc.Blocks Version 10.20.00 (2019-11-05) the internal interface IInPageEditingHelpers was moved from ToSic.SexyContent.Interfaces to the namespace ToSic.Sxc.Web the internal interface ILinkHelper was moved to ToSic.Sxc.Web the internal interface IHtmlHelper was moved to ToSic.Sxc.Dnn the property Configuration on dynamic entities was deprecated in 2sxc 4 and removed in 2sxc 10 - we don't think it was ever used moved internal Metadata interfaces (ca. 5) into final namespace ToSic.Eav.Metadata Moved a bunch of internal interfaces which we believe were never used externally from ToSic.Eav.Interfaces to ToSic.Eav.Data ToSic.Eav.Data.IAttribute ToSic.Eav.IAttribute<T> IAttributeBase IAttributeDefinition IChildEntities IContentType IDimension IEntityLight ILanguage IRelationshipManager IValue IValue<T> IValueOfDimension<T> Moved a bunch of internal interfaces which we believe were never used externally from ToSic.Eav.Apps.Interfaces to ToSic.Eav.Apps IApp IAppData IAppDataConfiguration IAppEnvironment IEnvironmentFactory IInstanceInfo IItemListAction IPagePublishing ITenant IZoneMapper the internal namespace ToSic.Eav.ValueProvider was changed to ToSic.Eav.LookUp and inside it we renamed a bunch of internal interfaces and objects which we believe were never used externally Deprecated/Changed, but not broken the internal interface ToSic.SexyContent.IAppAndDataHelpers was renamed to ToSic.Sxc.IDynamicCode but the old interface still exists, so it shouldn't break it was used by Mobius Forms moved ToSic.Eav.Interfaces.IEntity to ToSic.Eav.Data.IEntity - but preserved the old interface for compatibility it was used everywhere Clean-Up, but not broken We're transitioning to the term Header instead of ListContent in templates. The Razor pages and WebApi have this starting now, while old terms still work. Note that we're not creating a HeaderPresentation , because you should use Header.Presentation"
  },
  "basics/query/debug/index.html": {
    "href": "basics/query/debug/index.html",
    "title": "VisualQuery 3: Debugging | 2sxc 13 / EAV 13",
    "keywords": "VisualQuery 3: Debugging <!-- Data Highlights --> <!-- ADAM --> <!-- Server --> <!-- Prepare --> <!-- Data Source --> <!-- Optimzers --> <!-- Process / Awesomize --> <!-- Libraries --> <!-- data formats --> <!-- Browser --> <!-- Frameworks --> <!-- App show parts --> <!-- Interact parts --> <!-- Edit parts --> <!-- Edit UI parts --> <!-- SPA parts --> <!-- Custom highlight boxes - can be controlled by in-page CSS --> you are here (click to zoom) - discover the stack .context-box-summary .query-app { visibility: visible; } In 2sxc 11.13 we're introducing VisualQuery 3 with two new feature to help you create VisualQueries Stream Debugging Non-Breaking Errors Stream Debugging After running a query and closing the result-preview, you'll see how many items were on each stream. In VisualQuery 3 you can now click on that stream to see exactly what was contained in the stream itself. Note that in the image you see The title showing that you're looking at a stream The items in that stream An info that VisualQuery only picked the top 25 entries, but that you can re-run it with more results. Non-Breaking Errors Previously if there was an error in a Query, the entire query would fail and you would get a error message which was very difficult to debug. Now the system is much simpler. If any Stream has an error it will actually still provide a single Entity containing the error information. This looks like this: If you then click on the ‚ö† you'll see the full message like this: The button below will bring you to the 2sxc Insights ... ...where you can click on a request and search for Error or Exception to find out more: Security Considerations All the error information is also logged into Insights, so super-users can check that for more details. If the query blows on a normal user, the data will not contain any important information - so no paths, no internal values, etc. If the query blows on the Super-User we'll sometimes include more information - like the Path to the CSV file History Introduced in VisualQuery 3, 2sxc 11.13"
  },
  "basics/query/ref-in-code.html": {
    "href": "basics/query/ref-in-code.html",
    "title": "Use Queries in C# Code | 2sxc 13 / EAV 13",
    "keywords": "Use Queries in C# Code <!-- Data Highlights --> <!-- ADAM --> <!-- Server --> <!-- Prepare --> <!-- Data Source --> <!-- Optimzers --> <!-- Process / Awesomize --> <!-- Libraries --> <!-- data formats --> <!-- Browser --> <!-- Frameworks --> <!-- App show parts --> <!-- Interact parts --> <!-- Edit parts --> <!-- Edit UI parts --> <!-- SPA parts --> <!-- Custom highlight boxes - can be controlled by in-page CSS --> you are here (click to zoom) - discover the stack .context-box-summary .query-app { visibility: visible; } Queries can easily be used in code. Read more about that Using Queries in your Code"
  },
  "basics/query/ref-headless.html": {
    "href": "basics/query/ref-headless.html",
    "title": "Use Queries in Headless APIs | 2sxc 13 / EAV 13",
    "keywords": "Use Queries in Headless APIs <!-- Data Highlights --> <!-- ADAM --> <!-- Server --> <!-- Prepare --> <!-- Data Source --> <!-- Optimzers --> <!-- Process / Awesomize --> <!-- Libraries --> <!-- data formats --> <!-- Browser --> <!-- Frameworks --> <!-- App show parts --> <!-- Interact parts --> <!-- Edit parts --> <!-- Edit UI parts --> <!-- SPA parts --> <!-- Custom highlight boxes - can be controlled by in-page CSS --> you are here (click to zoom) - discover the stack .context-box-summary .query-app, .context-box-summary .process-headless { visibility: visible; } All Queries can be used in the Headless WebAPI. Read more about it here: Headless WebAPIs in 2sxc Query REST Web API"
  },
  "basics/query/ref-edit-form.html": {
    "href": "basics/query/ref-edit-form.html",
    "title": "Use Queries in Edit-UI Dropdowns | 2sxc 13 / EAV 13",
    "keywords": "Use Queries in Edit-UI Dropdowns <!-- Data Highlights --> <!-- ADAM --> <!-- Server --> <!-- Prepare --> <!-- Data Source --> <!-- Optimzers --> <!-- Process / Awesomize --> <!-- Libraries --> <!-- data formats --> <!-- Browser --> <!-- Frameworks --> <!-- App show parts --> <!-- Interact parts --> <!-- Edit parts --> <!-- Edit UI parts --> <!-- SPA parts --> <!-- Custom highlight boxes - can be controlled by in-page CSS --> you are here (click to zoom) - discover the stack .context-box-summary .query-app, .context-box-summary .process-headless { visibility: visible; } Dropdown fields (Related-Entity or String) in the Edit-Form can be configured to show values from a Query. They can also be cascaded - so that a selection on one dropdown changes the list of possible items on another dropdown. Read more about it here: Field Input-Type entity-query Field Input-Type string-dropdown-query"
  },
  "basics/query/query-system.html": {
    "href": "basics/query/query-system.html",
    "title": "System Queries | 2sxc 13 / EAV 13",
    "keywords": "System Queries <!-- Data Highlights --> <!-- ADAM --> <!-- Server --> <!-- Prepare --> <!-- Data Source --> <!-- Optimzers --> <!-- Process / Awesomize --> <!-- Libraries --> <!-- data formats --> <!-- Browser --> <!-- Frameworks --> <!-- App show parts --> <!-- Interact parts --> <!-- Edit parts --> <!-- Edit UI parts --> <!-- SPA parts --> <!-- Custom highlight boxes - can be controlled by in-page CSS --> you are here (click to zoom) - discover the stack .context-box-summary .query-built-in { visibility: visible; } This is a very internal spec - don't use it :). System Queries are stored as json in DesktopModules\\ToSIC_SexyContent\\.data\\queries . List of queries as of 2sxc 9.x through 10.x Eav.Queries.Global.Apps - retrieve all apps Eav.Queries.Global.Attributes - retrieve all the attributes of a content-type Eav.Queries.Global.ContentTypes - retrieve all content-types Eav.Queries.Global.Queries - retrieve all queries Eav.Queries.Global.QueryInfo - retrieve all streams and fields of a query Eav.Queries.Global.Zones - retrieve all zones History Introduced in 2sxc 07.00 In added in 2sxc 07.00 Params added in 2sxc 10.22"
  },
  "basics/metadata/of.html": {
    "href": "basics/metadata/of.html",
    "title": "Metadata Of Something - (advanced ‚ö†) | 2sxc 13 / EAV 13",
    "keywords": "Metadata Of Something - (advanced ‚ö†) <!-- Data Highlights --> <!-- ADAM --> <!-- Server --> <!-- Prepare --> <!-- Data Source --> <!-- Optimzers --> <!-- Process / Awesomize --> <!-- Libraries --> <!-- data formats --> <!-- Browser --> <!-- Frameworks --> <!-- App show parts --> <!-- Interact parts --> <!-- Edit parts --> <!-- Edit UI parts --> <!-- SPA parts --> <!-- Custom highlight boxes - can be controlled by in-page CSS --> you are here (click to zoom) - discover the stack .context-box-summary .data-all { visibility: visible; } Metadata is Data which describes or adds information to other data . When working with things (let's call it the Owner ) which have metadata, we talk about the Metadata being Metadata Of the Owner . In 2sxc many object have Metadata, such as Apps Content-Types Attribute Definitions Entities You can always access the Metadata through the .Metadata property. Tip When looking at Metadata from the Owner object, we call it Metadata Of the Owner . When looking at it from the Metadata-items point of view, they are Metadata-For the Owner . The Metadata Property You can probably learn a lot by looking at the API docs of MetadataOf but here are the important parts: You can loop through the Metadata property The Metadata-Property will always return at least 1 item, even if no metedata was specified. If no data was specified, the returned item will have an Id of 0 (zero) Additional helpers like GetBestValue let you quickly get a value without going through the items themselves History Introduced in 2sxc v2 Continuously improved in 2sxc 7, 8, 10 and 11"
  },
  "js-code/angular-js/angularjs-1-overview.html": {
    "href": "js-code/angular-js/angularjs-1-overview.html",
    "title": "AngularJs 1 Overview (obsolete) | 2sxc 13 / EAV 13",
    "keywords": "AngularJs 1 Overview (obsolete) Warning This is old, obsolete information. AngularJS is really dead. You should use Angular 2sxc contains a special helper called 2sxc4ng which takes care of starting your app inside Dnn and providing you with toolbars and data from 2sxc. How to use Until we find time to document everything, here's the short version To use 2sxc4ng you must include a JS file in your template, and you must bootstrap your app using this (not using the standard angularjs bootstrapping) this is to ensure that multiple Angular apps can run on the same page, and to provide your app with the necessary context so it knows what module it's working on, etc. Here's an introduction to that . To get your current sxc-controller there are two objects $2sxc and sxc which you can just include it in your function definition, like module.controller('AppCatalogCtrl', function ($2sxc, sxc, $http, ...) { The sxc is the one you want most, it is already set to your current instance, so you can ask it things like sxc.manage etc. The $2sxc is the same as the global $2sxc object you know from jquery. You could of course also do $2sxc(27).manage to acces the manage, but that's unnecessarily complicated Additional services provided when bootstrapping with 2sxc4ng is content(typename) - a service which requests content-data from the current app / context, can also delete / create items etc. query(queryname) - a service which gets data from app-queries Additional directives sxcToolbar - a create-toolbar directive to provide in-app toolbars to edit/manage etc. for <sxc-toolbar toolbar=\"...\"> tags Todo: a simple full example right here Including All Necessary Files You need three files + your code 2sxc.min.js - only necessary, if you intend to work with 2sxc data items & toolbars, must come before 2sxc4ng Angular - ideally from a CDN 2sxc4ng.min.js - only necessary, if you intend to work with 2sxc data items & toolbars, must come after angular Your code Example: <script src=\"/desktopmodules/tosic_sexycontent/js/2sxc.api.min.js\" data-enableoptimizations=\"100\"></script> <script src=\"//ajax.googleapis.com/ajax/libs/angularjs/1.6.1/angular.min.js\" data-enableoptimizations=\"101\"></script> <script src=\"/desktopmodules/tosic_sexycontent/js/angularjs/2sxc4ng.min.js\" data-enableoptimizations=\"110\"></script> <script src=\"@App.Path/dist/angular-app.min.js\" data-enableoptimizations=\"120\"></script> Toolbar Directive Quick example - this requires 2sxc 8.8 // a quick sxcToolbar example <li ng-repeat=\"app in apps\"> <sxc-toolbar toolbar='{ \"entityId\": app.EntityId }' settings='{ \"hover\": \"left\", \"align\": \"left\" }'></sxc-toolbar> ... </li> Content Service This is a quick example of the content service Todo: you can find some infos till then in the ( http://2sxc.org/en/Learn/Simple-AngularJS-in-DNN-with-2sxc4ng)(http://2sxc.org/en/Learn/Simple-AngularJS-in-DNN-with-2sxc4ng ) article Important: you can use the content service to get all of a type get one of a type create one of a type (if permissions have been configured for that type) delete one of a type (permissions...) quick demo of syntax var cSrv = content(\"BlogPosts\"); var onePromise = cSrv.get(740); var allPromise = cSrv.get(); var createPromise = cSrv.create({ \"Title\": \"hello\", \"Body\": \"great article\"}); var deletePromise = cSrv.delete(7740); Query Service This is a quick example of the query service Todo: you can find some infos till then in the ( http://2sxc.org/en/Learn/Simple-AngularJS-in-DNN-with-2sxc4ng)(http://2sxc.org/en/Learn/Simple-AngularJS-in-DNN-with-2sxc4ng ) article // this example assumes you added the query service in your constructor // it also assumes you created a visual-query called \"All-blog-items\" var qAll = query(\"All-blog-items\"); qAll.get().then(function (result) { ... // some code here }); // this assumes you want to query the data from the current view // so the real items assigned to this instance // or processed inside the view in a PrepareData() method var qCurrent = query(); qCurrent.get().then(function (result) { ... // some code here }); When working with queries that expect parameters, you can pass them in the get() call qAll.get({ data: { \"sort\": \"EntityTitle\" }, }).then(...) Notes and Clarifications On Bootstrapping Just fyi: in 2sxc 6.0 till 2sxc 8.8.0 the AngularJS bootstrapping needed to know the module-id. This was done by either providing an attribute like iid=\"@Dnn.Module.ModuleId\" or for tokens iid=\"[Module:ModuleId]\" providing the mod-id in the app name like sxc-app=\"MyApp-@Dnn.Module.ModuleId\" This is because it needs if for webservice calls. In 2sxc 8.8.1 the bootstrapping will auto-detect the module id, so you don't have to provide it any more. Read also Full explanation of bootstrapping and how/why etc. - which tells you why the current code is running so you could change the data added Demo App and further links You should find some code examples in this demo App Various AngularJS based apps History Introduced in 2sxc ??.?? sxcToolbar released in 2sxc 8.8.0"
  },
  "js-code/2sxc-api/sxc/sxc.webapi-fetch.html": {
    "href": "js-code/2sxc-api/sxc/sxc.webapi-fetch.html",
    "title": "The WebApi Helpers on the Sxc Controller using Fetch | 2sxc 13 / EAV 13",
    "keywords": "The WebApi Helpers on the Sxc Controller using Fetch <!-- Data Highlights --> <!-- ADAM --> <!-- Server --> <!-- Prepare --> <!-- Data Source --> <!-- Optimzers --> <!-- Process / Awesomize --> <!-- Libraries --> <!-- data formats --> <!-- Browser --> <!-- Frameworks --> <!-- App show parts --> <!-- Interact parts --> <!-- Edit parts --> <!-- Edit UI parts --> <!-- SPA parts --> <!-- Custom highlight boxes - can be controlled by in-page CSS --> you are here (click to zoom) - discover the stack .context-box-summary .interact-2sxc { visibility: visible; } Modern browsers all support fetch and this is now the preferred way to get data. 2sxc 13 introduce new JS APIs for this. Note: If you want to use other AJAX libraries, check out the Bare Metal APIs . Simple APIs The simple APIs perform a browser fetch and return a promise. This is very similar to jQuery. webApi.fetchRaw(...) performs a basic fetch and returns a standard promise containing a Response object webApi.fetchJson(...) performs a fetch and returs a promise containing an object which came from JSON recommended Parameters All of these methods can be called with just 1 parameter, the url . But for more control, you can have these parameters: url - short api url like controller/method?params or other variations (see below) data - optional POST data, empty by default. Can be a string or an object. If it's an object, it will auto-convert to JSON method - optional method name, default is GET , unless you specify data, in which case it defaults to POST Url The url can be any one of these: Api URL pointing to a WebAPI of the app - short like controller/method or long like app/auto/controller/method Query url with a query name like app/auto/query/queryName Data url pointing to the data like app/auto/data/contentType These can also have parameters like controller/method?id=27 or app/auto/data/contentType/574 depending on what the endpoint expects. Helper for URLs with Parameters v13 2sxc 13 enhances the webApi.url(...) function to build a url using a parameters object. So you can do either one of these examples: var webApi = $2sxc(moduleId).webApi; var jsonPromise1 = webApi.fetchJson('blog/rss?category=17'); var jsonPromise2 = webApi.fetchJson(webApi.url('blog/rss', { category: 17 })); Tutorial üëâ We've updated the simple web api tutorials to demo this Demo App and further links You should find some code examples in this demo App TimeLineJS History jQuery based webApi.get(...) etc. introduced in 2sxc 04.00 webApi.fetchRaw() , webApi.fetchJson() , webApi.url() , webApi.headers() API introduced as beta in v12.10 jQuery commands deprecated in v12.10 but will continue to work if the page has jQuery loaded webApi.url(...) enhanced with parameters object in v12.11 webApi.fetchRaw(...) created to fix difficult naming in 12.10; webApi.fetch(...) is now deprecated and will stop working soon - v13.04 webApi.fetchRaw , .fetchJson , sxc.data(...) and sxc.query(...) official for use 13.04"
  },
  "js-code/2sxc-api/sxc/sxc.webapi-bare-metal.html": {
    "href": "js-code/2sxc-api/sxc/sxc.webapi-bare-metal.html",
    "title": "The WebApi Helpers on the Sxc Controller - Bare Metal | 2sxc 13 / EAV 13",
    "keywords": "The WebApi Helpers on the Sxc Controller - Bare Metal <!-- Data Highlights --> <!-- ADAM --> <!-- Server --> <!-- Prepare --> <!-- Data Source --> <!-- Optimzers --> <!-- Process / Awesomize --> <!-- Libraries --> <!-- data formats --> <!-- Browser --> <!-- Frameworks --> <!-- App show parts --> <!-- Interact parts --> <!-- Edit parts --> <!-- Edit UI parts --> <!-- SPA parts --> <!-- Custom highlight boxes - can be controlled by in-page CSS --> you are here (click to zoom) - discover the stack .context-box-summary .interact-2sxc { visibility: visible; } In most cases you will want to use the new fetch APIs in 2sxc 12.10+. But there are cases where you want to create your own calls using Axios , jQuery , SuperAgent , Angular HttpClient or whatever API system you want. In these cases, you just need some help to... Get the correct URL for the endpoint Probably get all the headers you need for the security tokens This is what the Bare Metal APIs are for. Bare Metal APIs These APIs get you things you need to construct your own fetch , Request , XHR XMLHttpRequest or any of the above framework are these: webApi.url(url, params?) webApi.headers(verb?) webApi.url(...) This method will extend short API / Content / Query URLs for you. This means it will handle URLs like this: Simple api-urls like controller/method or controller/method?params will be converted to the full API needed Longer API urls like app/auto/controller/method will also be converted to the full url Parameters in the object params will be added as ?...=... v12.11+ webApi.headers(verb?) This will get you an object containing all the headers you need for a common WebAPI request. It includes things like: ModuleId and PageId Security headers/tokens Encoding headers - this will vary based on the optional verb you pass in If you don't specify a verb, GET is assumed, so it will only have encoding-headers for the response. History jQuery based webApi.get(...) etc. introduced in 2sxc 04.00 webApi.fetchRaw() , webApi.fetchJson() , webApi.url() , webApi.headers() API introduced as beta in v12.10 jQuery commands deprecated in v12.10 but will continue to work if the page has jQuery loaded webApi.url(...) enhanced with parameters object in v12.11 webApi.fetchRaw(...) created to fix difficult naming in 12.10; webApi.fetch(...) is now deprecated and will stop working soon - v13.04 webApi.fetchRaw , .fetchJson , sxc.data(...) and sxc.query(...) official for use 13.04"
  },
  "js-code/2sxc-api/sxc/sxc.query.html": {
    "href": "js-code/2sxc-api/sxc/sxc.query.html",
    "title": "Query Services of the Sxc Instance | 2sxc 13 / EAV 13",
    "keywords": "Query Services of the Sxc Instance <!-- Data Highlights --> <!-- ADAM --> <!-- Server --> <!-- Prepare --> <!-- Data Source --> <!-- Optimzers --> <!-- Process / Awesomize --> <!-- Libraries --> <!-- data formats --> <!-- Browser --> <!-- Frameworks --> <!-- App show parts --> <!-- Interact parts --> <!-- Edit parts --> <!-- Edit UI parts --> <!-- SPA parts --> <!-- Custom highlight boxes - can be controlled by in-page CSS --> you are here (click to zoom) - discover the stack .context-box-summary .interact-2sxc { visibility: visible; } A common need in JS is to read/write data from/to the backend. 2sxc 13 introduce new JS APIs for this. data(...) gets a data service to read/write data üëâ docs query(...) gets a query service to call server-side queries (this document) Note: You can do all what these services do using webApi.fetchJson(...) , but this is more convenient. üëâ Check out the Js Data and Query Tutorials Get a Query Service Get the Sxc Instance of the current module Call .query(queryName) to get the service Example: const modId = @CmsContext.Module.Id; const sxc = $2sxc(modId); const authorsSvc = sxc.query('BlogPosts'); authorsSvc.getAll().then(data => console.log(data)); Query Service Factory Parameters The query(...) factory just has one parameter: the queryName . The returned service will always perform actions for this query. Query Service APIs Query Services always return a modern Promise containing data. A Query Service has the following commands: getAll() - no parameters, will return an object with all the streams, each containing an arrays of all the data in that stream getAll(urlParams) - same as above but with url-parameters as a string or object getAll(urlParams, data) - same as above but with post-data getStream(streamName) - Same as GetAll, just using a specific stream name to retrieve getStream(streamName, urlParams) - Same as getStream , just with additional url parameters getStream(streamName, urlParams, data) - Same as before, just with post-data getStreams(streamNames) - Same as GetAll, just using a specific stream name to retrieve - can have multiple stream names comma-separated getStreams(streamNames, urlParams) - Same as above, just with additional url parameters getStreams(streamNames, urlParams, data) - Same as above, just with post-data Returned Data getAll and getStreams return multiple streams. The resulting object is based on this structure: { \"Default\": [ { ... }, { ... } ], \"NextStreamName\": [ { ... }, { ... } ] } getStream only retrieves one stream, so the it's clear that we don't need to pick by stream. The resulting object is based on this structure. [ { ... }, { ... } ] Tutorial üëâ Check out the Js Data and Query Tutorials Demo App and further links You should find some code examples in this demo App TimeLineJS History jQuery based webApi.get(...) etc. introduced in 2sxc 04.00 in 2sxc 4.0 there was also a data object but it had a very different purpose and rarely used 2sxc 13 created a new data(...) function based on the new fetch as a data service 2sxc 13 introduced query(...)"
  },
  "js-code/2sxc-api/sxc/sxc.data.html": {
    "href": "js-code/2sxc-api/sxc/sxc.data.html",
    "title": "Data Services of the Sxc Instance | 2sxc 13 / EAV 13",
    "keywords": "Data Services of the Sxc Instance <!-- Data Highlights --> <!-- ADAM --> <!-- Server --> <!-- Prepare --> <!-- Data Source --> <!-- Optimzers --> <!-- Process / Awesomize --> <!-- Libraries --> <!-- data formats --> <!-- Browser --> <!-- Frameworks --> <!-- App show parts --> <!-- Interact parts --> <!-- Edit parts --> <!-- Edit UI parts --> <!-- SPA parts --> <!-- Custom highlight boxes - can be controlled by in-page CSS --> you are here (click to zoom) - discover the stack .context-box-summary .interact-2sxc { visibility: visible; } A common need in JS is to read/write data from/to the backend. 2sxc 13 introduce new JS APIs for this. data(...) gets a data service to get one or many items of the same type, and also create/update data (this document) query(...) gets a query service to call server-side queries üëâ docs Note: You can do all what these services do using webApi.fetchJson(...) , but this is more convenient. Tip You may sometimes find old code which does something like data.on(...) or data.sourceUrl - this is obsolete and will not work any more. üëâ Check out the Js Data and Query Tutorials Tip The data format is described here: JSON Data Format used in WebAPI calls (technical) Get a Data Service Get the Sxc Instance of the current module Call .data(contentTypeName) to get the service Example: const modId = @CmsContext.Module.Id; const sxc = $2sxc(modId); const authorsSvc = sxc.data('Authors'); authorsSvc.getAll().then(authors => console.log(authors)); Data Service Factory Parameters The data(...) factory just has one parameter: the contentTypeName . The returned service will always perform actions for this content-type. Data Service APIs Data Services always return a modern Promise containing data. A Data Service has the following commands: getAll() - no parameters, will return an array of all items of this content-type getOne(id) - id is an int - will return a single item of this content-type create(objectWithValues) - objectWithValues is a JS object with keys/values - will create the item and return it create(objectWithValues, metadataFor) - metadataFor creates an item as metadata for something delete(id) WIP delete(guid) WIP update(id, objectWithValues) - performs an update on the targeted item and returns the item. Note that objectWithValues can also just have a few properties, all others will be left as is. Create Metadata When using create(..., ...) with two parameters you are creating metadata. The signature of the address-object is Either a string containing a GUID to an entity (the most common case) - like 31f509f1-e553-4371-bf60-3d5e98937b79 Or a full target identifier with TargetType and the ID as String, Number or Guid - see JSON Data Format used in WebAPI calls (technical) Tutorial üëâ Js Data and Query Tutorials Demo App and further links You should find some code examples in this demo App TimeLineJS History jQuery based webApi.get(...) etc. introduced in 2sxc 04.00 in 2sxc 4.0 there was also a data object but it had a very different purpose and rarely used 2sxc 13 created a new data(...) function based on the new fetch as a data service 2sxc 13 introduced query(...)"
  },
  "js-code/2sxc-api/sxc/sxc.cms.html": {
    "href": "js-code/2sxc-api/sxc/sxc.cms.html",
    "title": "cms Service of the Sxc Instance | 2sxc 13 / EAV 13",
    "keywords": "cms Service of the Sxc Instance <!-- Data Highlights --> <!-- ADAM --> <!-- Server --> <!-- Prepare --> <!-- Data Source --> <!-- Optimzers --> <!-- Process / Awesomize --> <!-- Libraries --> <!-- data formats --> <!-- Browser --> <!-- Frameworks --> <!-- App show parts --> <!-- Interact parts --> <!-- Edit parts --> <!-- Edit UI parts --> <!-- SPA parts --> <!-- Custom highlight boxes - can be controlled by in-page CSS --> you are here (click to zoom) - discover the stack .context-box-summary .interact-2sxc { visibility: visible; } Very often your JS will want to execute CMS related commands, like opening the edit dialog. The cms object on the Sxc-Instance is responsible for this. It's very similar to the global $2sxc.cms object , except that it already knows what context it's running in. Note This was introduced in 2sxc v13.03. It should replace most of the As of now, the cms object only has one command called run(...) . run Command The run command only has one signature: run<T>(runParams: RunParams): Promise<void | T> This is similar to the global run but it already knows the context it's running in. Tutorial TODO Demo App and further links TODO History Created in v13.03"
  },
  "basics/cms/languages/index.html": {
    "href": "basics/cms/languages/index.html",
    "title": "Multi-Language Content | 2sxc 13 / EAV 13",
    "keywords": "Multi-Language Content In 2sxc content/data is Multi-Language by default. Most of this is documented in Multilanguage Data . Active Languages per Site Each Site determines what languages are active in this specific site. Here's how: Edit-UI Translation Features The Edit-UI can make a field editable in certain languages and not in others. These are the factors that control it: Data is missing in the primary language (then translating it isn't possible yet) Some data is not multi-languages so it's either not editable in other languages, or the changes automatically affect all languages. This specifically affects these two cases: Related items (which are the same across languages) Asset-files (which are the same across languages) Field-Configuration disables translation of field (common in url-id-fields) Export-Import of Multi-Language Content This is documented in Data Export / Import ."
  },
  "basics/edit/edit-ux/context.html": {
    "href": "basics/edit/edit-ux/context.html",
    "title": "In-Page Editing Context (technical) | 2sxc 13 / EAV 13",
    "keywords": "In-Page Editing Context (technical) To ensure that client-side commands like edit can work (this includes all toolbar functionalities), the in-page scripts must pick up various things like AppId and more. This is provided as an Edit-Context and looks a bit like this: <div data-edit-context='{ \"Environment\":{\"WebsiteId\":0,\"WebsiteUrl\":\"//.../en/\",\"PageId\":56,\"PageUrl\":\"http://.../en/\",\"parameters\":[{\"Key\":\"TabId\",\"Value\":\"56\"},{\"Key\":\"language\",\"Value\":\"en-US\"}],\"InstanceId\":421,\"SxcVersion\":\"9.30.0.40333\",\"SxcRootUrl\":\"/\",\"IsEditable\":true}, \"User\":{\"CanDesign\":true,\"CanDevelop\":true}, \"Language\":{\"Current\":\"en-us\",\"Primary\":\"en-us\",\"All\":[]}, \"ContentBlock\":{\"ShowTemplatePicker\":true,\"IsEntity\":false,\"VersioningRequirements\":\"DraftOptional\",\"Id\":421,\"ParentFieldName\":null,\"ParentFieldSortOrder\":0,\"PartOfPage\":true}, \"ContentGroup\":{\"IsCreated\":true,\"IsList\":false,\"TemplateId\":3770,\"QueryId\":null,\"ContentTypeName\":\"e2351b42-87f2-427e-9566-ff271e3e5a9f\",\"AppUrl\":\"/Portals/0/2sxc/Content\",\"AppSettingsId\":null,\"AppResourcesId\":null,\"IsContent\":true,\"HasContent\":true,\"SupportsAjax\":true,\"ZoneId\":2,\"AppId\":2,\"Guid\":\"c238e78b-a6e5-4811-a5c9-51d5ebf48b39\",\"Id\":3894}, \"error\":{\"type\":null}, \"Ui\":{\"AutoToolbar\":true}}'> <span>more stuff...</span> </div> How the Edit-Context is Added By default, it is automatically added if the system detects that the current user has edit-permissions. In 2sxc 9.30 a feature was added to add the context in code, using the Edit.Enable(...) command. Inner-Context for Inner Content When inner content is used, each block of inner-content will change the context, because it will have different IDs etc. So inner-content blocks will add their own context-attributes. See also [Edit.ContextAttributes](xref:Razor.ContextAttributes]. How JS Picks up the Context In most cases the context is picked up automatically - like in such a code: <a onclick=\"$2sxc(this).run('edit', ...)\">edit</a> This kind of code traverses the HTML to look for the closes context-node, and uses it to figure out everything automatically. The second auto-pickup method uses the module/content-block ID, like this: <a onclick=\"$2sxc(4203).run('edit', ...)\">edit</a> This will also find the context, but instead of traversing the DOM upwards, it will check all DOM objects on the page and find the appropriate one for this ID. What's in the Context This information is just conceptual. Do NOT try to access these values in your code, because they will change, and it's not part of any public API! . The concept contains things like: versions (so that the UI can behave as needed and correctly load scripts with cache-breaking) urls so the GUI can perform certain actions correctly language information for the GUI various IDs like the current zone/app, item-IDs, module-IDs etc. Using Edit Context in Your Code You should not use this in your code, as it's not a public api and will change from time to time. History Introduced in 2sxc 1.0 constantly modified/extended in future versions"
  },
  "api/dot-net/ToSic.Sxc.Search.SearchIndexException.html": {
    "href": "api/dot-net/ToSic.Sxc.Search.SearchIndexException.html",
    "title": "Class SearchIndexException | 2sxc 13 / EAV 13",
    "keywords": "Class SearchIndexException Special search exception, so these exceptions can be handled in a special way if necessary. Inheritance System.Object System.Exception SearchIndexException Implements System.Runtime.Serialization.ISerializable System.Runtime.InteropServices._Exception Inherited Members System.Exception.GetBaseException() System.Exception.ToString() System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext) System.Exception.GetType() System.Exception.Message System.Exception.Data System.Exception.InnerException System.Exception.TargetSite System.Exception.StackTrace System.Exception.HelpLink System.Exception.Source System.Exception.HResult System.Exception.SerializeObjectState Namespace : ToSic.Sxc.Search Assembly : ToSic.Sxc.Dnn.Core.dll Syntax [InternalApi_DoNotUse_MayChangeWithoutNotice(\"this is just fyi\")] public class SearchIndexException : Exception, ISerializable, _Exception Constructors | Improve this Doc View Source SearchIndexException(ModuleInfo, Exception, String, Int32, Int32) Declaration public SearchIndexException(ModuleInfo module, Exception innerException, string source, int count, int max) Parameters Type Name Description DotNetNuke.Entities.Modules.ModuleInfo module System.Exception innerException System.String source System.Int32 count System.Int32 max Implements System.Runtime.Serialization.ISerializable System.Runtime.InteropServices._Exception"
  },
  "api/dot-net/ToSic.Eav.DataSources.Queries.QueryPartDefinition.html": {
    "href": "api/dot-net/ToSic.Eav.DataSources.Queries.QueryPartDefinition.html",
    "title": "Class QueryPartDefinition | 2sxc 13 / EAV 13",
    "keywords": "Class QueryPartDefinition The configuration / definition of a query part. The QueryDefinition uses a bunch of these together to build a query. Inheritance System.Object EntityBasedType EntityBasedWithLog QueryPartDefinition Implements IEntityBasedType IEntityWrapper IHasDecorators < IEntity > IHasLog Inherited Members EntityBasedWithLog.Log EntityBasedType.Entity EntityBasedType.Decorators EntityBasedType.Title EntityBasedType.Id EntityBasedType.Guid EntityBasedType.Metadata EntityBasedType.Get<T>(String, T) Namespace : ToSic.Eav.DataSources.Queries Assembly : ToSic.Eav.DataSources.dll Syntax [InternalApi_DoNotUse_MayChangeWithoutNotice(\"this is just fyi\")] public class QueryPartDefinition : EntityBasedWithLog, IEntityBasedType, IEntityWrapper, IHasDecorators<IEntity>, IMultiWrapper<IEntity>, IHasLog Properties | Improve this Doc View Source DataSourceType The .net type which the data source has for this part. Will automatically resolve old names to new names as specified in the DataSources VisualQueryAttribute Declaration public string DataSourceType { get; } Property Value Type Description System.String | Improve this Doc View Source VisualDesignerData Information for this part, how it's to be displayed in the visual query. This is a JSON string containing positioning etc. Declaration public string VisualDesignerData { get; } Property Value Type Description System.String Implements IEntityBasedType IEntityWrapper IHasDecorators<T> IHasLog"
  },
  "api/dot-net/ToSic.Eav.LookUp.ILookUp.html": {
    "href": "api/dot-net/ToSic.Eav.LookUp.ILookUp.html",
    "title": "Interface ILookUp | 2sxc 13 / EAV 13",
    "keywords": "Interface ILookUp A key-value map which resolves keys like \"SortOrder\" to \"asc\". It's usually used to get pre-stored configuration or to get settings from the context. Read more about this in LookUp System Namespace : ToSic.Eav.LookUp Assembly : ToSic.Eav.Core.dll Syntax [PublicApi_Stable_ForUseInYourCode] public interface ILookUp Properties | Improve this Doc View Source Name Gets the Name of this LookUp, e.g. QueryString or PipelineSettings Declaration string Name { get; } Property Value Type Description System.String The name which is used to identify this LookUp, like in a ILookUpEngine Methods | Improve this Doc View Source Get(String) Gets a value by Name/key, will simply return the string or an empty string, in rare cases a null-value. Declaration string Get(string key) Parameters Type Name Description System.String key Returns Type Description System.String The resolved value, or an empty string if not found. Note that it could also resolve to an empty string if found - use Has to check for that case. | Improve this Doc View Source Get(String, String) Gets a value by Name/key and tries to format it in a special way (like for dates) Declaration string Get(string key, string format) Parameters Type Name Description System.String key Name of the Property System.String format Format String Returns Type Description System.String"
  },
  "api/dot-net/ToSic.Eav.DataFormats.EavLight.EavLightEntity.html": {
    "href": "api/dot-net/ToSic.Eav.DataFormats.EavLight.EavLightEntity.html",
    "title": "Class EavLightEntity | 2sxc 13 / EAV 13",
    "keywords": "Class EavLightEntity DTO for the most basic JSON format of EAV. It's a simple dictionary with name-value pairs. It is for export/serialization only, there is no official way to re-import an entity of this type. It is only meant to hold values of one language. Note that keys are always System.StringComparer.InvariantCultureIgnoreCase Inheritance System.Object System.Collections.Generic.Dictionary < System.String , System.Object > EavLightEntity Implements System.Collections.Generic.IDictionary < System.String , System.Object > System.Collections.Generic.ICollection < System.Collections.Generic.KeyValuePair < System.String , System.Object >> System.Collections.IDictionary System.Collections.ICollection System.Collections.Generic.IReadOnlyDictionary < System.String , System.Object > System.Collections.Generic.IReadOnlyCollection < System.Collections.Generic.KeyValuePair < System.String , System.Object >> System.Collections.Generic.IEnumerable < System.Collections.Generic.KeyValuePair < System.String , System.Object >> System.Collections.IEnumerable System.Runtime.Serialization.ISerializable System.Runtime.Serialization.IDeserializationCallback Inherited Members System.Collections.Generic.Dictionary<System.String, System.Object>.Add(System.String, System.Object) System.Collections.Generic.Dictionary<System.String, System.Object>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String, System.Object>>.Add(System.Collections.Generic.KeyValuePair<System.String, System.Object>) System.Collections.Generic.Dictionary<System.String, System.Object>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String, System.Object>>.Contains(System.Collections.Generic.KeyValuePair<System.String, System.Object>) System.Collections.Generic.Dictionary<System.String, System.Object>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String, System.Object>>.Remove(System.Collections.Generic.KeyValuePair<System.String, System.Object>) System.Collections.Generic.Dictionary<System.String, System.Object>.Clear() System.Collections.Generic.Dictionary<System.String, System.Object>.ContainsKey(System.String) System.Collections.Generic.Dictionary<System.String, System.Object>.ContainsValue(System.Object) System.Collections.Generic.Dictionary<System.String, System.Object>.GetEnumerator() System.Collections.Generic.Dictionary<System.String, System.Object>.System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.String, System.Object>>.GetEnumerator() System.Collections.Generic.Dictionary<System.String, System.Object>.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext) System.Collections.Generic.Dictionary<System.String, System.Object>.OnDeserialization(System.Object) System.Collections.Generic.Dictionary<System.String, System.Object>.Remove(System.String) System.Collections.Generic.Dictionary<System.String, System.Object>.TryGetValue(System.String, System.Object) System.Collections.Generic.Dictionary<System.String, System.Object>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String, System.Object>>.CopyTo(System.Collections.Generic.KeyValuePair<System.String, System.Object>[], System.Int32) System.Collections.Generic.Dictionary<System.String, System.Object>.System.Collections.ICollection.CopyTo(System.Array, System.Int32) System.Collections.Generic.Dictionary<System.String, System.Object>.System.Collections.IEnumerable.GetEnumerator() System.Collections.Generic.Dictionary<System.String, System.Object>.System.Collections.IDictionary.get_Item(System.Object) System.Collections.Generic.Dictionary<System.String, System.Object>.System.Collections.IDictionary.set_Item(System.Object, System.Object) System.Collections.Generic.Dictionary<System.String, System.Object>.System.Collections.IDictionary.Add(System.Object, System.Object) System.Collections.Generic.Dictionary<System.String, System.Object>.System.Collections.IDictionary.Contains(System.Object) System.Collections.Generic.Dictionary<System.String, System.Object>.System.Collections.IDictionary.GetEnumerator() System.Collections.Generic.Dictionary<System.String, System.Object>.System.Collections.IDictionary.Remove(System.Object) System.Collections.Generic.Dictionary<System.String, System.Object>.Comparer System.Collections.Generic.Dictionary<System.String, System.Object>.Count System.Collections.Generic.Dictionary<System.String, System.Object>.Keys System.Collections.Generic.Dictionary<System.String, System.Object>.System.Collections.Generic.IDictionary<System.String, System.Object>.Keys System.Collections.Generic.Dictionary<System.String, System.Object>.System.Collections.Generic.IReadOnlyDictionary<System.String, System.Object>.Keys System.Collections.Generic.Dictionary<System.String, System.Object>.Values System.Collections.Generic.Dictionary<System.String, System.Object>.System.Collections.Generic.IDictionary<System.String, System.Object>.Values System.Collections.Generic.Dictionary<System.String, System.Object>.System.Collections.Generic.IReadOnlyDictionary<System.String, System.Object>.Values System.Collections.Generic.Dictionary<System.String, System.Object>.Item[System.String] System.Collections.Generic.Dictionary<System.String, System.Object>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String, System.Object>>.IsReadOnly System.Collections.Generic.Dictionary<System.String, System.Object>.System.Collections.ICollection.IsSynchronized System.Collections.Generic.Dictionary<System.String, System.Object>.System.Collections.ICollection.SyncRoot System.Collections.Generic.Dictionary<System.String, System.Object>.System.Collections.IDictionary.IsFixedSize System.Collections.Generic.Dictionary<System.String, System.Object>.System.Collections.IDictionary.IsReadOnly System.Collections.Generic.Dictionary<System.String, System.Object>.System.Collections.IDictionary.Keys System.Collections.Generic.Dictionary<System.String, System.Object>.System.Collections.IDictionary.Values System.Collections.Generic.Dictionary<System.String, System.Object>.System.Collections.IDictionary.Item[System.Object] Namespace : ToSic.Eav.DataFormats.EavLight Assembly : ToSic.Eav.ImportExport.dll Syntax [InternalApi_DoNotUse_MayChangeWithoutNotice(\"Internal DTO objects are documented for better understanding, but can change with time. You usually will not need them in your code. \")] public class EavLightEntity : Dictionary<string, object>, IDictionary<string, object>, ICollection<KeyValuePair<string, object>>, IDictionary, ICollection, IReadOnlyDictionary<string, object>, IReadOnlyCollection<KeyValuePair<string, object>>, IEnumerable<KeyValuePair<string, object>>, IEnumerable, ISerializable, IDeserializationCallback Remarks Introduced ca. 2sxc 4.0 just as a Dictionary, but for the documentation we created an own IJsonEntity type in 2sxc 12.05 Constructors | Improve this Doc View Source EavLightEntity() Declaration public EavLightEntity() Implements System.Collections.Generic.IDictionary<TKey, TValue> System.Collections.Generic.ICollection<T> System.Collections.IDictionary System.Collections.ICollection System.Collections.Generic.IReadOnlyDictionary<TKey, TValue> System.Collections.Generic.IReadOnlyCollection<T> System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable System.Runtime.Serialization.ISerializable System.Runtime.Serialization.IDeserializationCallback"
  },
  "api/dot-net/ToSic.Eav.Data.IEntity.html": {
    "href": "api/dot-net/ToSic.Eav.Data.IEntity.html",
    "title": "Interface IEntity | 2sxc 13 / EAV 13",
    "keywords": "Interface IEntity The primary data-item in the system, IEntity is a generic data-item for any kind of information. Note that it inherits IEntityLight which is the basic definition without languages, versioning, publishing etc. We recommend you read about the Understanding Data... Inherited Members IEntityLight.EntityId IEntityLight.EntityGuid IEntityLight.MetadataFor IEntityLight.Type IEntityLight.Modified IEntityLight.Created IEntityLight.Relationships IEntityLight.GetBestTitle() IEntityLight.Owner IAppIdentityLight.AppId IHasPermissions.Permissions Namespace : ToSic.Eav.Data Assembly : ToSic.Eav.Core.dll Syntax [PublicApi_Stable_ForUseInYourCode] public interface IEntity : IPropertyLookup, IHasMetadata, IEntity, IEntityLight, IAppIdentityLight, IPublish<IEntity>, IHasPermissions Properties | Improve this Doc View Source Attributes All the attributes of the current Entity. Declaration Dictionary<string, IAttribute> Attributes { get; } Property Value Type Description System.Collections.Generic.Dictionary < System.String , IAttribute > | Improve this Doc View Source Item[String] Gets an Attribute using its StaticName Declaration IAttribute this[string attributeName] { get; } Parameters Type Name Description System.String attributeName StaticName of the Attribute Property Value Type Description IAttribute A typed Attribute Object | Improve this Doc View Source Metadata Get the metadata for this item Declaration IMetadataOf Metadata { get; } Property Value Type Description IMetadataOf A typed Metadata provider for this Entity Remarks The metadata is either already prepared, from the same app, or from a remote app | Improve this Doc View Source Title Gets the \"official\" Title-Attribute IAttribute<T> Declaration IAttribute Title { get; } Property Value Type Description IAttribute The title of this Entity. The field used is determined in the IContentType . If you need a string, use GetBestTitle() instead. | Improve this Doc View Source Version version of this entity in the repository Declaration int Version { get; } Property Value Type Description System.Int32 The version number. Methods | Improve this Doc View Source Children(String, String) Get all the children IEntity items - optionally only of a specific field and/or type Declaration List<IEntity> Children(string field = null, string type = null) Parameters Type Name Description System.String field Optional field name to access System.String type Optional type to filter for Returns Type Description System.Collections.Generic.List < IEntity > List of children, or empty list if not found | Improve this Doc View Source GetBestTitle(String[]) Best way to get the current entities title Declaration string GetBestTitle(string[] dimensions) Parameters Type Name Description System.String [] dimensions Array of dimensions/languages to use in the lookup Returns Type Description System.String The entity title as a string | Improve this Doc View Source GetBestValue(String, String[]) Retrieves the best possible value for an attribute or virtual attribute (like EntityTitle) Automatically resolves the language-variations as well based on the list of preferred languages Declaration object GetBestValue(string attributeName, string[] languages) Parameters Type Name Description System.String attributeName Name of the attribute or virtual attribute System.String [] languages list of languages to search in Returns Type Description System.Object An object OR a null - for example when retrieving the title and no title exists the object is string, int or even a EntityRelationship | Improve this Doc View Source GetBestValue(String, String[], Boolean) Retrieves the best possible value for an attribute or virtual attribute (like EntityTitle) Automatically resolves the language-variations as well based on the list of preferred languages Declaration [Obsolete] object GetBestValue(string attributeName, string[] languages, bool resolveHyperlinks) Parameters Type Name Description System.String attributeName Name of the attribute or virtual attribute System.String [] languages list of languages to search in System.Boolean resolveHyperlinks If true, will try to resolve links in the value. Default is false. Returns Type Description System.Object An object OR a null - for example when retrieving the title and no title exists the object is string, int or even a EntityRelationship | Improve this Doc View Source GetBestValue<T>(String, String[]) Retrieves the best possible value for an attribute or virtual attribute (like EntityTitle) Automatically resolves the language-variations as well based on the list of preferred languages. Will cast/convert to the expected type, or return null / default value for that type if not possible. Declaration T GetBestValue<T>(string attributeName, string[] languages) Parameters Type Name Description System.String attributeName Name of the attribute or virtual attribute System.String [] languages list of languages to search in Returns Type Description T An object OR a null - for example when retrieving the title and no title exists the object is string, int or even a EntityRelationship Type Parameters Name Description T | Improve this Doc View Source GetBestValue<T>(String, String[], Boolean) Retrieves the best possible value for an attribute or virtual attribute (like EntityTitle) Automatically resolves the language-variations as well based on the list of preferred languages. Will cast/convert to the expected type, or return null / default value for that type if not possible. Declaration [Obsolete] T GetBestValue<T>(string attributeName, string[] languages, bool resolveHyperlinks) Parameters Type Name Description System.String attributeName Name of the attribute or virtual attribute System.String [] languages list of languages to search in System.Boolean resolveHyperlinks If true, will try to resolve links in the value. Default is false. Returns Type Description T An object OR a null - for example when retrieving the title and no title exists the object is string, int or even a EntityRelationship Type Parameters Name Description T | Improve this Doc View Source Parents(String, String) Get all the parent IEntity items - optionally only of a specific type and/or referenced in a specific field Declaration List<IEntity> Parents(string type = null, string field = null) Parameters Type Name Description System.String type The type name to filter for System.String field The field name where a parent references this item Returns Type Description System.Collections.Generic.List < IEntity > List of children, or empty list if not found | Improve this Doc View Source Value(String) Get the value of this field as an object. This overload without languages will always return the first value it finds, so if the data is multi-lingual, it's not reliable. This is preferred for internal work for configuration objects and similar which are not multi-language. Declaration object Value(string fieldName) Parameters Type Name Description System.String fieldName Returns Type Description System.Object The value or null if not found Remarks In addition to the fields this Entity has (like FirstName, etc.) you can also use known terms like EntityId, Modified etc. | Improve this Doc View Source Value<T>(String) Get the value of this field in a type-safe way. This overload without languages will always return the first value it finds, so if the data is multi-lingual, it's not reliable. This is preferred for internal work for configuration objects and similar which are not multi-language. Declaration T Value<T>(string fieldName) Parameters Type Name Description System.String fieldName Returns Type Description T The typed value or the (default) value - so a null for strings, false for boolean etc. Type Parameters Name Description T The type, usually string, int, bool, etc. Remarks In addition to the fields this Entity has (like FirstName, etc.) you can also use known terms like EntityId, Modified etc."
  },
  "api/dot-net/ToSic.Eav.Caching.SynchronizedObject-1.html": {
    "href": "api/dot-net/ToSic.Eav.Caching.SynchronizedObject-1.html",
    "title": "Class SynchronizedObject<T> | 2sxc 13 / EAV 13",
    "keywords": "Class SynchronizedObject<T> WIP 12.03 Inheritance System.Object SynchronizedObject<T> SynchronizedList<T> Implements ICacheDependent ICacheExpiring ITimestamped Namespace : ToSic.Eav.Caching Assembly : ToSic.Eav.Core.dll Syntax [InternalApi_DoNotUse_MayChangeWithoutNotice(\"this is just fyi\")] public class SynchronizedObject<T> : ICacheDependent, ICacheExpiring, ITimestamped Type Parameters Name Description T The type which is enumerated, usually an IEntity Constructors | Improve this Doc View Source SynchronizedObject(ICacheExpiring, Func<T>) Initialized a new list which depends on another source Declaration public SynchronizedObject(ICacheExpiring upstream, Func<T> rebuild) Parameters Type Name Description ICacheExpiring upstream the upstream cache which can tell us if a refresh is necessary System.Func <T> rebuild the method which rebuilds the list Fields | Improve this Doc View Source Cache The cached object/result Declaration protected T Cache Field Value Type Description T | Improve this Doc View Source RebuildCache A callback to rebuild the cache which is provided when this object is created Declaration protected readonly Func<T> RebuildCache Field Value Type Description System.Func <T> | Improve this Doc View Source RebuildCount Counter to see how often the cache had been reset. Declaration public int RebuildCount Field Value Type Description System.Int32 | Improve this Doc View Source Upstream Upstream source which implements ICacheExpiring to tell this object when the data must be refreshed Declaration protected readonly ICacheExpiring Upstream Field Value Type Description ICacheExpiring Properties | Improve this Doc View Source CacheTimestamp System time-stamp of when the data in this cached thing was initialized or updated. Depending on the implementation, this may go up-stream and return an up-stream value. Declaration public long CacheTimestamp { get; } Property Value Type Description System.Int64 A timestamp as a long number | Improve this Doc View Source Value Retrieves the list - either the cache one, or if timestamp has changed, rebuild and return that Declaration public virtual T Value { get; } Property Value Type Description T Methods | Improve this Doc View Source CacheChanged() Find out if the source it depends on has changed. Declaration public bool CacheChanged() Returns Type Description System.Boolean True if the upstream cache returns a newer timestamp | Improve this Doc View Source CacheChanged(Int64) Detect if the cache has old data, by comparing it to a timestamp which may be newer. This is implemented in each object, because sometimes it compares its own timestamp, sometimes that of another underlying object. Declaration public bool CacheChanged(long newCacheTimeStamp) Parameters Type Name Description System.Int64 newCacheTimeStamp New time stamp to compare with Returns Type Description System.Boolean True if the timestamps differ, false if it's the same Implements ICacheDependent ICacheExpiring ITimestamped"
  },
  "api/dot-net/ToSic.Eav.Apps.IAppIdentityLight.html": {
    "href": "api/dot-net/ToSic.Eav.Apps.IAppIdentityLight.html",
    "title": "Interface IAppIdentityLight | 2sxc 13 / EAV 13",
    "keywords": "Interface IAppIdentityLight Marks things which belongs to an App - but it may only know about the app, not about the zone. For a full identity, see IAppIdentity . Namespace : ToSic.Eav.Apps Assembly : ToSic.Eav.Core.dll Syntax [InternalApi_DoNotUse_MayChangeWithoutNotice(\"this is just fyi\")] public interface IAppIdentityLight Properties | Improve this Doc View Source AppId The app id as used internally Declaration int AppId { get; } Property Value Type Description System.Int32 The App ID this thing belongs to"
  },
  "api/dot-net/ToSic.Eav.Data.IValue-1.html": {
    "href": "api/dot-net/ToSic.Eav.Data.IValue-1.html",
    "title": "Interface IValue<T> | 2sxc 13 / EAV 13",
    "keywords": "Interface IValue<T> Represents a Value with a specific type (string, decimal, etc.). Inherited Members IValue.Languages IValue.SerializableObject Namespace : ToSic.Eav.Data Assembly : ToSic.Eav.Core.dll Syntax [PublicApi_Stable_ForUseInYourCode] public interface IValue<out T> : IValue Type Parameters Name Description T Type of the actual Value Properties | Improve this Doc View Source TypedContents Typed contents of the value Declaration T TypedContents { get; } Property Value Type Description T"
  },
  "api/dot-net/ToSic.Eav.Data.IAttributeBase.html": {
    "href": "api/dot-net/ToSic.Eav.Data.IAttributeBase.html",
    "title": "Interface IAttributeBase | 2sxc 13 / EAV 13",
    "keywords": "Interface IAttributeBase Represents properties we should know about Attributes. This is the base for both IContentTypeAttribute (in the IContentType) attribute with values-list (in the IEntity) Namespace : ToSic.Eav.Data Assembly : ToSic.Eav.Core.dll Syntax [PublicApi_Stable_ForUseInYourCode] public interface IAttributeBase Remarks We recommend you read about the Understanding Data... Properties | Improve this Doc View Source ControlledType The official type, as a controlled value Declaration ValueTypes ControlledType { get; } Property Value Type Description ValueTypes | Improve this Doc View Source Name Name of the Attribute Declaration string Name { get; } Property Value Type Description System.String | Improve this Doc View Source Type Type of the Attribute like 'string', 'decimal' etc. Declaration string Type { get; } Property Value Type Description System.String"
  },
  "api/dot-net/ToSic.Eav.Apps.IAppData.html": {
    "href": "api/dot-net/ToSic.Eav.Apps.IAppData.html",
    "title": "Interface IAppData | 2sxc 13 / EAV 13",
    "keywords": "Interface IAppData An App-DataSource which also provides direct commands to edit/update/delete data. Inherited Members IDataSource.Out IDataSource.Item[String] IDataSource.GetStream(String, String, Boolean, Boolean) IDataSource.List IDataSource.Configuration IDataSource.LogId IDataSource.CacheRelevantConfigurations IDataSource.CacheKey IZoneIdentity.ZoneId IAppIdentityLight.AppId ICacheKey.CachePartialKey ICacheKey.CacheFullKey ICanPurgeListCache.PurgeList(Boolean) IHasLog.Log IDataTarget.In IDataTarget.Attach(IDataSource) IDataTarget.Attach(String, IDataSource, String) IDataTarget.Attach(String, IDataStream) IDataPartShared.Guid IDataPartShared.Name IMetadataSource.GetMetadata<TKey>(Int32, TKey, String) IMetadataSource.GetMetadata<TKey>(TargetTypes, TKey, String) ICacheExpiring.CacheChanged(Int64) ITimestamped.CacheTimestamp Namespace : ToSic.Eav.Apps Assembly : ToSic.Eav.Apps.dll Syntax [PublicApi_Stable_ForUseInYourCode] public interface IAppData : IDataSource, IAppIdentity, IZoneIdentity, IAppIdentityLight, ICacheInfo, ICacheKey, ICanPurgeListCache, IHasLog, IDataTarget, IDataPartShared, IMetadataSource, ICacheExpiring, ITimestamped Methods | Improve this Doc View Source Create(String, Dictionary<String, Object>, String, ITarget) Create a new entity in the storage. Declaration IEntity Create(string contentTypeName, Dictionary<string, object> values, string userName = null, ITarget target = null) Parameters Type Name Description System.String contentTypeName The type name System.Collections.Generic.Dictionary < System.String , System.Object > values a dictionary of values to be stored System.String userName the current user name - will be logged as the author ITarget target information if this new item is to be metadata for something Returns Type Description IEntity Remarks Changed in 2sxc 10.30 - now returns the id of the created items | Improve this Doc View Source Create(String, IEnumerable<Dictionary<String, Object>>, String) Create a bunch of new entities in one single call (much faster, because cache doesn't need to repopulate in the mean time). Declaration IEnumerable<IEntity> Create(string contentTypeName, IEnumerable<Dictionary<string, object>> multiValues, string userName = null) Parameters Type Name Description System.String contentTypeName The type name System.Collections.Generic.IEnumerable < System.Collections.Generic.Dictionary < System.String , System.Object >> multiValues many dictionaries, each will become an own item when stored System.String userName the current user name - will be logged as the author Returns Type Description System.Collections.Generic.IEnumerable < IEntity > Remarks You can't create items which are metadata with this, for that, please use the Create-one overload Changed in 2sxc 10.30 - now returns the id of the created items | Improve this Doc View Source Delete(Int32, String) Delete an existing item Declaration void Delete(int entityId, string userName = null) Parameters Type Name Description System.Int32 entityId The item ID System.String userName the current user name - will be logged as the author of the change | Improve this Doc View Source GetCustomMetadata<TKey>(TKey, String) Get metadata of TargetType.Custom - which is the most common way your code will need Metadata. Declaration IEnumerable<IEntity> GetCustomMetadata<TKey>(TKey key, string contentTypeName = null) Parameters Type Name Description TKey key The target identifier - a number, string or Guid System.String contentTypeName Optional name of Content-Type, if you only want items of a specific type Returns Type Description System.Collections.Generic.IEnumerable < IEntity > Type Parameters Name Description TKey Key data type | Improve this Doc View Source Update(Int32, Dictionary<String, Object>, String) Update an existing item. Declaration void Update(int entityId, Dictionary<string, object> values, string userName = null) Parameters Type Name Description System.Int32 entityId The item ID System.Collections.Generic.Dictionary < System.String , System.Object > values a dictionary of values to be updated System.String userName the current user name - will be logged as the author of the change"
  },
  "api/dot-net/Custom.Hybrid.Razor12.html": {
    "href": "api/dot-net/Custom.Hybrid.Razor12.html",
    "title": "Class Razor12 | 2sxc 13 / EAV 13",
    "keywords": "Class Razor12 The base class for Hybrid Razor-Components in 2sxc 12 Provides context objects like CmsContext, helpers like Edit and much more. Inheritance System.Object System.Web.WebPages.WebPageExecutingBase System.Web.WebPages.WebPageRenderingBase System.Web.WebPages.WebPageBase ToSic.Sxc.Web.RazorComponentBase Razor12 Razor12 Implements IDynamicCode12 IDynamicCode ICreateInstance ICompatibilityLevel IHasLog Namespace : Custom.Hybrid Assembly : ToSic.Sxc.Dnn.Razor.dll Syntax [PublicApi] public abstract class Razor12 : RazorComponentBase, ITemplateFile, IDnnRazor, IRazor12, IRazor, IHasDynamicCodeRoot, INeedsDynamicCodeRoot, IDynamicCode12, IDynamicCode, ICreateInstance, ICompatibilityLevel, IHasLog Properties | Improve this Doc View Source App A fully prepared IApp object letting you access all the data and queries in the current app. Declaration public IApp App { get; } Property Value Type Description IApp The current app | Improve this Doc View Source CmsContext The CmsContext tells you about the environment, like what page and module we're running in. It's supposed to replace the Dnn object in Razor and WebAPI code. Declaration public ICmsContext CmsContext { get; } Property Value Type Description ICmsContext Remarks New in v11.11 | Improve this Doc View Source Content The content object of the current razor view - IF the current view has content. If the view is a list, it will return the first item. Will be null otherwise. To tell if it's the demo/default item, use IsDemoItem . Declaration public dynamic Content { get; } Property Value Type Description System.Object A IDynamicEntity object with the current content - or null. | Improve this Doc View Source Convert Conversion helper for common data conversions in Razor and WebAPIs Declaration public IConvertService Convert { get; } Property Value Type Description IConvertService Remarks Added in 2sxc 12.05 | Improve this Doc View Source Data The data prepared for the current Code. Usually user data which was manually added to the instance, but can also be a query. Declaration public IBlockDataSource Data { get; } Property Value Type Description IBlockDataSource An IBlockDataSource which is as IDataSource . | Improve this Doc View Source DevTools Declaration public IDevTools DevTools { get; } Property Value Type Description ToSic.Sxc.Code.DevTools.IDevTools | Improve this Doc View Source DynamicModel Dynamic object containing parameters. So in Dnn it contains the PageData, in Oqtane it contains the Model Declaration [PublicApi] public dynamic DynamicModel { get; } Property Value Type Description System.Object Remarks New in v12 | Improve this Doc View Source Edit Helper commands to enable in-page editing functionality Use it to check if edit is enabled, generate context-json infos and provide toolbar buttons Declaration public IEditService Edit { get; } Property Value Type Description IEditService An IEditService object. | Improve this Doc View Source Header The header object of the current razor view, if it's a list and has a header object. If it's a list and doesn't have a header (and no default), it will return null. To tell if it's the demo/default item, use IsDemoItem . Declaration public dynamic Header { get; } Property Value Type Description System.Object A IDynamicEntity object with the current content. Remarks Introduced in 2sxc 10.10 - previously it was called ListContent, now deprecated. | Improve this Doc View Source Link Link helper object to create the correct links Declaration public ILinkService Link { get; } Property Value Type Description ILinkService A ILinkService object. | Improve this Doc View Source Path Declaration public string Path { get; } Property Value Type Description System.String | Improve this Doc View Source Resources Resources for this Scenario. This is a dynamic object based on the IDynamicStack . It will combine both the Resources of the View and the App. The View-Resources will have priority. In future it may also include some global Resources. ü™í Use in Razor: @Resources.CtaButtonLabel Declaration public dynamic Resources { get; } Property Value Type Description System.Object Remarks New in 12.03 | Improve this Doc View Source Settings Settings for this Scenario. This is a dynamic object based on the IDynamicStack . It will combine both the Settings of the View and the App. The View-Settings will have priority. In future it may also include some global Settings. ü™í Use in Razor: @Settings.ItemsPerRow Declaration public dynamic Settings { get; } Property Value Type Description System.Object Remarks New in 12.03 Methods | Improve this Doc View Source AsAdam(IEntity, String) Provides an Adam instance for this item and field Declaration public IFolder AsAdam(IEntity entity, string fieldName) Parameters Type Name Description IEntity entity The entity, often Content or similar System.String fieldName The field name, like \"Gallery\" or \"Pics\" Returns Type Description IFolder An Adam object for navigating the assets | Improve this Doc View Source AsAdam(IDynamicEntity, String) Provides an Adam instance for this item and field Declaration public IFolder AsAdam(IDynamicEntity entity, string fieldName) Parameters Type Name Description IDynamicEntity entity The entity, often Content or similar System.String fieldName The field name, like \"Gallery\" or \"Pics\" Returns Type Description IFolder An Adam object for navigating the assets | Improve this Doc View Source AsDynamic(Object) Convert a dynamic entity and return itself again. This is so coders don't have to worry if the original object was an IEntity or a IDynamicEntity in the first place. Declaration public dynamic AsDynamic(object dynamicEntity) Parameters Type Name Description System.Object dynamicEntity the original object Returns Type Description System.Object a dynamic object for easier coding | Improve this Doc View Source AsDynamic(Object[]) Convert one or many Entities and Dynamic entities into an IDynamicStack Declaration [PublicApi(\"Careful - still Experimental in 12.02\")] public dynamic AsDynamic(params object[] entities) Parameters Type Name Description System.Object [] entities one or more source object Returns Type Description System.Object a dynamic object for easier coding Remarks New in 12.05 | Improve this Doc View Source AsDynamic(String, String) Take a json and provide it as a dynamic object to the code Declaration public dynamic AsDynamic(string json, string fallback = \"{}\") Parameters Type Name Description System.String json the original json string System.String fallback Alternate string to use, if the original json can't parse. Can also be null or the word \"error\" if you would prefer an error to be thrown. Returns Type Description System.Object A dynamic object representing the original json. If it can't be parsed, it will parse the fallback, which by default is an empty empty dynamic object. If you provide null for the fallback, then you will get null back. Remarks Added in 2sxc 10.22.00 | Improve this Doc View Source AsDynamic(IEntity) Wraps an entity into a IDynamicEntity Declaration public dynamic AsDynamic(IEntity entity) Parameters Type Name Description IEntity entity the original object Returns Type Description System.Object a dynamic object for easier coding | Improve this Doc View Source AsEntity(Object) Unwraps a dynamic entity back into the underlying IEntity Declaration public IEntity AsEntity(object dynamicEntity) Parameters Type Name Description System.Object dynamicEntity the wrapped IEntity Returns Type Description IEntity A normal IEntity | Improve this Doc View Source AsList(Object) Converts a list of IEntity objects into a list of IDynamicEntity objects. Declaration public IEnumerable<dynamic> AsList(object list) Parameters Type Name Description System.Object list typically a List/IEnumerable of Entities or DynamicEntities. Can also be a IDataSource in which case it uses the default stream. Returns Type Description System.Collections.Generic.IEnumerable < System.Object > a list of IDynamicEntity objects Remarks Added in 2sxc 10.21.00 | Improve this Doc View Source CreateSource<T>(IDataSource, ILookUpEngine) Create a IDataSource which will process data from the given stream. Declaration public T CreateSource<T>(IDataSource inSource = null, ILookUpEngine configurationProvider = null) where T : IDataSource Parameters Type Name Description IDataSource inSource The data source which will be the default In of the new data-source. ILookUpEngine configurationProvider An alternate configuration provider for the DataSource Returns Type Description T A typed DataSource object Type Parameters Name Description T A data-source type - must be inherited from IDataSource | Improve this Doc View Source CreateSource<T>(IDataStream) Create a IDataSource which will process data from the given stream. Declaration public T CreateSource<T>(IDataStream inStream) where T : IDataSource Parameters Type Name Description IDataStream inStream The stream which will be the default In of the new data-source. Returns Type Description T A typed DataSource object Type Parameters Name Description T A data-source type - must be inherited from IDataSource | Improve this Doc View Source GetService<TService>() Get a service from the EAV / 2sxc Dependency Injection. Declaration public TService GetService<TService>() Returns Type Description TService An object of the type or interface requested Type Parameters Name Description TService Interface (preferred) or Class which is needed Remarks Added in 2sxc 11.11 Implements IDynamicCode12 IDynamicCode ICreateInstance ICompatibilityLevel IHasLog"
  },
  "api/dot-net/ToSic.Eav.DataSources.Queries.Connection.html": {
    "href": "api/dot-net/ToSic.Eav.DataSources.Queries.Connection.html",
    "title": "Struct Connection | 2sxc 13 / EAV 13",
    "keywords": "Struct Connection Represent a connection which connects two DataSources in a Query Inherited Members System.ValueType.Equals(System.Object) System.ValueType.GetHashCode() System.ValueType.ToString() Namespace : ToSic.Eav.DataSources.Queries Assembly : ToSic.Eav.DataSources.dll Syntax [InternalApi_DoNotUse_MayChangeWithoutNotice(\"this is just fyi\")] public struct Connection Properties | Improve this Doc View Source From The DataSource ID which has data, an IDataSource Declaration public string From { get; set; } Property Value Type Description System.String | Improve this Doc View Source In The In-stream name on the target DataSource Declaration public string In { get; set; } Property Value Type Description System.String | Improve this Doc View Source Out The Out-stream name of the Source DataSource Declaration public string Out { get; set; } Property Value Type Description System.String | Improve this Doc View Source To The DataSource ID which receives data, an IDataTarget Declaration public string To { get; set; } Property Value Type Description System.String"
  },
  "api/dot-net/ToSic.Sxc.Web.html": {
    "href": "api/dot-net/ToSic.Sxc.Web.html",
    "title": "Namespace ToSic.Sxc.Web | 2sxc 13 / EAV 13",
    "keywords": "Namespace ToSic.Sxc.Web This contains stuff that are specific to 2sxc for all web platforms (Dnn, NopCommerce, Oqtane, etc.) Basically it's the CMS parts, without being specific to Dnn implementations. Interfaces IHybridHtmlString Implementation of IHtmlString in both .net Framework and .net Standard. This means that any such object will automatically be Raw output if used as @SomeHybridHtmlString so it's the same as Html.Raw(normalString)"
  },
  "api/dot-net/ToSic.Eav.Metadata.IMetadataSource.html": {
    "href": "api/dot-net/ToSic.Eav.Metadata.IMetadataSource.html",
    "title": "Interface IMetadataSource | 2sxc 13 / EAV 13",
    "keywords": "Interface IMetadataSource For querying metadata from the data source. Mainly used in the Store, Cache-Systems and Apps. Inherited Members ICacheExpiring.CacheChanged(Int64) ITimestamped.CacheTimestamp Namespace : ToSic.Eav.Metadata Assembly : ToSic.Eav.Core.dll Syntax [InternalApi_DoNotUse_MayChangeWithoutNotice(\"this is just fyi\")] public interface IMetadataSource : ICacheExpiring, ITimestamped Methods | Improve this Doc View Source GetMetadata<TKey>(Int32, TKey, String) Get any metadata from the current data source (usually an app) Declaration IEnumerable<IEntity> GetMetadata<TKey>(int targetType, TKey key, string contentTypeName = null) Parameters Type Name Description System.Int32 targetType The type-id of the target we're accessing, like 10=cms-object, 4=entity TKey key The key which is used for lookup System.String contentTypeName Optional content-type name, to only retrieve metadata of that type Returns Type Description System.Collections.Generic.IEnumerable < IEntity > A list (may be empty) of metadata items found for this target Type Parameters Name Description TKey Key-Type used - string, int or guid Remarks It does not return metadata describing the source (app), but metadata stored in this app, describing something else. | Improve this Doc View Source GetMetadata<TKey>(TargetTypes, TKey, String) Get any metadata from the current data source (usually an app) Declaration IEnumerable<IEntity> GetMetadata<TKey>(TargetTypes targetType, TKey key, string contentTypeName = null) Parameters Type Name Description TargetTypes targetType The TargetTypes constant of the target we're accessing, like TargetTypes.Entity TKey key The key which is used for lookup System.String contentTypeName Optional content-type name, to only retrieve metadata of that type Returns Type Description System.Collections.Generic.IEnumerable < IEntity > A list (may be empty) of metadata items found for this target Type Parameters Name Description TKey Key-Type used - string, int or guid Remarks It does not return metadata describing the source (app), but metadata stored in this app, describing something else."
  },
  "api/dot-net/ToSic.Eav.DataSources.IDataStream.html": {
    "href": "api/dot-net/ToSic.Eav.DataSources.IDataStream.html",
    "title": "Interface IDataStream | 2sxc 13 / EAV 13",
    "keywords": "Interface IDataStream Represents a DataStream object. This is a stream of IEntity objects, which has a source and a name. A stream can be read from, and it can be attached to upstream data-sources for further processing. Inherited Members ICanPurgeListCache.PurgeList(Boolean) System.Collections.Generic.IEnumerable<ToSic.Eav.Data.IEntity>.GetEnumerator() Namespace : ToSic.Eav.DataSources Assembly : ToSic.Eav.DataSources.dll Syntax [PublicApi_Stable_ForUseInYourCode] public interface IDataStream : ICanSelfCache, ICanPurgeListCache, IEnumerable<IEntity>, IEnumerable Properties | Improve this Doc View Source List The list of items in this stream. IMPORTANT: This is actually an Immutable List - so you can read it but not change it. Declaration IEnumerable<IEntity> List { get; } Property Value Type Description System.Collections.Generic.IEnumerable < IEntity > An System.Collections.Generic.IEnumerable<T> of IEntity items. | Improve this Doc View Source Name Name of this Stream Declaration string Name { get; } Property Value Type Description System.String The name - which would be used in the Source to get the same stream again. | Improve this Doc View Source Source Underlying IDataSource providing the IEntity of this stream Declaration IDataSource Source { get; } Property Value Type Description IDataSource The underlying IDataSource"
  },
  "api/dot-net/ToSic.Sxc.Services.IFeaturesService.html": {
    "href": "api/dot-net/ToSic.Sxc.Services.IFeaturesService.html",
    "title": "Interface IFeaturesService | 2sxc 13 / EAV 13",
    "keywords": "Interface IFeaturesService Features lets your code find out what system features are currently enabled/disabled in the environment. It's important to detect if the admin must activate certain features to let your code do it's work. Inherited Members IHasLog.Log Namespace : ToSic.Sxc.Services Assembly : ToSic.Sxc.dll Syntax [PublicApi] public interface IFeaturesService : IHasLog, ICanDebug Remarks This replaces the older static Features accessor - please only use this from now on. History: Added this implementation in 13.01 Methods | Improve this Doc View Source IsEnabled(String[]) Checks if a list of features are enabled, in case you need many features to be activated. Declaration bool IsEnabled(params string[] nameIds) Parameters Type Name Description System.String [] nameIds one or many name IDs - can also be the guids (as string) Returns Type Description System.Boolean true if all features are enabled, false if any one of them is not Remarks Added in v13.01"
  },
  "net-code/external/obsolete-dnn.html": {
    "href": "net-code/external/obsolete-dnn.html",
    "title": "Use 2sxc Instances or App-Data from External C# Code | 2sxc 13 / EAV 13",
    "keywords": "Use 2sxc Instances or App-Data from External C# Code Warning This is obsolete documentation for older versions of 2sxc and not best practice . We left it here for old-timers who may still need to use this. Please use Use 2sxc Instances or App-Data from External C# Code instead. If you can in any way, do not use this, these APIs are deprecated. Sometimes you want to leverage 2sxc to create a solution, provide data input etc. but want to output or re-use the data in your own Module, Skin, Script or something else. This is easy to do. Simple Example Imagine this was your C# code in your WebForms Code-Behind: // the app id var appId = 42; // create a simple app object to then access data var appSimple = ToSic.Sxc.Dnn.Factory.App(appId); // example getting all data of content type Tag var tags = appSimple.Data[\"Tag\"]; // example accessing a query var tagsSorted = appSimple.Query[\"Tags sorted\"]; // Creating an entity var vals = new Dictionary<string, object>(); vals.Add(\"Tag\", \"test-tag\"); vals.Add(\"Label\", \"Test Tag\"); App.Data.Create(\"Tag\", vals); Example of Gaining Access to Links Managed in a simple 2sxc Content App Imagine you have a theme using DDR Menu with Razor Templates. The theme has a MegaMenu and you want to include one or more featured links that will change often and those links are easily managed in the Content App using the Links Content-Type with any of the default Views. Your C# code in your MegaMenu.cshtml file could get access to those Links like this: // the details you need to know // var appId = 2; // Content App is usually 2, but thanks to DynamicCode, we don't need this var tabId = 234; // this is the page with the Links View on it var modId = 678; // this is the module ID of the Links View // get the BlockBuilder var block = ToSic.Sxc.Dnn.Factory.CmsBlock(tabId, modId); // the get the DynamicCode instance (Code.DnnDynamicCodeRoot) of the block var dynCode = ToSic.Sxc.Dnn.Factory.DynamicCode(block); // if we were running \"inside\" 2sxc, we would just do this: // var links = AsList(Data[\"Default\"]); // but instead we use our magical DynamicCode instance like this var links = dynCode.AsList(dynCode.App.Data[\"Default\"]); <ul> foreach (var link in links) { <li> @link.EntityTitle, <a href=\"@link.Link\">@link.LinkText</a> </li> } </ul> Read also Dnn Factory API To dive deeper, you must check the blog post History Introduced in 2sxc 08.03"
  },
  "net-code/external/dotnet-external-use.html": {
    "href": "net-code/external/dotnet-external-use.html",
    "title": "Use 2sxc Instances or App-Data from External C# Code | 2sxc 13 / EAV 13",
    "keywords": "Use 2sxc Instances or App-Data from External C# Code Sometimes you want to leverage 2sxc to create a solution, provide data input etc. but want to output or re-use the data in your own Module, Skin, Script or something else. This is easy to do. Important We massively improved this in 2sxc 13 which integrates with Dnn 9 Dependency Injection. These examples require Dnn 9.5+ and 2sxc 13.02+ Simple Example The following example assumes you're working with Dnn 9.5+ and have a Module. for Skins, the Dependency-Injection is a bit different - see Dnn Dependency Injection for Oqtane Dependency-Injection is much simpler, and not documented here Imagine this was your C# code in your WebForms Module Code-Behind: using Microsoft.Extensions.DependencyInjection; using ToSic.Sxc.Services; var ServiceProvider = DependencyProvider; var dynCodeSvc = ServiceProvider.GetService<IDynamicCodeService>(); // the app id var appId = 42; // create a simple app object to then access data var appSimple = dynCodeSvc.App(appId); // example getting all data of content type Tag var tags = appSimple.Data[\"Tag\"]; // example accessing a query var tagsSorted = appSimple.Query[\"Tags sorted\"]; // Creating an entity var vals = new Dictionary<string, object>(); vals.Add(\"Tag\", \"test-tag\"); vals.Add(\"Label\", \"Test Tag\"); App.Data.Create(\"Tag\", vals); Important: if you try to do this in a Dnn Skin/Theme it will fail, because the DependencyProvider object is missing. In that case use this: using DotNetNuke.Common.Extensions; var ServiceProvider = HttpContext.Current.GetScope().ServiceProvider; Example of Gaining Access to Links Managed in a simple 2sxc Content App Imagine you have a theme using DDR Menu with Razor Templates. The theme has a MegaMenu and you want to include one or more featured links that will change often and those links are easily managed in the Content App using the Links Content-Type with any of the default Views. Your C# code in your MegaMenu.cshtml file could get access to those Links like this: using Microsoft.Extensions.DependencyInjection; using ToSic.Sxc.Services; using DotNetNuke.Common.Extensions; var ServiceProvider = HttpContext.Current.GetScope().ServiceProvider; // the details you need to know // var appId = 2; // Content App is usually 2, but thanks to DynamicCode, we don't need this var tabId = 234; // this is the page with the Links View on it var modId = 678; // this is the module ID of the Links View // Get the Service for generating DynamicCode var dynCodeSvc = ServiceProvider.GetService<IDynamicCodeService>(); // the get the DynamicCode instance of the module var dynCode = dynCodeSvc.OfModule(tabId, modId); // Note: you could also do this: // var appId = 27; // var dynCode = dynCodeSvc.OfApp(appId); // if we were running \"inside\" 2sxc, we would just do this: // var links = AsList(Data[\"Default\"]); // but instead we use our magical DynamicCode instance like this var links = dynCode.AsList(dynCode.App.Data[\"Default\"]); <ul> foreach (var link in links) { <li> @link.EntityTitle, <a href=\"@link.Link\">@link.LinkText</a> </li> } </ul> Read also Dnn Factory API To dive deeper, you must check the blog post History Introduced in 2sxc 08.03 Archived the old docs for v13 - see old Dnn Factory Docs Created new IDynamicCodeService in v13"
  },
  "net-code/dynamic-code/get-service.html": {
    "href": "net-code/dynamic-code/get-service.html",
    "title": "GetService<T>() Command new in v11.11 | 2sxc 13 / EAV 13",
    "keywords": "GetService<T>() Command new in v11.11 If you want to do advanced stuff, you will want to ask for other global Services to help your code. 2sxc uses Depedency Injection to do this. üëâ Read about Dependency Injection in 2sxc Use GetService<T>() to get this service. ‚ö° The official API docs . Discover More in the Razor Tutorials We have an rich series of Razor tutorials . You should really check them out üëç. Two important services that require you to use GetService are IPageService Koi ICSS Also Read TODO: These docs are incomplete, as the feature is still new. History Introduced in 2sxc 11.11"
  },
  "net-code/dynamic-code/create-source.html": {
    "href": "net-code/dynamic-code/create-source.html",
    "title": "CreateSource<T>() Command | 2sxc 13 / EAV 13",
    "keywords": "CreateSource<T>() Command If you need to use a DataSource object in your code use CreateSource<T>() ‚ö° The official API docs . Discover More in the Razor Tutorials We have an rich series of Razor tutorials . You should really check them out üëç. Simple Example @inherits Custom.Hybrid.Razor12 @{ // A source which can filter by Content-Type (EntityType) var allAuthors = CreateSource<ToSic.Eav.DataSources.EntityTypeFilter>(); allAuthors.TypeName = \"Authors\"; // access the data and automatically apply the filter/config var authors = allAuthors[\"Default\"]; } Example Chaining DataSources @inherits Custom.Hybrid.Razor12 @{ // A source which can filter by Content-Type (EntityType) var allAuthors = CreateSource<ToSic.Eav.DataSources.EntityTypeFilter>(); allAuthors.TypeName = \"Authors\"; // Sort by Fullname descending var sortedAuthorsDesc = CreateSource<ValueSort>(allAuthors); sortedAuthorsDesc.Attributes = \"FullName\"; sortedAuthorsDesc.Directions = \"desc\"; // access the data and automatically apply the filter/config var authors = sortedAuthorsDesc[\"Default\"]; } Read more about this in Data Sources (IDataSource) Note The type T mentioned above must be an IDataSource . The built in ones are usually in these namespaces: ToSic.Eav.DataSources ToSic.Sxc.DataSources ToSic.Sxc.Dnn.DataSources You can also create and compile your own DataSources, and then deploy the DLL to use in your code. Tip In most cases you will prefer to use VisualQuery to work with data, but sometimes this approach is neecssary. We suggest you check out some apps - almost all use this. Also Read Discover More in the Razor Tutorials We have an rich series of Razor tutorials . You should really check them out üëç. History General Tokens introduced in 2sxc 8.0 Added extra security switch in 2sxc 9.32"
  },
  "net-code/data-sources/custom/provide.html": {
    "href": "net-code/data-sources/custom/provide.html",
    "title": "DataSource API: Provide(...) | 2sxc 13 / EAV 13",
    "keywords": "DataSource API: Provide(...) <!-- Data Highlights --> <!-- ADAM --> <!-- Server --> <!-- Prepare --> <!-- Data Source --> <!-- Optimzers --> <!-- Process / Awesomize --> <!-- Libraries --> <!-- data formats --> <!-- Browser --> <!-- Frameworks --> <!-- App show parts --> <!-- Interact parts --> <!-- Edit parts --> <!-- Edit UI parts --> <!-- SPA parts --> <!-- Custom highlight boxes - can be controlled by in-page CSS --> you are here (click to zoom) - discover the stack .context-box-summary .datasource-custom { visibility: visible; } DataSources always provide data on an Out Stream . The Provide method makes it very easy to do. How to use Provide In general, you need a method like GetList() which returns an IEnumerable<IEntity> attach that stream to the Out - usually on a stream called Default Here's a simple example of the constructor of the Tutorial Basic DataSource , which provides the default stream: /// <summary> /// Constructor to tell the system what out-streams we have /// </summary> public DateTimeDataSourceBasic() { Provide(GetList); // \"Default\" out; when accessed, will deliver GetList } /// <summary> /// Get-List method, which will load/build the items once requested /// Note that the setup is lazy-loading so this code will only execute when used /// </summary> private ImmutableArray<IEntity> GetList() { var date = DateTime.Now; var values = new Dictionary<string, object> { {DateFieldName, date}, {\"Weekday\", date.DayOfWeek}, {\"DayOfWeek\", (int) date.DayOfWeek} }; // Construct the IEntity and return as ImmutableArray var entity = DataBuilder.Entity(values, titleField: DateFieldName); return new [] {entity}.ToImmutableArray(); } This example ensures that the .Out[\"Default\"] as well as the .List (which is a shorthand for .Out[Constants.DefaultStreamName].List ) are mounted, ready to deliver. Overloads Provide(listfunction) - default version, which provides the \"Default\" stream Provide(name, listfunction) - alternative for named streams when your DataSource has more streams. Providing multiple streams In case you want to offer multiple streams (like one containing products, the other categories), the common pattern is: public SomeConstructor() { Provide(GetProducts); Provide(\"Categories\", GetCategories); // ... } Performance Notes It's important to know that Provide simply prepares the Out for use, but will not call the inner function unless this stream is requested. This makes DataSources very performant, as no code is run which isn't needed. Read also DataSource API - DataSource API overview Ensuring configuration is parsed Demo App and further links todo History Introduced in EAV 4.x, 2sxc 09.13"
  },
  "net-code/data-sources/custom/index.html": {
    "href": "net-code/data-sources/custom/index.html",
    "title": "Create Custom DataSources | 2sxc 13 / EAV 13",
    "keywords": "Create Custom DataSources <!-- Data Highlights --> <!-- ADAM --> <!-- Server --> <!-- Prepare --> <!-- Data Source --> <!-- Optimzers --> <!-- Process / Awesomize --> <!-- Libraries --> <!-- data formats --> <!-- Browser --> <!-- Frameworks --> <!-- App show parts --> <!-- Interact parts --> <!-- Edit parts --> <!-- Edit UI parts --> <!-- SPA parts --> <!-- Custom highlight boxes - can be controlled by in-page CSS --> you are here (click to zoom) - discover the stack .context-box-summary .datasource-custom { visibility: visible; } If you want to create your own DataSource and use it in C# or the VisualQuery designer, this is for you. Docs about the API DataSource Configuration how LookUps work Simple Example Here's an example of a complete data-source, which just delivers 1 item with the current date: using System; using System.Collections.Generic; using System.Collections.Immutable; using ToSic.Eav.Data; using ToSic.Eav.DataSources; using ToSic.Eav.DataSources.Queries; namespace ToSic.Tutorial.DataSource.Basic { // Additional info so the VisualQuery can provide the correct buttons and infos [VisualQuery( NiceName = \"Demo DateTime Basic\", GlobalName = \"7aee541c-7188-429f-a4bb-2663a576b19e\" // random & unique Guid )] public class DateTimeDataSourceBasic: ExternalData { public const string DateFieldName = \"Date\"; /// <summary> /// Constructor to tell the system what out-streams we have /// </summary> public DateTimeDataSourceBasic() { Provide(GetList); // \"Default\" out; when accessed, will deliver GetList } /// <summary> /// Get-List method, which will load/build the items once requested /// Note that the setup is lazy-loading so this code will only execute when used /// </summary> private ImmutableArray<IEntity> GetList() { var date = DateTime.Now; var values = new Dictionary<string, object> { {DateFieldName, date}, {\"Weekday\", date.DayOfWeek}, {\"DayOfWeek\", (int) date.DayOfWeek} }; // Construct the IEntity and return as ImmutableArray var entity = DataBuilder.Entity(values, titleField: DateFieldName); return new [] {entity}.ToImmutableArray(); } } } This code demonstrates: The VisualQuery attribute, so that this data-source will be shown in VisualQuery The constructor DateTimeDataSourceBasic() , which tells the source what Out-streams it has using Provide , in this case it's just the Default A method GetList() which gets the items if ever requested The DataBuilder.Entity(...) helper to construct IEntity objects from value-dictionaries Use in VisualQuery Designer This is what the DataSource would appear like in VisualQuery ...and this is what the test-run would look like Demo App and further links DataSource API: VisualQuery Attribute DataSource API: Provide(...) DataSource API: DataBuilder.Entity(...) Basic DataSources for EAV and 2sxc Blog about this feature Blog post about custom DataSources History Introduced in 2sxc ca. 4 but with a difficult API API strongly enhanced and simplifield in 2sxc 09.13 Another API rework ca. 2sxc 10.25 (but we're not exactly sure)"
  },
  "net-code/data-sources/custom/immutable.html": {
    "href": "net-code/data-sources/custom/immutable.html",
    "title": "DataSource API: About Immutable Data | 2sxc 13 / EAV 13",
    "keywords": "DataSource API: About Immutable Data <!-- Data Highlights --> <!-- ADAM --> <!-- Server --> <!-- Prepare --> <!-- Data Source --> <!-- Optimzers --> <!-- Process / Awesomize --> <!-- Libraries --> <!-- data formats --> <!-- Browser --> <!-- Frameworks --> <!-- App show parts --> <!-- Interact parts --> <!-- Edit parts --> <!-- Edit UI parts --> <!-- SPA parts --> <!-- Custom highlight boxes - can be controlled by in-page CSS --> you are here (click to zoom) - discover the stack .context-box-summary .datasource-custom { visibility: visible; } All Streams are internally immutable, and we recommend that you also use Provide with an immutable List. This is not required but best-practice. If you want to do this, make sure you use a similar version of the Immutable NuGet package as used in EAV. Internally the version is marked as 1.2.1, but the NuGet is actually 1.3.0. History Introduced ca. EAV / 2sxc v11"
  },
  "net-code/data-sources/query/index.html": {
    "href": "net-code/data-sources/query/index.html",
    "title": "Using Queries in your Code | 2sxc 13 / EAV 13",
    "keywords": "Using Queries in your Code In a Razor or WebApi file, you can always write something like this var query = App.Query[\"AllBlogPosts\"]; var posts = query[\"Default\"]; // you could now work with the data, or you could cast all results into dynamic objects, like... var categories = AsList(query[\"Categories\"]); // if all you need is the \"Default\" stream as dynamic, you can write var posts = AsList(query); Now you can loop through the data as you would otherwise, for example: <ol> @foreach(var person in AsList(query[\"Persons\"])) { <li>@person.FullName</li> } </ol> Technical Implementation The data which defines a query is stored as IEntity data. So there is a header IEntity which is read through an QueryDefinition . It contains the name, and a bunch of metadata IEntity items which are read as QueryPartDefinition . It also contains a list of Connections which define how the DataSources pass data from one source to another. There are also test-parameters on such a query, which are only used for testing in the VisualQuery Designer Read also Parameters for the DataSources and the Query Blog Posts about VisualQuery Designer Data Sources (IDataSource) History Introduced in 2sxc 07.00"
  },
  "net-code/data-sources/custom/tutorial-basic/index.html": {
    "href": "net-code/data-sources/custom/tutorial-basic/index.html",
    "title": "Custom DataSources - Basic Tutorial | 2sxc 13 / EAV 13",
    "keywords": "Custom DataSources - Basic Tutorial <!-- Data Highlights --> <!-- ADAM --> <!-- Server --> <!-- Prepare --> <!-- Data Source --> <!-- Optimzers --> <!-- Process / Awesomize --> <!-- Libraries --> <!-- data formats --> <!-- Browser --> <!-- Frameworks --> <!-- App show parts --> <!-- Interact parts --> <!-- Edit parts --> <!-- Edit UI parts --> <!-- SPA parts --> <!-- Custom highlight boxes - can be controlled by in-page CSS --> you are here (click to zoom) - discover the stack .context-box-summary .datasource-custom { visibility: visible; } We've re-created our Tutorial for the Custom DataSources to match features of 2sxc 11.13. It has 3 DataSources: Basic which just provides information about todays Date BasicList which generates similar information for a list of 7 dates ConfigurableDateTime which shows just about everything you will ever need Here's what you should look into: The VisualStudio project located here: DataSources Github Project The companion Demo App ( Git | Downloads | App-Catalog ) containing some Demo Queries and the Content-Type Installing Just install the ZIP as a Dnn package from the Git Releases . This will add the DLLs containing the DataSources and the Configuration Content-Type to Dnn as a Library. Now you can use this DataSource in any 2sxc App. You can also install the Demo App which already has some Queries #Todo demonstrating them. Discover the Code Download the Git-Repo and look at the Code. Next we'll explain the highlights: Level 1: The most Basic DataSource üëâ Tutorial Custom DataSources - Basic Level 2: A BasicList DataSource üëâ Tutorial Custom DataSources - BasicList Level 3: A Configurable, Error-Aware Data-Source ConfigurableDateTime üëâ Tutorial Custom DataSources - Configurable History Created 2017 for 2sxc 7 Completely rebuilt for 2sxc 11.13 and VisualQuery 3"
  },
  "net-code/data-sources/custom/tutorial-basic/configurable.html": {
    "href": "net-code/data-sources/custom/tutorial-basic/configurable.html",
    "title": "Tutorial Custom DataSources - Configurable | 2sxc 13 / EAV 13",
    "keywords": "Tutorial Custom DataSources - Configurable This explains the ConfigurableDateTime DataSource in the DataSource Tutorial . This has a lot more features, like Properties on the DataSource object to configure it A Content-Type to let the admin configure it in the UI Code to load the configured settings Error handling code to provide good information if something is wrong Add to VisualQuery This is what it looks like in VisualQuery : And this is what you see when you run it without configuration: Running with Configuration from Params Since this DataSource has configuration enabled, the UI knows that it can offer a Settings button: You could just write a number like 14 but here we're showing how to use Query Parameters . The Result would then look like this: Running with Invalid Configuration Here's an example with an invalid configuration where the Hour would be 24 (hours can only go from 0 to 23): And here the resulting message which is optimized because the DataSource expected this mis-configuration: Source of the ConfigurableDateTime DataSource This is the code for the simplest DataSource: using System; using System.Collections.Generic; using System.Collections.Immutable; using ToSic.Eav.Data; using ToSic.Eav.DataSources; using ToSic.Eav.DataSources.Queries; // Demo / Training Code to help you create our own DataSource // You can find the newest version here: https://github.com/2sic/datasource-tutorial-basic // there is also an App showing you how it would be used // and how such a data-source is configured. namespace ToSic.Tutorial.DataSource.Basic { // Note that this attribute is necessary for the DataSource to show up in the [VisualQuery( GlobalName = \"81dd49a7-fa70-4e98-b73d-8299bb3231f0\", Icon = \"event\", Type = DataSourceType.Source, NiceName = \"DateTime Configurable\", // Guid of the Content-Type which must be exported with this DataSource // It's located in .data/contenttypes // The class RegisterGlobalContentTypes ensures that 2sxc/EAV will find it ExpectsDataOfType = \"677210a2-cf08-46e5-a6b2-86e56e27be99\", HelpLink = \"https://r.2sxc.org/DsCustom\")] public class ConfigurableDateTime : ExternalData { #region Configuration-properties private const string DesiredDateKey = \"DesiredDate\"; private const string HoursKey = \"Hours\"; /// <summary> /// A piece of demo-configuration. It must always be stored/accessed from the Configuration dictionary /// because everything in the config-dictionary will be token-resolved /// </summary> public string DesiredDate { get => Configuration[DesiredDateKey]; set => Configuration[DesiredDateKey] = value; } /// <summary> /// A number-demo config. Note that we do error-checking and store it with SetError /// </summary> public int Hours { get { if (decimal.TryParse(Configuration[HoursKey], out var hour)) { // check that it's a valid hour-range if (hour >= 0 && hour <= 23) return (int)hour; // If not, set the error, so that the code can later pick up the error-stream SetError(\"Hour value out of range\", $\"The hour was '{hour}' which is not valid\"); return 0; } // Apparently not a decimal, so set the error, so that the code can later pick up the error-stream SetError(\"Hour value invalid\", $\"Tried to parse the hour, but couldn't. Value was '{Configuration[HoursKey]}'\"); return 0; } set => Configuration[HoursKey] = value.ToString(); } #endregion /// <summary> /// Constructs a new EntityIdFilter /// </summary> public ConfigurableDateTime() { // The out-list contains all out-streams. // For performance reasons we want to make sure that they are NOT created unless accessed // Because of this, we create a data-stream with a deferred call to GetEntities - like this: Provide(GetEntities); // Example of pre-configuring a text // This will place the token to be resolved into the variable // The tokens will be resolved before use // The following token means: // - Try to use the configured value from the setting on this data-source in the VisualQuery // - if there is none, just use the value \"Today\" ConfigMask(DesiredDateKey, \"[Settings:DesiredDate||Today]\"); // Example of pre-configuring a number value // We can't just say AnotherDemoConfig = \"text\" because that would not compile since it expects a number // So we just add the token to be resolved directly to the configuration list ConfigMask(HoursKey, \"[Settings:Hours||17]\"); } /// <summary> /// This is the deferred call to retrieve entities /// If you created the source correctly it won't be called unless accessed /// This is recommended for performance reasons /// We also recommend placing the result in the cache... /// </summary> /// <returns></returns> private IImmutableList<IEntity> GetEntities() { // This will resolve the tokens before starting Configuration.Parse(); // Here's your real code. // Typically you will either perform some work with the In-streams // or retrieve data from another source like XML, RSS, SQL, File-storage etc. // Usually you would also need configuration from the UI - but sometimes not, especially if it's just for a very specific purpose #region Your Custom Business Logic try { // Check if we're trying to inform about today if (DesiredDate != \"Today\") return SetError(\"Demo Config not Today\", \"The Demo Configuration should be 'Today' or empty.\"); // Get the hours - and if something is wrong, the ErrorStream will be pre-filled var hours = Hours; if (!ErrorStream.IsDefaultOrEmpty) return ErrorStream; // For this demo we'll treat the current time as UTC var todayDate = DateTime.SpecifyKind(DateTime.Today, DateTimeKind.Utc); // In this demo we'll just create 1 entity containing some values related to today var today = new Dictionary<string, object> { {\"Title\", \"Date Today\"}, {\"Date\", todayDate.AddHours(hours)}, {\"DayOfWeek\", DateTime.Today.DayOfWeek.ToString()}, {\"DayOfWeekNumber\", DateTime.Today.DayOfWeek} }; // ...now convert to an entity with the data prepared before var ent = DataBuilder.Entity(today, titleField: \"Title\"); return new List<IEntity> { ent }.ToImmutableArray(); } catch (Exception ex) { // if something happens, let's return this information as a result return SetError(\"Unexpected Error\", \"The Configurable DateTime DataSource ran into an exception.\", ex); } #endregion } } } This does a LOT more. Here the important bits The VisualQuery Attribute has a lot more information It has various properties like Hour which will be populated by settings in the Constructor... ...and they have features to detect errors and report them nicely The GetEntities() safely checks if the Required In stream really exists - otherwise returns a clean error stream The configuration is then used in the data returned Read More Discover the Basic DataSourceTutorial with more examples History Created 2017 for 2sxc 7 Completely rebuilt for 2sxc 11.13 and VisualQuery 3"
  },
  "net-code/data-sources/custom/tutorial-basic/basic.html": {
    "href": "net-code/data-sources/custom/tutorial-basic/basic.html",
    "title": "Tutorial Custom DataSources - Basic | 2sxc 13 / EAV 13",
    "keywords": "Tutorial Custom DataSources - Basic This explains the Basic DataSource in the DataSource Tutorial . Add to VisualQuery This is what it looks like in VisualQuery : And this is what you see when you run it: Source of the Basic DataSource This is the code for the simplest DataSource: using System; using System.Collections.Generic; using System.Collections.Immutable; using ToSic.Eav.Data; using ToSic.Eav.DataSources; using ToSic.Eav.DataSources.Queries; namespace ToSic.Tutorial.DataSource.Basic { // Additional info so the VisualQuery can provide the correct buttons and infos [VisualQuery( NiceName = \"Demo DateTime Basic\", Icon = \"today\", GlobalName = \"7aee541c-7188-429f-a4bb-2663a576b19e\" // random & unique Guid )] public class DateTimeDataSourceBasic: ExternalData { public const string DateFieldName = \"Date\"; /// <summary> /// Constructor to tell the system what out-streams we have /// </summary> public DateTimeDataSourceBasic() { Provide(GetList); // \"Default\" out; when accessed, will deliver GetList } /// <summary> /// Get-List method, which will load/build the items once requested /// Note that the setup is lazy-loading so this code will only execute when used /// </summary> private ImmutableArray<IEntity> GetList() { var date = DateTime.Now; var values = new Dictionary<string, object> { {DateFieldName, date}, {\"Weekday\", date.DayOfWeek}, {\"DayOfWeek\", (int) date.DayOfWeek} }; // Construct the IEntity and return as ImmutableArray var entity = DataBuilder.Entity(values, titleField: DateFieldName); return new [] {entity}.ToImmutableArray(); } } } What this does is... Inform VisualQuery that there is a DataSource and registers it with a unique GUID The constructor says it provides one Default stream which can be built by GetList() GetList() will simply create a simple entity and return it as a list Read More Discover the Basic DataSourceTutorial with more examples History Created 2017 for 2sxc 7 Completely rebuilt for 2sxc 11.13 and VisualQuery 3"
  },
  "basics/query/query-in-view.html": {
    "href": "basics/query/query-in-view.html",
    "title": "Export / Import Queries | 2sxc 13 / EAV 13",
    "keywords": "Export / Import Queries <!-- Data Highlights --> <!-- ADAM --> <!-- Server --> <!-- Prepare --> <!-- Data Source --> <!-- Optimzers --> <!-- Process / Awesomize --> <!-- Libraries --> <!-- data formats --> <!-- Browser --> <!-- Frameworks --> <!-- App show parts --> <!-- Interact parts --> <!-- Edit parts --> <!-- Edit UI parts --> <!-- SPA parts --> <!-- Custom highlight boxes - can be controlled by in-page CSS --> you are here (click to zoom) - discover the stack .context-box-summary .query { visibility: visible; } The most common way to use Queries is as a Data provider for a View . In such a case, the View will recieve data as the Query processes it, and can template it as needed. Configure in the UI In a View configuration, this is where you tell it to use a Query to provide data: History Introduced with Queries ca. 2sxc 6"
  },
  "basics/query/look-ups.html": {
    "href": "basics/query/look-ups.html",
    "title": "LookUp System | 2sxc 13 / EAV 13",
    "keywords": "LookUp System <!-- Data Highlights --> <!-- ADAM --> <!-- Server --> <!-- Prepare --> <!-- Data Source --> <!-- Optimzers --> <!-- Process / Awesomize --> <!-- Libraries --> <!-- data formats --> <!-- Browser --> <!-- Frameworks --> <!-- App show parts --> <!-- Interact parts --> <!-- Edit parts --> <!-- Edit UI parts --> <!-- SPA parts --> <!-- Custom highlight boxes - can be controlled by in-page CSS --> you are here (click to zoom) - discover the stack .context-box-summary .lookup { visibility: visible; } Many things in the EAV and 2sxc require it to look up parameters. Examples could be: The current Page ID to then find metadata for this page The current Date to filter out news items which should be published in future An Id from the URL Parameters to show details about this id This is done using Tokens which look like [QueryString:Id] . üëâ For more about LookUps, read LookUp System"
  },
  "basics/query/index.html": {
    "href": "basics/query/index.html",
    "title": "Query and VisualQuery | 2sxc 13 / EAV 13",
    "keywords": "Query and VisualQuery <!-- Data Highlights --> <!-- ADAM --> <!-- Server --> <!-- Prepare --> <!-- Data Source --> <!-- Optimzers --> <!-- Process / Awesomize --> <!-- Libraries --> <!-- data formats --> <!-- Browser --> <!-- Frameworks --> <!-- App show parts --> <!-- Interact parts --> <!-- Edit parts --> <!-- Edit UI parts --> <!-- SPA parts --> <!-- Custom highlight boxes - can be controlled by in-page CSS --> you are here (click to zoom) - discover the stack .context-box-summary .query { visibility: visible; } 2sxc Templates and Headless APIs can use Queries to access data. This is pretty amazing: You create such queries using a VisualQuery designer Queries can then be assigned to a View so the template recieves this as the data to work with Queries can also be used directly in the Headless API if you configure the permissions for this The Edit-UI can also use queries in dropdown fields You can also access queries using App.Query[\"QueryName\"] In addition, there are also some built-in System Queries built-in which will get system data for you like a list of Content-Types or Apps in the System. Tip Note that Queries can created in code and using VisualQuery. The code method is very advanced. You can read more about using DataSources in C# / Razor code . The rest of this page is about VisualQuery. Queries in an App All Queries (except for the System-Queries) are stored in the App - this is what it looks like: Create Queries To create a new Query hit the + and continue from there: Edit Queries Use the VisualQuery Designer Export / Import üëâ Export / Import Queries Technical Implementation When queries run they behave like Data-Sources while internally chaining various other Data-Sources to query the underlying data. History introduced in 2sxc 6 continuously enhanced"
  },
  "basics/query/export-import.html": {
    "href": "basics/query/export-import.html",
    "title": "Export / Import Queries | 2sxc 13 / EAV 13",
    "keywords": "Export / Import Queries <!-- Data Highlights --> <!-- ADAM --> <!-- Server --> <!-- Prepare --> <!-- Data Source --> <!-- Optimzers --> <!-- Process / Awesomize --> <!-- Libraries --> <!-- data formats --> <!-- Browser --> <!-- Frameworks --> <!-- App show parts --> <!-- Interact parts --> <!-- Edit parts --> <!-- Edit UI parts --> <!-- SPA parts --> <!-- Custom highlight boxes - can be controlled by in-page CSS --> you are here (click to zoom) - discover the stack .context-box-summary .query { visibility: visible; } Queries are can be exported as JSON files and imported anywhere you need them. The exported JSON contains the entire query definition with all parts, settings, test-values and everything. Export a Query Just follow these steps: Import a Query Just drag an exported JSON file into the Queries tab or go through the dialogs: History Export/Import added ca. 2sxc 11.10"
  },
  "basics/app/permissions.html": {
    "href": "basics/app/permissions.html",
    "title": "App Permissions | 2sxc 13 / EAV 13",
    "keywords": "App Permissions <!-- Data Highlights --> <!-- ADAM --> <!-- Server --> <!-- Prepare --> <!-- Data Source --> <!-- Optimzers --> <!-- Process / Awesomize --> <!-- Libraries --> <!-- data formats --> <!-- Browser --> <!-- Frameworks --> <!-- App show parts --> <!-- Interact parts --> <!-- Edit parts --> <!-- Edit UI parts --> <!-- SPA parts --> <!-- Custom highlight boxes - can be controlled by in-page CSS --> you are here (click to zoom) - discover the stack .context-box-summary .data-configuration { visibility: visible; } Every App has Permissions which apply to all data in the App. Why would you use this? Sometimes you have an App which needs to grant permissions to a specific user group, like edit permissions to all members of News Editors . In such cases you should apply these permissions to the Content-Types, but you can also apply it at App level. Warning Incorrect permission configuration can leave your App vulnerable to unexpected security risks. This is especially important for App Permissions which apply to the entire App. You should almost never use these permissions. Examples There are no examples for this, as it really only makes sense in very advanced use cases and usually should not be applied. Edit App Permissions This is where you can find the App Permissions On 2 you can configure the permissions you need:"
  },
  "basics/app/index.html": {
    "href": "basics/app/index.html",
    "title": "What is an App | 2sxc 13 / EAV 13",
    "keywords": "What is an App An app is a standalone bundle of data and functionality. It contains the green and blue parts of the following diagram + any kind of additional material used to build these parts like JavaScript frameworks which are bundled in the App: <!-- Data Highlights --> <!-- ADAM --> <!-- Server --> <!-- Prepare --> <!-- Data Source --> <!-- Optimzers --> <!-- Process / Awesomize --> <!-- Libraries --> <!-- data formats --> <!-- Browser --> <!-- Frameworks --> <!-- App show parts --> <!-- Interact parts --> <!-- Edit parts --> <!-- Edit UI parts --> <!-- SPA parts --> <!-- Custom highlight boxes - can be controlled by in-page CSS --> you are here (click to zoom) - discover the stack .context-box-full .todo, { visibility: visible; } Everything belonging to the App is stored in these locations The App folder contains all the green parts in the image above, including templates, C# code, JavaScript files etc. The database contains all the data of the app The ADAM folder contains the Assets for the App items Important An App doesn't need all of the parts above. Apps can be really trivial. For example they may only contain 1 simple Hello World template and no data at all. And they may also contain 100'000 data items and complex list/details templates. Apps are Installed per Site The EAV is multi-site capable and each Site in the platform corresponds to a Zone in the EAV. A Site corresponds to a Portal in Dnn or a Site in Oqtane. Each Zone contains at least 1 default app called Content and additional Apps as configured. Note The ZoneId is usually different than the Dnn PortalId or the Oqtane SiteId , so Dnn has a PortalSetting to connect this and Oqtane has a matching Setting. Tip Apps are installed per Site . So if your platform has multiple Sites, then each site can have different apps, or the same app may be installed multiple times. Types of Apps Your App can be anything you want it to be. The following types are more to give you a sense of how Apps can be used, but these types are not clearly defined. An App can also be many of these at the same time. Data Focused Apps This is the kind of App a developer usually thinks of - with lots of data and various list/details templates. The core idea of these apps is that the data is one or many shared tables and the output will show parts of this data based on rules, filters etc. Examples of such Apps would be: News Blog References FAQ Custom Forms Apps Content Focused Apps / Site Builder Apps This is the kind of App an editor usually thinks of. The core ideas is that the editor adds an App to a page, and adds data to that instance. The data belongs to that instance, so even if it's technically in a shared table, the user experience makes it feel like each use is autonomous. Examples of such Apps would be: The Content App Image Sliders / Swipers Galleries Image Hotspots Accordions QR Code Page Enhancing Apps This is an App which does something on every page of the Site. The core idea is that a functionality can be used on every page and the logic and data to ensure this is in the App. This kind of App is usually added to the Skin/Theme of the Site so it's available on all pages by default. Examples of such Apps would be: Add Script or CSS Snippets to a page SEO or Open-Graph Enhancements on each page Page protection systems where a part of the page is overlayed until people subscribe Adding third-party extensions such as Disqus , AddSearch or Google Search/Analytics to a page SPA Apps (Single Page Applications) This is an App which contains a JavaScript SPA which will then be the entire UI for users. The data is usually accessed using either the Headless API or custom C# WebAPIs which are also part of the App. Examples of such Apps would be: Customer management SPA A complex search/filter SPA You can create such SPAs using any popular JavaScript Framework such as Angular React Vue The Content App üëâ See The Content App The Primary App üëâ See The Primary App You may want to learn more about The App Folder Structure App Icons Bundling / Optimizing assets"
  },
  "basics/app/icons.html": {
    "href": "basics/app/icons.html",
    "title": "Icons in Apps | 2sxc 13 / EAV 13",
    "keywords": "Icons in Apps <!-- Data Highlights --> <!-- ADAM --> <!-- Server --> <!-- Prepare --> <!-- Data Source --> <!-- Optimzers --> <!-- Process / Awesomize --> <!-- Libraries --> <!-- data formats --> <!-- Browser --> <!-- Frameworks --> <!-- App show parts --> <!-- Interact parts --> <!-- Edit parts --> <!-- Edit UI parts --> <!-- SPA parts --> <!-- Custom highlight boxes - can be controlled by in-page CSS --> you are here (click to zoom) - discover the stack .context-box-summary .data-assets-app { visibility: visible; } App icons are convention based, so there is no configuration for it. To give your app an icon, place a file called app-icon.png in the root folder of your app. It should be square, and at least 500x500 pixels. Icons for Views / Templates This is also convention based, there is no configuration for it. To give your views/templates an icon, add an icon file with the same name as your template file. So if your template is called _overview.cshtml your icon should be _overview.png . 2sxc 12.02 also introduces the possibility of specifying an icon in the view-configuration. You have two options for that Just drop a file there and let ADAM manage it Place the file in the App-folder and reference it using [App:Path]/your-file.png Icons for Content-Types Content-Types don't have a file (like a Template), so this is only configuration based. Just edit the Content-Type Metadata and on the Icon-field you have two options: Just drop the image you want for your content-type and let ADAM manage it Place the file in the App-folder and reference it using [App:Path]/your-file.png v12 History App icons introduced ca. v9.01 View Icons introduced ca. v9.01 Content-Type Icons introduced ca. v9.01 View Icons enhanced with option to upload or specify manually in v12.02"
  },
  "basics/app/folder-structure.html": {
    "href": "basics/app/folder-structure.html",
    "title": "App Folder Structure | 2sxc 13 / EAV 13",
    "keywords": "App Folder Structure Every app has an own folder for its files. Within that folder the App can have zero or hundreds of folders. all apps are located in [portal-root]\\2sxc\\[app-name] the primary / Content App is located in [portal-root]\\2sxc\\Content You can create your own folders to organize your templates as you need as the structure is completely open. System Files app-icon.png is always used as the app-icon if provided System Folders api this folder contains c# files for the web services this app has. It's not available on the simpler Content App . Note: if you're using Polymorphism then the api folder is usually in a sub-folder, like live\\api .data\\app this folder may contain a snapshot of the app-data and is usefull when git-versioning your app .data\\.[something] is usually used for special data like custom input field configuration system this folder would contain custom input fields Non-Exportable Folders The following folders and files are special source-code folders and will not be included in export / import of Apps. .git is a hidden folder which all github repositories have. node_modules is the default folders when you use JS-automation while developing; it can be very large. bower_components contains bower (run-time) dependencies for your JS and can become very large. Normally you will not want this in your app (because it contains a lot of unneeded stuff) so it too will not be exported when you create an app-package. Recommended sub folder names The following folders have no technical relevance, but we recommend this naming to improve consistency. src and sub-folders should contain your javascript source files in original (unminified, etc.) dist should contain your processed, minified, uglified and combined JS files Note: if you're using Polymorphism then the dist folder is usually in a sub-folder, like live\\dist Platform Differences Dnn ‚ò¢Ô∏è & Oqtane ü©∏ In Dnn ‚ò¢Ô∏è the App-folder is located in [Website-Root]\\Portals\\[site-id]\\2sxc\\[App-Folder-Name] In Oqtane ü©∏ the App-folder is located in [Website-Root]\\2sxc\\[Site-Id]\\[App-Folder-Name] This difference is due to architecture and security reasons and may change in future."
  },
  "net-code/dynamic-data/data-origins.html": {
    "href": "net-code/dynamic-data/data-origins.html",
    "title": "Where Data Comes From | 2sxc 13 / EAV 13",
    "keywords": "<!-- Data Highlights --> <!-- ADAM --> <!-- Server --> <!-- Prepare --> <!-- Data Source --> <!-- Optimzers --> <!-- Process / Awesomize --> <!-- Libraries --> <!-- data formats --> <!-- Browser --> <!-- Frameworks --> <!-- App show parts --> <!-- Interact parts --> <!-- Edit parts --> <!-- Edit UI parts --> <!-- SPA parts --> <!-- Custom highlight boxes - can be controlled by in-page CSS --> you are here (click to zoom) - discover the stack .context-box-summary .data-all, .context-box-summary .prepare-all { visibility: visible; } Where Data Comes From From a developer perspective you have three kinds of Data: App Data Instance Data Code Retrieved Data In addition you have Settings and Resources: Configuration & Settings Resources App Data The complete App Data is always available in these objects: App The current App with Settings , Resources , Path information and more. App.Data All the data of the current app for immediate use, fully cached in memory of the web server. App.Query Queries which were created using VisualQuery and can be run to access prepared data. Instance Data Note Instance specific data belongs to the module-instance on the page, either because it was added manually as Content or because the View of the module-instance uses a Query . Best read about App vs. Instance Data and Where Data Comes From If the View is configured for manual content-editing or uses a Query then Instance Data is automatically prepared in these objects: Content The primary and often the only content-items for this template. Content.Presentation Can contain additional presentation settings for this content, like how to format it. Data One or more Streams (lists) of zero-or-more content items Header The header data if the template expects to be a list and also needs a title or intro. Header.Presentation Can contain additional presentation settings for the header, like how to format it. Code Retrieved Data Your code can also retrieve data using normal C# code to do things like Get lists of files from ADAM or the file system Read data from SQL Manually parse CSV files or access external Web Services Use DataSources to get SQL, CSV or other data Configuration and Settings Configuration is usually found on specific objects which are configured. There are three types: View Configuration App Configuration Feature activations Settings usually affect templates / Razor or C# WebAPIs. They are usually configured at various levels like on the View, App, Site or Global. C# code will usually get these settings from the Settings object which consolidates all the settings. üëâ See Settings Resources Resources are meant to provide translated labels, logos etc. You can configure them at View, App, Site or Global level. üëâ See Resources History Introduced in 2sxc v1 App.Data added ca. 2sxc 6 App.Query added ca. 2sxc 7 Settings and Resources added in 2sxc 12"
  },
  "basics/metadata/target-types.html": {
    "href": "basics/metadata/target-types.html",
    "title": "Metadata Target Types | 2sxc 13 / EAV 13",
    "keywords": "Metadata Target Types <!-- Data Highlights --> <!-- ADAM --> <!-- Server --> <!-- Prepare --> <!-- Data Source --> <!-- Optimzers --> <!-- Process / Awesomize --> <!-- Libraries --> <!-- data formats --> <!-- Browser --> <!-- Frameworks --> <!-- App show parts --> <!-- Interact parts --> <!-- Edit parts --> <!-- Edit UI parts --> <!-- SPA parts --> <!-- Custom highlight boxes - can be controlled by in-page CSS --> you are here (click to zoom) - discover the stack .context-box-summary .data-all { visibility: visible; } Metadata is Data which describes or adds information to other data . For this to work, Entities which are Metadata store the ID of the Target . In addition, they must know what Target Type this ID describes, because an ID like 20503 could be in use in many systems. The Target Type is a simple number and all known Target-Types are stored in the SQL-Database. Any Target-Type number from 1-100 are reserved for 2sxc/EAV predefined types, any number above 100 you can define yourself for your use case. Reserved / Built-In Target-Types The following list are internally reserved Target-Types Anything with 1 (or 0) is defined as not being Metadata Attribute/Property Metadata - key should be number App Metadata - key should be number (AppId) Entity-Metadata - key should be guid of entity Content-Type Metadata - key should be string static-name Zone Metadata Scope Metadata Dimension (Language) Metadata Reserved CMS-Item (like file:72 or page:42 ) - key should be string System Metadata Site Metadata Reserved Page Metadata Reserved Module Metadata Reserved User Metadata 19 - 89 are Reserved 90 Custom Metadata target - for your most common custom target that only you care about 91 Custom1 - additional custom target for your own use, only your app cares about this 92 Custom2 - ... 93 Custom3 94 Custom4 95 Custom5 96 Custom6 97 Custom7 98 Custom8 99 Custom9 100 Reserved 101 + is free to define for your own purpose, but ATM you probably shouldn't use them See also TargetTypes Custom Target Types You can easily add custom types as you need them in the SQL database yourself. Just make sure your type-id is greater than 100. History Introduced in 2sxc v2 The 100 top numbers reserved for 2sxc in 2sxc v5"
  },
  "js-code/angular/index.html": {
    "href": "js-code/angular/index.html",
    "title": "Using Angular in 2sxc / Dnn | 2sxc 13 / EAV 13",
    "keywords": "Using Angular in 2sxc / Dnn <!-- Data Highlights --> <!-- ADAM --> <!-- Server --> <!-- Prepare --> <!-- Data Source --> <!-- Optimzers --> <!-- Process / Awesomize --> <!-- Libraries --> <!-- data formats --> <!-- Browser --> <!-- Frameworks --> <!-- App show parts --> <!-- Interact parts --> <!-- Edit parts --> <!-- Edit UI parts --> <!-- SPA parts --> <!-- Custom highlight boxes - can be controlled by in-page CSS --> you are here (click to zoom) - discover the stack .context-box-summary .spa-all { visibility: visible; } Angular is an awesome JavaScript framework to build applications, especially SPA style applications. We've created a full solution for integrating Angular with Dnn and 2sxc and it's documented here. The core parts are: Integrate Angular in Dnn for runtime or development Integrate Dnn into Angular Integrate 2sxc and CMS features into Angular Introduction Video Get Started Discover the Template Angular App to first experiment with it Then either just modify the Template App to make it into anything you want Or create an own solution using the parts you like"
  },
  "js-code/2sxc-api/sxc/obsolete/sxc.manage.html": {
    "href": "js-code/2sxc-api/sxc/obsolete/sxc.manage.html",
    "title": "Manage Everything With the manage Instance | 2sxc 13 / EAV 13",
    "keywords": "Manage Everything With the manage Instance Warning This is obsolete code and will stop working soon. Please use newer APIs instead like .cms.run(...) <!-- Data Highlights --> <!-- ADAM --> <!-- Server --> <!-- Prepare --> <!-- Data Source --> <!-- Optimzers --> <!-- Process / Awesomize --> <!-- Libraries --> <!-- data formats --> <!-- Browser --> <!-- Frameworks --> <!-- App show parts --> <!-- Interact parts --> <!-- Edit parts --> <!-- Edit UI parts --> <!-- SPA parts --> <!-- Custom highlight boxes - can be controlled by in-page CSS --> you are here (click to zoom) - discover the stack .context-box-summary .edit-custom { visibility: visible; } The manage object helps you manage content, allowing you to run(...) commands or to get buttons or toolbars . How to use Each content-block (usually a Dnn-Module) has it's own 2sxc-instance, which also gives you a prepared manage-object to work with. Here's an example <a onclick='$2sxc(this).manage.run(\"layout\")'>layout</a> this click-event will look up the 2sxc-instance using $2sxc(this) , then use the manage-object provided by this to then run the layout command. The layout command opens the change-template dialog. Here's an example to generate a toolbar from code: <p class=\"sc-element\"> mouse over this to see the js toolbar generated by the groups of buttons <toolbarsGroups></toolbarsGroups> </p> <script> var toolbarsGroups = { groups: [ { buttons: \"layout,more\"}, { buttons: \"app,zone,more\" } ] }; $(function(){ $(\"toolbarsGroups\").each(function(index, element){ var sxc = $2sxc(element); var toolbar = sxc.manage.getToolbar(toolbarsGroups); $(element).replaceWith(toolbar); }); }); </script> The example above has a function which will look for all <toolbarsGroups> tags and replace them with the HTML provided by manage.getToolbar(...) . How it works Basically the manage-property only exists when the user has edit permissions, as 2sxc will automatically include the necessary JS in the page. So if the user doesn't have edit-rights, the .manage property will be undefined . If it does exist, it can be used to do perform these kinds of actions. Properties and Methods We try to keep APIs very light, so all the internal properties/objects are not documented and should not be used. These properties and methods can be treated as stable: void .run(...) - used to run a command string .getButton(...) - used to generate HTML for a single button (which when pressed, runs a command) - see buttons and toolbars string .getToolbar(...) - used to generate HTML for a toolbar (with buttons, which run commands) - see buttons and toolbars Demo App and further links You should find some code examples in this demo App JS Manage / Toolbar API Tutorial App History Introduced in 2sxc v02.00 Officially released & documented for use in 2sxc v08.06"
  },
  "abyss/parts/look-up/engine.html": {
    "href": "abyss/parts/look-up/engine.html",
    "title": "LookUp Engine | 2sxc 13 / EAV 13",
    "keywords": "LookUp Engine <!-- Data Highlights --> <!-- ADAM --> <!-- Server --> <!-- Prepare --> <!-- Data Source --> <!-- Optimzers --> <!-- Process / Awesomize --> <!-- Libraries --> <!-- data formats --> <!-- Browser --> <!-- Frameworks --> <!-- App show parts --> <!-- Interact parts --> <!-- Edit parts --> <!-- Edit UI parts --> <!-- SPA parts --> <!-- Custom highlight boxes - can be controlled by in-page CSS --> you are here (click to zoom) - discover the stack .context-box-summary .lookup-engine { visibility: visible; } The LookUp Engine is responsible for getting values. It will use LookUp sources to resolve the values. The LookUp System is in the ToSic.Eav.LookUp namespace The LookUp Engine is an ILookUpEngine Warning This is very technical stuff, you usually don't need to know this. We're just including it for completeness sake. LookUpEngine LookUp Engines will collect a set of LookUp objects and use these to resolve strings like Module:ModuleId . For this, they will check which LookUp has the right name (in this case Module ) and will ask it if it can provide the value (in this case the ModuleId ). Notes Usually LookUp Engines will receive a long list (Dictionary) of things to look up, and resolve these in one quick call. This is because often they are attached to a DataSource which requires many configuration values - so they will prepare the list of parameters, pass it to the LookUpEngine and then work with the results as needed. Tip LookUp Engines can also perform default-fallbacks - so if a LookUp source can't provide the answer needed, the engine may use a static value instead: [QueryString:PageSize||10] Tip LookUp Engines can also perform lookup-fallbacks if the source can't provide an answer. In this case it may ask another LookUp if it has the answer. This happens when the Token looks like this: [QueryString:PageSize||[App:Settings:PageSize]] C# and Dependency Injection LookUp Engines all implement the ILookUpEngine interface and should inherit the LookUpEngine object. LookUpEngine objects are provided with DepedencyInjection. The system that gets the currently valid LookUpEngine inherits the ILookUpEngineResolver . Also Read #todoc LookUp System LookUp Tokens Explained DataSource Configuration: Configuration.Parse() ToSic.Eav.LookUp ToSic.Sxc.LookUp ToSic.Sxc.Dnn.LookUp History General Tokens introduced in 2sxc 1.0 Most enhancements were in 2sxc 07.00"
  },
  "abyss/integration/scenario-future-wip.html": {
    "href": "abyss/integration/scenario-future-wip.html",
    "title": "Your Custom Platform - Scenario XX Notes to maybe use later | 2sxc 13 / EAV 13",
    "keywords": "Your Custom Platform - Scenario XX Notes to maybe use later TODO: REMOVE The more complete code for the StartUp looks a bit like this (taken from the OqStartUp ): public void ConfigureServices(IServiceCollection services) { // 1. Initial code to do things not related to EAV/2sxc // ... // 2. Register all 2sxc services services .AddSxcOqtane() // Always first add your override services .AddSxcRazor() // this is the .net core Razor compiler .AddAdamWebApi<int, int>() // This is used to enable ADAM WebAPIs .AddSxcWebApi<IActionResult>() // This adds all the standard backend services for WebAPIs to work .AddSxcCore() // Core 2sxc services .AddEav() // Core EAV services .AddOqtWebApis() // Oqtane App WebAPI stuff .AddRazorBlade(); // RazorBlade helpers for Razor in the edition used by Oqtane // 3. Other stuff in your Configure Services // ... } Note that you don't need all of this. For example, if you don't use razor, you won't need two of the lines above, etc. In general you should probably leave most of this disabled, and then activate each line as you need it. The code for registering your own services looks a bit like this (taken from Oqtane): namespace ToSic.Sxc.Oqt.Server.StartUp { internal static partial class OqtRegisterServices { public static IServiceCollection AddSxcOqtane(this IServiceCollection services) { // You'll probably have lots of these: services.AddScoped<I..., ...>(); services.TryAddTransient<I..., ...>(); return services; } } } TODO: REMOVE The following are optional, depending on the features you will be using The Global Assets base url - so links to in that global location work. ATM only used for the image of the Primary App The SharedAppsFolder which contains Razor or Token templates that are shared across sites History Proof of Concept implemented with 2sxc 11 in 2021 Finalized when integrating Oqtane in 2sxc 12 final docs WIP"
  },
  "abyss/data-formats/xml/app-data/index.html": {
    "href": "abyss/data-formats/xml/app-data/index.html",
    "title": "App.xml Data Format in 2sxc (technical) | 2sxc 13 / EAV 13",
    "keywords": "App.xml Data Format in 2sxc (technical) <!-- Data Highlights --> <!-- ADAM --> <!-- Server --> <!-- Prepare --> <!-- Data Source --> <!-- Optimzers --> <!-- Process / Awesomize --> <!-- Libraries --> <!-- data formats --> <!-- Browser --> <!-- Frameworks --> <!-- App show parts --> <!-- Interact parts --> <!-- Edit parts --> <!-- Edit UI parts --> <!-- SPA parts --> <!-- Custom highlight boxes - can be controlled by in-page CSS --> you are here (click to zoom) - discover the stack .context-box-summary .data-all { visibility: visible; } Apps can store their entire state as an XML file, for 2 use cases To include in an App-ZIP export For Git versioning The format of this file is not documented as of now."
  },
  "abyss/data-formats/json-v01/index.html": {
    "href": "abyss/data-formats/json-v01/index.html",
    "title": "JSON Format V1 | 2sxc 13 / EAV 13",
    "keywords": "JSON Format V1 JSON based data storage is used to persist data into a text (JSON) format. In 2sxc 9.4 we introduced it to store entities in the history (for version rollback). Since then it has found many new applications. JSON Package The Json format has a minimal header like this: { \"_\": { \"V\": 1 } } which just contains the version. Future non-breaking enhancements will leave the version on 1 and optionally add more header information. In addition to that, the basic package can contain ContentType node an Entity node a Query - which is actually also an Entity with lots of Metadata a View - which is an Entity with Metadata and Assets This could then look like this: { \"_\": { \"V\": 1 }, \"ContentType\": { \"Id\": \"|Config ToSic.Eav.DataSources.SqlDataSource\", \"Name\": \"|Config ToSic.Eav.DataSources.SqlDataSource\", ... } } Special Stuff about the JSON Format All values have language information As we're usually working with real-life content-items, multi-language is always a concern. Because of this, every value is multi-language by default. If the language code is *, that means that this value is the default/fallback value for all languages. See JSON Value (Multilanguage) V1 Metadata is a Recursive List of Entities 2sxc and the EAV is all about real-life content-management. As such, many pieces of information have more information attached, called Metadata. Metadata-items could themselves have their own Metadata, which is then of course attached as well. See JSON Metadata V1 Limitations As of now (2sxc 9.7) such a package can only contain 1 root item (a content-type or an entity). Future versions may enhance this. Read also Format: Json V1 Content-types Concepts: file provided content-types History Added in v9.4 Enhanced with Content-Types in v9.7 Extended to support attachments so Views can include templates and icons in 2sxc ca. v11.10"
  },
  "abyss/data-formats/json-v01/assets.html": {
    "href": "abyss/data-formats/json-v01/assets.html",
    "title": "JSON Assets V1 | 2sxc 13 / EAV 13",
    "keywords": "JSON Assets V1 JSON Data can include Assets. This is currently only used for export/import of Views Assets The Assets is optional on the Entity node. It looks like this: Assets array, optional asset object 1 Storage : \"app\" Name : \"some file name\" Folder : \"DefaultTemplates\" (location in the storage) File : \"string containing the file\" asset object 2 ... Note that in a view, typically it will export both the template file and the icon used. Example of an Exported View with Template file { \"_\": { \"V\": 1 }, \"Entity\": { \"Id\": 3770, \"Version\": 1, \"Guid\": \"56104398-8301-4d67-9d14-168639cc7dc8\", \"Type\": { \"Name\": \"2SexyContent-Template\", \"Id\": \"2SexyContent-Template\" }, \"Attributes\": { \"String\": { \"ContentTypeStaticName\": { \"*\": \"e2351b42-87f2-427e-9566-ff271e3e5a9f\" }, \"ListContentTypeStaticName\": { \"*\": \"\" }, \"ListPresentationTypeStaticName\": { \"*\": \"\" }, \"Location\": { \"*\": \"Host File System\" }, \"Name\": { \"*\": \"Branding\" }, \"Path\": { \"*\": \"DefaultTemplates\\\\_Branding.cshtml\" }, \"PresentationTypeStaticName\": { \"*\": \"\" }, \"StreamsToPublish\": { \"*\": \"\" }, \"Type\": { \"*\": \"C# Razor\" }, \"ViewNameInUrl\": { \"*\": \"\" } }, \"Entity\": { \"ContentDemoEntity\": { \"*\": [\"9d49e41c-1f4f-448d-88c6-df6ab4064d0b\"] }, \"ListContentDemoEntity\": { \"*\": [] }, \"ListPresentationDemoEntity\": { \"*\": [] }, \"Pipeline\": { \"*\": [] }, \"PresentationDemoEntity\": { \"*\": [] } }, \"Boolean\": { \"IsHidden\": { \"*\": false }, \"PublishData\": { \"*\": false }, \"UseForList\": { \"*\": false } } }, \"Assets\": [ { \"Storage\": \"app\", \"Name\": \"_Branding.cshtml\", \"Folder\": \"DefaultTemplates\", \"File\": \"<div class=\\\"sc-element\\\">\\r\\n@Html.Raw(Content.Toolbar)\\r\\n<div id=\\\"Branding\\\">@Content.Title</div>\\r\\n<div id=\\\"Slogan\\\">@Html.Raw(Content.Slogan)</div>\\r\\n</div>\" } ] } } Read also JSON Format V1 Blog post about the entity json format History Added in 2sxc v11.10"
  },
  "net-code/data-sources/custom/configuration-data.html": {
    "href": "net-code/data-sources/custom/configuration-data.html",
    "title": "DataSource Configuration Data | 2sxc 13 / EAV 13",
    "keywords": "DataSource Configuration Data <!-- Data Highlights --> <!-- ADAM --> <!-- Server --> <!-- Prepare --> <!-- Data Source --> <!-- Optimzers --> <!-- Process / Awesomize --> <!-- Libraries --> <!-- data formats --> <!-- Browser --> <!-- Frameworks --> <!-- App show parts --> <!-- Interact parts --> <!-- Edit parts --> <!-- Edit UI parts --> <!-- SPA parts --> <!-- Custom highlight boxes - can be controlled by in-page CSS --> you are here (click to zoom) - discover the stack .context-box-summary .datasource-custom, .context-box-summary .query-params, .context-box-summary .data-configuration { visibility: visible; } Most Custom DataSources will want to provide a configuration UI to the editor. To enable this we create a Content-Type for each DataSource which will contain the fields to configure it. Example Let's say we need a Weather DataSource which must be configured. We would create a DataSource with these fields: CountryCode - text field with a dropdown of country codes ZipCode - text field to enter the ZIP code ApiKey - a key which will let our backend use the WeatherService Once this Content-Type is defined, we automatically have an editing-UI (thanks to the CMS features) but it's not yet connected to the DataSource. Basic Integration: Single-App Use If you don't plan on distributing your DataSource and only need it in one or two Apps, then you can just create the Content-Type there and export/import it to other apps. You'll need to register the internal name in the VisualQuery Attribute of your DataSource so that the UI will show the configuration where it's needed. Once you've done this, the VisualQuery Designer will know about it and offer your content-type when configuring that part of a Query. Tip The data entered will be made available to your DataSource Configuration as the Settings . Advanced Integration: Multi-App Use If you plan on using this configuration in many Apps on a server, then export/import of this Content-Type is not practical. In this case you'll want to export the Content-Type as a JSON and place it in the .data-custom/contenttypes folder for Global Content-Types . If you now restart your Dnn, then this new Content-Type is picked up and available in all Apps on this Dnn. Redistribution Scenario The above example works well if you're fine with installing the JSON Content-Type manually on servers which will use the DataSource. For more advanced redistribution, you'll want to include the JSON file in your Dnn Installation package. But in that case it's not in .data-custom so 2sxc/EAV can't pick it up. To make sure that it's still available to all Apps on a server, you'll need to create a special class to register it on Start of Dnn. All you have to do is create a public class which inherits ToSic.Eav.Repositories.FolderBasedRepository . On boot all these classes will be found and asked for other folders which have such data. Here's an example: using System.Collections.Generic; using System.Web; using ToSic.Eav.Repositories; namespace ToSic.Tutorial.DataSource.Basic { /// <summary> /// This class will be picked up by 2sxc/EAV at boot. /// It will tell it where there are additional Content-Types to load. /// See also https://docs.2sxc.org/basics/data/content-types/range-global.html /// </summary> public class RegisterGlobalContentTypes : FolderBasedRepository { public override List<string> RootPaths => new List<string> { HttpContext.Current.Server.MapPath(\"~/DesktopModules/ToSic.Eav.DataSources.SharePoint/.data\") }; } } Tip Remember that the folder (in this case .data ) is not where the shared Content-Types are stored. They must be placed in a contenttypes subfolder. History General Tokens introduced in 2sxc 1.0 Most enhancements were in 2sxc 07.00"
  },
  "basics/edit/index.html": {
    "href": "basics/edit/index.html",
    "title": "Edit Content or Data in Dnn / 2sxc | 2sxc 13 / EAV 13",
    "keywords": "Edit Content or Data in Dnn / 2sxc <!-- Data Highlights --> <!-- ADAM --> <!-- Server --> <!-- Prepare --> <!-- Data Source --> <!-- Optimzers --> <!-- Process / Awesomize --> <!-- Libraries --> <!-- data formats --> <!-- Browser --> <!-- Frameworks --> <!-- App show parts --> <!-- Interact parts --> <!-- Edit parts --> <!-- Edit UI parts --> <!-- SPA parts --> <!-- Custom highlight boxes - can be controlled by in-page CSS --> you are here (click to zoom) - discover the stack .context-box-summary .browser-edit, .context-box-summary .browser-edit-ui { visibility: visible; } 2sxc has powerfull CMS features, most of them just work by magic. You can also modify the behavior to fit your needs. When users edit content they usually use in-page buttons to access edit-dialogs and more. Here is a short overview and links to what you need to know. The Standard Edit Dialogs Editing mostly happens in stand-alone dialogs which are JavaScript based (built using Angular). These dialogs are typically dialogs like edit an item edit a combination of items - like a content item and an assigned presentation-settings item This is documented in Edit Content or Data in Dnn / 2sxc In-Page Toolbars and User Experience The edit UX begins in the page showing the content/data. Things like toolbars opening dialogs or performing actions like publish , move up/down etc. quickE (Quick Edit) to customize the toolbar which adds / deletes modules inner-content editing Learn More About... You may want to learn more about: Customize the Toolbar in JavaScript or Razor Call CMS commands from buttons without using the toolbar Show certain HTML to editors only"
  },
  "basics/data/fields/string-default.html": {
    "href": "basics/data/fields/string-default.html",
    "title": "Field Input-Type string-default | 2sxc 13 / EAV 13",
    "keywords": "Field Input-Type string-default Use this field type for configuring simple text UI elements, storing string/text data . It's an extension of the basic string field type . Features provide a textbox single-line or multi-line Configuring a String-Default This shows the configuration dialog: Row Count is for setting the text-box height. Empty means default = 1 Font Family is for setting the string field to use mono-space font (for code style input where each character has the same width) new in 12.02 History Introduced in EAV 1.0 2sxc 1.0, originally as part of the string field type Changed in 2sxc 6.0 - Moved to it's own sub-type Font-Family with monospace introduced in v12.02"
  },
  "basics/data/fields/number.html": {
    "href": "basics/data/fields/number.html",
    "title": "Field Data Type: Number | 2sxc 13 / EAV 13",
    "keywords": "Field Data Type: Number This explains Number Fields . For an overview check out Understanding Data... . Number data is a basic data type and is for any kind of number 1,2,3 or very detailed numbers like 47.020503020400203 which are common in GPS coordinates. Features The basic number field doesn't have any features, since all the features are in the sub-types. Sub-Types of Empty Fields number-default - is the input field for any kind of numbers like simple numbers, numbers with decimal-digits or very detailed numbers like 47.020503020400203 which are common in GPS coordinates. drop-down for simple number dropdowns Shared Settings Don't have shared settings. Technical Information Storage in the SQL Database in the EAV-Model This is converted to a string when stored as a string in the DB, and converted back to a boolean when the data is loaded. Storage in the SQL Database in the JSON-Model This is simply stored as a number in json. Null Value Possible In some cases you may add a field to a type which already has Entities created previously. In this case the old data doesn't have a value for the field. If this happens, the field will return null , so you may need to catch this special exception in your code. History Introduced in EAV 1.0 2sxc 1.0"
  },
  "net-code/data-sources/datastream.html": {
    "href": "net-code/data-sources/datastream.html",
    "title": "Data Streams (IDataStream) | 2sxc 13 / EAV 13",
    "keywords": "Data Streams (IDataStream) <!-- Data Highlights --> <!-- ADAM --> <!-- Server --> <!-- Prepare --> <!-- Data Source --> <!-- Optimzers --> <!-- Process / Awesomize --> <!-- Libraries --> <!-- data formats --> <!-- Browser --> <!-- Frameworks --> <!-- App show parts --> <!-- Interact parts --> <!-- Edit parts --> <!-- Edit UI parts --> <!-- SPA parts --> <!-- Custom highlight boxes - can be controlled by in-page CSS --> you are here (click to zoom) - discover the stack .context-box-summary .datasource { visibility: visible; } DataStreams are objects which behave like a table or a list. They deliver a bunch of content-items/Entities. Common examples in Razor-templates are: Data[\"Default\"] This is a data-stream containing all content-items prepared for the template. App.Data[\"Tag\"] This would be a data-stream containing all tag-items in the entire app, if the App has Tag items. Tip All DataSources have at least one Out -stream called Default . But they can have more streams as well. Most DataSources also have one or more In streams providing data or configuration to that DataSource which will then give a modified list to the Out . How to use The most commen uses will loop through all items in such a stream and show them. Here's an example: <ol> @foreach(var person in Data[\"Default\"]){ <li>@AsDynamic(person).FullName</li> } </ol> The @foreach will go through all the items. Each item is of the type IEntity . To make it easier to template, we convert it to a Dynamic Entity using AsDynamic and then we can just show the name with .FullName . In most cases we will need the loop-item a lot, and would preferr to not write AsDynamic every time. Because of this, we usually write the AsList in the Loop, like this: <ol> @foreach(var person in AsDynamic(Data[\"Default\"])) { <li>@person.FullName - born @person.Birthday and married to @person.SpouseName</li> } </ol> Discover More in the Razor Tutorials We have an rich series of Razor tutorials . You should really check them out üëç. Advanced Use Cases There are some advanced use-cases where you need to know more about the IDataStream object, mostly when using LINQ. This is fairly rare, and if you really need to know more, it's best to consult the EAV DataSource code. Just a few more details you might care about: The stream has a property Source which points to the owning DataSource . a stream might be attached to many targets for further processing or for templating, but the stream doesn't know about this you can always looup through items on the stream itself using LINQ, like var blues = Data[\"Default\"].Where(x => AsDynamic(x).Category == \"Blue\")) see also Use LINQ with Dynamic Data in Dynamic Code of course there's always quite a bit more to it, like auto-caching, but you usually don't need to understand all that. Read also todo: tutorial links you should also read about DataSources todo: api links History Introduced in 2sxc 01.00 Multi-Language since 2sxc 02.00"
  },
  "basics/browser/edit-form/field-validation.html": {
    "href": "basics/browser/edit-form/field-validation.html",
    "title": "| 2sxc 13 / EAV 13",
    "keywords": "moved to Field Validation in 2sxc TODO"
  },
  "basics/browser/edit-form/custom-fields.html": {
    "href": "basics/browser/edit-form/custom-fields.html",
    "title": "| 2sxc 13 / EAV 13",
    "keywords": "moved to Customizing the Form - 2sxc v11!"
  },
  "basics/browser/edit/index.html": {
    "href": "basics/browser/edit/index.html",
    "title": "| 2sxc 13 / EAV 13",
    "keywords": "moved to Edit Content or Data in Dnn / 2sxc"
  },
  "basics/browser/json-data.html": {
    "href": "basics/browser/json-data.html",
    "title": "Json Data in the Browser | 2sxc 13 / EAV 13",
    "keywords": "Json Data in the Browser <!-- Data Highlights --> <!-- ADAM --> <!-- Server --> <!-- Prepare --> <!-- Data Source --> <!-- Optimzers --> <!-- Process / Awesomize --> <!-- Libraries --> <!-- data formats --> <!-- Browser --> <!-- Frameworks --> <!-- App show parts --> <!-- Interact parts --> <!-- Edit parts --> <!-- Edit UI parts --> <!-- SPA parts --> <!-- Custom highlight boxes - can be controlled by in-page CSS --> you are here (click to zoom) - discover the stack .context-box-summary .format-json-headless, .context-box-summary .show-js, .context-box-summary .interact-2sxc { visibility: visible; } Often you'll use JavaScript to work with JSON data in your browser. This data can be transferred in three common ways: Inline in a <script> tag where it's assigned to a variable Inline in some attribute like <div data=\"{...}\"> In a WebApi call from the Headless API or from Custom WebAPIs To access the WebAPIs you should check out the JS APIs History Added in 2sxc 1.0"
  },
  "basics/app/views/configuration.html": {
    "href": "basics/app/views/configuration.html",
    "title": "View Configuration | 2sxc 13 / EAV 13",
    "keywords": "View Configuration <!-- Data Highlights --> <!-- ADAM --> <!-- Server --> <!-- Prepare --> <!-- Data Source --> <!-- Optimzers --> <!-- Process / Awesomize --> <!-- Libraries --> <!-- data formats --> <!-- Browser --> <!-- Frameworks --> <!-- App show parts --> <!-- Interact parts --> <!-- Edit parts --> <!-- Edit UI parts --> <!-- SPA parts --> <!-- Custom highlight boxes - can be controlled by in-page CSS --> you are here (click to zoom) - discover the stack .context-box-summary .process-razor, .context-box-summary .data-configuration { visibility: visible; } A view has a lot of configuration options, but they are all explained in the edit view dialog, so we're not documenting this here. Two things of interest which you may want to read about: View-switching based on url-params Security protecting views like admin-views View Configuration in Razor 2sxc 12.02 introduces the ability to access View some Configuration from Razor. The most important properties are available on CmsContext.View - this is an ICmsView object with properties like Id Identifier Edition Name Advanced Topics Switching between views based on the url Differences between features when using Content or App Protecting Views for certain users using permissions Hide advanced features from normal editors History Introduced in 2sxc 1.0 Made available to Razor in 2sxc 12.02"
  },
  "basics/app/primary-app/index.html": {
    "href": "basics/app/primary-app/index.html",
    "title": "The Primary App | 2sxc 13 / EAV 13",
    "keywords": "The Primary App The Primary App is a special App in each Site which is automatically created whenever you start using 2sxc on a site. The core purpose is storing site-wide Settings and Metadata . Tip The content App has some special behavior and limitations by design. For example: It is not meant to be added to a page. Since it is the primary App in a Site, some settings on this app affect other Apps in the site. Read more about Settings Special Limitations of The Primary App Since the Primary-App is meant for settings, it has some limitation. The limitations are: Should never be added to a page as of v13 (future releases may change this) Technical Details Each Site/Portal has an own Primary App The ID of the Content-App is 251c0000-eafe-2792-0001-000000000001 History Concept introduced in 2sxc v12 but there the Content App was also the Primary App Standalone Primary App in 2sxc v13 (breaking change)"
  },
  "basics/app/inherit/index.html": {
    "href": "basics/app/inherit/index.html",
    "title": "Inherit Apps (v13+) WIP | 2sxc 13 / EAV 13",
    "keywords": "Inherit Apps (v13+) WIP There are a few ways to re-use data, content-types and templates across sites. In very advanced cases you may want to define an App in one central place, and re-use that in many sites. This describes how to do this - it's a new feature in 2sxc 13.02. Important This only works if the feature has been enabled and requires the EnterpriseCMS license - docs WIP! How it Works TODO: Inherited Apps work like a multi-layer app. The bottom layer is the Ancestor App . Changes to this affect all Apps which inherit it. On top of this is the Descendant App on a specific site, it can only add more material to the parent app, but not change any inherited data Descendant Apps inherit all this: App Name and Folder Name (they must be the same) All Content-Types of the Ancestor All Data / Entities of the Ancestor All Queries of the Ancestor All View definitions of the Ancestor All Template files and JS/CSS resources in the global storage of the App Descendant Apps don't inherit this: Settings - not sure yet if they do - still WIP Templates and Resources in the local storage of the Ancestor App ADAM files of the Ancestor App How to Create Enable Feature Define the Ancestor / Master App Define an Descendant App Test :) Best Practices Everything in the ancestor App will be available in all inherited apps, and anything you change can affect the inherited Apps. Because of this, you should not use an App from a productive site (like the main/home site) as an ancestor, but always create a special site which isn't public, just to manage the ancestors. This will save you a lot of pains which would result from quickly making some edits which accidentally affect all the child sites. Enable the Feature TODO: Migrate an Existing App to becoming a Master Ancestor Create the Ancestor App TODO: todo Limitations of the Ancestor App You must be aware of a few limitations in the Ancestor App. Only views with templates stored in the global location can be used in Descendant Apps If you have data (entities) with images/files in the data, they cannot use the file:72 reference, but must use the full path to the file for it to work on other sites, as the file-id lookup would not work in other sites. Create The Descendant App TODO: History Introduced in v13.01"
  },
  "basics/app/git/index.html": {
    "href": "basics/app/git/index.html",
    "title": "App Git Integration | 2sxc 13 / EAV 13",
    "keywords": "App Git Integration In 2sxc you can store the current App State to an XML file and restore it. Why Store and Restore the App State To save to git, and later see how the state got changed To save to git, test some changes, and roll back to the previous state To push to a remote repo (like Github) and pull again from another installation What's Included and What Not If you save an App Folder to git... ...it contains everything in the App folder and App Assets (unless you explicitly added it to the .gitignore file) ...it may contain the App State (all the data items including configuration and settings) if you previously exported them (see below) ...it doesn't contain the Content Assets (images etc.) as that's in the ADAM folder of the App Saving / Restoring App State (Data) This is where you can find the App State Save/Restore On 2 you can save the state (it will be stored in [app-root]/.data/app.xml ) On 3 you can restore the data from this file: History Export introduced ca. 2sxc v5 Re-Import introduced in 2sxc v11.11"
  },
  "net-code/koi/index.html": {
    "href": "net-code/koi/index.html",
    "title": "Koi Library | 2sxc 13 / EAV 13",
    "keywords": "Koi Library 2sxc includes Koi - a helper library to let components / modules know what CSS framework is used, and use that information to create templates which adjust to that CSS framework. Tip 2sxc 11 introduced Polymorphism which lets you place different editions of a Razor file in folders matching various CSS frameworks. This is easiest way to leverage Koi, and your code doesn't even need to know about it. Discover More in the Koi Tutorials We have an rich series of Koi tutorials . You should really check them out üëç. New Example (requires 2sxc v12) 2sxc v12 includes Koi 2.0 which uses Dependency Injection . Using this it also works in Oqtane. The following example will automatically include Bootstrap4 from a CDN if the theme doesn't already include it. @{ var pageCss = GetService<Connect.Koi.ICss>(); } @if(!pageCss.Is(\"bs4\")) { <link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css\" integrity=\"sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T\" crossorigin=\"anonymous\"> } Old Example (will only work in Dnn ‚ò¢Ô∏è) The following example will automatically include Bootstrap4 from a CDN if the theme doesn't already include it. @using Connect.Koi; @if(!Koi.Is(\"bs4\")) { <link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css\" integrity=\"sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T\" crossorigin=\"anonymous\"> } Learn to Leverage RazorBlade Visit Connect-Koi Website Check out the Koi Tutorials Install the default content-templates and discover how it's used there"
  },
  "js-code/2sxc-api/2sxc/2sxc.cms.html": {
    "href": "js-code/2sxc-api/2sxc/2sxc.cms.html",
    "title": "The $2sxc.cms API | 2sxc 13 / EAV 13",
    "keywords": "The $2sxc.cms API <!-- Data Highlights --> <!-- ADAM --> <!-- Server --> <!-- Prepare --> <!-- Data Source --> <!-- Optimzers --> <!-- Process / Awesomize --> <!-- Libraries --> <!-- data formats --> <!-- Browser --> <!-- Frameworks --> <!-- App show parts --> <!-- Interact parts --> <!-- Edit parts --> <!-- Edit UI parts --> <!-- SPA parts --> <!-- Custom highlight boxes - can be controlled by in-page CSS --> you are here (click to zoom) - discover the stack .context-box-summary .edit-custom { visibility: visible; } The $2sxc.cms object is the core JavaScript API to perform CMS actions such as opening edit-dialogs etc. As of now (v9.30 - v13) it only has 1 command run(...) but will be enhanced in the future to do more. You need this in advanced use cases. otherwise you don't need this . Such advanced cases are: when you create custom JS buttons to start a content-management action How to use v12.10 and newer 2sxc 12.10 enhanced the cms.run(params: RunParamsWithContext) to accept an object with parameters. This makes it easier to reliably pass in optional parameters, and also supports the use of Workflow Steps . üëâ Learn more in the Cms-Run Docs . History Introduced in 2sxc 09.30 Enhanced with RunParams in 2sxc 12.10 to support registering workflows Enhanced the Global run(...) to also support context in addition to tag in v13.03"
  },
  "basics/data/index.html": {
    "href": "basics/data/index.html",
    "title": "Understanding Data... | 2sxc 13 / EAV 13",
    "keywords": "Understanding Data... <!-- Data Highlights --> <!-- ADAM --> <!-- Server --> <!-- Prepare --> <!-- Data Source --> <!-- Optimzers --> <!-- Process / Awesomize --> <!-- Libraries --> <!-- data formats --> <!-- Browser --> <!-- Frameworks --> <!-- App show parts --> <!-- Interact parts --> <!-- Edit parts --> <!-- Edit UI parts --> <!-- SPA parts --> <!-- Custom highlight boxes - can be controlled by in-page CSS --> you are here (click to zoom) - discover the stack .context-box-summary .data-all { visibility: visible; } Data in 2sxc covers various aspects: Data as a developers sees it - as tables of items / Entities Content as an editor sees it - basically bundles of text/image shown on a specific page Content Presentation Settings which configure how the content should be shown for each item Settings at App-Level Language Resources at App-level for multilanguage output Assets (images, documents) belonging to this each data-item / Entity This kind of data is usually used to: Show in the browser with HTML Show in the browser in a JS-application or SPA Edit in the browser Export / import data Combine with other data Use in other sites or mobile apps with a headless backend This kind of data can be used in many ways. Let's start by looking where this fits in the stack: <!-- Data Highlights --> <!-- ADAM --> <!-- Server --> <!-- Prepare --> <!-- Data Source --> <!-- Optimzers --> <!-- Process / Awesomize --> <!-- Libraries --> <!-- data formats --> <!-- Browser --> <!-- Frameworks --> <!-- App show parts --> <!-- Interact parts --> <!-- Edit parts --> <!-- Edit UI parts --> <!-- SPA parts --> <!-- Custom highlight boxes - can be controlled by in-page CSS --> you are here (click to zoom) - discover the stack .context-box2 .data-data { visibility: visible; } Tip The Edit UIs are automatically generated based on the Content-Type Schema which says what fields each kind of data has. App Data Model Every App contains Content-Types and Entities - like this: Content Types are the schema, they define what fields an entity has. Entities are the data-items, they contain the content. Let's look at each piece in detail. Content-types Content-types are the Schema . The are the rules which say that a Person has a FirstName , Photo and Birthday etc. An App usually has a lot of Content-Types. üëâ Content-Type (Schema/Object-Type) üëâ Content-Type Fields Global / Shared Types Usually a Content-Type is part of the App and only available inside that App. In rare cases you may have many sites (Portals) or many Apps which need the same Content-Type . In this case it's smarter to store this in a shared location. üëâ App Shared \"Ghost\" Content-Types (‚ö†) Global-Types are Content-Types which are stored in a system folder so they can be used in all Apps of an installation. üëâ Global Content-Types (‚ö†) Entities / Content-Items Entities are Dynamic Data Items . They always belong to a Content-Type and have all the fields specified in that Content-Type . This makes them very dynamic. A Person has different fields than a BlogPost All the Values in an Entity can also be multi-language by default üëâ Entities (Data, Records, Items) Assets (Images / Documents) Assets come in 2 Flavors: Private Assets and Shared Assets . Private Assets By default, assets uploaded in the UI belong to the Entity and to the Field they were added to. So the photo daniel.jpg belongs to the Field ProfilePhoto of the Entity Person #5020. Shared Assets If the editor expects to re-use an asset elsewhere and if the Content-Type configuration allows this, then the asset can also be stored in a shared location. üëâ Content Assets / Images / Documents ADAM - the Automatic Digital Asset Manager ADAM is a subsystem of 2sxc. It's responsible for managing the files and storing them in a way that assigns Private Assets to the Entities and Fields they belong to. üëâ ADAM - Automatic Digital Asset Management External Data External Data can come from anywhere. Here are some common scenarios: SQL data coming from the Dnn database or from another DB CSV data from a file which an editor updates from time to time SharePoint document lists or tables JSON data from another REST WebService External Data is retrieved using one of the following methods: a VisualQuery which was configured to get / filter / sort this data C# code creating DataSource objects to retrieve this data C# code using standard .net APIs to get / use this data Once the data is retrieved it can be used in Templates, WebAPIs, JavaScript and SPAs. More Advanced Topics Entities and Dynamic Entities Using Entities as Content or as Data Content Lists of Entities VisualQuery Data Sources Headless APIs Metadata"
  },
  "web-api/specs/webapi-context.html": {
    "href": "web-api/specs/webapi-context.html",
    "title": "Context for 2sxc WebAPI and REST APIs | 2sxc 13 / EAV 13",
    "keywords": "Context for 2sxc WebAPI and REST APIs <!-- Data Highlights --> <!-- ADAM --> <!-- Server --> <!-- Prepare --> <!-- Data Source --> <!-- Optimzers --> <!-- Process / Awesomize --> <!-- Libraries --> <!-- data formats --> <!-- Browser --> <!-- Frameworks --> <!-- App show parts --> <!-- Interact parts --> <!-- Edit parts --> <!-- Edit UI parts --> <!-- SPA parts --> <!-- Custom highlight boxes - can be controlled by in-page CSS --> you are here (click to zoom) - discover the stack .context-box-summary .browser-interact, .context-box-summary .process-apis { visibility: visible; } Whenever the server receives an HTTP request it must determine what it's for to figure out what to do. Tip The Context contains default information about the request incl. the site/app it's for, what languages to use etc. In most cases the client will include the necessary information automatically. The following section is helpful if... ...you need to manually include the context, like when you're request originates from outside of the ecosystem ...you need to override some context information, like when your JS is on a German site but want to get the English data In these docs we explain what each part of the context does, where it's from, what it's for and how to optionally override it. 1. The Site / Portal Context (required) Since our platforms (Dnn/Oqtane) could have multiple sites in the same installation, the first thing that must be determined is what site this request is for. How the Site is Automatically Detected In Dnn a site is always identified by the root path to the site, as it's configured in Dnn. Examples: https://www.2sxc.org is site 0 https://2sic.org is site 0 https://2sxc.org/en is site 0 https://2sxc.org/de is site 0 https://2sxc.org/dnn-tutorials/ is site 24 In Oqtane a site is always identified through a number in the route (the domain is ignored). Examples: .../1/api/... is site 1 .../2/api/... is site 2 What is Affected by the Site Context The Site context is important for various additional pieces of context: The languages available (can be different on each site) The primary language (configured per site) The current language (can only be one of the available languages or primary) The app (see below, apps are installed on sites) Providing an Own Value or Overriding the Default Just call the other endpoint with the correct URL. 2. Current Language The current language is necessary for read operations to determine what values to actually use. In case of a no-language or single-language site it's not important. How the Current Language is Automatically Detected In Dnn the current language is part of the url, as configured in the site, so it's dependent on the Site Context. Here some examples: 2sxc.org/en would be configured to be en-US 2sxc.org/de would be configured to be de-DE de.2sxc.org would be configured to be de-DE In Oqtane the convention isn't clear yet (WIP) What is Affected by the Current Language All read operations in the API and internally will try to access values meant for that language. Return values will also prefer that language (if translations exist). Providing an Own Value or Overriding the Current Language The most common way to use another language is to use the appropriate url which matches that language. Another way to do it is to include a parameter in the request like ?language=en . Warning Setting the ?language=xxx parameter in Dnn has a suprising performance penalty of ca. 200-300ms. So if you can, prefer to just use the correct initial path. 3. Page and Module Context (optional) Whenever the API call is used on a Dnn or Oqtane page, the HTTP call will usually include this information in the request to assist in auto-detecting the App Context. How the Page and Module are Automatically Detected The standard implementation is that API-Calls include special HTTP headers with these IDs. These headers are used: PageId (number) ModuleId (number) Note For historical reasons, Dnn includes a TabId which contains the same value as PageId . The backend will treat these as the same header. We changed this to PageId in v11 and for future stability please use PageId . What is Affected by the Page and Module Context The primary use for the Page/Module Context is figuring out what App Context to use. So if the Module 2472 on Page 51 on Portal 7 is a Blog App then, then the App Context will be this Blog App. The second use is providing data for this Module Instance . So if a module has content or data assigned to it (like a Category List showing 3 selected Categories), then this data will be available automatically. The third important use is for permission detection: if the current user has certain permissions on this page/module, then these permissions also apply to the current API request. If the Page/Module context is missing, then only default permissions apply. The final and obvious use is that certain backend APIs will know these values, so that objects like CmsContext.Page.Id have these values for the scripts to use. See also ICmsContext Providing an Own Value or Overriding the Default Page/Module The default calls on the 2sxc JS API including dnn-sxc-angular will automatically set these headers if it can. If you have a reason to include alternate values, just make sure that you change the headers either by modifying the request before it's sent, or by using another http-caller like jQuery. 4. App Context (required) All WebAPI operations happen inside an App. They are either Content/Query REST calls (so they apply to the app) or custom WebApis (which are in the app-folder) - so the App must always be known. How the App Context is Automatically Detected The App Context requires that the Site Context is already known. Then there are two ways for the App Context to be detected: If the Page Context and Module Context are known, then this automatically leads to the app to be used, as it's the app on that module. Note: In rare cases the page and module are set, but the app has not been selected yet. This edge case only affects internal APIs of 2sxc, not the normal use we discuss here If Page/Module are not known or not provided, then the app is chosen based on the App-Name in the url. This is the default mechanism used when calling endpoints from other pages or mobile apps. If both the Page/Module Context and the App-Name are provided, then the App-Name is prioritized. If it is about the same App, then the full context (with Page/Module) is used, allowing more permissions to work. If neither Page/Module nor App Context are known, then the request will fail. What is Affected by the App Context The App Context will be used for almost everything, including these aspects: The data and configuration used ( App.Data etc.) The path to code (like custom WebApi Controllers) Permissions on the App or Content-Types Providing an Own Value or Overriding the Default App Context To access another app you will usually supply another App-Name in the url for the API-Call. In rare cases you may also provide other Page and Module Context headers, but this is usually not a good idea. 5. Current User (required) All operations happen in the context of a user, either Anonymous or the Current User Identity . How the Current User is Automatically Detected The current user is always provided by the environment (Dnn or Oqtane). If no user is identified, the platform always tells 2sxc that the user is Anonymous . What is Affected by the Current User Read / Write permissions (either directly or indirectly if a user is in a group with permissions) Read-Draft permissions (admins may also see data which isn't published yet) Identity used when saving data Providing an Own Value or Overriding the Default App Context The user is fixed to being the real user logged in (or Anonymous). So if you need to execute something in another identity, make sure your system logs into Dnn/Oqtane using the built-in mechanisms (like JWT) and then perform the request using that authentication. 6. Other: Edition (optional) This only applies to custom WebAPI controllers. Custom WebAPI controllers are usually stored in the folder [App-Root]/api . You can also place them in subfolders like [App-Root]/live/api in which case live would be an edition. This allows you to have multiple editions of the same controller for staging, testing and more. As it's not really context information, it's only mentioned here. To find out more, read about the URL Schema and about Polymorphisms . 6. Other: RequestVerificationToken (maybe optional) Dnn and Oqtane have a security system to ensure that requests are coming from the page itself and that they are using the right login. This is not really context, so the full mechanism is explained in [Security][xref:WebApi.Specs.Security]. Read also URL Schema Concepts: Polymorphisms You should find some code examples in this demo App Razor Web API tutorials REST and WebApi Tutorial Mobius Forms App History Introduced in 2sxc 5.x Query added in 2sxc 8.10 Enhanced with Polymorph Editions in 2sxc 9.35 (allowing edition-folder/api)"
  },
  "web-api/specs/url-schema.html": {
    "href": "web-api/specs/url-schema.html",
    "title": "URLs for 2sxc WebAPI and REST APIs | 2sxc 13 / EAV 13",
    "keywords": "URLs for 2sxc WebAPI and REST APIs <!-- Data Highlights --> <!-- ADAM --> <!-- Server --> <!-- Prepare --> <!-- Data Source --> <!-- Optimzers --> <!-- Process / Awesomize --> <!-- Libraries --> <!-- data formats --> <!-- Browser --> <!-- Frameworks --> <!-- App show parts --> <!-- Interact parts --> <!-- Edit parts --> <!-- Edit UI parts --> <!-- SPA parts --> <!-- Custom highlight boxes - can be controlled by in-page CSS --> you are here (click to zoom) - discover the stack .context-box-summary .browser-interact, .context-box-summary .process-apis { visibility: visible; } The URL Schema describes how the paths look to access WebAPIs. When using $2sxc JS or other helpers like dnn-sxc-angular most if this is automatic. So this information is most useful if you are doing something very custom or accessing 2sxc APIs from externally (like mobile apps). Finding the right URLs in the Admin-Dialogs Tip Starting in 2sxc 11.10+ the admin-UI has built-in help to get started. These UIs also show sample code and everything. So you probably don't need to read the stuff here and just go ahead with that. Tip In 2sxc 11.10 this dialog was introduced for the Data section, and we'll add similar sections for Query and WebApi . So the remaining information on this page is really only for those who really want to dive in deep. Note about Platform and Version Differences The exact schema for the url varies depending on the platform you're using. So Dnn 7 is different from Dnn 9, and Oqtane is different again. Also older versions of 2sxc had URLs which still work today but are not recommended any more, because they were not well structured. In 2sxc 11.10+ we introduced REST-API help dialogs in the Admin-UI, so from now on you 2sxc will tell you what URLs you can use. So the information you find here is valid, but you probably don't need it URL Schema Specifications (Advanced) One of the most confusing aspects when using the REST API or custom WebApis is finding the right URL to talk to the API. Read this to help you understand what's going on and get started quickly. Every 2sxc REST URL is built with the following parts: [root]/app/[app-identity]/[app-part]/[specifics] The root is determined by Dnn and changes a bit by Dnn version, portal, and language configuration. more The app-identity says what app we're addressing. It's often auto for auto-detection, but when auto-detection isn't available, it's the app-folder name. more the app-part determines if we're accessing data , query or api of the app. The specifics is a path part describing what exactly what we're accessing and varies depending on the API. Part 1: The Root Path The Root in Dnn 9+ In Dnn 9 the root was shortened to: [portal-root-with-language]/api/2sxc/... Note The old root from Dnn 7 and 8 still work in Dnn 9 for compatibility. The Root in Dnn 7 and 8 Dnn 7 & 8: [portal-root-with-language]/desktopmodules/2sxc/api/... Warning An easy thing to overlook is that in Dnn 7 and 8 it was 2sxc/api but in Dnn 9 it's api/2sxc The Root in Oqtane This is still WIP, but most likely it's [domain]/[site-id-number]/api/2sxc/... Part 2: The App-Identity When to use or not-use Auto-Detection auto The App-identity can be either the word auto to use auto-detection, or the app-folder-name if you can't use auto-detection. Tip Whenever you're working in Dnn and accessing the endpoint from a module that contains the same App, then you should use auto-detection. Warning Auto-Detection relies on Dnn mechanisms to detect the Context (usually sending the PageId and ModuleId in HTTP-headers). 2sxc uses these headers to figure out what App you're using. If something fails in auto-detection, you're probably not using the normal Dnn conventions for making REST calls. Warning When calling an endpoint from another website or a mobile App, you cannot use auto but must specify the app-folder name. Or you can provide Context by adding ?PageId=...&ModuleId=... to the url. Tip If you're not using auto-detection, then the root path must be absolutely correct. Here's why: If you have multiple portals then each portal could have other apps, or sometimes even the same app (like a Blog app). In this case, the root-path says what portal is being used, which in turn is important to get the correct app. App-Identity Examples To access an API (in this example the data ) from JS code in the same app you can rely on auto-detection of the app, like this: .../app/auto/data/... To access the same Glossary-App from elsewhere, like from the skin (for example, to highlight all words to which your glossary-app has definitions), from another app, or from another website, you would specify the folder name as auto-detection won't work. Like this: .../app/Glossary/data/... This applies to all endpoints like data , query , api . Part 3: App-Part Data, Query or Web-Api Part 3a: App-Part Data Tip Starting with 2sxc v13, the data-api is .../app/.../data/TYPENAME . In previous versions, it's .../app/.../content/TYPENAME . If your part is data then you're using the normal content/entity REST API. It supports all common HTTP verbs. In this case you have the following possibilities after data/ : .../data/[YourContentType] HTTP GET will retrieve all items of this type .../data/[your-content-type]/[item-id] where item-id is the number or the GUID HTTP GET will get one item HTTP POST is used to create an item or update it HTTP DELETE will delete the item Warning This requires that permissions are configured to allow it. The permissions are very powerful so make sure you understand them. Tip You can also configure permissions in ways that allow users to only create draft items (which would then require an admin to publish it) Data Example Assume you have the blog-app installed and your JS would request a JSON from this endpoint (logged in as host, so security is not an issue): [root-path]/app/auto/data/BlogPost ...then your JS would receive a JSON with all BlogPost items. More examples: Reading [root-path]/app/auto/data/BlogPost/1050 would give you exactly one BlogPost item (with the id 1050) HTTP POST to [root-path]/app/auto/data/BlogPost/1050 with a POST body of { \"Title\": \"changed title\"} would let you update the item 1050. Part 3b: App-Part Query The Query endpoint can be accessed on .../query/[your-query-name] . Note that Query endpoints only support the HTTP-verb GET, since it's read-only. Warning This requires that permissions are configured to allow it. The permissions are very powerful so make sure you understand them. Tip Make sure you give your queries simple names without spaces if you intend to use them in REST calls. Tip Queries can also expect url-parameters if they are configured to do this. So if you query has an ID-filter which expects a token [QueryString:id] you can also call your query like .../app/auto/query/GetWithId?id=27 Query Example Assume you have the blog-app installed and your JS would request a JSON from this endpoint (logged in as host, so security is not an issue): [root-path]/app/auto/query/BlogPostsByAuthor?Author=Daniel%20Mettler This would run the pre-defined query and return the Blog Posts of the author Daniel Mettler . Part 3c: App-Part Custom C# Web Api Custom WebAPI use one of these schemas .../api/[controller-name]/[action-or-more-params] .../[edition]/api/[controller-name]/[action-or-more-params] Your C# code determines what HTTP-verbs will work (GET, POST, etc.). Your code is also responsible for determining what permissions are used, like Anonymous etc. The [edition] is relevant if you're using Polymorphism . So if you don't specify an edition, the controller is expected to be in the [AppFolder]\\api but if you do use polymorphism the controller must be in [AppFolder]\\[edition]\\api . Read also DotNet WebApi Concepts: Polymorphisms Demo App and further links You should find some code examples in this demo App Razor Web API tutorials REST and WebApi Tutorial Mobius Forms App History Introduced in 2sxc 5.x Query added in 2sxc 8.10 Enhanced with Polymorph Editions in 2sxc 9.35 (allowing edition-folder/api)"
  },
  "net-code/web-api/custom-web-api-base-class.html": {
    "href": "net-code/web-api/custom-web-api-base-class.html",
    "title": "Custom C# Web API Base Classes | 2sxc 13 / EAV 13",
    "keywords": "Custom C# Web API Base Classes Any WebAPI controller in ASP.net inherits from a base class. This is a typical code you may see as an example: using System.Web.Http; [AllowAnonymous] public class BasicController : ToSic.Sxc.Dnn.ApiController // <-- This is the Base Class { [HttpGet] public string Hello() { return \"Hello from the basic controller in /api\"; } } In these docs we want to explain what the base class is for, and what you should use. Why Inherit from a Base Class A WebAPI controller does a lot of magic in the background so your code can stay small and simple. In classic ASP.net you would inherit from a class called ApiController (namespace System.Web.Http ) and in classic Dnn you inherit from a base class DnnApiController (namespace DotNetNuke.Web.Api ) which also inherits the standard ApiController . Tip Each additional layer adds functionality which will be available to your code. For example if you inherit from ApiController you can use objects such as Request and User in your code, and if you inherit from DnnApiController your code can also use PortalSettings or ModuleInfo . Recommended Base Class in 2sxc 10+ You can use any base class available in 2sxc, including the previously mentioned System.Web.Http.ApiController and DotNetNuke.Web.Api.DnnApiController and others. But by inheriting from ToSic.Sxc.Dnn.ApiController your code will have access to many more objects like these: App Data Content CmsContext You also get many helper commands like these AsDynamic(...) AsEntity(...) SaveInAdam(...) Tip As of 2sxc 10 we always recommend that your APIs inherit from ToSic.Sxc.Dnn.ApiController The Past: Avoid using SxcApiController In previous versions of 2sxc the recommended base class was ToSic.SexyContent.WebApi.SxcApiController . For compatibility reasons this still works, but we strongly urge you to switch over to the new ToSic.Sxc.Dnn.ApiController as the old base class may become deprecated. Caution We strongly recommend that you switch over to the new base class ToSic.Sxc.Dnn.ApiController . But be aware that some of the APIs have changed a bit, so switching will take a few minutes. You will probably see compile errors which tell you what to fix. The Future: A Hybrid Base Class As of March 2021 we're working on bringing 2sxc to [](xref:Platform Oqtane). Since Oqtane doesn't have Dnn objects like PortalSettings we must develop a new base class which will have an identical API across all platforms. This is still work in progress. Recommended Reading Web API Tutorials WebApi Concepts: Polymorphisms History Introduced in 2sxc 06.05 Enhanced with Polymorph Editions in 2sxc 9.35 (allowing subfolder/api) The ToSic.Sxc.Dnn.ApiController was introduced in 2sxc 10.25"
  },
  "js-code/2sxc-api/2sxc.env.html": {
    "href": "js-code/2sxc-api/2sxc.env.html",
    "title": "| 2sxc 13 / EAV 13",
    "keywords": "Moved to The $2sxc.env API"
  },
  "js-code/2sxc-api/2sxc.cms.html": {
    "href": "js-code/2sxc-api/2sxc.cms.html",
    "title": "| 2sxc 13 / EAV 13",
    "keywords": "Moved to The $2sxc.cms API"
  },
  "js-code/index.html": {
    "href": "js-code/index.html",
    "title": "2sxc JS API Documentation is WIP | 2sxc 13 / EAV 13",
    "keywords": "2sxc JS API Documentation is WIP We're reorganizing our JS API Docs - they will be moved to here. This is still Work-In-Progress. JavaScript and TypeScript Code <!-- Data Highlights --> <!-- ADAM --> <!-- Server --> <!-- Prepare --> <!-- Data Source --> <!-- Optimzers --> <!-- Process / Awesomize --> <!-- Libraries --> <!-- data formats --> <!-- Browser --> <!-- Frameworks --> <!-- App show parts --> <!-- Interact parts --> <!-- Edit parts --> <!-- Edit UI parts --> <!-- SPA parts --> <!-- Custom highlight boxes - can be controlled by in-page CSS --> you are here (click to zoom) - discover the stack .context-box-summary .browser-all { visibility: visible; } Many people implement JavaScript or TypeScript solutions using 2sxc, as it's ideal both for simple scripts like galleries as well as for bundling and distributing complex Angular or React SPAs. Note: We're just consolidating docs in this section, so it's still very incomplete. What it should contain in the end is... Guidance for using the basic $2sxc and sxc for working with data/apis - with npm packages etc. Guidance for using the edit API Guidance for customizing toolbars? Guidance for Angular integration Guidance for React integration Basic Structure probably JS Framework Overview JS Basics Inpage CMS API Angular SPAs Edit UI API Quick Example TODO What's Where This documentation contains the following sections TODO"
  },
  "basics/style-guide/style-guide-2020.html": {
    "href": "basics/style-guide/style-guide-2020.html",
    "title": "2sxc Style Guide - Best Practices v2020 DRAFT | 2sxc 13 / EAV 13",
    "keywords": "2sxc Style Guide - Best Practices v2020 DRAFT This Style Guide should help you create best-practice solutions with 2sxc. It has the version 2017 so that you can reference it as your standard, and if larger recommendation changes are made or if the standard grows, we'll create a new standard. This is the current version How to use This style guide is built according to our role-model the Angular 2 style guide by John Papa . This style guide presents our preferred conventions and, as importantly, explains why. Table Of Contents General Principles Solution Architecture File Structure Content Types Fields Using Items as Content or Data Working with Presentation and Demo-Data Templates in General Token Templates Razor Templates JavaScript Templates Querying Data General Principles Use Visual Studio Code Style 01.11 + Consider use Visual Studio Code and your preferred code editor diff ? Why it's the most agile, best aligned code-editor for modern solutions on the MS-stack it's great for editing all kinds of modern file formats incl. HTML, Razor, Markdown, etc. it's great for quickly opening a single file or an App-folder it offers full Git integration there is a 2sxc code-snippet extension for VS-Code Use Git to Version your Work - In Local Systems as Well Style 21.01 + Do always initialize your solution (both App or Content ) into a local git regularly commit your work into your local git ```diff Consider ``` publish your work to a server git, like github or your company internal git-repo adding a readme.md for everybody who is new to your system diff ? Why if ever you want to undo something later on, you'll be glad you have older versions if ever you want to compare a deployed version with your dev-history, you'll be glad 2sxc supports git and github by placing everything in files, and also exporting the database into a git-versionable XML Use International Naming Strategy Style 11.21 + Do use english words for all content-types, fields, file-names, folder-names and variables ? Why easier to share both code and partial solutions consistent setup, as often other languages will be added and English is the best shared language fewer problems when writing code using English variable names and english property names avoid special characters/words of other languages in code-parts User Nice, Localized Naming for Editor UX Style 11.22 + Do provide localized (translated) names for everything the editor sees, to improve his user experience after creating the english-named items you can translate them into any other culture to improve the end-user experience use nice labels with spaces and more, making it easy to read apply this for all content-types in the main Content (as they are shown in normal drop-downs), view-names both in Content as well as Apps and field-names and help-texts diff ? Why great editor user experience fewer editor mistakes and frustrations Solution Architecture ...to do... File and Folder Structure LIFT Style xx.xx + Do structure the app such that you can Locate code quickly, Identify the code at a glance, keep the Flattest structure you can, and Try to be DRY. place a nice app-icon.png file containing the app-image and place it in the main folder make sure it is square and at least 200x200, ideally 500x500px in size diff ? Why LIFT Provides a consistent structure that scales well, is modular, and makes it easier to increase developer efficiency by finding code quickly. To confirm your intuition about a particular structure, ask: can I quickly open and start work in all of the related files for this feature? consistent with other style guides See also Locate , Identify , Flat and T-DRY of the Angular Style Guide. Provide an app-icon.png in each App folder Style xx.xx + Do create an icon for each app place a nice app-icon.png file containing the app-image and place it in the main folder make sure it is square and at least 200x200, ideally 500x500px in size diff ? Why In a future version, app-choice will also show an icon. Provide one today to be sure that it will look great. Place only Template-Files in the Main Folder Style xx.xx + Do place all templates and sub-templates in the main folder of the App or the Content place all non-template files in sub-folders diff ? Why This provides for a maximum overview when working on solutions It ensures the developer sees all views that exist Note: there are a few system files which will also reside in this folder, especially the app-icon.png . This of course will also be in this folder. Use src and dist folders Style xx.xx + Consider place all original assets incl. images, js, css into the src folder place all runtime files incl. copies of the images, compiled js/css into the dist folder diff ? Why Modern developement uses many source files and much fewer runtime files it's a big help to keep them clearly desingnated the src with dist structure has been very established in the web and JS community Structure the folders by Topic/Component Style xx.xx + Do structure your folders - especially in src - by topic containing all files of that topic, no matter what type place different file types (js/css) belonging to the same topic into the same folder ```diff Avoid ``` organizing your folders by data-type (js, images, etc.) diff ? Why consistently works both for large and simple solutions easier to maintain easier to grow into larger solutions consistent with recommendations of other style guides like the Angular Style-Guide Content-Types ...to do... Use Singular Naming for Content-Types Style 21.01 + Consider Use the singular form to name a content type, so BlogPost instead of BlogPosts , Tag instead of Tags The localized name can be different as your editors need it ? Why Content-Types describe the type of an item, not the collection of all items. So by definition it's not the table-of-Tags but the schema-of-a-tag-item. consistency is key, and it helps to always do things the same way Fields ...to do... Using Items as Content ...to do... Notes and Clarifications TOOD... Read also InstancePurpose - which tells you why the current code is running so you could change the data added CustomizeData Demo App and further links You should find some code examples in this demo App FAQ with Categories More links: Description of the feature on 2sxc docs History Introduced in 2sxc ??.??"
  },
  "basics/server/render/razor/index.html": {
    "href": "basics/server/render/razor/index.html",
    "title": "Razor Templates | 2sxc 13 / EAV 13",
    "keywords": "Razor Templates <!-- Data Highlights --> <!-- ADAM --> <!-- Server --> <!-- Prepare --> <!-- Data Source --> <!-- Optimzers --> <!-- Process / Awesomize --> <!-- Libraries --> <!-- data formats --> <!-- Browser --> <!-- Frameworks --> <!-- App show parts --> <!-- Interact parts --> <!-- Edit parts --> <!-- Edit UI parts --> <!-- SPA parts --> <!-- Custom highlight boxes - can be controlled by in-page CSS --> you are here (click to zoom) - discover the stack .context-box-summary .process-razor { visibility: visible; } Token Templates will generate HTML - often based on the data a editor entered, and/or which was provided from the App. Note The View determines which template file is being loaded. How it Works Razor templates are files in the App Folder or a subfolder, beginning with an _ and ending with .cshtml . Here's a simple example from the Tutorial: @inherits Custom.Hybrid.Razor12 <h2>Hello World</h2> <div> Now is @DateTime.Now </div> üëâ The technical details are explained in Razor Components / Templates Discover More in the Razor Tutorials We have an rich series of Razor tutorials . You should really check them out üëç. History Introduced in 2sxc 2.0"
  },
  "basics/server/caching/app-state/app-state.html": {
    "href": "basics/server/caching/app-state/app-state.html",
    "title": "App State | 2sxc 13 / EAV 13",
    "keywords": "App State <!-- Data Highlights --> <!-- ADAM --> <!-- Server --> <!-- Prepare --> <!-- Data Source --> <!-- Optimzers --> <!-- Process / Awesomize --> <!-- Libraries --> <!-- data formats --> <!-- Browser --> <!-- Frameworks --> <!-- App show parts --> <!-- Interact parts --> <!-- Edit parts --> <!-- Edit UI parts --> <!-- SPA parts --> <!-- Custom highlight boxes - can be controlled by in-page CSS --> you are here (click to zoom) - discover the stack .context-box-summary .data-data { visibility: visible; } The EAV caches everything in memory, to ensure that everything is super-fast and doesn't require lazy loading. This is because lazy-loading has a dangerous tendancy to ping-pong a lot of requests if the code isn't very optimized - and caching everything solves that problem. Tip Before you start: Remember that you usually don't need this if you are creating Razor templates or WebApi - for that, you want to read Dynamic Entity Objects . Once an app is accessed by code, a sophisticated internal system loads everything into the app-state which is then cached. Everything then uses this data, and save-operations usually do a partial update of the cache. This is one of the things that makes 2sxc and the EAV so amazingly fast. Usually you don't care much about the app-state, since you simply use the data provided by the current context. If you want to know more, check out the ToSic.Eav.Apps .AppState. History Introduced in 2sxc 5.0 Partial Updates introduced in 2sxc 9.14"
  },
  "net-code/data-sources/index.html": {
    "href": "net-code/data-sources/index.html",
    "title": "DataSources and Query API | 2sxc 13 / EAV 13",
    "keywords": "DataSources and Query API <!-- Data Highlights --> <!-- ADAM --> <!-- Server --> <!-- Prepare --> <!-- Data Source --> <!-- Optimzers --> <!-- Process / Awesomize --> <!-- Libraries --> <!-- data formats --> <!-- Browser --> <!-- Frameworks --> <!-- App show parts --> <!-- Interact parts --> <!-- Edit parts --> <!-- Edit UI parts --> <!-- SPA parts --> <!-- Custom highlight boxes - can be controlled by in-page CSS --> you are here (click to zoom) - discover the stack .context-box-summary .datasource { visibility: visible; } The EAV system has a sophisticated mechanism to provide data from various sources, and filter/sort them as needed. This is what the DataSource and Query things are for. This is a slightly advanced topic. So if you're just starting with 2sxc / EAV, this may not be for you yet."
  },
  "basics/data/metadata/read.html": {
    "href": "basics/data/metadata/read.html",
    "title": "| 2sxc 13 / EAV 13",
    "keywords": "Moved to Read / Access Metadata - (advanced ‚ö†)"
  },
  "basics/data/fields/custom-gps.html": {
    "href": "basics/data/fields/custom-gps.html",
    "title": "Field Input-Type custom-gps | 2sxc 13 / EAV 13",
    "keywords": "Field Input-Type custom-gps Use this field type for selecting positions on a map, storing custom JSON data . Features Auto-find the location based on address data already added to the form Pin can be moved manually Configure Custom-Gps Configure which fields are to be used to find the coordinates History Introduced in 2sxc 2.0"
  },
  "basics/data/fields/boolean.html": {
    "href": "basics/data/fields/boolean.html",
    "title": "Field Data Type: Boolean | 2sxc 13 / EAV 13",
    "keywords": "Field Data Type: Boolean This explains Boolean Fields . For an overview check out Understanding Data... . The Boolean Data Type Boolean data is a basic data type and is for yes / no , true / false , 1 / 0 values. It can also contain null values. Features The basic boolean field doesn't have any features, since all the features are in the sub-types. Configuration Every boolean field can be configured to have special labels shown in each state. Input-Types of Boolean Fields boolean-default - simple on/off input field boolean-tristate on/off with optional null (not-defined) Technical Information Storage in the SQL Database in the EAV-Model This is converted to a string when stored as a string in the DB, and converted back to a boolean when the data is loaded. Storage in the SQL Database in the JSON-Model This is simply stored as a true , false or null in json. Null Value Possible In some cases you may add a field to a type which already has Entities created previously. In this case the old data doesn't have a value for the field. If this happens, the field will return null , so you may need to catch this special exception in your code. A common shorthand to work with nulls is the ?? operator: @(Content.IsAdult ?? false) Another common use is to check for true . So instead of @if(Content.IsAdult) {...} Use if(Content.IsAdult == true) {...} History Introduced in EAV 1.0 2sxc 1.0"
  },
  "api/index.html": {
    "href": "api/index.html",
    "title": "PLACEHOLDER | 2sxc 13 / EAV 13",
    "keywords": "PLACEHOLDER TODO: Add .NET projects to src folder and run docfx to generate a REAL API Documentation !"
  },
  "abyss/releases/management/policy-lts.html": {
    "href": "abyss/releases/management/policy-lts.html",
    "title": "LTS Policy (Long Term Support) | 2sxc 13 / EAV 13",
    "keywords": "LTS Policy (Long Term Support) Every few months 2sxc is released as an LTS version, a.k.a. Long Term Support . To sync expectations, we want to explain what this means. Tip LTS for 2sxc means stability and security. Meaning of Long-Term-Support for 2sxc LTS Editions will be receive special support for at least 3 months after their release at least till the next LTS is released Special support means Security fixes Critical bug fixes What it does not mean LTS Editions will not receive new features new support for new platforms (because this might introduce new risks) non-critical bugfixes - these will be in normal releases, unless someone sponsors a fix Volunteer Work Please remember that 2sxc is free and open-source. All the work is done by volunteers or by people who are paid by sponsors. As such, these people will still make the decision if something is deemed critical or not, and who will implement the fix. If you have a special need and wish to sponsor a fix in either an LTS or any other version, do contact us History LTS policy introduced in v9.14 - see blog Information added to docs in v13.03 Shortlink: https://r.2sxc.org/lts"
  },
  "abyss/releases/management/policy-deprecate.html": {
    "href": "abyss/releases/management/policy-deprecate.html",
    "title": "Deprecation Policy & Breaking Changes | 2sxc 13 / EAV 13",
    "keywords": "Deprecation Policy & Breaking Changes Tip 2sxc is really, really stable. Upgrades usually don't cause any breaking changes at all. Despite this, it's important that 2sxc can become better, without becoming confusing. Because of this, we have some policies how to achieve this. Rule #1: Public APIs Remain Stable Public APIs remain stable across releases, so old code / Razor will continue to work. Public APIs include Public REST APIs Public C# APIs used in Razor and WebAPI Controllers Note that public APIs in code are marked as such. Note also that internal APIs can change without warning, as you can use them, but the burden of keeping up with the changes is up to you. If you use these, you will have to spend more time testing an upgrade. Rule #2: New Features go Together Many new features will only be available if you are working in a newer base class. This will aften make older APIs unavailable, so we can phase them out. Example: The new AsList(...) command is only available on the newer base classes like Custom.Razor12 The old Elements API will not be available on the newer base classes Rule #3: Deprecations are Warned at Runtime (new in v13) V13 added a new feature: Deprecation warnings. This works as follows: APIs that are going to be deprecated are internally going to raise messages if they are still in use You can see these messages in Insights and soon also in the System dialogs Deprecated APIs will follow this process: Warn about deprecation for at least 1 full version, if possible 2 versions of 2sxc (so ca. 12 months) We'll try to include an information, if and when the API will be removed We'll also try to include information for what API should be used instead. If removing the API is important for future features, we will remove it after the warned period If removal is not necessary We'll remove them from the public docs we'll leave them in but stop testing them - so they may stop working without us knowing about it Note that depending on how much we believe the old APIs have been used, we will usually also remove them from the docs once they are deprecated. Only in rare cases where an API is widely used will we keep it in the docs, but clearly communicate that it's obsolete and that it shouldn't be used any more. History Deprecation warning system added in v13 Shortlink: https://r.2sxc.org/pol-deprecation"
  },
  "abyss/releases/management/index.html": {
    "href": "abyss/releases/management/index.html",
    "title": "2sxc Release Management | 2sxc 13 / EAV 13",
    "keywords": "2sxc Release Management For people who professionaly work with 2sxc it's useful to know how we release it and what the releases mean. General Releases All our Releases are published here: Github for Dnn and Oqtane NuGet for Oqtane releases Oqtane.net for Oqtane Auto-Installer Release Frequency 2sxc is released an irregular frequencies. This can sometimes mean a few releases in a week, and sometimes less than one release per month. If this is hard to keep up with and you don't need the latest and greatest, we suggest you stick to the LTS Releases LTS Releases (Long Term Support) Sometimes too much innovation can be scary - which is why we're releasing an LTS (Long Term Support) edition. üëâ Read more about this in the LTS Policy Deprecation Policy The 2sxc APIs are really, really stable. But sometimes we must deprecate old APIs to avoid confusion and to allow better features to replace this. We do this in a very controlled manner. üëâ Read more about this in the Deprecation Policy"
  },
  "abyss/releases/history/v13/sxc-static-render/index.html": {
    "href": "abyss/releases/history/v13/sxc-static-render/index.html",
    "title": "Fix Breaking Change Static Render in v13 | 2sxc 13 / EAV 13",
    "keywords": "Fix Breaking Change Static Render in v13 Keywords: #Deprecated #Render #Static #DependencyInjection 2sxc v13 cleans up some historic, deprecated functionality. They were not used much, but if you have code which used this, here's how to fix any code in production. These two commands for rendering Inner Content are being deprecated and will be removed in v14. In v13 it was moved to the Dnn DLL because it shoudn't be used anywhere else. ToSic.SexyContent.ContentBlocks.One(...) ToSic.SexyContent.ContentBlocks.All(...) ToSic.Sxc.Blocks.Render.One(...) ToSic.Sxc.Blocks.Render.All(...) Reason for Removal 2sxc used to not have Dependency Injection so there were some static APIs which we provided. But this is bad practice and causes a lot of difficulty to keep everything working. The newer APIs use Services and Dependency Injection and do what they should. History - How it Used to Work Previously you could write code like this in your Razor: @using ToSic.Sxc.Blocks; // some code @Render.All(someEntity, field: \"AnswerInnerContent\", merge: someEntity.Answer) What we Changed In 2sxc 11.11 we introduced the GetService<T>() ( docs ) which provides proper DI. We also introduced a ToSic.Sxc.Services.IRenderService which should replace these commands - see docs . Please use this from now on. The old API will continue to work for a while but show errors in the insight. Upgrade to Newer functionality So the previous example would look like this: @using ToSic.Sxc.Services; // some code var renderSvc = GetService<IRenderService>(); @renderSvc.All(someEntity, field: \"AnswerInnerContent\", merge: someEntity.Answer) History Introduced ToSic.SexyContent.ContentBlocks ca. 2sxc 5 Introduced better name but still non-DI implementation called ToSic.Sxc.ContentBlocks ca. 2sxc 7 New IRenderService introduced in 2sxc 11 and 12 Deprecated in 2sxc 13 Planned for full removal in 2sxc 14 ca. middle of 2022 Shortlink to here: https://r.2sxc.org/brc-13-static-render"
  },
  "abyss/releases/history/v13/instance-data/index.html": {
    "href": "abyss/releases/history/v13/instance-data/index.html",
    "title": "Fix Breaking Change InstanceData in v13 | 2sxc 13 / EAV 13",
    "keywords": "Fix Breaking Change InstanceData in v13 Keywords: #Deprecated #InstanceData 2sxc v13 cleans up some historic, deprecated functionality. They were not used much, but if you have code which used this, here's how to fix any code in production. Specifically, three features were removed: The ability to publish Module Instance Data directly The ability to configure this in the View settings The JS API which was optimized to process the resulting data in a fairly untypical way Reason for Removal These features were removed because they were almost never used, and newer mechanisms are much more appropriate than that old stuff. History - How it Used to Work 2sxc V3 (ca. 2013) introduced a feature where a Module could publish the data it was also showing on a normal screen as a WebApi / JSON call. It was required that a view activates this feature to ensure that it doesn't happen by accident. The settings in the view were like this (example from the TimelineJs App ): Go to the view configuration The old deprecated settings Enable data publishing (which opened the data for JS) The streams which were to be published Note that the stream Default is still called Default today, but ListContent is usually called Header today. Once this was setup, there was a way to get this data through a WebApi call. From v3 to ca. v6 there was a call which actually went through the Dnn Page (so it was slow) V6 to ca. v11 it used a call to app-sys/AppContent/GetContentBlockData Later there was a special WebApi call to app/auto/InstanceData which did the same thing The format of the response was a bit special, specifically it looked like this (TimelineJs example): The call to InstanceData The data which was on a special List sub-object To complement this, there was a JS-API which worked as follows: // Process each Timeline DOM-element on the page $(\".timeline-embed\").each(function() { // Define our timeline element, get moduleId var timeLineElement = $(this); var sxc = $2sxc(this); // Load the data from the 2SexyContent module and define a callback sxc.data.on(\"load\", function (source, data) { processDataAndCreateTimeline(source, data, sxc.id, timeLineElement) }).load(); }); Specifically, it used a data.on call to kind of say: on load get the data from the current module . The resulting data was then used in the JS - for example like this in TimelineJS: // what should happen on loading of the data: function processDataAndCreateTimeline (data, moduleId, timeLineElement) { // Old code using the `in`, the `ListContent` and `.List[...]` stream var content = data.in.Default.List; var listContent = data.in.ListContent.List[0]; var timelineData = getTimelineData(moduleId, content, listContent); ... Upgrade to Newer functionality Tip Below you'll find instructions how to create the same functionality using Visual Query and newer JS APIs. But: In many cases you may actually want a different solution, because Visual Query is very powerful and may provide other ways to get you the data you need. Step 1: Create Query which Gets Instance Data This creates a Query API call which gets the same data as before, but in a newer API and newer standard. Create the Query - in our example we'll call it ModuleData After doing this, you have created a query which returns the same data as before, with 2 important differences: The stream ListContent is now called Header There are no permissions configured yet for anonymous users to access the query Step 2: Update the JS code to use the Query instead of the .data We have updated the TimelineJS code to use the new fetchJson api - see docs : // Process each Timeline DOM-element on the page $(\".timeline-embed\").each(function() { // Define our timeline element, get moduleId var timeLineElement = $(this); var sxc = $2sxc(this); // New version using fetch and the default Query we just created sxc.webApi.fetchJson('app/auto/query/ModuleData') .then((data) => processDataAndCreateTimeline(data, sxc.id, timeLineElement)); }); In addition, the data returned is a simpler. Specifically three things are now different: it doesn't have a level in it doesn't need the use .List in our new Query the Header is in a stream Header and not ListContent This would be the modified code in TimelineJs: function processDataAndCreateTimeline (data, moduleId, timeLineElement) { // Re-format streams that are contained in data var content = data.Default; var listContent = data.Header[0]; var timelineData = getTimelineData(moduleId, content, listContent); ... Step 3: Set Query Permissions After doing Step 1 & 2 you will have a working solution, but only super-users (host-users) can use the query because the read-permissions have not yet been configured. To configure them, use this checklist: Shortlink to here: https://r.2sxc.org/brc-13-id"
  },
  "abyss/releases/history/v13/ientity-links/index.html": {
    "href": "abyss/releases/history/v13/ientity-links/index.html",
    "title": "Fix Breaking Change Automatic Links in IEntity in v13 | 2sxc 13 / EAV 13",
    "keywords": "Fix Breaking Change Automatic Links in IEntity in v13 Keywords: #Deprecated #IEntity #LinkConversion 2sxc v13 cleans up some historic, deprecated functionality. They were not used much, but if you have code which used this, here's how to fix any code in production. Specifically, features were removed which convert special file:... and page:... links on the IEntity : Important You are probably not affected This only affects special code calls which first get an IEntity and then uses the GetBestValue expecting the link to convert. Almost all Razor / WebApi code uses Dynamic Entities (with AsDynamic(...) ), and these cases will continue to work as expected. Reason for Removal These features were removed because they relied on objects which need Dependency Injection, and calling this object directly cannot give us DI. These features were rarely used, and newer mechanisms are much more appropriate than that old stuff. History - How it Used to Work A long time ago we introduced the ability to store links like file:73 or page:42 . At that time, we looked up the link in APIs of the cached object (the IEntity ). This turned out to be a bad idea, because the cached object doesn't have access to the current Site information, which is needed to lookup these real links. What we Changed A long time ago we already ensured that the Dynamic Entity will do this lookup, and not rely on the inner APIs to do this. So all code which uses AsDynamic(...).SomeLinkProperty will always work as expected. But in rare cases you may have been getting the SomeLinkProperty from the IEntity. This will now not throw an error, but simply not lookup the link any more. So if you end up getting links like this, you are probably affected: <a href=\"file:74\">click here</a> Upgrade to Newer functionality Just make sure you always access the properties using the Dynamic Entity - so if you had an IEntity before, wrap it into AsDynamic(...) first. Shortlink to here: https://r.2sxc.org/brc-13-ientitylink"
  },
  "abyss/releases/history/v13/eav-factory-startup/index.html": {
    "href": "abyss/releases/history/v13/eav-factory-startup/index.html",
    "title": "Fix Breaking Change Static EAV Factory StartUp in v13 | 2sxc 13 / EAV 13",
    "keywords": "Fix Breaking Change Static EAV Factory StartUp in v13 Keywords: #Deprecated #Factory #Build #DependencyInjection 2sxc v13 cleans up some historic, deprecated functionality. They were not used much, but if you have code which used this, here's how to fix any code in production. The ToSic.Eav.Factory.ActivateNetCoreDi(...) is removed and will not work any more. Reason for Removal 2sxc used to be the first and only Module in Dnn which supported Dependency Injection, so there was a need to patch this in somehow. ActivateNetCoreDi was used to register services startup, but caused issues in special cases. Upgrade to Newer functionality 2sxc 13 is now fully integrated in Dnn 9.4 DI, so registering services must use the Dnn Mechanisms for this - see Dnn Services . There is no alternative for Dnn 7, so you must either remain on an older 2sxc (v12 or lower) or upgrade to Dnn 9.4 or newer. History Introduced in 2sxc 7 with Dependency Injection based on .net Standard 1.6 It only ever worked in Dnn, Oqtane never had this feature Removed in 2sxc 13 with the integration of Dnn 9.4 DI - API still exits, but doesn't do anything except for log an error Planned for full removal in 2sxc 14 ca. middle of 2022 Shortlink to here: https://r.2sxc.org/brc-13-eav-factory-startup"
  },
  "abyss/releases/history/v13/eav-factory/index.html": {
    "href": "abyss/releases/history/v13/eav-factory/index.html",
    "title": "Fix Breaking Change Static EAV Factory Resolve in v13 | 2sxc 13 / EAV 13",
    "keywords": "Fix Breaking Change Static EAV Factory Resolve in v13 Keywords: #Deprecated #Factory #Build #DependencyInjection 2sxc v13 cleans up some historic, deprecated functionality. They were not used much, but if you have code which used this, here's how to fix any code in production. The ToSic.Eav.Factory.Resolve<T>() is being deprecated, and will be removed in v14. In v13 it was moved to the Dnn DLL because it shoudn't be used anywhere else. Reason for Removal 2sxc used to be the first and only Module in Dnn which supported Dependency Injection, so there was a need to patch this in somehow. The solution we used was to have static object ToSic.Eav.Factory which managed this, but this is actually bad practice and encourages bad code. We believe this is rarely used, so we removed it. But it was in the official docs, so there may have been a few users who picked this up. History - How it Used to Work Previously you could write code like this in your Razor: var convertService = ToSic.Eav.Factory.Resolve<IConvertService>(); What we Changed In 2sxc 11.11 we introduced the GetService<T>() ( docs ) which takes care of this. Please use this from now on. The old API will be disabled disabled and will show an error pointing to this documentation. Upgrade to Newer functionality So the previous example would look like this: var convertService = GetService<IConvertService>(); If you were using this from outside of 2sxc Razor / WebApi, you will need to use the Dnn specific DependencyInjection (available in Dnn 9.4+) . History Introduced in 2sxc 7 with Dependency Injection based on .net Standard 1.6 Deprecated in 2sxc 13 with the integration of Dnn 9.4 DI Planned for full removal in 2sxc 14 ca. middle of 2022 Shortlink to here: https://r.2sxc.org/brc-13-eav-factory"
  },
  "abyss/releases/history/v13/dnn-factory/index.html": {
    "href": "abyss/releases/history/v13/dnn-factory/index.html",
    "title": "Fix Breaking Change Static Dnn Factory in v13 | 2sxc 13 / EAV 13",
    "keywords": "Fix Breaking Change Static Dnn Factory in v13 Keywords: #Deprecated #Factory #Build #DependencyInjection 2sxc v13 cleans up some historic, deprecated functionality. They were not used much, but if you have code which used this, here's how to fix any code in production. The ToSic.Sxc.Dnn.Factory.[various]() are being deprecated, and will be removed in v14. Reason for Removal 2sxc used to be the first and only Module in Dnn which supported Dependency Injection, so there was a need to patch this in somehow. The solution we used was to have static object ToSic.Sxc.Dnn.Factory which managed this, but this is actually bad practice and encourages bad code. This was mainly used in WebForms, specifically Skins/Themes to access 2sxc data, but we've created a much better replacement using: IDynamicCodeService IRenderService History - How it Used to Work Previously you could write code like this in your ascx Theme: <%@ Import Namespace=\"System.Linq\" %> <script runat=\"server\"> public string OldFactoryUse() { var appId = 6; var app = ToSic.Sxc.Dnn.Factory.App(appId); var questions = app.Data[\"Question\"]; var title = questions.First().GetBestValue(\"EntityTitle\"); return \"Questions: \" + questions.Count() + \": First Title:\" + title; } public string OldRender() { var pageId = 21; var moduleId = 380; var block = ToSic.Sxc.Dnn.Factory.CmsBlock(pageId, moduleId); var result = block.Render(); return result; } public string OldDynamicCode() { var pageId = 21; var moduleId = 380; var blockBuilder = ToSic.Sxc.Dnn.Factory.CmsBlock(pageId, moduleId); var dynCode = ToSic.Sxc.Dnn.Factory.DynamicCode(blockBuilder); var questions = dynCode.App.Data[\"Question\"]; var title = dynCode.AsDynamic(questions.First()).EntityTitle; return \"Questions: \" + questions.Count() + \": First Title:\" + title; } </script> What we Changed In 2sxc 13.00 we integrated our Dependency Injection with the Dnn 9.4+ built-in Dependency Injection. This allows you to get 2sxc services from DI. In 2sxc 13.02 we created the IDynamicCodeService which is a replacement for the old Factory. You must use this from now on. Reasons for Change The newer code may seem a bit more complex, but you'll see in the API docs that we've actually improved the API. The reason the code looks so messy is because Dnn doesn't fully embrace Dependency Injection yet, so to get it, you need that complex looking var codeSvc = HttpContext.Current.GetScope().ServiceProvider.GetService<IDynamicCodeService>(); We hope and believe that Dnn will improve on this soon. Upgrade to Newer functionality So the previous example would look like this: <%@ Import Namespace=\"System.Linq\" %> <%@ Import Namespace=\"DotNetNuke.Common.Extensions\" %> <%@ Import Namespace=\"Microsoft.Extensions.DependencyInjection\" %> <%@ Import Namespace=\"ToSic.Sxc.Services\" %> <script runat=\"server\"> public IServiceProvider ServiceProvider { get { return HttpContext.Current.GetScope().ServiceProvider; }} public string NewApp() { var codeSvc = ServiceProvider.GetService<IDynamicCodeService>(); var app = codeSvc.App(appId: 6); var questions = app.Data[\"Question\"]; var title = questions.First().GetBestValue(\"EntityTitle\"); return \"Questions: \" + questions.Count() + \": First Title:\" + title; } public string NewRender() { var renderSvc = ServiceProvider.GetService<IRenderService>(); var result = renderSvc.Module(pageId: 21, moduleId: 380); return result.ToString(); } public string NewDynamicCode() { var pageId = 21; var moduleId = 380; var codeSvc = ServiceProvider.GetService<IDynamicCodeService>(); var dynCode = codeSvc.OfModule(pageId, moduleId); var questions = dynCode.App.Data[\"Question\"]; var title = dynCode.AsDynamic(questions.First()).EntityTitle; return \"Questions: \" + questions.Count() + \": First Title:\" + title; } </script> If you were using this from outside of 2sxc Razor / WebApi, you will need to use the Dnn specific DependencyInjection (available in Dnn 9.4+) . History Introduced in 2sxc 7 with Dependency Injection based on .net Standard 1.6 Deprecated in 2sxc 13 with the integration of Dnn 9.4 DI Planned for full removal in 2sxc 14 ca. middle of 2022 Shortlink to here: https://r.2sxc.org/brc-13-dnn-factory"
  },
  "abyss/releases/history/v13/datasource.cache/index.html": {
    "href": "abyss/releases/history/v13/datasource.cache/index.html",
    "title": "Fix Breaking Change DataSource.Cache in v13 | 2sxc 13 / EAV 13",
    "keywords": "Fix Breaking Change DataSource.Cache in v13 Keywords: #Deprecated #DataSource 2sxc v13 cleans up some historic, deprecated functionality. They were not used much, but if you have code which used this, here's how to fix any code in production. Specifically, this feature was removed: ToSic.Sxc.DataSources.IBlockDataSource.Cache , usually used as Data.Cache.GetContentType(contentTypeName) to find a Content-Type Reason for Removal These features were removed because the API was misplaced. Unfortunately it was in the original Mobius-Forms so we are giving it a 1 year deprecation, and will be fully removed it v15. Upgrade to Newer functionality If you look at the Code in Mobius, you will see that the name is the only thing used. This was the code: var type = Data.Cache.GetContentType(config.ContentType); ... App.Data.Create(type.Name, contactFormRequest); ... files.Add(SaveInAdam(stream: new MemoryStream(data), fileName: file[\"Name\"], contentType: type.Name, guid: guid, field: file[\"Field\"])); ... Because of this, you can actually just skip gotting the content-type, and just use the name directly. To fix this, just use the config.ContentTypeName instead of the type.Name OR upgrade to a newer Mobius. If you need the type for other uses, best create an issue on GitHub. Shortlink to here: https://r.2sxc.org/brc-13-datasource-cache"
  },
  "net-code/dynamic-code/content.html": {
    "href": "net-code/dynamic-code/content.html",
    "title": "Content / Object | 2sxc 13 / EAV 13",
    "keywords": "Content / @Content Object The Content is a Dynamic Entity in all Dynamic Code (Razor and WebAPI). It contains the content-item assigned to this template. If the View is a list, then Content contains the first item in the list. Note that if the View is configured to be a list, then it may also have a Header . ‚ö° The official API docs . Since it's a Dynamic Entity it carries all values as properties, like Content.Link etc. Discover More in the Razor Tutorials We have an rich series of Razor tutorials . You should really check them out üëç. Example Razor Code <div> @Content.Name </div> Content.Presentation Depending on the view configuration the Content can carry additional presentation information, for example how to format the title etc. This is available on Content.Presentation . The Presentation object is also a Dynamic Entity . <div class=\"@Content.Presentation.Highlight\"> @Content.Name </div> Demo Data Note that the View can be configured to contain demo data for both the Content as well as the Content.Presentation . In this case your template will receive data to show even if the editor has not added anything. History Introduced in 2sxc 1.0 Presentation added in this documented form ca. 2sxc 8"
  },
  "net-code/dynamic-code/as-list.html": {
    "href": "net-code/dynamic-code/as-list.html",
    "title": "AsList(...) - Magic Lists | 2sxc 13 / EAV 13",
    "keywords": "AsList(...) - Magic Lists In razor you prefer a simple @Something.Property syntax. If you only have one item, you'll use AsDynamic(...) . When you need a list to go through, you use AsList(...) . ‚ö° The official API docs . Discover More in the Razor Tutorials We have an rich series of Razor tutorials . You should really check them out üëç. How it works AsList has various signatures accepting a variety of input values. It then returns an IEnumerable<dynamic> object which is a List of IDynamicEntity objects. These are the things AsList can process: a List<IEntity> or IEnumerable<IEntity> - will return a List/IEnumerable of IDynamicEntity a List<DynamicEntity> or IEnumerable<IDynamicEntity> - will return the same thing again this option exists just so you don't have to pre-check what you pass in, making it easier to code for you a IDataStream - will return a List/IEnumerable of IDynamicEntity a IDataSource - will return a List/IEnumerable of IDynamicEntity of the \"Default\" stream a Tip To use the latest features of 2sxc 12+, make sure your razor file begins with the line @inherits Custom.Hybrid.Razor12 Otherwise your Razor templates is based on the default, older component code. History Introduced in 2sxc 10.20"
  },
  "net-code/dynamic-code/as-entity.html": {
    "href": "net-code/dynamic-code/as-entity.html",
    "title": "AsEntity(...) - Get the Underlying Data | 2sxc 13 / EAV 13",
    "keywords": "AsEntity(...) - Get the Underlying Data In most Razor and WebAPIs you will prefer to use Dynamic Entities allowing you to easily write code like @Content.FirstName . But in rare cases where you have a IDynamicEntity and want to access the real underlying IEntity in it's full complexity. This is where AsEntity(...) is used. ‚ö° The official API docs . Tip AsEntity(...) reverses what AsDynamic(...) does. If you have an object or you're not sure if it's either an IEntity or a IDynamicEntity , just pass it to AsEntity(...) and it will detect either one. Discover More in the Razor Tutorials We have an rich series of Razor tutorials . You should really check them out üëç. Example: Type Information The Dynamic Entity has a property EntityType but this will only return a name like Person . If you need the full Content-Type definition , this is what you would do: // assume that person is a Dynamic Entity var personTypeName = person.EntityType; // string var personType = AsEntity(person).Type; // Will return the IContentType Example: Language Information If you want to really check in the code, what languages have been translated. This is very sophisticated, but this is kind of how you would do it: var personEntity = AsEntity(person); var attrName = personEntity[\"Name\"]; // this will return an IAttribute<string> object History Introduced ca. in 2sxc 1 Modified/added signatures in 2sxc 7"
  },
  "net-code/dynamic-code/as-dynamic.html": {
    "href": "net-code/dynamic-code/as-dynamic.html",
    "title": "AsDynamic(...) | 2sxc 13 / EAV 13",
    "keywords": "AsDynamic(...) To make a complex system like the EAV work, the real objects like the IEntity must very very smart and complicated. This would not be fun to use in razor, where you would prefer a simple @Something.Property syntax. This is where AsDynamic(...) comes in. ‚ö° The official API docs . Discover More in the Razor Tutorials We have an rich series of Razor tutorials . You should really check them out üëç. How to Use If you have an IEntity or you're not sure if it's either an IEntity or a IDynamicEntity , just pass it through AsDynamic(...) and the result will be a IDynamicEntity . You can then access the properties with the simple thing.Property syntax. @inherits Custom.Hybrid.Razor12 @{ var unknown = App.Data[\"Default\"].List.First(); // this will be an IEntity var myThing = AsDynamic(unknown); } <div>@myThing.FirstName</div> Note Results of AsDynamic are dynamically typed, so you can write .Anything behind it. But the data coming out of it is strongly typed, so Content.Birthday is a real date object. Tip IDynamicEntity objects also have some additional properties like EntityId or Parents(...) . Check out the API docs. How it works AsDynamic has many signatures accepting a variety of input values. It then returns an dynamic object which is either a IDynamicEntity . These are the things AsDynamic can process: a IEntity - this will return a single IDynamicEntity IDynamicEntity - will return the same IDynamicEntity this option exists just so you don't have to pre-check what you pass in, making it easier to code for you a string containing JSON - will return a dynamic object DynamicJacket added in 2sxc 10.20.06 Tip To use the latest features of 2sxc 12+, make sure your razor file begins with the line @inherits Custom.Hybrid.Razor12 Otherwise your Razor templates is based on the default, older component code. Reversing AsDynamic with AsEntity Check out these docs: AsEntity(...) - Get the Underlying Data Obsolete use of AsDynamic() for Lists Warning In previous versions of 2sxc you'll find AsDynamic(...) also used to convert lists (IEnumerable or DataStreams) into lists. This caused a lot of issues with dynamic code compilation, so in 2sxc 10.20 we introduced AsList(...) for that use case. So if you find that kind of code, it works because... without @inherits Custom.Hybrid.Razor12 in the header, the old calls still work with @inherits Custom.Hybrid.Razor12 in the header, you must use AsList(...) History Introduced ca. in 2sxc 1 Modified/added signatures in 2sxc 7 Added the string and DataSource signature in 2sxc 10.20"
  },
  "net-code/dynamic-code/as-dynamic-string.html": {
    "href": "net-code/dynamic-code/as-dynamic-string.html",
    "title": "AsDynamic({ \"Some\": \"Json-String\"}) | 2sxc 13 / EAV 13",
    "keywords": "AsDynamic({ \"Some\": \"Json-String\"}) 2sxc v10.20 introduced another cool helper. It takes any JSON string and gives you a dynamic object to use in your code. The most common use is in GPS fields, where the data is stored as {\"Lat\": 0.0, \"Long\": 0.0} . But you can use it for so much more. ‚ö° The official API docs . Discover More in the Razor Tutorials We have an rich series of Razor tutorials . You should really check them out üëç. Example // assume Address is a Dynamic Entity with a Gps property var coords = AsDynamic(Address.Gps); var lat = coords.Lat; var long = coord.Long; Read more: Check out the API Docs of IDynamicCode History Introduced in 2sxc 10.20"
  },
  "basics/edit/edit-form/custom-fields.html": {
    "href": "basics/edit/edit-form/custom-fields.html",
    "title": "Customizing the Form - 2sxc v11! | 2sxc 13 / EAV 13",
    "keywords": "Customizing the Form - 2sxc v11! <!-- Data Highlights --> <!-- ADAM --> <!-- Server --> <!-- Prepare --> <!-- Data Source --> <!-- Optimzers --> <!-- Process / Awesomize --> <!-- Libraries --> <!-- data formats --> <!-- Browser --> <!-- Frameworks --> <!-- App show parts --> <!-- Interact parts --> <!-- Edit parts --> <!-- Edit UI parts --> <!-- SPA parts --> <!-- Custom highlight boxes - can be controlled by in-page CSS --> you are here (click to zoom) - discover the stack .context-box-summary .browser-edit-ui { visibility: visible; } 2sxc comes with thousands of features, and the more we add, the more features are requested üòâ. So it's important that you can implement many of these things yourself. Here's an overview over what's possible & how, + what's in store. Create Custom Input Fields This has been completely reworked in 2sxc 11. If you're new here, best watch this video: Then: Check out the Tutorial Examples Read the overview Read about the connector Object Read about customizing the WYSIWYG History Custom Form Fields introduced in 2sxc 7 Completely recreated the system in 2sxc 11 using WebComponents"
  },
  "basics/data/fields/string-url-path.html": {
    "href": "basics/data/fields/string-url-path.html",
    "title": "Field Input-Type string-url-path | 2sxc 13 / EAV 13",
    "keywords": "Field Input-Type string-url-path Use this field type to manage url-paths which you'll usually use to identify an item. For example, if you have a blog and each post has a url with the name, this is the field that you need to match the url to the item. It stores a string/text data . It's an extension of the basic string field type . Features ensure that only url-safe characters are used automatically generate a url based on one or many other fields when editing the first time keeps the generated url stable later on also allows manual editing if needed Configuring a String-Url-Path This shows the configuration dialog: Auto Generate... here you can build a template how the url should be auto-generated Allow Slashes this let's you choose if slashes are desired in this url-fragment - in most cases you don't want slashes Read more Read this post & watch the video when we introduced it History Introduced in EAV 4.0 2sxc 8.3"
  },
  "basics/data/fields/string-font-icon-picker.html": {
    "href": "basics/data/fields/string-font-icon-picker.html",
    "title": "Field Input-Type string-font-icon-picker | 2sxc 13 / EAV 13",
    "keywords": "Field Input-Type string-font-icon-picker Use this field type to create input-fields which let the user pick an icon. It stores a string/text data . It's an extension of the basic string field type . Features shows all icons from the icon-library allows searching supports libraries using prefixes (like font-awesome , which use fa-iconname ) supports libraries using double classes (like glyphicons , which use glyphicons glyphicons-plus ) supports custom libraries you can build, for example using fontello - see instructions lets you auto-load more css-files to load icon-definitions on the fly Result This is what it looks like for the user: Configuring a String-Font-Icon-Picker This shows the configuration dialog: CSS Prefix tells the UI to find all css-classes that start with this, and build icons with them Preview CSS Classes this tells the GUI to add this while showing a preview for icons in the library (so the preview works for Glyphicons etc.) Files tells the UI to load CSS files Important they should usually be in your project, because the UI-JavaScripts can't scan CSS files loaded from externally, like from a CDN Use the token [App:Path] to ensure that it's always loaded from the right Read more Read this post & watch the video which we created when we introduced it History Introduced in EAV 4.0 2sxc 8.4"
  },
  "basics/data/fields/string-dropdown.html": {
    "href": "basics/data/fields/string-dropdown.html",
    "title": "Field Input-Type string-dropdown | 2sxc 13 / EAV 13",
    "keywords": "Field Input-Type string-dropdown Use this field type for configuring simple dropdown UI elements, storing string/text data . It's an extension of the string field type . Features provide values to select provide visible labels which are different from the stored value optionally allow users to type in something different choose between value-label and label-value ordering (2sxc 12.04) allow the use of : in values (just escape as \\: ) Special Behavior When the drop-down UI element finds data stored, which doesn't match any of the values it has available, it will leave that data intact unless the users selects something manually Configuring a String-Dropdown This shows the configuration dialog: Using the Dropdown with the optional free-text-entry (2sxc 9.10) This is what the UI looks like, if Enable Free Text is enabled If the user then clicks on the I -bar icon ( TT in v11+), the input will change to text so you could type something different - like a value which wasn't suggested, or a token. History Introduced in EAV 2.0 2sxc 2.0, originally as part of the string field type Changed in 2sxc 6.0 - Moved to it's own sub-type Enhanced in 2sxc 9.10 - definition moved to json-based and added feature for enabling manual text entry New option to reverse order of keys/labels. This version also allows escaping the : with \\:"
  },
  "basics/data/fields/empty.html": {
    "href": "basics/data/fields/empty.html",
    "title": "Field Data Type: Empty | 2sxc 13 / EAV 13",
    "keywords": "Field Data Type: Empty This explains Empty Fields . For an overview check out Understanding Data... . Empty data is a basic data type and is for adding things to the UI (input form) which doesn't actually save any data. A common use is group-headers which contain a text, but don't result in data being stored. Tip 2sxc 12.01 also introduces Ephemeral Fields which are normal fields which don't save the value. Use that for fields which should behave like variables and not be saved. Features The basic empty field doesn't have any features, since all the features are in the sub-types. Sub-Types of Empty Fields empty-default - a UI-only field for things like grouping fields together under a title empty-end - a UI-only field to close a Field-Group empty-message - just a message in the edit form ## Shared Settings Doesn't have shared settings. Technical Information Storage in the SQL Database in the EAV-Model This is not stored, as it is specifically meant to not store data. Storage in the SQL Database in the JSON-Model This is not stored, as it is specifically meant to not store data. History Introduced in EAV 1.0 2sxc 1.0"
  },
  "basics/data/fields/boolean-tristate.html": {
    "href": "basics/data/fields/boolean-tristate.html",
    "title": "Field Input-Type boolean-tristate | 2sxc 13 / EAV 13",
    "keywords": "Field Input-Type boolean-tristate Use this field type for configuring simple true/false UI elements, storing boolean/boolean data . It's an extension of the basic boolean field type . Features provide a basic on/off input field (toggle switch) can also be switched to null (not set) Configure Boolean-Default No relevant settings to be configured. To configure the default value, set it in the general settings. History Introduced in 2sxc 11.0"
  },
  "basics/data/fields/boolean-default.html": {
    "href": "basics/data/fields/boolean-default.html",
    "title": "Field Input-Type boolean-default | 2sxc 13 / EAV 13",
    "keywords": "Field Input-Type boolean-default Use this field type for configuring simple true/false UI elements, storing boolean/boolean data . It's an extension of the basic boolean field type . Features provide a basic on/off input field (toggle switch) Configure Boolean-Default No relevant settings to be configured. To configure the default value, set it in the general settings. History Introduced in EAV 1.0 2sxc 1.0"
  },
  "basics/data/fields/all.html": {
    "href": "basics/data/fields/all.html",
    "title": "General Field Settings | 2sxc 13 / EAV 13",
    "keywords": "General Field Settings This explains General Field Settings . For an overview check out Understanding Data... . Every field has some general settings which apply to all fields. It's the information every field has to describe it's label, help-text etc. Configuring the All field-type Any field you open will contain the UI to configure the All fields. This is what it looks like: Name is the is the label to be shown (multi-language) Important: the name is not the name used in code, which shouldn't change - this is the visible label Default Value what is prefilled when you create a new item Notes / Description Placeholder Notes a short help-text which will appear in field notes Edit UI Settings Visible show this field in the UI Disabled if it's disabled (grayed out) Required if it's required DisableTranslate IsEphemeral for temporary variables which won't be saved Validation... what rule it must match to allow saving Technical Information This content type has a special name @All . History Introduced in EAV 1.0 / 2sxc 1.0"
  },
  "basics/data/export-import/index.html": {
    "href": "basics/data/export-import/index.html",
    "title": "Data Export / Import | 2sxc 13 / EAV 13",
    "keywords": "Data Export / Import <!-- Data Highlights --> <!-- ADAM --> <!-- Server --> <!-- Prepare --> <!-- Data Source --> <!-- Optimzers --> <!-- Process / Awesomize --> <!-- Libraries --> <!-- data formats --> <!-- Browser --> <!-- Frameworks --> <!-- App show parts --> <!-- Interact parts --> <!-- Edit parts --> <!-- Edit UI parts --> <!-- SPA parts --> <!-- Custom highlight boxes - can be controlled by in-page CSS --> you are here (click to zoom) - discover the stack .context-box-summary .data-all { visibility: visible; } Data can be Exported and Imported : Content-Types as JSON single Content-Items / Entities as JSON Tables of Content-Items as XML In addition, the App also has additional export/import features . You can also create custom exports as CSV etc. using Razor. Export / Import Anything üëâ most of this is documented here: https://2sxc.org/en/learn/import-export"
  },
  "api/dot-net/ToSic.Eav.Data.ILanguage.html": {
    "href": "api/dot-net/ToSic.Eav.Data.ILanguage.html",
    "title": "Interface ILanguage | 2sxc 13 / EAV 13",
    "keywords": "Interface ILanguage Represents a Language Dimension. It's identical to an IDimension for now. Inherited Members IDimension.DimensionId IDimension.Key IDimension.ReadOnly Namespace : ToSic.Eav.Data Assembly : ToSic.Eav.Core.dll Syntax [InternalApi_DoNotUse_MayChangeWithoutNotice(\"this is just fyi\")] public interface ILanguage : IDimension"
  },
  "api/dot-net/ToSic.Eav.Data.IAttribute.html": {
    "href": "api/dot-net/ToSic.Eav.Data.IAttribute.html",
    "title": "Interface IAttribute | 2sxc 13 / EAV 13",
    "keywords": "Interface IAttribute Represents an Attribute with Values - without knowing what data type is in the value. Usually we'll extend this and use IAttribute<T> instead. Inherited Members IAttributeBase.Name IAttributeBase.Type IAttributeBase.ControlledType Namespace : ToSic.Eav.Data Assembly : ToSic.Eav.Core.dll Syntax [PublicApi_Stable_ForUseInYourCode] public interface IAttribute : IAttributeBase Remarks We recommend you read about the Understanding Data... Properties | Improve this Doc View Source Values Gets a list of all IValue s of this Entity's Attribute. To get the typed objects, use the Typed Declaration IList<IValue> Values { get; set; } Property Value Type Description System.Collections.Generic.IList < IValue >"
  },
  "api/dot-net/ToSic.Eav.DataSources.Queries.VisualQueryAttribute.html": {
    "href": "api/dot-net/ToSic.Eav.DataSources.Queries.VisualQueryAttribute.html",
    "title": "Class VisualQueryAttribute | 2sxc 13 / EAV 13",
    "keywords": "Class VisualQueryAttribute Custom Attribute for DataSources and use in the VisualQuery Designer. Will add information about help, configuration-content-types etc. Only DataSources which have this attribute will be listed in the designer-tool. Read more here: DataSource API: VisualQuery Attribute DataSource API: VisualQuery Attribute To help the VisualQuery Designer properly guide the user, there is a C# Attribute called VisualQuery to configure everything. How to use VisualQuery Here's a simple example of the Tutorial DataSource : [VisualQuery( GlobalName = \"81dd49a7-fa70-4e98-b73d-8299bb3231f0\", Icon = \"event\", Type = DataSourceType.Source, NiceName = \"DateTime Configurable\", // Guid of the Content-Type which must be exported with this DataSource // It's located in .data/contenttypes // The class RegisterGlobalContentTypes ensures that 2sxc/EAV will find it ExpectsDataOfType = \"677210a2-cf08-46e5-a6b2-86e56e27be99\", HelpLink = \"https://r.2sxc.org/DsCustom\")] This example shows how the the FormAndList DataSource tells the UI things like: the global name the nice name to use in the UI that it's a source (and not a filter) - affecting the icon shown that it has a content-type which should be used for the UI to configure it the help-link in the UI Read also DataSource API - DataSource API overview Demo Code and further links DataSource Tutorial History Introduced in EAV 4.x, 2sxc 09.13 <!-- note: this must be an H1 because of the automatic TOC in the code pages --> API Documentation Inheritance System.Object System.Attribute VisualQueryAttribute Implements System.Runtime.InteropServices._Attribute Namespace : ToSic.Eav.DataSources.Queries Assembly : ToSic.Eav.DataSources.dll Syntax [PublicApi_Stable_ForUseInYourCode] [AttributeUsage(AttributeTargets.Class | AttributeTargets.Interface)] public class VisualQueryAttribute : Attribute, _Attribute Properties | Improve this Doc View Source DynamicIn Declaration public bool DynamicIn { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source DynamicOut Determine if this data sources can have many out-streams with custom names. Default is false. Declaration public bool DynamicOut { get; set; } Property Value Type Description System.Boolean True if this data source can also provide other named out-streams, false if it only has the defined list of out-streams. | Improve this Doc View Source EnableConfig Should configuration be enabled in the VisualQuery designer? Is automatically true if ExpectsDataOfType is set. Declaration public bool EnableConfig { get; } Property Value Type Description System.Boolean True if we have a known configuration content-type | Improve this Doc View Source ExpectsDataOfType Name of the content-type used to configure this data-source in the visual-query designer. The UI will then open an edit-dialog for this content type. Should be a GUID. Declaration public string ExpectsDataOfType { get; set; } Property Value Type Description System.String Remarks Older data sources have a name like \"|Config ToSic.Eav.DataSources.App\", but that's deprecated | Improve this Doc View Source GlobalName required this should be a unique id, ideally a GUID. Declaration public string GlobalName { get; set; } Property Value Type Description System.String Remarks important: old code use string names like a.net namespace. This should not be done any more and will be deprecated in future. | Improve this Doc View Source HelpLink The help-link to get help for this data source. The UI will offer a help-button if provided. Declaration public string HelpLink { get; set; } Property Value Type Description System.String | Improve this Doc View Source Icon Optional custom icon, based on the icon-names from the Material Icons library. Declaration public string Icon { get; set; } Property Value Type Description System.String | Improve this Doc View Source In List of in-streams expected by this data-source - will be shown in the UI. Default is empty []. Declaration public string[] In { get; set; } Property Value Type Description System.String [] | Improve this Doc View Source NiceName Nice name shown in the UI If not specified, the UI will use the normal name instead. Declaration public string NiceName { get; set; } Property Value Type Description System.String | Improve this Doc View Source PreviousNames Names this DataSource may have had previously. This was introduced when we standardized the names, and still had historic data using old names or old namespaces. Declaration public string[] PreviousNames { get; set; } Property Value Type Description System.String [] | Improve this Doc View Source Type A primary type of this source, which determines a default icon + some standard help-text Declaration public DataSourceType Type { get; set; } Property Value Type Description DataSourceType The type, from the DataSourceType enum | Improve this Doc View Source UiHint A hint to help the user better understand what this does - in case the nice name isn't enough. Declaration public string UiHint { get; set; } Property Value Type Description System.String Implements System.Runtime.InteropServices._Attribute"
  },
  "api/dot-net/ToSic.Eav.DataSources.IDataTarget.html": {
    "href": "api/dot-net/ToSic.Eav.DataSources.IDataTarget.html",
    "title": "Interface IDataTarget | 2sxc 13 / EAV 13",
    "keywords": "Interface IDataTarget Represents a data source that can be the recipient of Data. This basically means it has an In IDataStream Inherited Members IDataPartShared.Guid IDataPartShared.Name Namespace : ToSic.Eav.DataSources Assembly : ToSic.Eav.DataSources.dll Syntax [PublicApi_Stable_ForUseInYourCode] public interface IDataTarget : IDataPartShared Properties | Improve this Doc View Source In List of all In connections Declaration IDictionary<string, IDataStream> In { get; } Property Value Type Description System.Collections.Generic.IDictionary < System.String , IDataStream > Methods | Improve this Doc View Source Attach(String, IDataSource, String) Add a single named stream to the In Declaration void Attach(string streamName, IDataSource dataSource, string sourceName = \"Default\") Parameters Type Name Description System.String streamName In-name of the stream IDataSource dataSource The data source - will use it's default out System.String sourceName The stream name on the source, will default to \"Default\" | Improve this Doc View Source Attach(String, IDataStream) Add a single named stream to the In Declaration void Attach(string streamName, IDataStream dataStream) Parameters Type Name Description System.String streamName In-name of the stream IDataStream dataStream The data stream to attach | Improve this Doc View Source Attach(IDataSource) Attach a DataSource to In - replaces all existing in-streams. Declaration void Attach(IDataSource dataSource) Parameters Type Name Description IDataSource dataSource DataSource to attach"
  },
  "api/dot-net/ToSic.Eav.DataSources.Caching.ListCacheItem.html": {
    "href": "api/dot-net/ToSic.Eav.DataSources.Caching.ListCacheItem.html",
    "title": "Class ListCacheItem | 2sxc 13 / EAV 13",
    "keywords": "Class ListCacheItem Cache Item in the List-Cache. Inheritance System.Object ListCacheItem Implements ICacheExpiring ITimestamped Namespace : ToSic.Eav.DataSources.Caching Assembly : ToSic.Eav.DataSources.dll Syntax [InternalApi_DoNotUse_MayChangeWithoutNotice(\"this is just fyi\")] public class ListCacheItem : ICacheExpiring, ITimestamped Constructors | Improve this Doc View Source ListCacheItem(IImmutableList<IEntity>, Int64) Initialize the object - ready to cache Declaration public ListCacheItem(IImmutableList<IEntity> list, long cacheTimestamp) Parameters Type Name Description System.Collections.Immutable.IImmutableList < IEntity > list The list of items to put into the cache. System.Int64 cacheTimestamp The timestamp of the source at the moment of cache-buildup, to later detect changes in the source. Properties | Improve this Doc View Source CacheTimestamp The age of the data - to see if it needs refreshing if the new source has a newer date Declaration public long CacheTimestamp { get; set; } Property Value Type Description System.Int64 | Improve this Doc View Source List The items which we're caching. Declaration public IImmutableList<IEntity> List { get; set; } Property Value Type Description System.Collections.Immutable.IImmutableList < IEntity > Methods | Improve this Doc View Source CacheChanged(Int64) Detect if the cache has old data, by comparing it to a timestamp which may be newer. This is implemented in each object, because sometimes it compares its own timestamp, sometimes that of another underlying object. Declaration public bool CacheChanged(long newCacheTimeStamp) Parameters Type Name Description System.Int64 newCacheTimeStamp New time stamp to compare with Returns Type Description System.Boolean True if the timestamps differ, false if it's the same Implements ICacheExpiring ITimestamped"
  },
  "api/dot-net/ToSic.Eav.Data.LazyEntities.html": {
    "href": "api/dot-net/ToSic.Eav.Data.LazyEntities.html",
    "title": "Class LazyEntities | 2sxc 13 / EAV 13",
    "keywords": "Class LazyEntities Delivers entities which are needed. It's lazy, because on initialization it only knows the Ids (int/guid) of the items to pick up, and only retrieves them when needed. Once retrieved, it will cache the result, until the up-stream reports changes. An additional optimization: in special cases where we just need the IDs for saving, it won't actually query the cache if the IDs are already known. Inheritance System.Object LazyEntities Implements System.Collections.Generic.IEnumerable < IEntity > System.Collections.IEnumerable ICacheDependent ITimestamped Namespace : ToSic.Eav.Data Assembly : ToSic.Eav.Core.dll Syntax [InternalApi_DoNotUse_MayChangeWithoutNotice(\"this is just fyi\")] public class LazyEntities : IEnumerable<IEntity>, IEnumerable, ICacheDependent, ITimestamped Properties | Improve this Doc View Source CacheTimestamp System time-stamp of when the data in this cached thing was initialized or updated. Depending on the implementation, this may go up-stream and return an up-stream value. Declaration public long CacheTimestamp { get; } Property Value Type Description System.Int64 A timestamp as a long number | Improve this Doc View Source Identifiers Identifiers of the items in the list. Build with either the Guids or the Ids, depending on what was used. Special mechanism to get identifiers to DB storage, without loading the entities themselves Declaration public IList Identifiers { get; } Property Value Type Description System.Collections.IList Methods | Improve this Doc View Source CacheChanged() Find out if the source it depends on has changed. Declaration public bool CacheChanged() Returns Type Description System.Boolean True if the upstream cache returns a newer timestamp Implements System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable ICacheDependent ITimestamped"
  },
  "api/dot-net/ToSic.Eav.Data.IEntityWrapper.html": {
    "href": "api/dot-net/ToSic.Eav.Data.IEntityWrapper.html",
    "title": "Interface IEntityWrapper | 2sxc 13 / EAV 13",
    "keywords": "Interface IEntityWrapper A interface to ensure all things that carry an IEntity can be compared based on the Entity they carry. Inherited Members IHasDecorators<IEntity>.Decorators Namespace : ToSic.Eav.Data Assembly : ToSic.Eav.Core.dll Syntax [PublicApi] public interface IEntityWrapper : IHasDecorators<IEntity>, IMultiWrapper<IEntity> Properties | Improve this Doc View Source Entity The underlying entity. Declaration IEntity Entity { get; } Property Value Type Description IEntity The entity, or null if not provided"
  },
  "api/dot-net/ToSic.Eav.Data.IAttribute-1.html": {
    "href": "api/dot-net/ToSic.Eav.Data.IAttribute-1.html",
    "title": "Interface IAttribute<T> | 2sxc 13 / EAV 13",
    "keywords": "Interface IAttribute<T> Represents an Attribute (Property), but strongly typed Inherited Members IAttribute.Values IAttributeBase.Name IAttributeBase.Type IAttributeBase.ControlledType Namespace : ToSic.Eav.Data Assembly : ToSic.Eav.Core.dll Syntax [PublicApi_Stable_ForUseInYourCode] public interface IAttribute<T> : IAttribute, IAttributeBase Type Parameters Name Description T Type of the Value Remarks We recommend you read about the Understanding Data... Properties | Improve this Doc View Source Item[Int32] Gets the Value for the specified Language/Dimension using the ID accessor. Usually not needed. Typed. Declaration T this[int languageId] { get; } Parameters Type Name Description System.Int32 languageId the language id (number) Property Value Type Description T | Improve this Doc View Source Item[Int32[]] Gets the Value for this Languages, typed Declaration T this[int[] languageIds] { get; } Parameters Type Name Description System.Int32 [] languageIds list of languages to check Property Value Type Description T | Improve this Doc View Source Item[String] Get the best/first matching value for the specified language key - typed Declaration T this[string languageKey] { get; } Parameters Type Name Description System.String languageKey The language key (string) to look for Property Value Type Description T | Improve this Doc View Source Item[String[]] Get the best/first matching value for the specified language keys - typed Declaration T this[string[] languageKeys] { get; } Parameters Type Name Description System.String [] languageKeys list of language keys Property Value Type Description T | Improve this Doc View Source Typed Gets the typed Value Objects - so the same as Values, but with the correct type Declaration IList<IValue<T>> Typed { get; } Property Value Type Description System.Collections.Generic.IList < IValue <T>> | Improve this Doc View Source TypedContents Gets the typed first/default value Declaration T TypedContents { get; } Property Value Type Description T"
  },
  "api/dot-net/ToSic.Sxc.Dnn.Web.IDnnRazorCustomize.html": {
    "href": "api/dot-net/ToSic.Sxc.Dnn.Web.IDnnRazorCustomize.html",
    "title": "Interface IDnnRazorCustomize | 2sxc 13 / EAV 13",
    "keywords": "Interface IDnnRazorCustomize All DNN Razor Pages inherit from this class Inherited Members IDynamicCode.GetService<TService>() IDynamicCode.App IDynamicCode.Data IDynamicCode.Content IDynamicCode.Header IDynamicCode.AsAdam(IDynamicEntity, String) IDynamicCode.AsAdam(IEntity, String) IDynamicCode.Link IDynamicCode.Edit IDynamicCode.AsDynamic(String, String) IDynamicCode.AsDynamic(IEntity) IDynamicCode.AsDynamic(Object) IDynamicCode.AsEntity(Object) IDynamicCode.AsList(Object) IDynamicCode.CreateSource<T>(IDataStream) IDynamicCode.CreateSource<T>(IDataSource, ILookUpEngine) IDynamicCode.CmsContext ICreateInstance.CreateInstancePath ICreateInstance.CreateInstance(String, String, String, String, Boolean) ICompatibilityLevel.CompatibilityLevel IHasLog.Log IDnnDynamicCodeAdditions.Dnn Namespace : ToSic.Sxc.Dnn.Web Assembly : ToSic.Sxc.Dnn.Razor.dll Syntax [PublicApi_Stable_ForUseInYourCode] public interface IDnnRazorCustomize : IDnnDynamicCode, IDynamicCode, ICreateInstance, ICompatibilityLevel, IHasLog, IDnnDynamicCodeAdditions Properties | Improve this Doc View Source Purpose The purpose of the current execution. The code might be called for showing to a user, or search-indexing. Declaration [Obsolete(\"Shouldn't be used any more, but will continue to work for indefinitely for old base classes, not in v12. There are now better ways of doing this\")] Purpose Purpose { get; } Property Value Type Description Purpose The value of the current purpose. Methods | Improve this Doc View Source CustomizeData() Override this to have your code change the (already initialized) Data object. If you don't override this, nothing will be changed/customized. Declaration [Obsolete(\"Shouldn't be used any more, but will continue to work for indefinitely for old base classes, not in v12. There are now better ways of doing this\")] void CustomizeData() | Improve this Doc View Source CustomizeSearch(Dictionary<String, List<ISearchItem>>, IModule, DateTime) Customize how the search will process data on this page. Declaration [Obsolete(\"Shouldn't be used any more, but will continue to work for indefinitely for old base classes, not in v12. There are now better ways of doing this\")] void CustomizeSearch(Dictionary<string, List<ISearchItem>> searchInfos, IModule moduleInfo, DateTime beginDate) Parameters Type Name Description System.Collections.Generic.Dictionary < System.String , System.Collections.Generic.List < ISearchItem >> searchInfos ToSic.Sxc.Context.IModule moduleInfo System.DateTime beginDate"
  },
  "api/dot-net/ToSic.Sxc.Dnn.Run.html": {
    "href": "api/dot-net/ToSic.Sxc.Dnn.Run.html",
    "title": "Namespace ToSic.Sxc.Dnn.Run | 2sxc 13 / EAV 13",
    "keywords": "Namespace ToSic.Sxc.Dnn.Run Run is all about Runtime / Execution of the EAV. It contains things that describe the environment it's running in and has base material for specific implementations. For example, the ITenant and ITenant<T> are inherited by the DnnTenant . Note All the things starting with Dnn... are Dnn specific implementations of EAV or 2sxc features. We've documented them so you know how things work, but you usually won't care about them. The Dnn prefix helps us better detect in our code when we're using Dnn stuff vs. generic stuff. Interfaces IDnnContext Provides information about the current context within DNN. This only applies to 2sxc running inside DNN, not inside another platform. This object is the root Dnn object, used mainly in older Razor. If possible, try to use CmsContext instead."
  },
  "js-code/angular/dnn-sxc-angular/toolbars.html": {
    "href": "js-code/angular/dnn-sxc-angular/toolbars.html",
    "title": "Toolbars in Angular (dnn-sxc-angular) | 2sxc 13 / EAV 13",
    "keywords": "Toolbars in Angular (dnn-sxc-angular) <!-- Data Highlights --> <!-- ADAM --> <!-- Server --> <!-- Prepare --> <!-- Data Source --> <!-- Optimzers --> <!-- Process / Awesomize --> <!-- Libraries --> <!-- data formats --> <!-- Browser --> <!-- Frameworks --> <!-- App show parts --> <!-- Interact parts --> <!-- Edit parts --> <!-- Edit UI parts --> <!-- SPA parts --> <!-- Custom highlight boxes - can be controlled by in-page CSS --> you are here (click to zoom) - discover the stack .context-box-summary .spa-2sxc-js { visibility: visible; } dnn-sxc-angular provides directives/components which allow to place toolbars in an Angular App. Prerequisite is an Angular App running with dnn-sxc-angular . How to use Place the toolbar directives/components in your templates. There are two different ways to place your toolbars, the tag-toolbar (default) and the inline toolbar, depending on the use case. In most cases, you will want to use the [sxc-toolbar] tag-toolbar directive In rare cases you may prefer the inline <sxc-toolbar> toolbar is useful when you want to show the toolbar without the need to hover over the target element. Example We'll explain how to use toolbars based on the Template App . Check out the team.component.html - you'll see some code like this: <!-- #ExampleContentManagement - this shows how to use the toolbar with just the add-button for a specific type and also do custom view refresh --> <div [sxc-toolbar]=\"toolbarFor()\" (refresh)=\"teamSvc.refresh()\"> <h2>Team</h2> <app-business-unit-selector></app-business-unit-selector> <ol> <!-- #ExampleContentManagement - this will create a delete/edit toolbar for this item and will also do custom view refresh--> <li *ngFor=\"let person of team; trackBy: trackById\" [sxc-toolbar]=\"toolbarFor(person)\" (refresh)=\"teamSvc.refresh()\"> <app-person [person]=\"person\"></app-person> </li> </ol> <hr /> <app-team-explained></app-team-explained> </div> The code of team.component.ts is this: @Component({ /* stuff */ }) export class TeamComponent { /** The data which is shown in the template */ team: Person[] = []; constructor(private route: ActivatedRoute, public teamSvc: TeamService, private cdr: ChangeDetectorRef) { this.teamSvc.team$.subscribe((newTeam => { this.team = newTeam; })); } /** * Create a toolbar configuration for a person or for new * #ExampleContentManagement */ toolbarFor(person?: Person) { const mainConfig = 'toolbar=empty?contentType=Person&entityId=' + (person?.Id ?? '0'); return person ? [mainConfig, \"edit\", \"delete&color=gray?entityGuid=\" + person.Guid + \"&title=\" + person.Name] : [mainConfig, 'new'] } } As you can see, the [sxc-toolbar] attribute activates the sxcToolbar directive of dnn-sxc-angular . The configuration for the toolbar is provided by the toolbarFor(...) call in the controller class and it uses the simple toolbar configuration system . That's how easy it is to create CMS toolbars in Angular üòâ."
  },
  "js-code/angular/dnn-sxc-angular/data-content.html": {
    "href": "js-code/angular/dnn-sxc-angular/data-content.html",
    "title": "Data.content<T>(...) | 2sxc 13 / EAV 13",
    "keywords": "Data.content<T>(...) <!-- Data Highlights --> <!-- ADAM --> <!-- Server --> <!-- Prepare --> <!-- Data Source --> <!-- Optimzers --> <!-- Process / Awesomize --> <!-- Libraries --> <!-- data formats --> <!-- Browser --> <!-- Frameworks --> <!-- App show parts --> <!-- Interact parts --> <!-- Edit parts --> <!-- Edit UI parts --> <!-- SPA parts --> <!-- Custom highlight boxes - can be controlled by in-page CSS --> you are here (click to zoom) - discover the stack .context-box-summary .spa-2sxc-js { visibility: visible; } With dnn-sxc-angular it's really easy to access Data from the backend. One way to do this is using a helper-object which is pre-configured to a specific Content-Type, and can be re-used for multiple requests. This is what the .content<T>(...) will get you. On this page we'll explain how to get a object to manage a specific content-type using the Data.content<T>() command. Example This is some example code @Component({ /* stuff */ }) export class BusinessUnitSelectorComponent { constructor(private data: Data) { // Query backend for stream of BusinessUnit[] // This creates a content-manager object (note the missing $) const businessUnits = data.content<BusinessUnit>('BusinessUnit'); // now get all const businessUnits$ = businessUnits.get(); // or just one by ID const oneBu$ = businessUnits.get(402); oneBu$.subscribe((bu) => console.log(`Got BU ${bu.Name}`, bu)); // update a value (note: not implemented yet as of dnn-sxc-angular v11.01) businessUnites.post(402, { Name: 'New Name' }); } } Difference to Data.content$<T>(...) In most cases you'll prefer to use the content$ (...) API which is single use. The only really good case to use this is for updating data, but that hasn't been implemented yet. If you want to update data for now just use the normal sxc object on the Context"
  },
  "js-code/angular/dnn-sxc-angular/data-content-dollar.html": {
    "href": "js-code/angular/dnn-sxc-angular/data-content-dollar.html",
    "title": "Data.content$<T>(...) | 2sxc 13 / EAV 13",
    "keywords": "Data.content$<T>(...) <!-- Data Highlights --> <!-- ADAM --> <!-- Server --> <!-- Prepare --> <!-- Data Source --> <!-- Optimzers --> <!-- Process / Awesomize --> <!-- Libraries --> <!-- data formats --> <!-- Browser --> <!-- Frameworks --> <!-- App show parts --> <!-- Interact parts --> <!-- Edit parts --> <!-- Edit UI parts --> <!-- SPA parts --> <!-- Custom highlight boxes - can be controlled by in-page CSS --> you are here (click to zoom) - discover the stack .context-box-summary .spa-2sxc-js { visibility: visible; } With dnn-sxc-angular it's really easy to access Data from the backend. The easiest way is to use data.content$<T>(...) which gets you a Stream ( $ ) of Entities of the expected Content-Type. Here's what it does: data.content$<T>(...) will get you... ...an observable of T you'll usually use <YourType[]> since you'll get an array back the Content-Type name is specified in the ('BusinessUnits') Single-Item Call you can optionally specify an id, like ('BusinessUnits', 4020) when you use an ID, you'll expert a single item back, so you'll use <YourType> Example We'll explain how to get one or many items based on the Template App . Check out the business-unit-selector.component.ts - you'll see some code like this: @Component({ /* ... */ }) export class BusinessUnitSelectorComponent { /** Stream of business units, provided back the backend */ businessUnits$: Observable<BusinessUnit[]>; constructor(private data: Data) { // Query backend for stream of BusinessUnit[] // #ExampleData this.businessUnits$ = data.content$<BusinessUnit[]>('BusinessUnit'); } } The important line is this: this.businessUnits$ = data.content$<BusinessUnit[]>('BusinessUnit'); This will get all BusinessUnit Entities from the backend. Here's what it does We're using the Data object provided by dnn-sxc-angular The content$<T>(...) requests an observable stream of BusinessUnit[] objects The term ...('BusinessUnit') means that this is the Content-Type we are looking for. Difference to Data.content<T>(...) The Data object also has a content<T>(...) without the $ . That doesn't return a stream/observable of data, but instead returns a Content object which can be used for multiple get(...) calls."
  },
  "js-code/angular/dnn-sxc-angular/data-api.html": {
    "href": "js-code/angular/dnn-sxc-angular/data-api.html",
    "title": "Data.api(...) | 2sxc 13 / EAV 13",
    "keywords": "Data.api(...) <!-- Data Highlights --> <!-- ADAM --> <!-- Server --> <!-- Prepare --> <!-- Data Source --> <!-- Optimzers --> <!-- Process / Awesomize --> <!-- Libraries --> <!-- data formats --> <!-- Browser --> <!-- Frameworks --> <!-- App show parts --> <!-- Interact parts --> <!-- Edit parts --> <!-- Edit UI parts --> <!-- SPA parts --> <!-- Custom highlight boxes - can be controlled by in-page CSS --> you are here (click to zoom) - discover the stack .context-box-summary .spa-2sxc-js { visibility: visible; } With dnn-sxc-angular it's really easy to access WebAPIs on the backend. If you want to make multiple calls to the same controller, the easiest way is to use data.api<T>(...) . Here's what it does: data.api(...) will get you... an Api object which will only talk to the controller in (...) - like ('simple') You can then use it multiple times with get() and post() Example We'll explain how to get one or many items based on the Template App . Check out the api-demo.component.ts - you'll see some code like this: @Component({ /* ... */ }) export class ApiDemoComponent { apiMessage$: Observable<string>; nameMessage$: Observable<string>; something$: Observable<Something>; constructor(data: Data) { // version for using the api-object many times; const simple = data.api('simple'); // short call version - without parameters this.apiMessage$ = simple.get<string>('hello'); // short call version - with parameters this.nameMessage$ = simple.get<string>('hello', new HttpParams().set('name', 'Michael')); this.something$ = simple.get<Something>('Something', new HttpParams().set('name', 'Samuel Jackson')); } } In the above example you'll see these lines: // version for using the api-object many times; const simple = data.api('simple'); // short call version - without parameters this.apiMessage$ = simple.get<string>('hello'); // short call version - with parameters this.nameMessage$ = simple.get<string>('hello', new HttpParams().set('name', 'Michael')); this.something$ = simple.get<Something>('Something', new HttpParams().set('name', 'Samuel Jackson')); This shows how to use the api(...) to get an object to re-use, and you can also see how parameters are added to the call. Difference to Data.api$<T>(...) The Data object also has a api$<T>(...) with a $ . That is for single-call use."
  },
  "js-code/angular/dnn-sxc-angular/data-api-dollar.html": {
    "href": "js-code/angular/dnn-sxc-angular/data-api-dollar.html",
    "title": "Data.api$<T>(...) | 2sxc 13 / EAV 13",
    "keywords": "Data.api$<T>(...) <!-- Data Highlights --> <!-- ADAM --> <!-- Server --> <!-- Prepare --> <!-- Data Source --> <!-- Optimzers --> <!-- Process / Awesomize --> <!-- Libraries --> <!-- data formats --> <!-- Browser --> <!-- Frameworks --> <!-- App show parts --> <!-- Interact parts --> <!-- Edit parts --> <!-- Edit UI parts --> <!-- SPA parts --> <!-- Custom highlight boxes - can be controlled by in-page CSS --> you are here (click to zoom) - discover the stack .context-box-summary .spa-2sxc-js { visibility: visible; } With dnn-sxc-angular it's really easy to access WebAPIs on the backend. The easiest way is to use data.api$<T>(...) which gets you a Stream ( $ ) of objects from a custom WebAPI . Here's what it does: data.api$<T>(...) will get you... ...an observable of T you'll often use <YourType[]> if you expect an array the controller & route ('simple/hello') Example We'll explain how to get call the backend based on the Template App . Check out the api-demo.component.ts - you'll see some code like this: @Component({ /* ... */ }) export class ApiDemoComponent { numbers$: Observable<number[]>; constructor(data: Data) { // simple version for just a quick call, not re-using the api object this.numbers$ = data.api$<number[]>('simple/Numbers'); } } In the above example you'll see this line: this.numbers$ = data.api$<number[]>('simple/Numbers'); This is a quick call to a backend controller called Simple and the action Numbers . Difference to Data.api(...) The Data object also has a api(...) without the $ . That doesn't return a stream/observable of data, but instead returns an Api object which can be used for multiple get<T>(...) calls."
  },
  "js-code/2sxc-api/sxc/_data-history.html": {
    "href": "js-code/2sxc-api/sxc/_data-history.html",
    "title": "History | 2sxc 13 / EAV 13",
    "keywords": "History jQuery based webApi.get(...) etc. introduced in 2sxc 04.00 in 2sxc 4.0 there was also a data object but it had a very different purpose and rarely used 2sxc 13 created a new data(...) function based on the new fetch as a data service 2sxc 13 introduced query(...)"
  },
  "js-code/2sxc-api/sxc/sxc.webapi.html": {
    "href": "js-code/2sxc-api/sxc/sxc.webapi.html",
    "title": "The WebApi Helpers on the Sxc Controller | 2sxc 13 / EAV 13",
    "keywords": "The WebApi Helpers on the Sxc Controller <!-- Data Highlights --> <!-- ADAM --> <!-- Server --> <!-- Prepare --> <!-- Data Source --> <!-- Optimzers --> <!-- Process / Awesomize --> <!-- Libraries --> <!-- data formats --> <!-- Browser --> <!-- Frameworks --> <!-- App show parts --> <!-- Interact parts --> <!-- Edit parts --> <!-- Edit UI parts --> <!-- SPA parts --> <!-- Custom highlight boxes - can be controlled by in-page CSS --> you are here (click to zoom) - discover the stack .context-box-summary .interact-2sxc { visibility: visible; } The WebApi object on the module-specific sxc -controller is for AJAX calls. It helps you in these advanced cases: to read/write content-items using REST to access your apps WebApi controllers How to use First you must ensure that you have the $2sxc manager on your page, which will get you a module-specific sxc controller. Read about the $2sxc manager here. Here's a simple example (assuming you have the $2sxc manager): <a onclick=\"$2sxc(this).webApi.fetchJson('app/auto/data/Category').then(handleResult);\"> get all Categories </a> The APIs to Get Data Modern fetch and fetchJson API APIs to get URLs and headers Old jQuery APIs How to Get the Current Context's sxc Controller Before you continue, make sure you know how to resolve/get your sxc -controller, as it is unique for each Dnn-Module. This is because each action needs to know which module it belongs to. Read about the 3 ways to get this in the $2sxc Manager docs . Here you'll also find out more about the sxc-controller . History jQuery based webApi.get(...) etc. introduced in 2sxc 04.00 webApi.fetchRaw() , webApi.fetchJson() , webApi.url() , webApi.headers() API introduced as beta in v12.10 jQuery commands deprecated in v12.10 but will continue to work if the page has jQuery loaded webApi.url(...) enhanced with parameters object in v12.11 webApi.fetchRaw(...) created to fix difficult naming in 12.10; webApi.fetch(...) is now deprecated and will stop working soon - v13.04 webApi.fetchRaw , .fetchJson , sxc.data(...) and sxc.query(...) official for use 13.04"
  },
  "js-code/2sxc-api/sxc/sxc.webapi-jquery.html": {
    "href": "js-code/2sxc-api/sxc/sxc.webapi-jquery.html",
    "title": "The WebApi Helpers on the Sxc Controller using JQuery | 2sxc 13 / EAV 13",
    "keywords": "The WebApi Helpers on the Sxc Controller using JQuery <!-- Data Highlights --> <!-- ADAM --> <!-- Server --> <!-- Prepare --> <!-- Data Source --> <!-- Optimzers --> <!-- Process / Awesomize --> <!-- Libraries --> <!-- data formats --> <!-- Browser --> <!-- Frameworks --> <!-- App show parts --> <!-- Interact parts --> <!-- Edit parts --> <!-- Edit UI parts --> <!-- SPA parts --> <!-- Custom highlight boxes - can be controlled by in-page CSS --> you are here (click to zoom) - discover the stack .context-box-summary .interact-2sxc { visibility: visible; } 2sxc originally used jQuery and the JS API still has commands which do jQuery AJAX calls. On the webApi object they are webApi.delete(...) for HTTP DELETE calls webApi.get(...) for HTTP GET calls webApi.post(...) for HTTP POST calls webApi.put(...) for HTTP PUT calls webApi.request(...) for any other HTTP calls Warning As of 2sxc 12.10 we don't recommend using this any more. It will only work if the page also has jQuery enabled either using pageService.Activate(\"jQuery\"); (see IPageService ) or because something else like the theme/skin already loads it. From now on we strongly suggest you use fetch which is supported by all modern browsers. See webApi.fetch Tip To find out how to get the module sxc-object using $2sxc, check out The WebApi Helpers on the Sxc Controller Example Here's a simple example (assuming you have the $2sxc manager): <a onclick=\"$2sxc(this).webApi.get('app/auto/data/Category').then(handleResult);\"> get all Categories </a> The code above shows how the sxc-object is retrieved using the $2sxc(...) manager, based on the current context this how all items of type \"Category\" are requested how the result (promise) is passed on to handleResults for updating the view etc. Here's another quick example, calling a C# web-api endpoint: var sxc = $2sxc(27); sxc.webApi.post(\"Form/ProcessForm\") .success(function(result) { // .... }); Working with REST / HTTP Async Stuff Short note: these WebAPIs work using jQuery promises ( not JavaScript promises), supporting .then(...) , .error(...) etc. The $2sxc(...).webApi has 4 jQuery commands .webApi.get(url, ...) .webApi.post(url, ...) .webApi.delete(url, ...) .webApi.put(url, ...) Each of these has the following parameters url or settings required string|object: a Url for the end-point OR a { ... } settings object params optional object: the url params like { id: 27, name: \"hello\" } data optional object: the data - in case of post / put, like { ... } preventAutoFail optional bool: if true, won't automatically show a default message on error, so that you can handle errors differently Quick examples: var sxc = $2sxc(27); sxc.webApi.post(\"Form/ProcessForm\", {}, data, true) .success(function() { // .... }) .error(function() { // ... }); This will call the C# WebApi controller FormController in the api folder and go for its ProcessForm command. It will use no url-params, but put a data object in the body (as json), and will do error-handling itself. In short: use $2sxc(...).webApi.get(...) or $2sxc(...).webApi.post(...) etc. for the path-parameter, use a path starting with app/auto/query/[queryname] - 2sxc will take care of all the path resolutions if the path starts with app/auto/query/ Working with Custom C# App WebAPIs In short: use $2sxc(...).webApi.get(...) or $2sxc(...).webApi.post(...) etc. for the path-parameter, use a path starting with app/auto/api/[controller]/[action] - 2sxc will take care of all the path resolutions if the path starts with app/auto/api/ You can read more about the C# WebApi Server Side Short note: the WebAPIs work like classic javascript promises. So not like the data.on(event) implementation which is a bit special, this is very standard jQuery promise. Demo App and further links You should find some code examples in this demo App TimeLineJS all the JS-apps including AngularJS in the app-catalog More links: Description of the feature on 2sxc docs History jQuery based webApi.get(...) etc. introduced in 2sxc 04.00 webApi.fetchRaw() , webApi.fetchJson() , webApi.url() , webApi.headers() API introduced as beta in v12.10 jQuery commands deprecated in v12.10 but will continue to work if the page has jQuery loaded webApi.url(...) enhanced with parameters object in v12.11 webApi.fetchRaw(...) created to fix difficult naming in 12.10; webApi.fetch(...) is now deprecated and will stop working soon - v13.04 webApi.fetchRaw , .fetchJson , sxc.data(...) and sxc.query(...) official for use 13.04"
  },
  "net-code/dynamic-code/objects/cmscontext/index.html": {
    "href": "net-code/dynamic-code/objects/cmscontext/index.html",
    "title": "CmsContext in Dynamic Code ‚ú® new! | 2sxc 13 / EAV 13",
    "keywords": "CmsContext in Dynamic Code ‚ú® new! To enable Hybrid Razor which works on Dnn and Oqtane, we need standards so that our Dynamic Code can access information about the page, module etc. Up until now our code always used the Dnn object which obviously doesn't on Oqtane and other platforms. So we're creating this new standardized object to ask for these things. ‚ö° The official API docs of the Object on the Dynamic Code ‚ö° The official API docs of the ICmsContext object Discover More in the Razor Tutorials We have an rich series of Razor tutorials . You should really check them out üëç. CmsContext.Platform Information about the platform the system is running on. Usually Dnn or Oqtane. Name Type Value Example Description Type PlatformType PlatformType.Dnn Name string Dnn üëâ ICmsPlatform CmsContext.Culture Culture information for the current request. Name Type Value Example Description DefaultCode string en-us The default language code of the site CurrentCode string de-ch Primary language code for the site üëâ ICmsCulture CmsContext.Site Name Type Value Example Description Id int 2 Site ID Url string 2sxc.org Primary site url without protocol üëâ ICmsSite CmsContext.Page Name Type Value Example Description Id int 36 Page ID Parameters IDictionary<string, string> Use as cross-platform Query params üëâ ICmsPage CmsContext.Module Name Type Value Example Description Id int 5030 Module ID üëâ ICmsModule CmsContext.User Name Type Value Example Description Id int 2 User ID IsSiteAdmin bool true People who can can admin users/content IsSystemAdmin bool true Super Users IsSiteDeveloper bool true Usually just Super-Users üëâ ICmsSite CmsContext.View new in 12.02 Name Type Value Example Description Id int 2 View ID Edition string bs4 Polymorphism edition if used, otherwise empty Name string 4 Tiles Name of the view Identity string BLUE Custom identity like name, but language invariant üëâ ICmsView Demo App and further links You should find some code examples in this demo App No demo apps exist yet History Introduced in 2sxc 11.11 CmsContext.Page.Parameters added in 2sxc 12.0 CmsContext.View added in 2sxc 12.02 with all the new features"
  },
  "net-code/dynamic-code/objects/app/index.html": {
    "href": "net-code/dynamic-code/objects/app/index.html",
    "title": "App / object Dynamic Code | 2sxc 13 / EAV 13",
    "keywords": "App / @App object Dynamic Code The App object gives you full access to everything you need to know about the current App, including Path-info, access to all Data this App has, access to Settings and language Resources and more. Discover More in the Razor Tutorials We have an rich series of Razor tutorials . You should really check them out üëç. How to use Here's are two simple examples taken from the Blog App : <link rel=\"stylesheet\" href=\"@App.Path/assets/style.css\" data-enableoptimizations=\"true\"/> <script type=\"text/javascript\" src=\"@App.Path/assets/scripts.js\" data-enableoptimizations=\"true\"></script> @foreach(var tag in AsDynamic(App.Data[\"Tag\"])) { <li class='@(\"app-blog-tag\" + tag.ManualWeight)'><a href=\"@App.Settings.DetailsPage/tag/@tag.Tag\" title=\"@tag.Name\">@tag.Name</a></li> } The <link... and <script... use the app-path to ensure that the file is correctly loaded, no matter what portal or app-name is currently valid. Here you can discover more about the optimizations . The loop iterates through all tags with the @foreach(var tag in AsDynamic(App.Data[\"Tag\"])) , creates <li> items and links these to a page defined in the App.Settings . How it works Whenever a 2sxc-instance is created to render a page or to deliver JSON data, the App object is created and prepared to deliver everything you need. It's very performant, because it doesn't actually get any data or run any queries unless these are accessed. App Properties The app-object uses the IApp interface ( see code ) has the following simple properties: AppId number, current App id AppGuid guid, internal use global id Configuration DynamicEntity , contains the configuration content-item Data IAppData, to access all App-data (see below) Folder string, storage folder name in portal/#/2sxc/... Hidden bool, info if the app cannot be selected in the UIs Name string, the app name Path string, the path as used in URLs in html PhysicalPath string, the path as used on the server C:... Query[\"QueryName\"] dictionary of queries (see below) Resources DynamicEntity , all the multi-language labels etc. (see below) Settings DynamicEntity , all the app-settings (see below) ZoneId number, current Zone ID (similar to PortalId) Using App Data (App.Data) Read App.Data / Object in Dynamic Code Using App Queries (App.Query) Read App.Query / Object in Dynamic Code Note about Unpublished / Draft Content-Items In case you're not aware of the draft/unpublished features in 2sxc, we want to note that each item can be live/draft, and each item could have a corresponding counterpart. So a draft-item could have a live-item (but doesn't have to), and a live-item could have a draft item. This is important, because the admin/editor will see all the draft items, while the end-user will only see the live ones. So the exact items shown and the item-count can differ if you are logged in. App Settings and Resources In the App dialogs you can manage Settings and Resources . Basically both are a content-item with the fields you specify, the only difference is the purpose they have. You should put button-labels, standard-texts, decorative images etc. into Resources and these will often change from language to language. You should put settings like \"what page is xxx on\" or \"the primary color is #53aaff\" into Settings You would normally use it like this: <h1 class='@App.Settings.HeadingsDecorators'> @Content.Title </h1> <div> @Content.Body </div> <a href=\"@App.Settings.DisclaimerPage\"> @App.Resources.Disclaimer </a> As you can see, the HeadingsDecorators or DisclaimerPage are best placed in the Settings , while the label of the Disclaimer link are best handled as a multi-language Resource . Read also If you need to get an App object for other apps, read External App Use If you want to use the App object from non 2sxc-code, like other MVC pages, check out External App Use Demo App and further links You should find some code examples in this demo App Blog App showing many such features More links: App Data Create/Update/Delete History Introduced in 2sxc 05.05 Stable since 2sxc 06.00 Data-API was introduced in 2sxc 06.05"
  },
  "net-code/dynamic-code/objects/app/app-query.html": {
    "href": "net-code/dynamic-code/objects/app/app-query.html",
    "title": "App.Query / Object in Dynamic Code | 2sxc 13 / EAV 13",
    "keywords": "App.Query / @App.Query Object in Dynamic Code The queries you create in the app-configuration dialogs can do many things like filter certain items, order them and more. You will often just connect them to a template and visualize the result, by you can also use it in your code. Here's how: @foreach(var tag in AsList(App.Query[\"SortedTags\"])) { <li class='@(\"app-blog-tag\" + tag.ManualWeight)'> <a href='@Link.To(\"tag= \" tag.Tag)' title=\"@tag.Name\"> @tag.Name </a> </li> } Technically the App.Query is a IDictionary<string, IDataSource> , meaning that it's a dictionary using string identifiers (names), returning an IDataSource object. It's important to realize that a DataSource can deliver multiple streams of data - a bit like delivering multiple tables. Each stream has a name, and you must specify which stream you want to work with. In the above example, we're using the Default stream as defined with App.Query[\"SortedTags\"][\"Default\"] . Read also #todoc Demo App and further links #todoc History Introduced in 2sxc 05.05 Stable since 2sxc 06.00 Data-API was introduced in 2sxc 06.05"
  },
  "net-code/dynamic-code/objects/app/app-data.html": {
    "href": "net-code/dynamic-code/objects/app/app-data.html",
    "title": "App.Data / Object in Dynamic Code | 2sxc 13 / EAV 13",
    "keywords": "App.Data / @App.Data Object in Dynamic Code The App.Data object gives you immediate acccess to all data in the app, through the Data property. Basically you can use it as follows: Get All Data Items of a Content Type App.Data[\"ContentTypeName\"] will give you a stream of all entities of that type. In most cases you'll use an AsDynamic(...) to use it efficiently in loops etc. because most of the razor templating will prefer a DynamicEntity to a pure IEntity-object. Here's an example: @foreach(var post in AsDynamic(App.Data[\"BlogPost\"])) { @RenderPage(\"_list-item.cshtml\", new { Post = post }) } note : this will give you all items, but you'll have to sort it using LINQ or other mechanisms. If you're not familiar with that, you're better of using App.Query[...] (see below). Edit App Data Content-Items In addition to giving access to all entities in this app, you can also create, edit and delete items using the App.Data object. The commands provided are: App.Data.Create(contentTypeName, values, userName) App.Data.Update(entityId, values, userName) App.Data.Delete(entityId, userName) You can read more about this in the App Data API Feature Create Metadata #todoc Read Metadata #todoc Demo App and further links #todoc History Introduced in 2sxc 05.05 Stable since 2sxc 06.00 Data-API was introduced in 2sxc 06.05"
  },
  "net-code/dynamic-code/objects/settings.html": {
    "href": "net-code/dynamic-code/objects/settings.html",
    "title": "Settings in Dynamic Code ‚ú® new! | 2sxc 13 / EAV 13",
    "keywords": "Settings in Dynamic Code ‚ú® new! The Settings object consolidates settings for the current scenario. It merges settings configured in the View , App , Site , System and Presets . The top-most setting has preference. So if a view overrides a site-setting, the view-setting will be used. Discover More in the Razor Tutorials We have an rich series of Razor tutorials . You should really check them out üëç. Tip Learn more about settings and what predefined settings exist in these docs . There you'll learn about predefined image sizes, google maps keys and more. Example Let's assume you have these View-Settings PrimaryColor would be #FF0000 Columns would be 4 SomeApiKey would be 6n23cnhi502ceh An these App-Settings PrimaryColor = #CCCCCC SecondaryColor = #00AA00 Then you could get these values from the Settings object @Settings.PrimaryColor would be #FF0000 - found it View @Settings.SecondaryColor would be #00AA00 - only exists in App @Settings.Columns would be 4 - only exists in View @Settings.SomeApiKey would be 6n23cnhi502ceh - from App @Settings.DoesntExist would be null as that data doesn't exist @Settings.Images.Content.Width would be 1400 as it is a preset Tip Remember that Settings are meant for configuration and Resources should be used for multi-language output. You could do it differently, but that would be bad practice. How it Works The Settings is a dynamic object. Internally the Settings use the new IDynamicStack object to stack entities like sources on each other, and take the first best match. The sources are: ViewCustom with View-level settings AppCustom / AppSystem with App-level settings SiteCustom / SiteSystem with Site-level settings GlobalCustom / GlobalSystem with System-level settings PresetSystem with pre-defined settings from the installation Tip Read more about this stack and what's in it here Settings Stack in 2sxc ‚ú® new! . This also includes the full list of sources and their exact names. The order of the sources is important, as the first match will be returned. The View has priority over the App. This setup allows Views to override App-Defaults. Accessing Settings from One Source In rare cases you may want to access settings from a specific source - maybe to detect if it has been changed or because your template explicitly wants the App settings. For this you can use the GetSource(name) method like this: @Settings.PrimaryColor would return #FF0000 @Settings.GetSource(\"ViewCustom\").PrimaryColor would return #FF0000 @Settings.GetSource(\"AppCustom\").PrimaryColor would return #CCCCCC History You could use App.Settings since ca. 2sxc 6 Settings object Introduced in 2sxc 12.02 to consolidate View and App Settings Settings object was expanded in 12.04 to also cover global, portal and site level settings - see settings docs"
  },
  "net-code/dynamic-code/objects/resources.html": {
    "href": "net-code/dynamic-code/objects/resources.html",
    "title": "Resources in Dynamic Code ‚ú® new! | 2sxc 13 / EAV 13",
    "keywords": "Resources in Dynamic Code ‚ú® new! The Resources object consolidates resources for the current scenario. It merges resources configured in the View and App and gives View-Resources the preference. Discover More in the Razor Tutorials We have an rich series of Razor tutorials . You should really check them out üëç. Example Let's assume you have these View-Resources in EN & DE Source Property Value EN Value DE View ColHeadId Id (not defined) View ColHeadName Name (not defined) View ColHeadDesc Description Beschreibung View HelpLink /help /hilfe App OrderLabel Order Now Jetzt Bestellen App OrderHint Click to Order Klick um zu Bestellen App HelpLink www.2sxc.org (not defined) Then you could get these values from the Resources object Object Value if on an EN page Value if on a DE page @Resources.ColHeadId Id Id (auto-fallback) @Resources.ColHeadName Name Name (auto-fallback) @Resources.ColHeadDesc Description Beschreibung @Resources.HelpLink /help /hilfe @Resources.OrderLabel Order Now Jetzt Bestellen @Resources.OrderHint Click to Order Klick um zu Bestellen Tip Remember that Settings are meant for configuration and Resources should be used for multi-language output. You could do it differently, but that would be bad practice. How it Works The Resources is a dynamic object. Internally the Settings use the new IDynamicStack object to stack entities like sources on each other, and take the first best match. The sources are: ViewCustom with View-level resources AppCustom / AppSystem with App-level resources SiteCustom / SiteSystem with Site-level resources GlobalCustom / GlobalSystem with System-level resources PresetSystem with pre-defined resources from the installation Tip Read more about this stack and what's in it here Resources Stack in 2sxc ‚ú® new! . This also includes the full list of sources and their exact names. The order of the sources is important, as the first match will be returned. The View has priority over the App. This setup allows Views to override App-Defaults. Accessing Resources from One Source In rare cases you may want to access settings from a specific source - maybe to detect if it has been changed or because your template explicitly wants the App settings. For this you can use the GetSource(name) method like this: @Resources.HelpLink would return /help @Resources.GetSource(\"ViewCustom\").HelpLink would return /help @Resources.GetSource(\"AppCustom\").HelpLink would return www.2sxc.org History You could use App.Resources since ca. 2sxc 6 Resources object Introduced in 2sxc 12.02 to consolidate View and App Resources Resources object was expanded in 12.04 to also cover global, portal and site level resources - see settings docs"
  },
  "api/dot-net/ToSic.Sxc.Services.IRenderService.html": {
    "href": "api/dot-net/ToSic.Sxc.Services.IRenderService.html",
    "title": "Interface IRenderService | 2sxc 13 / EAV 13",
    "keywords": "Interface IRenderService Block-Rendering system. It's responsible for taking a Block and delivering HTML for the output. It's used for InnerContent, so that Razor-Code can easily render additional content blocks. See also Inner Content (Content Within Other Content) Namespace : ToSic.Sxc.Services Assembly : ToSic.Sxc.dll Syntax [PublicApi_Stable_ForUseInYourCode] public interface IRenderService Remarks This replaces the now obsolete ToSic.Sxc.Blocks.Render History Introduced in v12.05 but on another namespace which still works for compatibility Moved to ToSic.Sxc.Services in v13 Methods | Improve this Doc View Source All(DynamicEntity, String, String, String, Int32, String) Render content-blocks into a larger html-block containing placeholders Declaration IHybridHtmlString All(DynamicEntity parent, string noParamOrder = \"Rule: All params must be named (https://r.2sxc.org/named-params)\", string field = null, string apps = null, int max = 100, string merge = null) Parameters Type Name Description DynamicEntity parent The parent-item containing the content-blocks and providing edit-context System.String noParamOrder see Convention: Named Parameters System.String field Required: Field containing the content-blocks. System.String apps BETA / WIP System.Int32 max BETA / WIP System.String merge Optional: html-text containing special placeholders. Returns Type Description IHybridHtmlString | Improve this Doc View Source Module(Int32, Int32) Get a 2sxc module rendered directly. Declaration IRenderResult Module(int pageId, int moduleId) Parameters Type Name Description System.Int32 pageId System.Int32 moduleId Returns Type Description ToSic.Sxc.Blocks.IRenderResult An HTML-String which can be added to the output directly. The object also has additional information like assets or page changes, which are not applied when using this render command. Remarks New in 2sxc 13.02 | Improve this Doc View Source One(DynamicEntity, String, IDynamicEntity, String, Nullable<Guid>) Render one content block This is accessed through DynamicEntity.Render() At the moment it MUST stay internal, as it's not clear what API we want to surface Declaration IHybridHtmlString One(DynamicEntity parent, string noParamOrder = \"Rule: All params must be named (https://r.2sxc.org/named-params)\", IDynamicEntity item = null, string field = null, Guid? newGuid = default(Guid? )) Parameters Type Name Description DynamicEntity parent The parent-item containing the content-blocks and providing edit-context System.String noParamOrder see Convention: Named Parameters IDynamicEntity item The content-block item to render. Optional, by default the same item is used as the context. System.String field Optional: System.Nullable < System.Guid > newGuid Internal: this is the guid given to the item when being created in this block. Important for the inner-content functionality to work. Returns Type Description IHybridHtmlString"
  },
  "api/dot-net/ToSic.Sxc.Images.Recipe.html": {
    "href": "api/dot-net/ToSic.Sxc.Images.Recipe.html",
    "title": "Class Recipe | 2sxc 13 / EAV 13",
    "keywords": "Class Recipe BETA A recipe contains instructions how to generate tags etc. which can contain multiple resized images Inheritance System.Object Recipe Namespace : ToSic.Sxc.Images Assembly : ToSic.Sxc.dll Syntax [InternalApi_DoNotUse_MayChangeWithoutNotice(\"Still Beta / WIP\")] public class Recipe : ICanDump Remarks All the properties are read-only. If you need to override anything, copy it and set the modified values, then use the copy. Constructors | Improve this Doc View Source Recipe(Recipe, String, Int32, String, Dictionary<String, Object>, IEnumerable<Recipe>, Nullable<Boolean>, Nullable<Boolean>, String, String, String) Important If you call this from your code, always use named parameters, as the parameter order can change in future. Declaration [JsonConstructor] public Recipe(Recipe original = null, string name = null, int width = 0, string variants = null, Dictionary<string, object> attributes = null, IEnumerable<Recipe> recipes = null, bool? setWidth = default(bool? ), bool? setHeight = default(bool? ), string forTag = null, string forFactor = null, string forCss = null) Parameters Type Name Description Recipe original An original recipe to copy if we want to get a modified recipe based on one which already existed. System.String name An optional name System.Int32 width Initial width to use when resizing System.String variants Special string containing variants to generate System.Collections.Generic.Dictionary < System.String , System.Object > attributes List of attributes to set on the img tag System.Collections.Generic.IEnumerable < Recipe > recipes List of additional recipes which will all inherit values from this master after creation System.Nullable < System.Boolean > setWidth Set the width attribute if the img width is known System.Nullable < System.Boolean > setHeight Set the height attribute if the img-height is known System.String forTag Restricts the rule to only apply to specific tags - ATM img and source System.String forFactor Restricts the rule to only apply to resizes for a specified factor System.String forCss Restricts the rule to only apply to pages which have the specified CSS Framework Properties | Improve this Doc View Source Attributes Attributes to add to the img tag Declaration public ReadOnlyDictionary<string, string> Attributes { get; } Property Value Type Description System.Collections.ObjectModel.ReadOnlyDictionary < System.String , System.String > | Improve this Doc View Source ForCss WIP, not implemented yet Declaration public string ForCss { get; set; } Property Value Type Description System.String | Improve this Doc View Source ForFactor Determines which factors this recipe should be applied to. Null means any factor. Declaration public string ForFactor { get; } Property Value Type Description System.String | Improve this Doc View Source ForTag TODO: DOC img , source Declaration public string ForTag { get; } Property Value Type Description System.String | Improve this Doc View Source Name Just an identifier - no technical use Declaration public string Name { get; } Property Value Type Description System.String | Improve this Doc View Source Recipes wip TODO: DOC Declaration public ReadOnlyCollection<Recipe> Recipes { get; } Property Value Type Description System.Collections.ObjectModel.ReadOnlyCollection < Recipe > | Improve this Doc View Source SetHeight Determines if the img tag will receive a height-attribute Declaration public bool? SetHeight { get; } Property Value Type Description System.Nullable < System.Boolean > | Improve this Doc View Source SetWidth Determines if the img tag will receive a width-attribute Declaration public bool? SetWidth { get; } Property Value Type Description System.Nullable < System.Boolean > | Improve this Doc View Source Variants Source-Set rules (comma separated) which will determine what will be generated. Examples: 1x,1.5x,2x - screen resolutions 200w,400w,600w,800w,1000w - pixel sizes 0.5*,1*,1.5*,2* - multipliers of the originally specified pixel size Important: According to the HTML standard you can mix pixel-sizes and multipliers, but not resolutions with any of the other types. Declaration public string Variants { get; } Property Value Type Description System.String | Improve this Doc View Source Width The initial width to assume in this resize, from which other sizes would be calculated. If set to 0, it will be ignored. Declaration public int Width { get; } Property Value Type Description System.Int32 Methods | Improve this Doc View Source Dump() Declaration public string Dump() Returns Type Description System.String"
  },
  "api/dot-net/ToSic.Eav.Apps.IApp.html": {
    "href": "api/dot-net/ToSic.Eav.Apps.IApp.html",
    "title": "Interface IApp | 2sxc 13 / EAV 13",
    "keywords": "Interface IApp An App in memory - for quickly getting things done with the app data, queries etc. Inherited Members IZoneIdentity.ZoneId IAppIdentityLight.AppId Namespace : ToSic.Eav.Apps Assembly : ToSic.Eav.Apps.dll Syntax [PublicApi_Stable_ForUseInYourCode] public interface IApp : IAppIdentityWithPublishingState, IAppIdentity, IZoneIdentity, IAppIdentityLight, IHasMetadata Properties | Improve this Doc View Source Data Data of the app Declaration IAppData Data { get; } Property Value Type Description IAppData | Improve this Doc View Source Folder App Folder Declaration string Folder { get; } Property Value Type Description System.String The folder as configured in the app configuration. | Improve this Doc View Source Hidden If the app should be hidden from the normal app-picker. Important to configure apps once and then hide from normal users. Declaration bool Hidden { get; } Property Value Type Description System.Boolean The hidden-state as configured in the app configuration. | Improve this Doc View Source Metadata The app metadata - like settings, resources etc. Declaration IMetadataOf Metadata { get; } Property Value Type Description IMetadataOf A metadata provider for the app | Improve this Doc View Source Name App Name Declaration string Name { get; } Property Value Type Description System.String The name as configured in the app configuration. | Improve this Doc View Source NameId NameId of the App - usually a string-GUID Declaration string NameId { get; } Property Value Type Description System.String | Improve this Doc View Source Query All queries of the app, to access like App.Query[\"name\"] Declaration IDictionary<string, IQuery> Query { get; } Property Value Type Description System.Collections.Generic.IDictionary < System.String , IQuery > A dictionary with all queries. Internally the dictionary will not be built unless accessed."
  },
  "api/dot-net/ToSic.Eav.Apps.AppIdentity.html": {
    "href": "api/dot-net/ToSic.Eav.Apps.AppIdentity.html",
    "title": "Class AppIdentity | 2sxc 13 / EAV 13",
    "keywords": "Class AppIdentity A full App-Identity. This is either used to pass identities around, or as a base class for more extensive objects which know their full identity. Inheritance System.Object AppIdentity Implements IAppIdentity IZoneIdentity IAppIdentityLight Namespace : ToSic.Eav.Apps Assembly : ToSic.Eav.Core.dll Syntax [PublicApi_Stable_ForUseInYourCode] public class AppIdentity : IAppIdentity, IZoneIdentity, IAppIdentityLight Constructors | Improve this Doc View Source AppIdentity(Int32, Int32) App identity containing zone/app combination Declaration public AppIdentity(int zoneId, int appId) Parameters Type Name Description System.Int32 zoneId System.Int32 appId | Improve this Doc View Source AppIdentity(IAppIdentity) This is just for extracting the Identity-part of something that may have much more information Declaration public AppIdentity(IAppIdentity parent) Parameters Type Name Description IAppIdentity parent Properties | Improve this Doc View Source AppId The app id as used internally Declaration public int AppId { get; } Property Value Type Description System.Int32 The App ID this thing belongs to | Improve this Doc View Source ZoneId ID of the zone (EAV Tenant) Declaration public int ZoneId { get; } Property Value Type Description System.Int32 The zone ID this thing belongs to Implements IAppIdentity IZoneIdentity IAppIdentityLight"
  },
  "api/dot-net/ToSic.Eav.LookUp.LookUpBase.html": {
    "href": "api/dot-net/ToSic.Eav.LookUp.LookUpBase.html",
    "title": "Class LookUpBase | 2sxc 13 / EAV 13",
    "keywords": "Class LookUpBase Base Class to create your own LookUp Class - used by all Look-Ups. Read more about this in LookUp System Inheritance System.Object LookUpBase LookUpIn<T> LookUpInDataTarget LookUpInDictionary LookUpInLookUps LookUpInNameValueCollection LookUpInDnnPropertyAccess Implements ILookUp Namespace : ToSic.Eav.LookUp Assembly : ToSic.Eav.Core.dll Syntax [PublicApi_Stable_ForUseInYourCode] public abstract class LookUpBase : ILookUp Properties | Improve this Doc View Source Name Gets the Name of this LookUp, e.g. QueryString or PipelineSettings Declaration public string Name { get; protected set; } Property Value Type Description System.String The name which is used to identify this LookUp, like in a ILookUpEngine Methods | Improve this Doc View Source Format(Boolean) Declaration public static string Format(bool value) Parameters Type Name Description System.Boolean value Returns Type Description System.String | Improve this Doc View Source Format(DateTime) Declaration public static string Format(DateTime value) Parameters Type Name Description System.DateTime value Returns Type Description System.String | Improve this Doc View Source Get(String) Gets a value by Name/key, will simply return the string or an empty string, in rare cases a null-value. Declaration public virtual string Get(string key) Parameters Type Name Description System.String key Returns Type Description System.String The resolved value, or an empty string if not found. Note that it could also resolve to an empty string if found - use Has to check for that case. | Improve this Doc View Source Get(String, String) Gets a value by Name/key and tries to format it in a special way (like for dates) Declaration public abstract string Get(string key, string format) Parameters Type Name Description System.String key Name of the Property System.String format Format String Returns Type Description System.String Implements ILookUp"
  },
  "api/dot-net/ToSic.Eav.LookUp.ILookUpEngineResolver.html": {
    "href": "api/dot-net/ToSic.Eav.LookUp.ILookUpEngineResolver.html",
    "title": "Interface ILookUpEngineResolver | 2sxc 13 / EAV 13",
    "keywords": "Interface ILookUpEngineResolver An object implementing this interface can provide an engine for the current context. It's important so that code can easily ask for the current engine, but that the real implementation is dependency-injected later on, as each environment (DNN, Nop, etc.) can provide different initial engines. Read more about this in LookUp System Inherited Members IHasLog.Log Namespace : ToSic.Eav.LookUp Assembly : ToSic.Eav.Core.dll Syntax [InternalApi_DoNotUse_MayChangeWithoutNotice] public interface ILookUpEngineResolver : IHasLog<ILookUpEngineResolver>, IHasLog Methods | Improve this Doc View Source GetLookUpEngine(Int32) Get the engine for the current execution instance. Declaration ILookUpEngine GetLookUpEngine(int moduleId) Parameters Type Name Description System.Int32 moduleId The instance ID - should be 0 if unknown Returns Type Description ILookUpEngine"
  },
  "api/dot-net/ToSic.Eav.Data.IDataBuilder.html": {
    "href": "api/dot-net/ToSic.Eav.Data.IDataBuilder.html",
    "title": "Interface IDataBuilder | 2sxc 13 / EAV 13",
    "keywords": "Interface IDataBuilder This is a Builder-Object which is used to create any kind of data. Get it using Dependency Injection Namespace : ToSic.Eav.Data Assembly : ToSic.Eav.Core.dll Syntax [PublicApi] public interface IDataBuilder Methods | Improve this Doc View Source Attribute(String, String, String, ValueTypes, IList<IValue>) Create a new attribute for adding to an Entity. Declaration IAttribute Attribute(string name, string noParamOrder = \"Rule: All params must be named (https://r.2sxc.org/named-params)\", string typeName = null, ValueTypes type = ValueTypes.Undefined, IList<IValue> values = null) Parameters Type Name Description System.String name System.String noParamOrder see Convention: Named Parameters System.String typeName optional type name as string, like \"String\" or \"Entity\" - note that type OR typeName must be provided ValueTypes type optional type code - note that type OR typeName must be provided System.Collections.Generic.IList < IValue > values list of values to add to this attribute Returns Type Description IAttribute | Improve this Doc View Source Entities(IEnumerable<Dictionary<String, Object>>, String, Int32, String, String, IContentType) Convert a list of value-dictionaries dictionary into a list of entities this assumes that the entities don't have an own id or guid, otherwise you should use the single-item command. Read more about DataSource API: DataBuilder.Entity(...) Declaration IEnumerable<IEntity> Entities(IEnumerable<Dictionary<string, object>> itemValues, string noParamOrder = \"Rule: All params must be named (https://r.2sxc.org/named-params)\", int appId = 0, string titleField = null, string typeName = \"unspecified\", IContentType type = null) Parameters Type Name Description System.Collections.Generic.IEnumerable < System.Collections.Generic.Dictionary < System.String , System.Object >> itemValues list of value-dictionaries System.String noParamOrder see Convention: Named Parameters System.Int32 appId optional app id for this item, defaults to the current app System.String titleField which field should be access if every something wants to know the title of this item System.String typeName an optional type-name - usually not needed, defaults to \"unspecified\"; alternatively you can specify the type directly IContentType type an optional type object - use this OR the typename to specify a type Returns Type Description System.Collections.Generic.IEnumerable < IEntity > | Improve this Doc View Source Entity(Dictionary<String, Object>, String, Int32, Int32, String, String, IContentType, Nullable<Guid>, Nullable<DateTime>, Nullable<DateTime>) Create an Entity using a dictionary of values. Read more about DataSource API: DataBuilder.Entity(...) Declaration IEntity Entity(Dictionary<string, object> values = null, string noParamOrder = \"Rule: All params must be named (https://r.2sxc.org/named-params)\", int appId = 0, int id = 0, string titleField = null, string typeName = \"unspecified\", IContentType type = null, Guid? guid = default(Guid? ), DateTime? created = default(DateTime? ), DateTime? modified = default(DateTime? )) Parameters Type Name Description System.Collections.Generic.Dictionary < System.String , System.Object > values dictionary of values System.String noParamOrder see Convention: Named Parameters System.Int32 appId optional app id for this item, defaults to the current app System.Int32 id an optional id for this item, defaults to 0 System.String titleField which field should be access if every something wants to know the title of this item System.String typeName an optional type-name - usually not needed, defaults to \"unspecified\"; alternatively you can specify the type directly IContentType type an optional type object - use this OR the typename to specify a type System.Nullable < System.Guid > guid an optional guid for this item, defaults to empty guid System.Nullable < System.DateTime > created creation timestamp System.Nullable < System.DateTime > modified modified timestamp Returns Type Description IEntity | Improve this Doc View Source Type(String) Create a fake content-type using the specified name. Declaration IContentType Type(string typeName) Parameters Type Name Description System.String typeName Name to use for this content-type Returns Type Description IContentType"
  },
  "api/dot-net/ToSic.Eav.Caching.ICacheExpiring.html": {
    "href": "api/dot-net/ToSic.Eav.Caching.ICacheExpiring.html",
    "title": "Interface ICacheExpiring | 2sxc 13 / EAV 13",
    "keywords": "Interface ICacheExpiring Marks objects which are cache-based, and which may contain obsolete cached data. Inherited Members ITimestamped.CacheTimestamp Namespace : ToSic.Eav.Caching Assembly : ToSic.Eav.Core.dll Syntax [InternalApi_DoNotUse_MayChangeWithoutNotice(\"this is just fyi\")] public interface ICacheExpiring : ITimestamped Methods | Improve this Doc View Source CacheChanged(Int64) Detect if the cache has old data, by comparing it to a timestamp which may be newer. This is implemented in each object, because sometimes it compares its own timestamp, sometimes that of another underlying object. Declaration bool CacheChanged(long newCacheTimeStamp) Parameters Type Name Description System.Int64 newCacheTimeStamp New time stamp to compare with Returns Type Description System.Boolean True if the timestamps differ, false if it's the same"
  },
  "api/dot-net/ToSic.Sxc.Data.DynamicJacket.html": {
    "href": "api/dot-net/ToSic.Sxc.Data.DynamicJacket.html",
    "title": "Class DynamicJacket | 2sxc 13 / EAV 13",
    "keywords": "Class DynamicJacket Case insensitive dynamic read-object for JSON. Used in various cases where you start with JSON and want to provide the contents to custom code without having to mess with JS/C# code style differences. You will usually do things like AsDynamic(jsonString).FirstName etc. Inheritance System.Object System.Dynamic.DynamicObject DynamicJacketBase < Newtonsoft.Json.Linq.JObject > DynamicJacket Implements System.Dynamic.IDynamicMetaObjectProvider System.Collections.Generic.IReadOnlyList < System.Object > System.Collections.Generic.IReadOnlyCollection < System.Object > System.Collections.Generic.IEnumerable < System.Object > System.Collections.IEnumerable IWrapper < Newtonsoft.Json.Linq.JObject > Inherited Members DynamicJacketBase<JObject>.GetContents() DynamicJacketBase<JObject>.IEnumerable.GetEnumerator() DynamicJacketBase<JObject>.ToString() DynamicJacketBase<JObject>.Get(String) DynamicJacketBase<JObject>.Count DynamicJacketBase<JObject>._Dump(String[], String, ILog) Namespace : ToSic.Sxc.Data Assembly : ToSic.Sxc.dll Syntax [InternalApi_DoNotUse_MayChangeWithoutNotice(\"just use the objects from AsDynamic, don't use this directly\")] [JsonConverter(typeof(DynamicJsonConverter))] public class DynamicJacket : DynamicJacketBase<JObject>, IDynamicMetaObjectProvider, IReadOnlyList<object>, IReadOnlyCollection<object>, IEnumerable<object>, IEnumerable, IWrapper<JObject>, ISxcDynamicObject, ICanGetByName, IPropertyLookup, IHasJsonSource Properties | Improve this Doc View Source IsList Declaration public override bool IsList { get; } Property Value Type Description System.Boolean Overrides ToSic.Sxc.Data.DynamicJacketBase<Newtonsoft.Json.Linq.JObject>.IsList | Improve this Doc View Source Item[Int32] Declaration public override object this[int index] { get; } Parameters Type Name Description System.Int32 index Property Value Type Description System.Object Overrides ToSic.Sxc.Data.DynamicJacketBase<Newtonsoft.Json.Linq.JObject>.Item[System.Int32] | Improve this Doc View Source Item[String] Access the properties of this object. Declaration public object this[string key] { get; } Parameters Type Name Description System.String key the key, case-insensitive Property Value Type Description System.Object A value (string, int etc.), DynamicJacket or DynamicJacketList Remarks Note that this accessor is case insensitive | Improve this Doc View Source Item[String, Boolean] Access the properties of this object. Declaration public object this[string key, bool caseSensitive] { get; } Parameters Type Name Description System.String key the key System.Boolean caseSensitive true if case-sensitive, false if not Property Value Type Description System.Object A value (string, int etc.), DynamicJacket or DynamicJacketList Methods | Improve this Doc View Source FindValueOrNull(String, StringComparison, ILog) Declaration protected override object FindValueOrNull(string name, StringComparison comparison, ILog parentLogOrNull) Parameters Type Name Description System.String name System.StringComparison comparison ILog parentLogOrNull Returns Type Description System.Object Overrides ToSic.Sxc.Data.DynamicJacketBase<Newtonsoft.Json.Linq.JObject>.FindValueOrNull(System.String, System.StringComparison, ToSic.Eav.Logging.ILog) | Improve this Doc View Source GetEnumerator() Enable enumeration. Will return the keys, not the values. Use the [key] accessor to get the values as DynamicJacket or DynamicJacketList Declaration public override IEnumerator<object> GetEnumerator() Returns Type Description System.Collections.Generic.IEnumerator < System.Object > the string names of the keys Overrides ToSic.Sxc.Data.DynamicJacketBase<Newtonsoft.Json.Linq.JObject>.GetEnumerator() | Improve this Doc View Source TryGetMember(GetMemberBinder, out Object) Performs a case-insensitive value look-up Declaration public override bool TryGetMember(GetMemberBinder binder, out object result) Parameters Type Name Description System.Dynamic.GetMemberBinder binder .net binder object System.Object result usually a DynamicJacket , DynamicJacketList or null Returns Type Description System.Boolean always returns true, to avoid errors Overrides ToSic.Sxc.Data.DynamicJacketBase<Newtonsoft.Json.Linq.JObject>.TryGetMember(System.Dynamic.GetMemberBinder, System.Object) Implements System.Dynamic.IDynamicMetaObjectProvider System.Collections.Generic.IReadOnlyList<T> System.Collections.Generic.IReadOnlyCollection<T> System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable IWrapper<T>"
  },
  "api/dot-net/ToSic.Sxc.Adam.html": {
    "href": "api/dot-net/ToSic.Sxc.Adam.html",
    "title": "Namespace ToSic.Sxc.Adam | 2sxc 13 / EAV 13",
    "keywords": "Namespace ToSic.Sxc.Adam Everything related to ADAM - the automatic digital asset system in 2sxc. When you use AsAdam on any dynamic entity, you'll get IFolder objects which will also contain IFile files. Tip Read about adam in the ADAM specs Interfaces IAsset Describes an ADAM (Automatic Digital Asset Management) asset. This contains properties which both IFolder and IFile have in common. IFile An ADAM (Automatic Digital Asset Management) file This simple interface assumes that it uses int-IDs. IFolder An ADAM (Automatic Digital Asset Management) folder. This simple interface assumes that it uses int-IDs."
  },
  "api/dot-net/ToSic.Eav.Logging.IHasLog.html": {
    "href": "api/dot-net/ToSic.Eav.Logging.IHasLog.html",
    "title": "Interface IHasLog | 2sxc 13 / EAV 13",
    "keywords": "Interface IHasLog Objects which can log their activity, and share their log with other objects in the chain to produce extensive internal logging. Namespace : ToSic.Eav.Logging Assembly : ToSic.Eav.Core.dll Syntax [InternalApi_DoNotUse_MayChangeWithoutNotice(\"this is just fyi\")] public interface IHasLog Properties | Improve this Doc View Source Log The log object which contains the log and can add more logs to the list. Declaration ILog Log { get; } Property Value Type Description ILog"
  },
  "api/dot-net/ToSic.Sxc.Services.IToolbarService.html": {
    "href": "api/dot-net/ToSic.Sxc.Services.IToolbarService.html",
    "title": "Interface IToolbarService | 2sxc 13 / EAV 13",
    "keywords": "Interface IToolbarService Special helper to generate edit toolbars in the front-end. It is used in combination with @Edit.Toolbar(...) . It's especially useful for complex rules like Metadata-buttons which are more complex to create. Namespace : ToSic.Sxc.Services Assembly : ToSic.Sxc.dll Syntax [PublicApi] public interface IToolbarService Remarks History Added in 2sxc 13 Methods | Improve this Doc View Source Default(String, String) Build a Toolbar configuration using the default template/buttons to use with @Edit.Toolbar It's a fluid API, so the returned object can be extended with further Add(...) or special helpers to quickly create complex configurations. For guidance what to give it, also check out the toolbar docs . Declaration IToolbarBuilder Default(string noParamOrder = \"Rule: All params must be named (https://r.2sxc.org/named-params)\", string ui = null) Parameters Type Name Description System.String noParamOrder see Convention: Named Parameters System.String ui Parameters for the UI, like color=red - see toolbar docs for all possible options Returns Type Description IToolbarBuilder Remarks History Added in 2sxc 13 | Improve this Doc View Source Empty(String, String) Build a Toolbar configuration using the empty toolbar to use with @Edit.Toolbar It's a fluid API, so the returned object can be extended with further Add(...) or special helpers to quickly create complex configurations. For guidance what to give it, also check out the toolbar docs . Declaration IToolbarBuilder Empty(string noParamOrder = \"Rule: All params must be named (https://r.2sxc.org/named-params)\", string ui = null) Parameters Type Name Description System.String noParamOrder see Convention: Named Parameters System.String ui Parameters for the UI, like color=red - see toolbar docs for all possible options Returns Type Description IToolbarBuilder Remarks History Added in 2sxc 13 | Improve this Doc View Source Metadata(Object, String, String, String, String) Build an empty Toolbar with a Metadata button. This is the same as .Empty().Metadata(target, contentType); Declaration IToolbarBuilder Metadata(object target, string contentTypes, string noParamOrder = \"Rule: All params must be named (https://r.2sxc.org/named-params)\", string ui = null, string parameters = null) Parameters Type Name Description System.Object target The target object which should receive metadata. Must support IHasMetadata System.String contentTypes Name of one content-type for which to generate the button. In future may also allow more content-types System.String noParamOrder see Convention: Named Parameters System.String ui Parameters for the UI, like color=red - see toolbar docs for all possible options System.String parameters Parameters for the metadata-command Returns Type Description IToolbarBuilder Remarks History Added in 2sxc 13"
  },
  "api/dot-net/ToSic.Sxc.Services.ISecureDataService.html": {
    "href": "api/dot-net/ToSic.Sxc.Services.ISecureDataService.html",
    "title": "Interface ISecureDataService | 2sxc 13 / EAV 13",
    "keywords": "Interface ISecureDataService Helper to work with secure / encrypted data. Namespace : ToSic.Sxc.Services Assembly : ToSic.Sxc.dll Syntax [PublicApi] public interface ISecureDataService Remarks History Added in 2sxc 12.05 Methods | Improve this Doc View Source Parse(String) Declaration ISecureData<string> Parse(string value) Parameters Type Name Description System.String value Returns Type Description ISecureData < System.String >"
  },
  "api/dot-net/ToSic.Sxc.Edit.html": {
    "href": "api/dot-net/ToSic.Sxc.Edit.html",
    "title": "Namespace ToSic.Sxc.Edit | 2sxc 13 / EAV 13",
    "keywords": "Namespace ToSic.Sxc.Edit Interfaces IToolbarBuilder The toolbar builder helps you create Toolbar configurations for the UI. Note that it has a fluid API, and each method/use returns a fresh object with the updated configuration."
  },
  "api/dot-net/ToSic.Sxc.Dnn.Code.html": {
    "href": "api/dot-net/ToSic.Sxc.Dnn.Code.html",
    "title": "Namespace ToSic.Sxc.Dnn.Code | 2sxc 13 / EAV 13",
    "keywords": "Namespace ToSic.Sxc.Dnn.Code Interfaces IDnnDynamicCode This interface extends the IAppAndDataHelpers with the DNN Context. It's important, because if 2sxc also runs on other CMS platforms, then the Dnn Context won't be available, so it's in a separate interface. IDnnDynamicCodeAdditions This interface extends the IAppAndDataHelpers with the DNN Context. It's important, because if 2sxc also runs on other CMS platforms, then the Dnn Context won't be available, so it's in a separate interface."
  },
  "api/dot-net/ToSic.Eav.Apps.Zone.html": {
    "href": "api/dot-net/ToSic.Eav.Apps.Zone.html",
    "title": "Class Zone | 2sxc 13 / EAV 13",
    "keywords": "Class Zone Contains all the basic infos about a Zone - usually cached Inheritance System.Object Zone Implements IZoneIdentity Namespace : ToSic.Eav.Apps Assembly : ToSic.Eav.Core.dll Syntax [InternalApi_DoNotUse_MayChangeWithoutNotice(\"this is just fyi\")] public class Zone : IZoneIdentity Constructors | Improve this Doc View Source Zone(Int32, Int32, Int32, Dictionary<Int32, String>, List<DimensionDefinition>) Declaration public Zone(int zoneId, int primaryAppId, int contentAppId, Dictionary<int, string> apps, List<DimensionDefinition> languages) Parameters Type Name Description System.Int32 zoneId System.Int32 primaryAppId System.Int32 contentAppId System.Collections.Generic.Dictionary < System.Int32 , System.String > apps System.Collections.Generic.List < ToSic.Eav.Data.DimensionDefinition > languages Properties | Improve this Doc View Source Apps All Apps in this Zone with Id and Name Declaration public Dictionary<int, string> Apps { get; } Property Value Type Description System.Collections.Generic.Dictionary < System.Int32 , System.String > | Improve this Doc View Source DefaultAppId AppId of the default App in this Zone Declaration public int DefaultAppId { get; } Property Value Type Description System.Int32 | Improve this Doc View Source Languages Languages available in this Zone Declaration public List<DimensionDefinition> Languages { get; } Property Value Type Description System.Collections.Generic.List < ToSic.Eav.Data.DimensionDefinition > | Improve this Doc View Source PrimaryAppId The Primary App which also contains Settings and shared Metadata WIP #SiteApp v13 Declaration public int PrimaryAppId { get; } Property Value Type Description System.Int32 | Improve this Doc View Source ZoneId ID of the zone (EAV Tenant) Declaration public int ZoneId { get; } Property Value Type Description System.Int32 The zone ID this thing belongs to Implements IZoneIdentity"
  },
  "api/dot-net/ToSic.Eav.LookUp.LookUpInNameValueCollection.html": {
    "href": "api/dot-net/ToSic.Eav.LookUp.LookUpInNameValueCollection.html",
    "title": "Class LookUpInNameValueCollection | 2sxc 13 / EAV 13",
    "keywords": "Class LookUpInNameValueCollection Look-Up helper to get something from a standard .net NameValueCollection. Read more about this in LookUp System Inheritance System.Object LookUpBase LookUpInNameValueCollection Implements ILookUp Inherited Members LookUpBase.Name LookUpBase.Get(String) LookUpBase.Format(Boolean) LookUpBase.Format(DateTime) Namespace : ToSic.Eav.LookUp Assembly : ToSic.Eav.Core.dll Syntax [PublicApi_Stable_ForUseInYourCode] public class LookUpInNameValueCollection : LookUpBase, ILookUp Constructors | Improve this Doc View Source LookUpInNameValueCollection(String, NameValueCollection) Declaration public LookUpInNameValueCollection(string name, NameValueCollection list) Parameters Type Name Description System.String name System.Collections.Specialized.NameValueCollection list Methods | Improve this Doc View Source Get(String, String) Gets a value by Name/key and tries to format it in a special way (like for dates) Declaration public override string Get(string key, string format) Parameters Type Name Description System.String key Name of the Property System.String format Format String Returns Type Description System.String Overrides LookUpBase.Get(String, String) Implements ILookUp"
  },
  "api/dot-net/ToSic.Eav.LookUp.LookUpInMetadata.html": {
    "href": "api/dot-net/ToSic.Eav.LookUp.LookUpInMetadata.html",
    "title": "Class LookUpInMetadata | 2sxc 13 / EAV 13",
    "keywords": "Class LookUpInMetadata LookUp things from metadata. This uses EAV Metadata system and will look up Metadata for something. As of now it's hardwired to look up Metadata of Entities. Read more about this in LookUp System Inheritance System.Object LookUpBase LookUpIn < IEntity > LookUpInEntity LookUpInMetadata Implements ILookUp Inherited Members LookUpIn<IEntity>.Data LookUpBase.Name LookUpBase.Get(String) LookUpBase.Format(Boolean) LookUpBase.Format(DateTime) Namespace : ToSic.Eav.LookUp Assembly : ToSic.Eav.Core.dll Syntax [PublicApi_Stable_ForUseInYourCode] public class LookUpInMetadata : LookUpInEntity, ILookUp Constructors | Improve this Doc View Source LookUpInMetadata(String, Guid, IMetadataSource) Constructs the object with pre-filled parameters. It won't access the entity yet, because it's possible that the data-source wouldn't be ready yet. The access to the entity will only occur if it's really needed. Declaration [Obsolete(\"Should not be used, as it doesn't have dimensions included.\")] public LookUpInMetadata(string name, Guid objectId, IMetadataSource metaDataSource) Parameters Type Name Description System.String name Name of the PropertyAccess, e.g. PipelineSettings System.Guid objectId EntityGuid of the Entity to get assigned Entities of IMetadataSource metaDataSource DataSource that provides MetaData | Improve this Doc View Source LookUpInMetadata(String, IEntity, String[]) Alternate constructor where the entity with attached metadata is already known. The attached metadata will be used as source for the look-up Declaration public LookUpInMetadata(string name, IEntity entityWithMetadata, string[] dimensions) Parameters Type Name Description System.String name Source name IEntity entityWithMetadata Entity whose metadata we'll use System.String [] dimensions language / dimension data for lookup Methods | Improve this Doc View Source Get(String, String) Special lookup command with format-provider. Declaration public override string Get(string key, string format) Parameters Type Name Description System.String key System.String format Returns Type Description System.String Overrides LookUpInEntity.Get(String, String) Implements ILookUp"
  },
  "api/dot-net/ToSic.Eav.Data.IContentTypeAttribute.html": {
    "href": "api/dot-net/ToSic.Eav.Data.IContentTypeAttribute.html",
    "title": "Interface IContentTypeAttribute | 2sxc 13 / EAV 13",
    "keywords": "Interface IContentTypeAttribute Represents an Attribute definition in a ContentType. This is the base for attributes in IContentType Inherited Members IAttributeBase.Name IAttributeBase.Type IAttributeBase.ControlledType IHasPermissions.Permissions IAppIdentityLight.AppId IHasMetadata.Metadata Namespace : ToSic.Eav.Data Assembly : ToSic.Eav.Core.dll Syntax [PublicApi_Stable_ForUseInYourCode] public interface IContentTypeAttribute : IAttributeBase, IHasPermissions, IAppIdentityLight, IHasMetadata Properties | Improve this Doc View Source AttributeId additional info for the persistence layer Declaration int AttributeId { get; } Property Value Type Description System.Int32 | Improve this Doc View Source IsTitle tells us if this attribute is the title Declaration bool IsTitle { get; } Property Value Type Description System.Boolean | Improve this Doc View Source SortOrder position of this attribute in the list of attributes Declaration int SortOrder { get; } Property Value Type Description System.Int32"
  },
  "api/dot-net/ToSic.Eav.Apps.Assets.IFolder.html": {
    "href": "api/dot-net/ToSic.Eav.Apps.Assets.IFolder.html",
    "title": "Interface IFolder | 2sxc 13 / EAV 13",
    "keywords": "Interface IFolder Describes a folder as provided by the underlying environment (like DNN) Inherited Members IAsset.Created IAsset.Id IAsset.ParentId IAsset.Modified IAsset.Name IAsset.Path IAsset.PhysicalPath Namespace : ToSic.Eav.Apps.Assets Assembly : ToSic.Eav.Apps.dll Syntax [PublicApi_Stable_ForUseInYourCode] public interface IFolder : IAsset Properties | Improve this Doc View Source HasChildren Information if this folder has things inside it - other folders, files etc. Declaration bool HasChildren { get; set; } Property Value Type Description System.Boolean true if it has items inside it, false if not"
  },
  "api/dot-net/ToSic.Sxc.Images.IResponsivePicture.html": {
    "href": "api/dot-net/ToSic.Sxc.Images.IResponsivePicture.html",
    "title": "Interface IResponsivePicture | 2sxc 13 / EAV 13",
    "keywords": "Interface IResponsivePicture Will generate a responsive <picture> tag with all the <source> and <img> tags necessary so the browser can get the best image for the current display. Warning This is Beta functionality and still work in progress. This means the APIs can still change until it's final. It's awesome, so have fun trying it out. But note that if you already use it, you may need make changes after an upgrade. Inherited Members IResponsiveImage.Alt IResponsiveImage.Class IResponsiveImage.Img IResponsiveImage.ShowAll IResponsiveImage.Height IResponsiveImage.Width IResponsiveImage.SrcSet IResponsiveImage.Sizes IResponsiveImage.Url Namespace : ToSic.Sxc.Images Assembly : ToSic.Sxc.dll Syntax [InternalApi_DoNotUse_MayChangeWithoutNotice(\"WIP\")] public interface IResponsivePicture : IResponsiveImage, IHybridHtmlString, IHtmlString Remarks History: BETA Released ca. 2sxc 13.10 Properties | Improve this Doc View Source Picture The picture tag with everything automatically included. See also the RazorBlade Picture docs Declaration Picture Picture { get; } Property Value Type Description ToSic.Razor.Html5.Picture | Improve this Doc View Source Sources The source tags as they were auto-generated, in case you want to build the picture tag manually. Contains many source tags - see RazorBlade Source docs Declaration TagList Sources { get; } Property Value Type Description ToSic.Razor.Markup.TagList"
  },
  "api/dot-net/ToSic.Sxc.Context.IParameters.html": {
    "href": "api/dot-net/ToSic.Sxc.Context.IParameters.html",
    "title": "Interface IParameters | 2sxc 13 / EAV 13",
    "keywords": "Interface IParameters Collection of url parameters of the current page Has a special ToString() implementation, which gives you the parameters for re-use in other scenarios...? Inherited Members System.Collections.Generic.IReadOnlyDictionary<System.String, System.String>.ContainsKey(System.String) System.Collections.Generic.IReadOnlyDictionary<System.String, System.String>.TryGetValue(System.String, System.String) System.Collections.Generic.IReadOnlyDictionary<System.String, System.String>.Item[System.String] System.Collections.Generic.IReadOnlyDictionary<System.String, System.String>.Keys System.Collections.Generic.IReadOnlyDictionary<System.String, System.String>.Values System.Collections.Generic.IReadOnlyCollection<System.Collections.Generic.KeyValuePair<System.String, System.String>>.Count System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.String, System.String>>.GetEnumerator() System.Collections.IEnumerable.GetEnumerator() Namespace : ToSic.Sxc.Context Assembly : ToSic.Sxc.dll Syntax [InternalApi_DoNotUse_MayChangeWithoutNotice] public interface IParameters : IReadOnlyDictionary<string, string>, IReadOnlyCollection<KeyValuePair<string, string>>, IEnumerable<KeyValuePair<string, string>>, IEnumerable Methods | Improve this Doc View Source Add(String) Add another URL parameter and return a new IParameters . If the name/key already exists, it will extend it, add a simple Otherwise please use Set(String, String) Important: this does not change the current object, it returns a new object. Declaration IParameters Add(string name) Parameters Type Name Description System.String name Returns Type Description IParameters | Improve this Doc View Source Add(String, String) Add another URL parameter and return a new IParameters . If the name/key already exists, it will extend it, so the parameter will have 2 values. Otherwise please use Set(String, String) Important: this does not change the current object, it returns a new object. Declaration IParameters Add(string name, string value) Parameters Type Name Description System.String name System.String value Returns Type Description IParameters | Improve this Doc View Source Remove(String) Remove a parameter and return a new IParameters . Important: this does not change the current object, it returns a new object. Declaration IParameters Remove(string name) Parameters Type Name Description System.String name Returns Type Description IParameters | Improve this Doc View Source Set(String) Add another URL parameter and return a new IParameters . If the name/key already exists, it will just overwrite it. Important: this does not change the current object, it returns a new object. Declaration IParameters Set(string name) Parameters Type Name Description System.String name Returns Type Description IParameters | Improve this Doc View Source Set(String, String) Add another URL parameter and return a new IParameters . If the name/key already exists, it will just overwrite it. Important: this does not change the current object, it returns a new object. Declaration IParameters Set(string name, string value) Parameters Type Name Description System.String name System.String value Returns Type Description IParameters | Improve this Doc View Source ToString() ToString is especially implemented, to give you the parameters again as they were originally given on the page. Declaration [InternalApi_DoNotUse_MayChangeWithoutNotice(\"wip\")] string ToString() Returns Type Description System.String"
  },
  "api/dot-net/ToSic.Sxc.Context.ICmsView.html": {
    "href": "api/dot-net/ToSic.Sxc.Context.ICmsView.html",
    "title": "Interface ICmsView | 2sxc 13 / EAV 13",
    "keywords": "Interface ICmsView View context information - this is Experimental / BETA WIP Namespace : ToSic.Sxc.Context Assembly : ToSic.Sxc.dll Syntax [PublicApi] public interface ICmsView : IHasMetadata Remarks Added in 2sxc 12.02 Properties | Improve this Doc View Source Edition Edition used - if any. Otherwise empty string. ü™í Use in Razor: CmsContext.View.Edition Declaration string Edition { get; } Property Value Type Description System.String | Improve this Doc View Source Id View configuration ID ü™í Use in Razor: CmsContext.View.Id Declaration int Id { get; } Property Value Type Description System.Int32 | Improve this Doc View Source Identifier An optional identifier which the View configuration can provide. Use this when you want to use the same template but make minor changes based on the View selected (like change the number of columns). Usually you will use either this OR the Settings ü™í Use in Razor: CmsContext.View.Identifier Declaration string Identifier { get; } Property Value Type Description System.String | Improve this Doc View Source Metadata Get the views Metadata Declaration IMetadataOf Metadata { get; } Property Value Type Description IMetadataOf Remarks Added in v12.10 | Improve this Doc View Source Name Name of the view as configured - note that because of i18n it could be different depending on the language. To clearly identify a view, use the Identifier or use Settings ü™í Use in Razor: CmsContext.View.Name Declaration string Name { get; } Property Value Type Description System.String"
  },
  "api/dot-net/ToSic.Eav.Security.html": {
    "href": "api/dot-net/ToSic.Eav.Security.html",
    "title": "Namespace ToSic.Eav.Security | 2sxc 13 / EAV 13",
    "keywords": "Namespace ToSic.Eav.Security Security is a first-class citizen in the EAV. It allows you to set custom read/write/update/draft-only etc. permissions on Apps, Content-Types, Entities and even allow/restrict asset management. Classes Permission Helper object for constants related to the permissions-type Interfaces IHasPermissions Anything that uses IHasPermissions can have custom permissions. This interface provides access to the information stored in the custom permissions."
  },
  "abyss/releases/history/v09/_brc09.html": {
    "href": "abyss/releases/history/v09/_brc09.html",
    "title": "Breaking Changes in EAV and 2sxc Version 9 | 2sxc 13 / EAV 13",
    "keywords": "Breaking Changes in EAV and 2sxc Version 9 We try to minimize breaking changes, and most breaking changes won't affect your work, because it's internal API. We're documenting it here to ensure you know what happened, in case you still run into this. Version 9.20.00 (2018-03-04) Minor breaking change in ADAM properties, like Id instead of FolderID which was a leftover of Dnn naming. see full blog post Version 09.08.00 (2017-11-28) Minor breaking change List<IEntity> instead of Dictionary<int, IEntity> on the IDataSource see full blog post Version 09.03.00 (2017-10-08) Breaking change on inconsistent naming ToSic.Eav.IEntity instead of ToSic.Eav.Interfaces.IEntity . see full blog post"
  },
  "abyss/releases/history/v08/_all08.html": {
    "href": "abyss/releases/history/v08/_all08.html",
    "title": "Changes Version 8 | 2sxc 13 / EAV 13",
    "keywords": "Changes Version 8 Changes Version 8.00 - 8.8 Didn't find time to document this :) Changes Version 8.09 [x] Very Rich Content (Inner Content 2.0) [x] Item-Delete directly from in-page toolbar Changes Version 8.10 [x] Shuffle data sources (to randomize items) [x] Public (anonyomous) REST API for query and read/write content-items Changes Version 8.11-8.12 Mostly smaller bugfixes"
  },
  "abyss/releases/history/v08/index.html": {
    "href": "abyss/releases/history/v08/index.html",
    "title": "All in EAV and 2sxc Version 8 | 2sxc 13 / EAV 13",
    "keywords": "All in EAV and 2sxc Version 8 Changes Version 8 Changes Version 8.00 - 8.8 Didn't find time to document this :) Changes Version 8.09 [x] Very Rich Content (Inner Content 2.0) [x] Item-Delete directly from in-page toolbar Changes Version 8.10 [x] Shuffle data sources (to randomize items) [x] Public (anonyomous) REST API for query and read/write content-items Changes Version 8.11-8.12 Mostly smaller bugfixes"
  },
  "abyss/releases/roadmap.html": {
    "href": "abyss/releases/roadmap.html",
    "title": "Roadmap of EAV and 2sxc - Vision of the Future | 2sxc 13 / EAV 13",
    "keywords": "Roadmap of EAV and 2sxc - Vision of the Future The 2sxc roadmap contains the things we think are fairly important to tackle next. Since we're all working for free, there is no commitment to do this in the order you see below. And sometimes a customer will need a feature quickly - and pay for it - then it will appear sooner. You too can sponsor a feature! Priorities we're Working on 2022 Q1 (V13) Done but maybe not fully documented Improve Tutorials massively View Metadata Oqtane Website Mode which can be indexed in Google Improve Feature-Management IFeaturesService Shared Apps across Sites Enable editing of Shared Templates / files Enable shared APIs Language Editing Permissions based on roles/users Disable translation of specific content-types Dnn Factory replacement to render module or get DynamicCode outside of 2sxc Fully integrate with Dnn Dependency Injection Improve DI Scopes to Module-Level WIP Enable viewing read-only data / configuration to better discover options/features Patron-System, where sponsors of 2sxc get some extra features Enterprise Features which will be availabe for bigger sponsors IImageService Standardize how to integrate into other systems (non-Dnn/Oqtane) Provide more help UIs for using REST APIs Make the Metadata-System completely discoverable Update another ca. 5 Apps to the lastest/greatest conventions Priorities 2022 Q2 Note-feature to add notes to various things like entities, fields etc. Provide Page-Level Metadata and Settings (outside of a specific App) IToolbarService and ToolbarBuilder Improve Formulas with Features Blazor integration for use in client-side Blazor Enterprise Lightspeed Cache V13 Future / Other Support for persisting data to the file-system instead of DB Files DataSource ADAM DataSource Pages DataSource Navigation DataSource Database re-organization ca. Dec. 2021 ...or whatever is needed next :)"
  },
  "basics/app/export-import/index.html": {
    "href": "basics/app/export-import/index.html",
    "title": "App Export / Import | 2sxc 13 / EAV 13",
    "keywords": "App Export / Import <!-- Data Highlights --> <!-- ADAM --> <!-- Server --> <!-- Prepare --> <!-- Data Source --> <!-- Optimzers --> <!-- Process / Awesomize --> <!-- Libraries --> <!-- data formats --> <!-- Browser --> <!-- Frameworks --> <!-- App show parts --> <!-- Interact parts --> <!-- Edit parts --> <!-- Edit UI parts --> <!-- SPA parts --> <!-- Custom highlight boxes - can be controlled by in-page CSS --> you are here (click to zoom) - discover the stack .context-box-summary .data-all, .context-box-summary .query-app, .context-box-summary .process-razor, .context-box-summary .process-web-api-app, .context-box-summary .edit-ui-custom { visibility: visible; } Every App and parts of it can be Exported and Imported : Entire App as ZIP App Data for git-versioning as XML Parts of the App Data as XML Content-Types as JSON single Content-Items / Entities as JSON Tables of Content-Items as XML View Definitions together with the Template as JSON Queries as JSON You can also create custom exports as CSV etc. using Razor. Export / Import Anything üëâ most of this is documented here: https://2sxc.org/en/learn/import-export"
  },
  "basics/app/content-app/index.html": {
    "href": "basics/app/content-app/index.html",
    "title": "The Content App | 2sxc 13 / EAV 13",
    "keywords": "The Content App The Content-App is a special App in each Site which is automatically created whenever you start using 2sxc on a site. The core purpose is content-editing like adding text, images, links and simple decorations (like separation lines) to the page. Tip The content App has some special behavior and limitations by design. Special Behavior of The Content App When adding the Content-App to a page, the dialog which appears will ask the editor to choose the Content-Type (like Image ) and then how to show it (like Full-Size ). This is different from all other Apps where the editor will first choose the App (like Blog ), and then the functionality (like Tag-Cloud ). The Content App is quickly added as another module: It will first show the Content Type picker: ...and then the View to use for this Content-Type. Pre-Built Content Templates The Content App can auto-install prepared templates which are specifically designed for this use case. This is why the installer looks different for The Content App than for normal Apps. Tip Instead of installing the default set of Content-Types and Views, you can also skip this and just configure your own or import your preferred default Content-App. Use this ‚úÖ checklist to create a custom template app Use this ‚úÖ checklist to import the custom app Special Limitations of The Content App Since the Content-App is always there by default and the purpose is to add/edit simple content, it's limited by design to not have some functionality other Apps have. This is mainly to protect the developer from building solutions with a bad user experience, since anything complex should be self-contained in it's own App. The limitations are: No VisualQuery Now Custom Web APIs Technical Details Each Site/Portal has an own Content App The ID of the Content-App is Content while other Apps have a GUID as the ID Learn More The App Folder Structure App Icons Bundling / Optimizing assets ‚úÖ How to reset the content-app to factory defaults History Introduced in 2sxc 1.0 Enhanced to have multi-language App Resources and Settings 2sxc v11 Extended to contain Settings and Resources which apply to the whole site in v12.04 Massively enhanced to be Hybrid (Dnn/Oqtane) and follow best practices in 12.05 Dropped support for site-wide settings as it's moved to the Primary App in v13.0"
  },
  "basics/app/web-api.html": {
    "href": "basics/app/web-api.html",
    "title": "WebApi in an App | 2sxc 13 / EAV 13",
    "keywords": "WebApi in an App <!-- Data Highlights --> <!-- ADAM --> <!-- Server --> <!-- Prepare --> <!-- Data Source --> <!-- Optimzers --> <!-- Process / Awesomize --> <!-- Libraries --> <!-- data formats --> <!-- Browser --> <!-- Frameworks --> <!-- App show parts --> <!-- Interact parts --> <!-- Edit parts --> <!-- Edit UI parts --> <!-- SPA parts --> <!-- Custom highlight boxes - can be controlled by in-page CSS --> you are here (click to zoom) - discover the stack .context-box-summary .process-apis { visibility: visible; } Every App has built-in WebAPIs for Headless use and you can create your own custom C# Controllers as well. Learn more about WebApi in general Headless WebAPIs in 2sxc 2sxc Custom C# Web APIs"
  },
  "abyss/data-formats/json-v01/metadata.html": {
    "href": "abyss/data-formats/json-v01/metadata.html",
    "title": "JSON Metadata V1 | 2sxc 13 / EAV 13",
    "keywords": "JSON Metadata V1 JSON Data can be Metadata for something. The target reference is stored in the For object. have Metadata which is stored in the Metadata object. üëâ Read more about Metadata . For Information The For is optional and is only specified if this entity is Metadata for something. It gives it the target Reference. This is the structure of the For object For object optional , metadata target reference Target - string name describing the target type as the name is specified in the DB. We don't use the number but the string, in case the number is different on another system Number - the number key optional, only if the key is a number String - the string key optional, only if the key is a string Guid - the guid key optional, only if the key is a guid Example of a Field-Metadata { \"_\": { \"V\": 1 }, \"Entity\": { \"Id\": 423, \"Version\": 1, \"Guid\": \"82bdcdc9-ff37-40e5-8a5c-340a7864c325\", \"Type\": { \"Name\": \"@All\", \"Id\": \"@All\" }, \"Attributes\": { \"String\": { \"Name\": { \"*\": \"Street\" } }, \"Entity\": { \"Calculations\": { \"*\": [] }, \"Errors\": { \"*\": [] }, \"Warnings\": { \"*\": [] } } }, \"For\": { \"Target\": \"EAV Field Properties\", \"Number\": 244 } } } Metadata Items If something has Metadata, it will be included in the Metadata object. This is an array. The Metadata items are built just like an Entity except that it cannot have a For - since the target is already defined. Example - Extract of a Content-Type with Fields having Metadata { \"_\": { \"V\": 1 }, \"ContentType\": { \"Id\": \"3de8e971-9e76-4d77-beda-f754e7b056bd\", \"Name\": \"Content with Preview\", \"Scope\": \"2SexyContent\", \"Description\": \"Content with Preview\", \"Attributes\": [ { \"Name\": \"Title\", \"Type\": \"String\", \"InputType\": \"string-default\", \"IsTitle\": true, \"Metadata\": [ { \"Id\": 447, \"Version\": 1, \"Guid\": \"859745e4-6064-45f1-b96e-35226f6505e9\", \"Type\": { \"Name\": \"@All\", \"Id\": \"@All\" }, \"Attributes\": { \"String\": { \"Name\": { \"*\": \"Title\" } }, \"Entity\": { \"Calculations\": { \"*\": [] }, \"Errors\": { \"*\": [] }, \"Warnings\": { \"*\": [] } } } } ] }, { \"Name\": \"Body\", \"Type\": \"String\", \"InputType\": \"string-wysiwyg\", \"IsTitle\": false, \"Metadata\": [ { \"Id\": 448, \"Version\": 1, \"Guid\": \"f887914e-371b-4c2c-862d-1ad572a9ce5a\", \"Type\": { \"Name\": \"@All\", \"Id\": \"@All\" }, \"Attributes\": { \"String\": { \"DefaultValue\": { \"*\": \"<p> </p>\" }, \"Name\": { \"*\": \"Body\" }, \"Notes\": { \"*\": \"\" } }, \"Entity\": { \"Calculations\": { \"*\": [] }, \"Errors\": { \"*\": [] }, \"Warnings\": { \"*\": [] } }, \"Boolean\": { \"Required\": { \"*\": false }, \"VisibleInEditUI\": { \"*\": true } } } }, { \"Id\": 449, \"Version\": 1, \"Guid\": \"6a01df48-483e-471e-a4a9-3b7c760bbe44\", \"Type\": { \"Name\": \"@String\", \"Id\": \"@String\" }, \"Attributes\": { \"String\": { \"DropdownValues\": { \"*\": \"\" }, \"InputType\": { \"*\": \"wysiwyg\" } }, \"Number\": { \"RowCount\": { \"*\": 1.0 } } } } ] }, ], \"Metadata\": [] } } Special note about Target In all long-term uses of Metadata (like for export/import or in item history) the target is a string. In short-term use like simple WebAPI calls the Target can be the number. Read also JSON Format V1 Blog post about the entity json format History Added in 2sxc 9.4"
  },
  "abyss/_abyss-info.html": {
    "href": "abyss/_abyss-info.html",
    "title": "| 2sxc 13 / EAV 13",
    "keywords": "Important This is probably not for you. Most of the things in the Abyss are not relevant for developers of App, Razor or JavaScript. It focuses on information of how things work internally, integrations with platforms and more."
  },
  "net-code/dependency-injection/index.html": {
    "href": "net-code/dependency-injection/index.html",
    "title": "Depedency Injection in 2sxc and EAV | 2sxc 13 / EAV 13",
    "keywords": "Depedency Injection in 2sxc and EAV Dependency Injection is a way to structure applications and to get Services or Helpers in your code. üëâ We suggest you read the introduction to Dependency Injection How Can I Use Dependency Injection in Razor? Previously this was reserved for internal use. Starting in 2sxc v11.11 all Razor classes have a command called GetService . This is how your code would get a service: using ToSic.Sxc.Services; var page = GetService<IPageService>(); page.AddOpenGraph(\"video\", \"https://2sxc.org/videos/intro.mp4\"); üëâ Read more about GetService in the docs or in the GetService API . How Can I Use Dependency Injection in WebAPIs? Just like with with Razor, 2sxc 11.11 added the same GetService to all WebAPIs. How Can I Use Dependency Injection in Dnn Modules and Skins üëâ Depedency Injection in Dnn Skins and Modules How Can I Use Dependency Injection in Oqtane üëâ Depedency Injection in Oqtane Services My Code May Need You can get just about anything from 2sxc. The most common services you'll request as of 2sxc 12 are in the ToSic.Sxc.Services namespace . History 2sxc introduced Dependency Injection 1.1 in v9 (May 2017) Integrated with Oqtane DI in v12 (May 2021) GetService<T> pattern introduced for Razor/C# in v12 (May 2021) Upgraded to Dependency Injection 2.1 in v13 (Dec. 2021) Integrated with Dnn DI in v13 (Dec. 2021)"
  },
  "net-code/dependency-injection/dnn.html": {
    "href": "net-code/dependency-injection/dnn.html",
    "title": "Depedency Injection in Dnn Skins and Modules | 2sxc 13 / EAV 13",
    "keywords": "Depedency Injection in Dnn Skins and Modules Since Dnn 9.4, Dependency Injection is built in. It's still fairly basic, so there are some hoops to jump through, but for now it's the recommended way to work with this. Tip Andrew Hoefling wrote a comprehensive guide how to use Dependency Injection in Dnn . Important You need Dnn 9.4+ for these examples to work. 2sxc 13 will only support this form of providing services outside of 2sxc, so if you need this, make sure you upgrade. How Can I Use Dependency Injection in Dnn Modules? Dnn Modules inherit from the PortalModuleBase This has a property called DependencyProvider This is a .net Standard 2 IServiceProvider The naming is a bit unfortunate, since normally we talk of ServiceProvider and this is called DependencyProvider but otherwise it works the same. To get a 2sxc Service with this, you could write code like this using ToSic.Sxc.Services; var jsonSvc = (IJsonService)DependencyProvider.GetService(typeof(IJsonService)); var json = jsonSvc.ToJson(someObject); This is a bit clunky, so usually we'll add the namespace Microsoft.Extensions.DependencyInjection and write this: using Microsoft.Extensions.DependencyInjection; using ToSic.Sxc.Services; var jsonSvc = DependencyProvider.GetService<IJsonService>(); var json = jsonSvc.ToJson(someObject); How Can I Use Dependency Injection in Dnn Skins/Themes? This is unfortunately not prepared well - I guess at the time it was developed this wasn't seen as an important use case. Dnn has Dependency Injection prepared for each request Each Request has a separate Scope (to not mix services between requests) This scoped Service-Provider is cached on the HttpContext Dnn has a special extension method called GetScope() to work with this - see docs To get a 2sxc Service in a Skin, you can write code like this: using DotNetNuke.Common.Extensions; using System; using Microsoft.Extensions.DependencyInjection; using ToSic.Sxc.Services; var sp = HttpContext.Current.GetScope().ServiceProvider; var jsonSvc = sp.GetService<IJsonService>(); var json = jsonSvc.ToJson(someObject); How Can I Get Dnn Objects using Dependency Injection? As of Dnn 9.10 the answer is mostly no üò∂. Dnn is simply not there yet. Work-in-progress. The documentation is almost non-existant, so if you want to try using Dnn objects, you'll need to dig through Dnn code to get this to fly. How Can I Register my Services in Dnn DI? You need to create a class that implement IDnnStartup like this using azing.Catalog.Permissions; using DotNetNuke.DependencyInjection; using Microsoft.Extensions.DependencyInjection; using Microsoft.Extensions.DependencyInjection.Extensions; namespace azing.Catalog { public class StartupAzing : IDnnStartup { // This is the new v13 mode, requires DNN 9.44+ public void ConfigureServices(IServiceCollection services) { services.TryAddTransient<AppPermissions>(); } } } History 2sxc introduced Dependency Injection 1.1 in v9 (May 2017) Integrated with Oqtane DI in v12 (May 2021) GetService<T> pattern introduced for Razor/C# in v12 (May 2021) Upgraded to Dependency Injection 2.1 in v13 (Dec. 2021) Integrated with Dnn DI in v13 (Dec. 2021)"
  },
  "net-code/debug/insights.html": {
    "href": "net-code/debug/insights.html",
    "title": "2sxc Insights on the Server | 2sxc 13 / EAV 13",
    "keywords": "2sxc Insights on the Server The Server Insights gives you a lot of internal information such as Logs of the latest modules being rendered or WebAPI calls Global Content-Types which are loaded Cache states Internal memory with all the data ...and way more. Open Server Insights The quick way to open them, which goes directly to the Logs is with the dashboard icon on the toolbar (only available for super users): From here you can also click on this to get to the insights home. The other way to open it is using the Apps Administration and opening the Insights from there. 2sxc Insights Logs The logs show you what happens on each request. You typically need it to figure out things like How long did the entire work take How long did a specific step in the code need What values were passed around - especially when running into errors Errors and exceptions which we don't show to the user but want to see as a debugger It looks like this: From here you can see all kinds of logs what is happening on the server. Here's a list showing the some Module-Render logs: ...and here a view of the Details, showing that it took 3ms to render this block: Read also 2sxc Insights for Debugging Server-Code History Introduced 2sxc Insights (server-side) v9.31 Major enhancements in v10.22"
  },
  "basics/server/index.html": {
    "href": "basics/server/index.html",
    "title": "What Happens on the Server... | 2sxc 13 / EAV 13",
    "keywords": "What Happens on the Server... <!-- Data Highlights --> <!-- ADAM --> <!-- Server --> <!-- Prepare --> <!-- Data Source --> <!-- Optimzers --> <!-- Process / Awesomize --> <!-- Libraries --> <!-- data formats --> <!-- Browser --> <!-- Frameworks --> <!-- App show parts --> <!-- Interact parts --> <!-- Edit parts --> <!-- Edit UI parts --> <!-- SPA parts --> <!-- Custom highlight boxes - can be controlled by in-page CSS --> you are here (click to zoom) - discover the stack .context-box-summary .server-all { visibility: visible; } You should get an idea of how the system works and all the things you can customize. This overview lets you see the essential parts of any App including the main Content . This is what web-systems do from a bird's-eyes perspective. This is what happens on the server: Awesomeize - this is where you tell the system how the output should look, what image sizes you want, how the HTML should be built etc. Prepare is a layer of data processing where the desired data is selected to be shown, filtered, sorted etc. By default this happens automatically, you don't have to do anything! But you can customize it anyhow you want. Your Data is the original material - probably created by an editor using the CMS UI or in advanced cases it's data coming from SQL, CSV or elsewhere. This data could also be combined from multiple sources. By default this just magically works, you don't have to do anything! Awesomeize / Customise <!-- Data Highlights --> <!-- ADAM --> <!-- Server --> <!-- Prepare --> <!-- Data Source --> <!-- Optimzers --> <!-- Process / Awesomize --> <!-- Libraries --> <!-- data formats --> <!-- Browser --> <!-- Frameworks --> <!-- App show parts --> <!-- Interact parts --> <!-- Edit parts --> <!-- Edit UI parts --> <!-- SPA parts --> <!-- Custom highlight boxes - can be controlled by in-page CSS --> you are here (click to zoom) - discover the stack .context-box-process .process-all { visibility: visible; } You may want to learn more about: Bundling / Optimizing Assets Image Resizing Create App Templates using Razor Create custom WebApi Controllers The Headless REST API Preparing Data Something must determine what data should be shown or worked on, which is what happens in the Prepare step. <!-- Data Highlights --> <!-- ADAM --> <!-- Server --> <!-- Prepare --> <!-- Data Source --> <!-- Optimzers --> <!-- Process / Awesomize --> <!-- Libraries --> <!-- data formats --> <!-- Browser --> <!-- Frameworks --> <!-- App show parts --> <!-- Interact parts --> <!-- Edit parts --> <!-- Edit UI parts --> <!-- SPA parts --> <!-- Custom highlight boxes - can be controlled by in-page CSS --> you are here (click to zoom) - discover the stack .context-box-prepare .prepare-all { visibility: visible; } üëâ See Prepare Data for Templates and WebApi Understanding Data <!-- Data Highlights --> <!-- ADAM --> <!-- Server --> <!-- Prepare --> <!-- Data Source --> <!-- Optimzers --> <!-- Process / Awesomize --> <!-- Libraries --> <!-- data formats --> <!-- Browser --> <!-- Frameworks --> <!-- App show parts --> <!-- Interact parts --> <!-- Edit parts --> <!-- Edit UI parts --> <!-- SPA parts --> <!-- Custom highlight boxes - can be controlled by in-page CSS --> you are here (click to zoom) - discover the stack .context-box-data .data-all { visibility: visible; } üëâ Data has it's own chapter in the docs Understanding Data..."
  },
  "api/dot-net/ToSic.Eav.Data.IRelationshipManager.html": {
    "href": "api/dot-net/ToSic.Eav.Data.IRelationshipManager.html",
    "title": "Interface IRelationshipManager | 2sxc 13 / EAV 13",
    "keywords": "Interface IRelationshipManager Manages relationships of an entity - to it's children and parents. Namespace : ToSic.Eav.Data Assembly : ToSic.Eav.Core.dll Syntax [InternalApi_DoNotUse_MayChangeWithoutNotice(\"this is just fyi\")] public interface IRelationshipManager Properties | Improve this Doc View Source AllChildren Get all Child Entities Declaration IEnumerable<IEntity> AllChildren { get; } Property Value Type Description System.Collections.Generic.IEnumerable < IEntity > List of all Entities referenced by this Entity. | Improve this Doc View Source AllParents Get all Parent Entities Declaration IEnumerable<IEntity> AllParents { get; } Property Value Type Description System.Collections.Generic.IEnumerable < IEntity > List of all Entities referencing this Entity. Methods | Improve this Doc View Source FindChildren(String, String, ILog) Find the children with optional criteria. Declaration List<IEntity> FindChildren(string field = null, string type = null, ILog log = null) Parameters Type Name Description System.String field Get only the children of a specific field System.String type Restrict the results to a specific ContentType ILog log Optional logger, to debug what happens internally Returns Type Description System.Collections.Generic.List < IEntity > Always returns a list - empty or containing results | Improve this Doc View Source FindParents(String, String, ILog) Find the parents with optional criteria. Declaration List<IEntity> FindParents(string type = null, string field = null, ILog log = null) Parameters Type Name Description System.String type Restrict the results to a specific ContentType System.String field Get only the children of a specific field ILog log Optional logger, to debug what happens internally Returns Type Description System.Collections.Generic.List < IEntity > Always returns a list - empty or containing results"
  },
  "api/dot-net/ToSic.Eav.Data.IContentType.html": {
    "href": "api/dot-net/ToSic.Eav.Data.IContentType.html",
    "title": "Interface IContentType | 2sxc 13 / EAV 13",
    "keywords": "Interface IContentType Represents a Content Type information (the schema) used for IEntity objects. Inherited Members IAppIdentityLight.AppId Namespace : ToSic.Eav.Data Assembly : ToSic.Eav.Core.dll Syntax [PublicApi_Stable_ForUseInYourCode] public interface IContentType : IAppIdentityLight, IHasMetadata Properties | Improve this Doc View Source Attributes Dictionary with all Attribute Definitions Declaration IList<IContentTypeAttribute> Attributes { get; set; } Property Value Type Description System.Collections.Generic.IList < IContentTypeAttribute > | Improve this Doc View Source ContentTypeId Old name for Id, please use Id instead Declaration [Obsolete(\"Deprecated in V13, please use Id instead.\")] int ContentTypeId { get; } Property Value Type Description System.Int32 Remarks Deprecated in v13 | Improve this Doc View Source Description The content-type description Declaration [Obsolete(\"Obsolete in v12, used to contain the description, which is now in the metadata\")] string Description { get; } Property Value Type Description System.String | Improve this Doc View Source Id Get the id of the Content Type - you usually don't need this! Declaration int Id { get; } Property Value Type Description System.Int32 | Improve this Doc View Source IsDynamic Determines if the data for this type is dynamic (spontaneously created) or real an EAV (split into sql-tables) or json somewhere To detect if it's just a global json-type, find out what repository the type is from (RepositoryType) Declaration bool IsDynamic { get; } Property Value Type Description System.Boolean | Improve this Doc View Source Item[String] A simple indexer to get an attribute Declaration IContentTypeAttribute this[string fieldName] { get; } Parameters Type Name Description System.String fieldName Property Value Type Description IContentTypeAttribute The IContentTypeAttribute of the field name | Improve this Doc View Source Metadata Get the metadata for this content-type Declaration ContentTypeMetadata Metadata { get; } Property Value Type Description ToSic.Eav.Data.ContentTypeMetadata Remarks The metadata is either already prepared, from the same app, or from a remote app | Improve this Doc View Source Name Gets the Display Name of the Content Type Declaration string Name { get; } Property Value Type Description System.String | Improve this Doc View Source NameId A unique id/name of the content-type. Previously called StaticName. Declaration string NameId { get; } Property Value Type Description System.String Remarks New in v13 | Improve this Doc View Source RepositoryAddress Information / ID / URL to this content-type where it was stored in the repository Declaration string RepositoryAddress { get; } Property Value Type Description System.String | Improve this Doc View Source RepositoryType Information where the Content-Type was stored (file system, DB, etc.) Declaration RepositoryTypes RepositoryType { get; } Property Value Type Description ToSic.Eav.Repositories.RepositoryTypes | Improve this Doc View Source Scope Get the scope of the Content Type (like sections in a DB) Declaration string Scope { get; } Property Value Type Description System.String | Improve this Doc View Source StaticName Static name - can be a GUID or a system-term for special types Declaration [Obsolete(\"Deprecated in v13, please use NameId instead\")] string StaticName { get; } Property Value Type Description System.String Remarks being deprecated in V13, to be replaced with NameId Methods | Improve this Doc View Source Is(String) Check if this type is the same as a name given. Will check both the name and the static name Declaration bool Is(string name) Parameters Type Name Description System.String name Returns Type Description System.Boolean"
  },
  "api/dot-net/ToSic.Sxc.Search.SearchItem.html": {
    "href": "api/dot-net/ToSic.Sxc.Search.SearchItem.html",
    "title": "Class SearchItem | 2sxc 13 / EAV 13",
    "keywords": "Class SearchItem A search item which is passed around before handed over to the indexing system Inheritance System.Object DotNetNuke.Services.Search.Entities.SearchDocumentToDelete DotNetNuke.Services.Search.Entities.SearchDocument SearchItem Implements ISearchItem Namespace : ToSic.Sxc.Search Assembly : ToSic.Sxc.Dnn.Core.dll Syntax [PublicApi_Stable_ForUseInYourCode] public class SearchItem : SearchDocument, ISearchItem, ISearchInfo Properties | Improve this Doc View Source Entity Declaration public IEntity Entity { get; set; } Property Value Type Description IEntity Implements ISearchItem"
  },
  "api/dot-net/ToSic.Eav.Caching.ICacheDependent.html": {
    "href": "api/dot-net/ToSic.Eav.Caching.ICacheDependent.html",
    "title": "Interface ICacheDependent | 2sxc 13 / EAV 13",
    "keywords": "Interface ICacheDependent Marks something that is cache-dependent. Used for things that are themselves cached, but rely on an upstream cache. Inherited Members ITimestamped.CacheTimestamp Namespace : ToSic.Eav.Caching Assembly : ToSic.Eav.Core.dll Syntax [InternalApi_DoNotUse_MayChangeWithoutNotice(\"this is just fyi\")] public interface ICacheDependent : ITimestamped Methods | Improve this Doc View Source CacheChanged() Find out if the source it depends on has changed. Declaration bool CacheChanged() Returns Type Description System.Boolean True if the upstream cache returns a newer timestamp"
  },
  "api/dot-net/ToSic.Sxc.Data.DynamicEntity.html": {
    "href": "api/dot-net/ToSic.Sxc.Data.DynamicEntity.html",
    "title": "Class DynamicEntity | 2sxc 13 / EAV 13",
    "keywords": "Class DynamicEntity A dynamic entity object - the main object you use when templating things in RazorComponent objects Note that it will provide many things not listed here, usually things like .Image , .FirstName etc. based on your ContentType. Inheritance System.Object System.Dynamic.DynamicObject ToSic.Sxc.Data.DynamicEntityBase DynamicEntity Implements System.Dynamic.IDynamicMetaObjectProvider IDynamicEntity IEntityWrapper IHasDecorators < IEntity > System.IEquatable < IEntityWrapper > System.Collections.Generic.IList < IDynamicEntity > System.Collections.Generic.ICollection < IDynamicEntity > System.Collections.Generic.IEnumerable < IDynamicEntity > System.Collections.Generic.IList < System.Object > System.Collections.Generic.ICollection < System.Object > System.Collections.Generic.IEnumerable < System.Object > System.Collections.IEnumerable IHasMetadata Namespace : ToSic.Sxc.Data Assembly : ToSic.Sxc.dll Syntax [PublicApi_Stable_ForUseInYourCode] public class DynamicEntity : DynamicEntityBase, IDynamicMetaObjectProvider, IPropertyLookup, ICanGetByName, IDynamicEntity, IDynamicEntity, IEntityWrapper, IHasDecorators<IEntity>, IMultiWrapper<IEntity>, IDynamicEntityBase, ICanDebug, ISxcDynamicObject, IEquatable<IEntityWrapper>, IList<IDynamicEntity>, ICollection<IDynamicEntity>, IEnumerable<IDynamicEntity>, IList<object>, ICollection<object>, IEnumerable<object>, IEnumerable, IHasMetadata Properties | Improve this Doc View Source AnyBooleanProperty A Dynamic Entity always contains an item of your data - a book, person, blog-post or a piece of content. Since the object is dynamic, you can just use .IsFemale or whatever other property your item has. If it's a true/false, it will just magically work and return a bool . If it doesn't exist, it will return null. Declaration public bool AnyBooleanProperty { get; } Property Value Type Description System.Boolean | Improve this Doc View Source AnyChildrenProperty A Dynamic Entity always contains an item of your data - a book, person, blog-post or a piece of content. Since the object is dynamic, you can just use .Tags or whatever other property your item has. If it's contains relationships, it will just magically work and return a list of further DynamicEntity objects. If it doesn't exist, it will return null. Declaration public IEnumerable<DynamicEntity> AnyChildrenProperty { get; } Property Value Type Description System.Collections.Generic.IEnumerable < DynamicEntity > Remarks Very often you'll want to use LINQ to further sort or query these items. But the Razor compiler cannot know that it got a list, so using .Any() or similar fails. To fix this, put an AsList around it - a bit like AsList(myThing.Tags) . Sometimes you'll also need to help a bit more with AsList(myThings.Tags as object) . Now you can do things like var tags = AsList(myThings.Tags as object); if (myTags.Any()) {...} Read more about this in the Dnn LINQ Tutorials | Improve this Doc View Source AnyDateTimeProperty A Dynamic Entity always contains an item of your data - a book, person, blog-post or a piece of content. Since the object is dynamic, you can just use .Birthday or whatever other property your item has. If it's a date/time, it will just magically work and return a DateTime . If it doesn't exist, it will return null. Declaration public DateTime AnyDateTimeProperty { get; } Property Value Type Description System.DateTime | Improve this Doc View Source AnyJsonProperty A Dynamic Entity always contains an item of your data - a book, person, blog-post or a piece of content. Since the object is dynamic, you can just use .Gps or whatever other property your item has. If the field contains JSON, it will just magically work and return a string . If it doesn't exist, it will return null. Declaration public string AnyJsonProperty { get; } Property Value Type Description System.String Remarks Very often you'll want to use the Json as a dynamic object again. Just pass the result through AsDynamic and it will work. Example: var gps = AsDynamic(myThing.Gps); var lat = gps.Lat; Read more about this in the Dnn JSON Tutorials | Improve this Doc View Source AnyLinkOrFileProperty A Dynamic Entity always contains an item of your data - a book, person, blog-post or a piece of content. Since the object is dynamic, you can just use .Image or whatever other property your item has. If it's a link, it will just magically work and return a string . If it doesn't exist, it will return null. Declaration public string AnyLinkOrFileProperty { get; } Property Value Type Description System.String Remarks Note that many internal references in the CMS use file:2742 or similar. This will automatically be resolved to the real link which your output needs. | Improve this Doc View Source AnyNumberProperty A Dynamic Entity always contains an item of your data - a book, person, blog-post or a piece of content. Since the object is dynamic, you can just use .Length or whatever other property your item has. If it's a number, it will just magically work and return a double . If it doesn't exist, it will return null. Declaration public double AnyNumberProperty { get; } Property Value Type Description System.Double | Improve this Doc View Source AnyStringProperty A Dynamic Entity always contains an item of your data - a book, person, blog-post or a piece of content. Since the object is dynamic, you can just use .FirstName or whatever other property your item has. If it's a string, it will just magically work. If it doesn't exist, it will return null. Declaration public string AnyStringProperty { get; } Property Value Type Description System.String Remarks Remember to use @Html.Raw(...) if you want the html to be preserved and not cleaned when placed in the page. | Improve this Doc View Source AnyTitleOfAnEntityInTheList If this DynamicEntity carries a list of items (for example a BlogPost.Tags which behaves as the first Tag, but also carries all the tags in it) Then you can also use DynamicCode to directly navigate to a sub-item, like Blogs.Tags.WebDesign . Declaration public IEnumerable<DynamicEntity> AnyTitleOfAnEntityInTheList { get; } Property Value Type Description System.Collections.Generic.IEnumerable < DynamicEntity > Remarks New in 12.03 | Improve this Doc View Source Count Shows how many Entities are available if you use foreach. Will usually return an int . Declaration public object Count { get; } Property Value Type Description System.Object Usually an int but if the Entity contains such a property, then it has the type of that property. Remarks If the Entity contains a field Count , that will be returned instead. | Improve this Doc View Source EntityGuid The guid of the underlying entity. Declaration public Guid EntityGuid { get; } Property Value Type Description System.Guid Remarks If the entity doesn't exist, it will return an empty guid | Improve this Doc View Source EntityId The ID of the underlying entity. Use it for edit-functionality or just to have a unique number for this item. Declaration public int EntityId { get; } Property Value Type Description System.Int32 Remarks If the entity doesn't exist, it will return 0 | Improve this Doc View Source EntityTitle The title of this item. This is always available no matter what the underlying field for the title is. Declaration public object EntityTitle { get; } Property Value Type Description System.Object The title of the underlying entity. In rare cases where no title-field is known, it can be null. It can also be null if there is no underlying entity. | Improve this Doc View Source EntityType The type name of the current entity. This provides the nice name like \"Person\" and not the technical internal StaticName Declaration public string EntityType { get; } Property Value Type Description System.String | Improve this Doc View Source IsDemoItem Many templates show demo data. If the template code must know if it's the demo item or real data, use IsDemoItem. Declaration public bool IsDemoItem { get; } Property Value Type Description System.Boolean True if this is the item configured in the view-settings, false if not. Remarks New in 10.07 | Improve this Doc View Source IsFake Declaration public bool IsFake { get; } Property Value Type Description System.Boolean | Improve this Doc View Source IsPublished Tells us if this data item is published or still draft. Default is true. Declaration public bool IsPublished { get; } Property Value Type Description System.Boolean | Improve this Doc View Source Metadata The type name of the current entity. This provides the nice name like \"Person\" and not the technical internal StaticName Declaration public IDynamicMetadata Metadata { get; } Property Value Type Description IDynamicMetadata Remarks Added in v13 | Improve this Doc View Source Presentation Contains presentation settings for an item - if they exist. This is a functionality of the CMS, where an instance of an item can be configured to show in a specific way. Normally it's used when something like an address has various show-settings (like how the map should visualize this address). The presentation-info is therefor not-null IF the content belongs to this module instance the view-configuration of this module is configured to have presentation items there is either a default presentation configured in the view, or the user has manually edited the presentation settings Declaration public dynamic Presentation { get; } Property Value Type Description System.Object An IDynamicEntity with the presentation item (or the demo-presentation), otherwise null. Methods | Improve this Doc View Source Children(String, String) A dynamic list of sub-items. Important for LINQ style querying or just working with various lists. Note that for getting child items of this item you can just use the properties, like content.Authors. But using Children(\"Authors\", typeName) gives you the ability to restrict to a type. Please check the tutorials on 2sxc.org/dnn-tutorials/ for more info. Declaration public List<IDynamicEntity> Children(string field = null, string type = null) Parameters Type Name Description System.String field Optional field filter - would only return items that point to the current item in a specific field name. System.String type Optional type filter - would only return items of this type. Returns Type Description System.Collections.Generic.List < IDynamicEntity > A list of all items pointing here (filtered), converted to DynamicEntity for convenience. Remarks New in 10.21.00 - note also that the parameter-order is reversed to the Parents() | Improve this Doc View Source GetDraft() Get the draft item of this item if this is a content-item which is published, and has a draft. Declaration public dynamic GetDraft() Returns Type Description System.Object Returns a dynamic entity if there is a draft, or null if there is no draft. | Improve this Doc View Source GetPublished() Get the published item of this item if this is a content-item which is draft, and has a published. Declaration public dynamic GetPublished() Returns Type Description System.Object Returns a dynamic entity if there is a draft, or null if there is no draft. | Improve this Doc View Source Parents(String, String) A dynamic list of entities which point to this item. Important for LINQ style querying or just working with various lists. Note that for getting child items of this item you can just use the properties, like content.Authors. Please check the tutorials on 2sxc.org/dnn-tutorials/ for more info. Declaration public List<IDynamicEntity> Parents(string type = null, string field = null) Parameters Type Name Description System.String type Optional type filter - would only return items of this type. System.String field Optional field filter - would only return items that point to the current item in a specific field name. Returns Type Description System.Collections.Generic.List < IDynamicEntity > A list of all items pointing here (filtered), converted to DynamicEntity for convenience. Remarks New in 9.42 - note also that the parameter-order is reversed to the Children() Implements System.Dynamic.IDynamicMetaObjectProvider IDynamicEntity IEntityWrapper IHasDecorators<T> System.IEquatable<T> System.Collections.Generic.IList<T> System.Collections.Generic.ICollection<T> System.Collections.Generic.IEnumerable<T> System.Collections.Generic.IList<T> System.Collections.Generic.ICollection<T> System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable IHasMetadata"
  },
  "api/dot-net/ToSic.Sxc.Adam.IAsset.html": {
    "href": "api/dot-net/ToSic.Sxc.Adam.IAsset.html",
    "title": "Interface IAsset | 2sxc 13 / EAV 13",
    "keywords": "Interface IAsset Describes an ADAM (Automatic Digital Asset Management) asset. This contains properties which both IFolder and IFile have in common. Namespace : ToSic.Sxc.Adam Assembly : ToSic.Sxc.dll Syntax [PublicApi_Stable_ForUseInYourCode] public interface IAsset : IHasMetadata Properties | Improve this Doc View Source HasMetadata Informs the code if this asset has real metadata attached or not. Declaration bool HasMetadata { get; } Property Value Type Description System.Boolean True if this asset has metadata, false if it doesn't (in which case the Metadata property still works, but won't deliver any real values) | Improve this Doc View Source Metadata List of metadata items - will automatically contain a fake item, even if no metadata exits to help in razor template etc. Declaration IDynamicMetadata Metadata { get; } Property Value Type Description IDynamicMetadata An IDynamicEntity which contains the metadata, or an empty IDynamicEntity which still works if no metadata exists. | Improve this Doc View Source Type The type of this asset (folder, file, etc.) Declaration string Type { get; } Property Value Type Description System.String \"folder\", \"image\", \"document\", \"file\" depending on what it is | Improve this Doc View Source Url The path to this asset as used from external access. Must be a full url beginning with a \"/\" like \"/Portals/0/adam/...\" Declaration string Url { get; } Property Value Type Description System.String The url to this asset"
  },
  "api/dot-net/ToSic.Eav.html": {
    "href": "api/dot-net/ToSic.Eav.html",
    "title": "Namespace ToSic.Eav | 2sxc 13 / EAV 13",
    "keywords": "Namespace ToSic.Eav This is the root of the EAV system. It's almost empty, except for the Dependency Injection system Factory . Classes Factory The Eav DI Factory, used to construct various objects through Dependency Injection . If possible avoid using this, as it's a workaround for code which is outside of the normal Dependency Injection and therefor a bad pattern."
  },
  "api/dot-net/ToSic.Eav.Logging.ILog.html": {
    "href": "api/dot-net/ToSic.Eav.Logging.ILog.html",
    "title": "Interface ILog | 2sxc 13 / EAV 13",
    "keywords": "Interface ILog A logger with special capabilities. It can take log messages, and chain itself to other loggers. If chained, it can broadcast the messages to the other loggers from that time forward. Basically this is the backbone of Insights. Namespace : ToSic.Eav.Logging Assembly : ToSic.Eav.Core.dll Syntax [InternalApi_DoNotUse_MayChangeWithoutNotice(\"this is just fyi\")] public interface ILog Properties | Improve this Doc View Source Depth Declaration int Depth { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source Id A short random ID to differentiate this logger from others. Declaration string Id { get; } Property Value Type Description System.String | Improve this Doc View Source Identifier A unique identifier containing a special XXX.yyyyy[id] name Declaration string Identifier { get; } Property Value Type Description System.String | Improve this Doc View Source Preserve Determines if this log should be preserved in the short term. Like for live-analytics / live-insights. Default is true, but in certain cases it will default to false. Declaration bool Preserve { get; set; } Property Value Type Description System.Boolean Methods | Improve this Doc View Source Add(Func<String>, String, String, Int32) Add a message by calling a function. This will be inside a try/catch, to prevent crashes because of looping on nulls etc. Declaration void Add(Func<string> messageMaker, string cPath = null, string cName = null, int cLine = 0) Parameters Type Name Description System.Func < System.String > messageMaker System.String cPath auto pre filled by the compiler - the path to the code file System.String cName auto pre filled by the compiler - the method name System.Int32 cLine auto pre filled by the compiler - the code line | Improve this Doc View Source Add(String, String, String, Int32) Add a message log entry Declaration string Add(string message, string cPath = null, string cName = null, int cLine = 0) Parameters Type Name Description System.String message Message to log System.String cPath auto pre filled by the compiler - the path to the code file System.String cName auto pre filled by the compiler - the method name System.Int32 cLine auto pre filled by the compiler - the code line Returns Type Description System.String The same warning text which was added | Improve this Doc View Source Call(Func<String>, Func<String>, Boolean, String, String, Int32) Add a log entry for a class constructor, returning a method to call when done Declaration Action<string> Call(Func<string> parameters, Func<string> message = null, bool useTimer = false, string cPath = null, string cName = null, int cLine = 0) Parameters Type Name Description System.Func < System.String > parameters what was passed to the call in the brackets System.Func < System.String > message the message to log System.Boolean useTimer enable a timer from call/close System.String cPath auto pre filled by the compiler - the path to the code file System.String cName auto pre filled by the compiler - the method name System.Int32 cLine auto pre filled by the compiler - the code line Returns Type Description System.Action < System.String > | Improve this Doc View Source Call(String, String, Boolean, String, String, Int32) Add a log entry for method call, returning a method to call when done Declaration Action<string> Call(string parameters = null, string message = null, bool useTimer = false, string cPath = null, string cName = null, int cLine = 0) Parameters Type Name Description System.String parameters what was passed to the call in the brackets System.String message the message to log System.Boolean useTimer enable a timer from call/close System.String cPath auto pre filled by the compiler - the path to the code file System.String cName auto pre filled by the compiler - the method name System.Int32 cLine auto pre filled by the compiler - the code line Returns Type Description System.Action < System.String > | Improve this Doc View Source Call<T>(String, String, Boolean, String, String, Int32) Add a log entry for method call, returning a method to call when done Declaration Func<string, T, T> Call<T>(string parameters = null, string message = null, bool useTimer = false, string cPath = null, string cName = null, int cLine = 0) Parameters Type Name Description System.String parameters what was passed to the call in the brackets System.String message the message to log System.Boolean useTimer enable a timer from call/close System.String cPath auto pre filled by the compiler - the path to the code file System.String cName auto pre filled by the compiler - the method name System.Int32 cLine auto pre filled by the compiler - the code line Returns Type Description System.Func < System.String , T, T> Type Parameters Name Description T | Improve this Doc View Source Exception(Exception) Declaration void Exception(Exception ex) Parameters Type Name Description System.Exception ex | Improve this Doc View Source LinkTo(ILog, String) Link this logger to a parent and optionally rename Declaration void LinkTo(ILog parent, string name = null) Parameters Type Name Description ILog parent parent log to attach to System.String name optional new name | Improve this Doc View Source Rename(String) Rename this logger - usually used when a base-class has a logger, but the inherited class needs a different name Declaration void Rename(string name) Parameters Type Name Description System.String name Remarks limits the length to 6 chars to make the output readable | Improve this Doc View Source Unlink() Unlink a logger from the parent. Declaration void Unlink() | Improve this Doc View Source Warn(String) Add a warning log entry Declaration string Warn(string message) Parameters Type Name Description System.String message Returns Type Description System.String The same warning text which was added"
  },
  "api/dot-net/ToSic.Eav.Data.ValueTypes.html": {
    "href": "api/dot-net/ToSic.Eav.Data.ValueTypes.html",
    "title": "Enum ValueTypes | 2sxc 13 / EAV 13",
    "keywords": "Enum ValueTypes Value / Attribute Type List Namespace : ToSic.Eav.Data Assembly : ToSic.Eav.Core.dll Syntax [PublicApi_Stable_ForUseInYourCode] public enum ValueTypes Fields Name Description Boolean Boolean Value Type Custom Custom data-type - for custom serialization, will store string DateTime DateTime Value Type Empty Empty for titles etc. Entity Entity Value Type Hyperlink Hyperlink Value Type Json Json data-type, will usually have various help to ensure that dynamic code is optimized Number Number Value Type String String Value Type Undefined Used for unknown cases, where you would otherwise use null"
  },
  "api/dot-net/ToSic.Eav.Data.IDecorator-1.html": {
    "href": "api/dot-net/ToSic.Eav.Data.IDecorator-1.html",
    "title": "Interface IDecorator<T> | 2sxc 13 / EAV 13",
    "keywords": "Interface IDecorator<T> This marks add-on information for things which can be decorated. This allows taking something (like an IEntity and adding additional information for later processing Namespace : ToSic.Eav.Data Assembly : ToSic.Eav.Core.dll Syntax [InternalApi_DoNotUse_MayChangeWithoutNotice(\"just fyi\")] public interface IDecorator<T> : IDecorator Type Parameters Name Description T"
  },
  "api/dot-net/ToSic.Eav.Caching.SynchronizedList-1.html": {
    "href": "api/dot-net/ToSic.Eav.Caching.SynchronizedList-1.html",
    "title": "Class SynchronizedList<T> | 2sxc 13 / EAV 13",
    "keywords": "Class SynchronizedList<T> This is an IEnumerable which relies on an up-stream cache, which may change. That would require this IEnumerable to update what it delivers. Inheritance System.Object SynchronizedObject < System.Collections.Immutable.IImmutableList <T>> SynchronizedList<T> Implements System.Collections.Generic.IEnumerable <T> System.Collections.IEnumerable ICacheDependent ICacheExpiring ITimestamped Inherited Members SynchronizedObject<IImmutableList<T>>.Upstream SynchronizedObject<IImmutableList<T>>.Cache SynchronizedObject<IImmutableList<T>>.RebuildCache SynchronizedObject<IImmutableList<T>>.RebuildCount SynchronizedObject<IImmutableList<T>>.Value SynchronizedObject<IImmutableList<T>>.CacheTimestamp SynchronizedObject<IImmutableList<T>>.CacheChanged(Int64) SynchronizedObject<IImmutableList<T>>.CacheChanged() Namespace : ToSic.Eav.Caching Assembly : ToSic.Eav.Core.dll Syntax [InternalApi_DoNotUse_MayChangeWithoutNotice(\"this is just fyi\")] public class SynchronizedList<T> : SynchronizedObject<IImmutableList<T>>, IEnumerable<T>, IEnumerable, ICacheDependent, ICacheExpiring, ITimestamped Type Parameters Name Description T The type which is enumerated, usually an IEntity Constructors | Improve this Doc View Source SynchronizedList(ICacheExpiring, Func<List<T>>) Initialized a new list which depends on another source Declaration [Obsolete(\"You should prefer the Func<Immutable> signature\")] public SynchronizedList(ICacheExpiring upstream, Func<List<T>> rebuild) Parameters Type Name Description ICacheExpiring upstream the upstream cache which can tell us if a refresh is necessary System.Func < System.Collections.Generic.List <T>> rebuild the method which rebuilds the list | Improve this Doc View Source SynchronizedList(ICacheExpiring, Func<IImmutableList<T>>) Initialized a new list which depends on another source Declaration public SynchronizedList(ICacheExpiring upstream, Func<IImmutableList<T>> rebuild) Parameters Type Name Description ICacheExpiring upstream the upstream cache which can tell us if a refresh is necessary System.Func < System.Collections.Immutable.IImmutableList <T>> rebuild the method which rebuilds the list Methods | Improve this Doc View Source GetEnumerator() Declaration public IEnumerator<T> GetEnumerator() Returns Type Description System.Collections.Generic.IEnumerator <T> Explicit Interface Implementations | Improve this Doc View Source IEnumerable.GetEnumerator() Declaration IEnumerator IEnumerable.GetEnumerator() Returns Type Description System.Collections.IEnumerator Implements System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable ICacheDependent ICacheExpiring ITimestamped"
  },
  "api/dot-net/ToSic.Eav.Data.IValue.html": {
    "href": "api/dot-net/ToSic.Eav.Data.IValue.html",
    "title": "Interface IValue | 2sxc 13 / EAV 13",
    "keywords": "Interface IValue Represents a Value in the EAV system. Values belong to an attribute and can belong to multiple languages. Namespace : ToSic.Eav.Data Assembly : ToSic.Eav.Core.dll Syntax [PublicApi_Stable_ForUseInYourCode] public interface IValue Properties | Improve this Doc View Source Languages Gets the Language ( ILanguage ) assigned to this Value. Can be one or many. Declaration IList<ILanguage> Languages { get; set; } Property Value Type Description System.Collections.Generic.IList < ILanguage > | Improve this Doc View Source SerializableObject Returns the inner value in a form that can be serialized, for JSON serialization etc. Declaration object SerializableObject { get; } Property Value Type Description System.Object"
  },
  "api/dot-net/ToSic.Eav.Metadata.IMetadataOf.html": {
    "href": "api/dot-net/ToSic.Eav.Metadata.IMetadataOf.html",
    "title": "Interface IMetadataOf | 2sxc 13 / EAV 13",
    "keywords": "Interface IMetadataOf A provider for metadata for something. So if an IEntity or an App has metadata, this will provide it. Inherited Members System.Collections.Generic.IEnumerable<ToSic.Eav.Data.IEntity>.GetEnumerator() IHasPermissions.Permissions Namespace : ToSic.Eav.Metadata Assembly : ToSic.Eav.Core.dll Syntax [PublicApi_Stable_ForUseInYourCode] public interface IMetadataOf : IEnumerable<IEntity>, IEnumerable, IHasPermissions Remarks You can either loop through this object (since it's an IEnumerable ) or ask for values of the metadata, no matter on what sub-entity the value is stored on. Properties | Improve this Doc View Source Target The identifier which was used to retrieve the Metadata. It can be used as an address for creating further Metadata for the same target. Declaration ITarget Target { get; } Property Value Type Description ITarget Remarks Added in v13 Methods | Improve this Doc View Source GetBestValue<TVal>(String, String) Get the best matching value in ALL the metadata items. Declaration TVal GetBestValue<TVal>(string name, string typeName = null) Parameters Type Name Description System.String name attribute name we're looking for System.String typeName optional type-name, if provided, will only look at metadata of that type; otherwise (or if null) will look at all metadata items and pick first match Returns Type Description TVal A typed value. Type Parameters Name Description TVal expected type, like string, int etc. | Improve this Doc View Source GetBestValue<TVal>(String, String[]) Get the best matching value in the metadata items. Declaration TVal GetBestValue<TVal>(string name, string[] typeNames) Parameters Type Name Description System.String name attribute name we're looking for System.String [] typeNames list of type-name in the order to check. if one of the values is null, it will then check all items no matter what type Returns Type Description TVal A typed value. Type Parameters Name Description TVal expected type, like string, int etc. | Improve this Doc View Source HasType(String) Determine if something has metadata of the specified type Declaration bool HasType(string typeName) Parameters Type Name Description System.String typeName Type Name Returns Type Description System.Boolean True if there is at least one item of this type Remarks Added in v13 | Improve this Doc View Source OfType(String) Get all Metadata items of a specific type Declaration IEnumerable<IEntity> OfType(string typeName) Parameters Type Name Description System.String typeName Type Name Returns Type Description System.Collections.Generic.IEnumerable < IEntity > Remarks Added in v13"
  },
  "api/dot-net/ToSic.Sxc.Services.IPageService.html": {
    "href": "api/dot-net/ToSic.Sxc.Services.IPageService.html",
    "title": "Interface IPageService | 2sxc 13 / EAV 13",
    "keywords": "Interface IPageService Make changes to the page - usually from Razor. Namespace : ToSic.Sxc.Services Assembly : ToSic.Sxc.dll Syntax [PublicApi_Stable_ForUseInYourCode] public interface IPageService Remarks History Introduced in v12.02 but on another namespace which still works for compatibility Moved to ToSic.Sxc.Services in v13 Methods | Improve this Doc View Source Activate(String[]) Activate a feature on this page. Still WIP, at the moment the only relevant key can be turnOn Declaration void Activate(params string[] keys) Parameters Type Name Description System.String [] keys | Improve this Doc View Source AddIcon(String, String, String, Int32, String) Add an Icon header tag to the Page. Declaration void AddIcon(string path, string doNotRelyOnParameterOrder = \"Rule: All params must be named (https://r.2sxc.org/named-params)\", string rel = \"\", int size = 0, string type = null) Parameters Type Name Description System.String path Path to the image/icon file System.String doNotRelyOnParameterOrder This is a dummy parameter to force the developer to name the remaining parameters - like size: 75 etc. This allows us to add more parameters in future without worrying that existing code could break. System.String rel the rel-text, default is 'icon'. common terms are also 'shortcut icon' or 'apple-touch-icon' System.Int32 size Will be used in size='#x#' tag; only relevant if you want to provide multiple separate sizes System.String type An optional type. If not provided, will be auto-detected from known types or remain empty | Improve this Doc View Source AddIconSet(String, String, Object, IEnumerable<String>, IEnumerable<Int32>) Add a set of icons to the page Declaration void AddIconSet(string path, string doNotRelyOnParameterOrder = \"Rule: All params must be named (https://r.2sxc.org/named-params)\", object favicon = null, IEnumerable<string> rels = null, IEnumerable<int> sizes = null) Parameters Type Name Description System.String path Path to the image/icon file System.String doNotRelyOnParameterOrder This is a dummy parameter to force the developer to name the remaining parameters - like size: 75 etc. This allows us to add more parameters in future without worrying that existing code could break. System.Object favicon path to favicon, default is '/favicon.ico' System.Collections.Generic.IEnumerable < System.String > rels System.Collections.Generic.IEnumerable < System.Int32 > sizes | Improve this Doc View Source AddJsonLd(Object) Add a JSON-LD header according https://developers.google.com/search/docs/guides/intro-structured-data Declaration void AddJsonLd(object jsonObject) Parameters Type Name Description System.Object jsonObject A object which will be converted to JSON. We recommend using dictionaries to build the object. | Improve this Doc View Source AddJsonLd(String) Add a JSON-LD header according https://developers.google.com/search/docs/guides/intro-structured-data Declaration void AddJsonLd(string jsonString) Parameters Type Name Description System.String jsonString A prepared JSON string | Improve this Doc View Source AddMeta(String, String) Add a standard meta header tag. You may also want AddOpenGraph or AddJsonLd Declaration void AddMeta(string name, string content) Parameters Type Name Description System.String name System.String content | Improve this Doc View Source AddOpenGraph(String, String) Add an open-graph header according to http://ogp.me/ Declaration void AddOpenGraph(string property, string content) Parameters Type Name Description System.String property Open Graph property name, like title or image:width. 'og:' is automatically prefixed if not included System.String content value of this property | Improve this Doc View Source AddToHead(String) Add a tag to the header of the page Will simply not do anything if an error occurs, like if the page object doesn't exist Declaration void AddToHead(string tag) Parameters Type Name Description System.String tag | Improve this Doc View Source AddToHead(TagBase) Add a RazorBlade Tag to the headers of the page Will simply not do anything if an error occurs, like if the page object doesn't exist Declaration void AddToHead(TagBase tag) Parameters Type Name Description ToSic.Razor.Markup.TagBase tag | Improve this Doc View Source SetBase(String) Add a standard base header tag. new in 3.0 Declaration void SetBase(string url = null) Parameters Type Name Description System.String url the optional url for the base tag - if null, will try to default to the real url for the current page | Improve this Doc View Source SetDescription(String, String) Set the Page Description. It will either try to replace the placeholder (second parameter) or otherwise prefix it to the existing title. Declaration void SetDescription(string value, string placeholder = null) Parameters Type Name Description System.String value System.String placeholder | Improve this Doc View Source SetHttpStatus(Int32, String) Set the page status code if possible (it will work in DNN, but probably not in Oqtane) Declaration void SetHttpStatus(int statusCode, string message = null) Parameters Type Name Description System.Int32 statusCode An HTTP status code like 404 System.String message Message / Description text (optional) which would be included in the header | Improve this Doc View Source SetKeywords(String, String) Set the Page Keywords. It will either try to replace the placeholder (second parameter) or otherwise prefix it to the existing title. Declaration void SetKeywords(string value, string placeholder = null) Parameters Type Name Description System.String value System.String placeholder | Improve this Doc View Source SetTitle(String, String) Set the Page Title. It will either try to replace the placeholder (second parameter) or otherwise prefix it to the existing title. Declaration void SetTitle(string value, string placeholder = null) Parameters Type Name Description System.String value System.String placeholder"
  },
  "basics/edit/edit-ux/toolbars/index.html": {
    "href": "basics/edit/edit-ux/toolbars/index.html",
    "title": "In-Page Edit-Item Toolbars and Buttons | 2sxc 13 / EAV 13",
    "keywords": "In-Page Edit-Item Toolbars and Buttons <!-- Data Highlights --> <!-- ADAM --> <!-- Server --> <!-- Prepare --> <!-- Data Source --> <!-- Optimzers --> <!-- Process / Awesomize --> <!-- Libraries --> <!-- data formats --> <!-- Browser --> <!-- Frameworks --> <!-- App show parts --> <!-- Interact parts --> <!-- Edit parts --> <!-- Edit UI parts --> <!-- SPA parts --> <!-- Custom highlight boxes - can be controlled by in-page CSS --> you are here (click to zoom) - discover the stack .context-box-summary .browser-edit { visibility: visible; } 2sxc provides super-fast in-page buttons and toolbars for the content-editor to manage and edit everything. The system is very advanced, so what at first may seem trivial can become very complex as you go deeper into customizing it. Best Practice: Hover vs. Inline Toolbars The toolbars for the editor can be hovering above the elements - usually appearing on mouse-over, or directly inline. Hover-toolbars can also be configured to always be visible, but this is a rare use case. Recommendation Hover-Toolbars are highly recommended. These appear when the mouse moves over the item to be edited. It gives the editor a perfect preview of the page, without cluttering the screen with buttons. Toolbars which hover and are always visible make sense for buttons which the editor may not discover on his own if they are not always visible, or when the item to hover on would be very small, and hard to discover. Inline (non-hovering) toolbars which are always visible should be used as rarely as possible. A good use for this are admin-tables where each row should directly show the edit-button in a buttons-column. How the System Work To make the magic work, these parts are involved: Server side code detects that editing is allowed. This automatically adds context-information to the module in the form of a hidden JSON attribute. You can see these large attributes in the source-code if you are logged in. It also ensures that the edit-javascripts are loaded by the page. This is either auto-detected, because the user has edit-rights Or it was explicitly enabled using @Edit.Enable(...) in razor . Server side code adds stuff to mark where toolbars should appear... ...either (new in 2sxc 9.40) it adds hidden JSON attributes called sxc-toolbar='{...}' to any tag that should have a hover-menu with the desired configuration and settings , added like this <div @Edit.TagToolbar(...)>...</div> in razor ...or it adds an empty <ul toolbar='{...}' settings='{...}> tag to the page, also with the configuration and settings , added using @Edit.Toolbar(...) in razor or the [Content.Toolbar] equivalent in tokens . These toolbars can also hover using an old convention of adding an sc-element class, but that is deprecated since 2sxc 9.40. JavaScript on the client looks at the HTML and picks up both the special <ul> tags as well as all tags having the sxc-toolbar attribute, reads the configuration and generates the necessary html-tags with the buttons and hover-effects. Based on the context-information and the configuration it will choose if advanced button should appear (like edit-template, which only admins should see). Special hover-placement and other visual things are picked up from the settings . If an editor interacts with the menu, each click will result in JavaScript looking at the closest context-information in the page, and using this information to run a command like edit , new or template-develop . When a command has completed, certain code may reload the view, either using ajax or by reloading the page if ajax is not supported by this particular view. Short Example The toolbar system is 100% JavaScript but offers special helpers to improve the experience in other dev-environments. Here's a simple example using Razor: <h1 @Edit.TagToolbar(Content)> @Content.Title </h1> This creates a invisible toolbar which appears and hovers when the mouse moves over the <h1> tag (if the user has edit-permissions). The toolbar has all the buttons for this Content item. The next example is similar, but instead of all default buttons it only shows the edit-button: <h1 @Edit.TagToolbar(Content, actions: \"edit\")> @Content.Title </h1> Basic Toolbar Concepts and Functionality each toolbar is specific to a content-item a page can have many toolbars, each for a different element / purpose usually toolbars are invisible until the mouse hovers over the area to be edited (best practice, but configurable) various show and hover/float behaviors each toolbar is fully customizable - both in regards to which buttons are shown as well as how they are grouped, how they look etc. toolbars are multi-language easy to add in your template or to your JS Apps mobile capable with shake support How to Use We'll try to provide you with full details of the toolbars for advanced use cases. But in most cases you will need the default toolbars minimal or no customizations. For these common cases you should continue on. Razor @Edit.TagToolbar(...) attribute (hovering, recommended) Razor @Edit.Toolbar(...) (non-hovering) Token Toolbars (using simpler placeholder templates) Core JavaScript Architecture Parts Commands This is what is executed when a button is clicked. Commands are things like edit . Some commands need additional parameters like EntityId , resulting in a command more like run('edit', {EntityId: 27}) . Commands can also be run without toolbars, for example from edit links in tables etc. You can read more about Commands, incl. the full list of current command, parameters and how to create custom commands in the Commands section. Buttons This is a square thingy with an icon, which is will run a Command . When the button is created, it is fully configured with icon, commmand and command-parameters. Button-Group : This is a set of one or more -Buttons_ which are shown together. Often there will be a more button at one end of the set, which will show another button-group when clicked. Toolbar : This is a set of one or more Button-Groups . Toolbar Builder : This is an API-layer which builds the HTML for the Toolbar . Toolbar Bootstrapper : This will pick up HTML placeholders for toolbars and run the Toolbar Builder for these. Defaults : For the entire chain to work properly, various initial configurations Read also quickE - the quick-edit hover toolbar - the quick-edit hover-toolbar for inserting/moving modules Inner Content Blocks - blog about inner content-blocks Demo App and further links You should find some code examples in this demo App 2sxc blog History Added toolbars in 2sxc 1.0 ca. 2011 hundreds of ongoing optimizations Added new feature with the Edit.TagToolbar which works using an sxc-toolbar attribute instead of an <ul> tag in 2sxc 9.40. In this version we also changed the CSS functionality to not use the sc-element attribute, but still support it for backward compatibility."
  },
  "basics/edit/edit-ux/toolbars/customize.html": {
    "href": "basics/edit/edit-ux/toolbars/customize.html",
    "title": "Custom Toolbars | 2sxc 13 / EAV 13",
    "keywords": "Custom Toolbars <!-- Data Highlights --> <!-- ADAM --> <!-- Server --> <!-- Prepare --> <!-- Data Source --> <!-- Optimzers --> <!-- Process / Awesomize --> <!-- Libraries --> <!-- data formats --> <!-- Browser --> <!-- Frameworks --> <!-- App show parts --> <!-- Interact parts --> <!-- Edit parts --> <!-- Edit UI parts --> <!-- SPA parts --> <!-- Custom highlight boxes - can be controlled by in-page CSS --> you are here (click to zoom) - discover the stack .context-box-summary .browser-edit { visibility: visible; } The standard toolbars are great for default use cases. But often you want to simplify the edit-UI even more, so that editors will be faster and make fewer mistakes. 2sxc 10.27+ offers a new way to build and create toolbars. Instead of the difficult to use object-structure it has a much simpler commands syntax. These are specs for the command syntax. Tip Read how to use in the How-To Customize Toolbars section. Overview The new toolbar builder works in this way: First, take a toolbar template - typically default or empty Then make changes like adding or removing buttons Optionally override certain defaults Render the toolbar with optional overrides These instructions are a simple list of strings. For example: toolbar=empty tells the system to load the empty template new?contentType=Person will add a button new for the type Person edit?entityId=5593 will add an edit button for the item 5593 These instructions are provided as a JSON array of strings - like this: [\"toolbar=empty\", \"new?contentType=Person\", \"edit?entityId=5593\"] Examples of Build-Instructions Every build instruction consists looks as follows: \"\" - an empty string is valid but not very useful \"/this is just a comment\" - a comment if you need to document something inline \"new\" or \"+new\" - add a new-button \"-edit\" - remove a button - like when slimming down a default toolbar \"%delete&show=true\" - a button modifier - to change a default (the delete button is always hidden by default) \"group=my-group\" or \"+group=my-group\" add a button-group \"+group=my-group&pos=2\" add a button group at index 2 (so in the 3rd-position, 0-based) \"new-quote=new?contentType=Quote\" - an identifier followed by a button name - when having multiple new buttons \"%more&color=red\" - a modifier which changes the color of the icon General Syntax of a Build-Instruction The general syntax is as follows (build-instruction)(&build-params optional )(?call-params optional ) Build Instructions A build instruction consist of 1-3 parts an optional prefix like + to add a button or group (this is the default if no prefix is given) % to modify a default thing - like change a the color of the new-button - to remove a button or group from the list $ for system/global things (this is the default if the command is toolbar , params or settings ) / a comment - like \"/here comes a special add-button\" a command and optional addition like toolbar - for setting the default toolbar template toolbar=default will load the default toolbar with all standard buttons toolbar=empty will load an empty toolbar without any buttons settings - for configuring the toolbar settings - see below params - for parameters which are used in all buttons - see below group - to add a group of buttons group=my-group-name gives the group a name, for placing buttons in it `-group= add , edit etc. - all known commands of buttons Build Parameters ( &... ) If you have a build-instruction and need to add some parameters you must separate them with an & and add the parameters in url-style, like &color=red . Build Parameters for Toolbar ( toolbar ) The toolbar currently doesn't have any additional parameters. But you can add &key=value which will be used as settings, if settings are not also provided. Build Parameters for Settings ( settings ) Settings affect how the toolbar is shown. These are the known settings: &color=... - specify a different button - see color &hover=left or =right or =none - default is right &class=my-class to add one or more classes to the toolbar Build Parameters for Params ( params ) Params don't have any additional settings - they only have parameters (after the ? ). See below. Build Parameters for Groups ( group ) Groups currently don't have additional parameters. Build Parameters for Buttons Buttons can have the following parameters: &icon=icon-class-name allows you to set an alternate icon &color=... gives the button another - see color &show=true or &show=false - force show/hide a button Most common use case is to force-show or hide an existing button. For example, if you think it's ok to show the delete button, just use delete&show=true &class=your-class add one or more classes to the button to affect styling &title=some-text - mouseover message Call Parameters ( ? ) Most instructions can have additional call-parameters - separated by a ?... . For example, this would create an additional + button to create a new contact: add-contact=add?contentType=Contact Call Parameters for Toolbars & Settings The toolbar and settings don't have any additional parameters. But you can use ?key=value&key2=value on the toolbar, which will be used as params if params are not provided. Call Parameters for Params Params at the global level will be used by all buttons. The most common params are entityId=some-number - mainly used for edit, delete etc. entityGuid=guid-guid-guid - mainly used for delete contentType=ContentTypeName - mainly used for adding new items title=some-text - mainly used to show a title when asking to delete something isPublished=true|false prefill:Field1=val1&prefill:Field2=val2 etc. for=someKey or for=targetType,keyType,key for list management useModuleList=true|false sortOrder=# Using Prefill Parameters Prefill parameteres are mainly used for creating new items like add?contentType=Book&prefill:Title=This is nice title The syntax is a bit special because you may need to add multiple prefill parameters, like: add?contentType=Book&prefill:Title=Please enter name&prefil:Author=unknown Since many things can go wrong with prefills, this is what you need to know All prefill parameters start with prefill: followed by the field name. The field name is case sensitive, so you'll probably have to write Title instead of title . You can use multiple prefills, like ...&prefill:Title=Hello&prefill:Intro=welcome! When using special characters which cause trouble in urls, make sure they are uriEncoded. If you do the prefill using the razor tag @Edit.Toolbar(...) or @Edit.TagToolbar(...) this happens automatically, but if you use JavaScript to prepare it, you should use encodeURIComponent to prepare the value (not the prefix prefill:... ) Special considerations for each type of field for text fields just write the text as is like prefill:Title=Todays News - remember to encode if you expect special characters. When you encode things, you can also prefill html. for number fields just use prefill:Priority=47 for boolean switch fields just use prefill:UseLightbox=true for dates we suggest to use the same ISO format prefill:PublicationDate=2020-04-01 as this will always be recognized correctly. If you use another format like 4/1/2020 you risk that the UI will auto-detect the date based on the user and maybe pick the wrong number as the month. for dates with time you should really use ISO with Zulu time code like prefill:ShowFrom=2020-04-01T10:30Z . The Z at the end means that it won't adjust for time zones - otherwise the UI may show a different time. for related entities (like prefilling a category) use the target Guid, like prefill:Category=b7c1c2e1-4896-4999-a0bc-87ddf3ce31cb . As of now, you must always use the Guid, IDs are not supported because as the app is exported and re-imported, the IDs will change. to assign multiple entities (like for category fields with multiple categories), separate them with commas, like prefill:Category=b7c1c2e1-4896-4999-a0bc-87ddf3ce31cb,91753b4d-4932-4b22-af1c-f6ac2b76c67a Using Filter Parameters Filter parameteres are mainly used for creating dialogs which show only some items like contentitems?contentType=Book&filter:ModuleId=573 The syntax is a bit special because you may need to add multiple filter parameters, like: contentitems?contentType=Book&filter:ModuleId=573&filter:Author=Daniel Since many things can go wrong with filters, this is what you need to know All prefill parameters start with filter: (without an s ) followed by the field name. The field name is case sensitive, so you'll probably have to write Title instead of title . You can use multiple filters, like ...&filter:Title=Hello&filter:ModuleId=52 When using special characters which cause trouble in urls, make sure they are uriEncoded. If you do the prefill using the razor tag @Edit.Toolbar(...) or @Edit.TagToolbar(...) this happens automatically, but if you use JavaScript to prepare it, you should use encodeURIComponent to prepare the value (not the prefix filter:... ) Using Metadata Parameters The metadata parameters are for creating new metadata or editing existing data. There is a short and a long syntax: for=key - for example, for=file:930 - this will create metadata for a CMS-object with the ID file:930 . for=targetType,keyType,key like for=10,string,file:930 which has the same effect as the previous example. Note Metadata buttons always also need a contentType parameter and usually an entityId parameter. So if an entity already has this metadata-assignment, the dialog will show an edit for that and not create a new one. The entityId should be 0 when no entity exists yet. To use metadata, read more about metadata (TODO). Special Notes Colors Both settings and buttons can have an &color=... parameter. The ... can be just one color or two, like &color=red,green or &color=brown . When specifying colors you can either use standard names like red or HEX-codes like FF0000 . You cannot use the # hash symbol, so when specifying hex-colors, always just write the characters. The button rendering system will auto-detect hex color codes. Note that you can also use semi-transparent hex-codes, like FF000088 . Groups The following button groups exist by default. You can target them to add your buttons, or remove them using -group=name : default - the main initial buttons like edit, add etc. list - anthing having to do with the current list - move-up/down etc. edit-advanced - advanced, not-recommended buttons like delete view - anything related to the view - edit template etc. app - app related buttons Read also check out the list of commands/buttons Demo App and further links You should find some code examples in this demo App TODO: History Introduced custom Toolbars in 2sxc ca. v5 Added to 2sxc 10.27 .01 in March 2020 Prefill support added in 10.27 .02 in April 2020"
  },
  "basics/edit/edit-ux/quick-edit.html": {
    "href": "basics/edit/edit-ux/quick-edit.html",
    "title": "QuickE (Quick Edit) | 2sxc 13 / EAV 13",
    "keywords": "QuickE (Quick Edit) <!-- Data Highlights --> <!-- ADAM --> <!-- Server --> <!-- Prepare --> <!-- Data Source --> <!-- Optimzers --> <!-- Process / Awesomize --> <!-- Libraries --> <!-- data formats --> <!-- Browser --> <!-- Frameworks --> <!-- App show parts --> <!-- Interact parts --> <!-- Edit parts --> <!-- Edit UI parts --> <!-- SPA parts --> <!-- Custom highlight boxes - can be controlled by in-page CSS --> you are here (click to zoom) - discover the stack .context-box-summary .browser-edit { visibility: visible; } QuickE (pronounced quick-e ) is the quick-edit feature inside 2sxc to quickly add / move modules and inner content blocks. It supports touch and usually is used with a mouseover. In the current version, it allows you to do the following in normal view-mode: add a content or app module on any position in a Dnn panes move / delete any Dnn module using a copy-paste concept send any Dnn module to an empty pane (which couldn't do paste, as the target is invisible) add a content or app content-block to any inner-content area move / delete any content-block inside an inner-content area Since version 2.0 you can also configure some of this at skin and template level. How to use By default any page that has any 2sxc module added will automatically load quickE because it needs it to provide buttons/toolbars for inner content blocks. We also recommend to include the JS in the skin by default, so that quickE is already enabled on empty pages as well. You can find the necessary asp.net web-control in our Bootstrap Instant Theme Here's how: <%@ Register tagprefix=\"Edit\" tagname=\"QuickEdit\" src=\"~/DesktopModules/ToSIC_SexyContent/DnnWebForms/Skins/QuickEdit.ascx\" %> <Edit:QuickEdit runat=\"server\" /> The above lines first tell .net that this control QuickEdit exists, and then adds it to the page using the <Edit:...> tag. Note that this tag won't create any HTML, it will just tell Dnn that it must load the relevant JavaScripts when a user is logged on. Once it's included, it will just work automatically. Auto-Disabled Module-Quick-Edit on Details Pages By default quickE will change it's behavior if it finds inner-content blocks. The reason is that often inner-blocks are found on child pages of something, for example in blog-post details. If the user could insert both modules and inner-content on a details page, then the user would often by accident insert modules (instead of content-blocks). The user would believe that he did the right thing, when in reality the newly added module would now show up on all other details-pages as well. Now there are cases where this auto-disable shouldn't happen - for example in accordeon-style modules which are used on normal pages. This can be configured as explained below: Configuring quickE Quick-Edit Since quickE 2.0 (released in 2sxc 8.7) you can now also configure it a bit. Here are the most important features enable / disable the entire quickE enable / disable module quick-edit enable / disable inner-block quick edit Read more about this in the Html Js documentation page Read also Inpage Toolbars - the item-scoped toolbars used for editing Inner Content Blocks - blog about inner content-blocks Demo App and further links You should find some code examples in this demo App 2sxc blog History quickE 1.0 in 2sxc v08.04 quickE 2.0 with move/delete dnn module and configurable in 2sxc 08.07.00"
  },
  "basics/edit/edit-form/index.html": {
    "href": "basics/edit/edit-form/index.html",
    "title": "Edit Content or Data in Dnn / 2sxc | 2sxc 13 / EAV 13",
    "keywords": "Edit Content or Data in Dnn / 2sxc <!-- Data Highlights --> <!-- ADAM --> <!-- Server --> <!-- Prepare --> <!-- Data Source --> <!-- Optimzers --> <!-- Process / Awesomize --> <!-- Libraries --> <!-- data formats --> <!-- Browser --> <!-- Frameworks --> <!-- App show parts --> <!-- Interact parts --> <!-- Edit parts --> <!-- Edit UI parts --> <!-- SPA parts --> <!-- Custom highlight boxes - can be controlled by in-page CSS --> you are here (click to zoom) - discover the stack .context-box-summary .browser-edit-ui { visibility: visible; } Editing mostly happens in stand-alone dialogs which are JavaScript based (built using Angular). These dialogs are typically dialogs like edit an item edit a combination of items - like a content item and an assigned presentation-settings item The configuration of these edit-dialogs happens in the Content Type configuration, which automatically generates the correct dialog for the user. To understand this better, you may want to research Content-Types which define what fields exist in the edit-dialog Field Data Types which determine what options a field has and how it's stored Custom input types for special input types not provided by default Presentation Settings which tell the view how an item is to be shown, check also the content/data differences View/Template configuration which assigns certain content-types to Templates - check out this tutorial Difference between Content and Data and how it affects the in-page editing features Learn More About... How to create Custom Input Fields Advanced fields like the GPS-picker Configuration like Enable-A-Field, Can-be-Translated, Default-values"
  },
  "basics/configuration/index.html": {
    "href": "basics/configuration/index.html",
    "title": "Configuration, Settings and Resources in 2sxc ‚ú® new! | 2sxc 13 / EAV 13",
    "keywords": "Configuration, Settings and Resources in 2sxc ‚ú® new! <!-- Data Highlights --> <!-- ADAM --> <!-- Server --> <!-- Prepare --> <!-- Data Source --> <!-- Optimzers --> <!-- Process / Awesomize --> <!-- Libraries --> <!-- data formats --> <!-- Browser --> <!-- Frameworks --> <!-- App show parts --> <!-- Interact parts --> <!-- Edit parts --> <!-- Edit UI parts --> <!-- SPA parts --> <!-- Custom highlight boxes - can be controlled by in-page CSS --> you are here (click to zoom) - discover the stack .context-box-summary .data-configuration { visibility: visible; } Settings can be a complex issue as the should have an effect on differenc scopes. Here are some examples: An input-field may have a setting to show/hide a button An App may have a setting which affects the entire App A system may have a setting which affects the entire installation In an ideal world, these settings can compound each other to determine defaults, fallbacks and overrides. 2sxc has some of this ready, other parts are still in development. Tip In 2sxc/EAV we talk about Configuration when something has a standard set of properties and about Settings when the properties can vary dynamically. So an App-Configuration contains standardized aspects like the Folder it's in, while App-Settings can be a dynamic set of properties that are different in each App. Resources on the other hand are simply meant for language/culture specific labels, logos and similar. They are also dynamic, so they can have as many values as you need. Settings and Resources are Stacked Settings and Resources can be configured at any level of the application. This is how it stacks up: üëâ Learn more about the Settings Stack in 2sxc ‚ú® new! and the Resources Stack in 2sxc ‚ú® new! üëâ Learn about the predefined System-Settings üëâ Learn about the predefined System-Resources Global Level Global Configuration As of now (v12) global Configuration only exists for Features which can be enabled/disabled at the system level. This is primarily for security reasons. In addition some minor global Configuration exists for alternate Caching systems (like using Redis) but this is only for 2sxc Professional . Global Settings and Resources Global Settings and Resources were introduced in 2sxc 12.04. Read about configuring them in the Settings Stack in 2sxc ‚ú® new! . In C#/Razor you can access the Settings Stack using the Settings object and the Resources Stack using the Resources object . Note: there are some global ADAM Settings that can be configured in a different way, but it's not standardized/finalized yet, so not public, and we'll try to move that into the new standard. Site Level (Portal) Site Configuration Only Languages are configured at Site-Level. Site Settings and Resources Site-Wide Settings and Resources were introduced in 2sxc 12.04. Read about configuring them in the Settings Stack in 2sxc ‚ú® new! . In C#/Razor you can access the Settings Stack using the Settings object and the Resources Stack using the Resources object . App Level App Configuration Apps have a standard App-Configuration containing their version, name, folder etc. In Razor you can access this on the dynamic App.Configuration object. App Settings and Resources Apps can have custom App-Settings and App-Resources which every app manages itself. The names/types of these settings can be freely configured, as each App has a Content-Type called App-Settings which can have different fields as needed. You can also configure the standardized SettingsSystem / ResourcesSystem . In C#/Razor you can access the Settings Stack using the Settings object and the Resources Stack using the Resources object . View Level View Configuration Each view has View-Configuration containing the name, how it works with data and more. In Razor you can access basic View information on the CmsContext.View object, like the Identifier or the Edition . See ICmsView View Configuration was introduced ca. v4 and made accessible to Razor in v12.02 View Settings and Resources A view can have Views-Settings and View-Resouces which apply to all uses of this View. Since View-Settings could be re-used in various views, the concept more flexible than App Settings/Resources , meaning that you could re-use both the content-type as well as the settings data. In C#/Razor you can access the Settings Stack using the Settings object and the Resources Stack using the Resources object . Content-Type Level Content-Type Configuration Each Content-Type has Content-Type Configuration with the description, icon and more. The Configuration can be multi-language. Content-Type Settings and Resources. There are no Content-Type settings or resources. Attribute (Field) Level Attribute Configuration Each Attribute / Field can be configured as needed. The configuration options depend on the Attribute-Type. The Configuration can be multi-language. Attribute Settings and Resources There are no Attribute Settings or Resources. Entity (Item) Level Entity Configuration, Resources and Settings An Entity just has the data it caries, and no additional intrinsic Configuration, Settings or Resources. Entities themselves are multi-language. Per Entity-Use (Item-Use) Settings aka Presentation Settings Items can have a per-use setting called Presentation - see Content-Presentation . This means that when the item is shown in a specific view, there may be settings which configure how it's to be shown. Since each View may need different settings (a map View could need other presentation-settings than a text/image View) this is specific to each use of an Entity. Per List-Use Settings aka Header-Presentation Settings If a View is configured to be a List then it can also have a Header and also Header Presentation Setttings which work just like Content-Presentation . History View Configuration introduced ca. v4 App Configuration, Settings and Resources introduced in v6.0 View Settings and Resources introduced in v12.02 Site and global settings introduced in 2sxc 12.04 Full Settings Stack introduced in 2sxc 12.04 Full Resources Stack introduced in 2sxc 12.04"
  },
  "basics/cms/search/index.html": {
    "href": "basics/cms/search/index.html",
    "title": "Customize the Search-Index Results (Dnn ‚ò¢Ô∏è only) | 2sxc 13 / EAV 13",
    "keywords": "Customize the Search-Index Results (Dnn ‚ò¢Ô∏è only) <!-- Data Highlights --> <!-- ADAM --> <!-- Server --> <!-- Prepare --> <!-- Data Source --> <!-- Optimzers --> <!-- Process / Awesomize --> <!-- Libraries --> <!-- data formats --> <!-- Browser --> <!-- Frameworks --> <!-- App show parts --> <!-- Interact parts --> <!-- Edit parts --> <!-- Edit UI parts --> <!-- SPA parts --> <!-- Custom highlight boxes - can be controlled by in-page CSS --> you are here (click to zoom) - discover the stack .context-box-summary .prepare-all { visibility: visible; } Dnn has a built-in search engine which crawls all the modules asking them for data. Every 2sxc module will be queried and will give the search index all the entities which are given to this module. Default Scenarios If a view shows data which was added by the editor these items will be in the Default stream and there may also be a single item in the Header stream. This data is given to the search index. This applies to both single-item templates as well as to lists. Note that Presentation items are not given to the search index as they should only contain settings how to show something, and not the real relevant data. If a view shows data from a Query then all the streams of that query will be given to the search index. Why Customize the Search Index? You can customize this behavior to your hearts desire. Here are typical reasons to do so: You may show the same items in many places - for example the Home page may show the top 3 news, but search results shouldn't point to these. A list/details setup would have each item in the list-view, but the search result should lead it to the details view You may want to exclude some query-streams in the search results - like exclude the categories-stream since it may not be relevant Ways to Customize the Search Results There are two ways to customize the search results: Using configuration new in v12 Using a separate code file which does this new in v12 Using code inside a Razor file not recommended, but works in older versions of 2sxc Customize the Search Results Using Configuration The following configuration options let you specify how data is handed to the Search Indexer. These options are set in the View configuration. Tip If you expect to use the same template in many places but need different search-configurations, just configure multiple views using different Search configs. Ensure Default Search Behavior By default the data given to the Module is also provided to the search. This is what it looks like in the View-Configuration . Don't Show Any Data in the Search Results Reasons for doing this: If you have views showing extracts of data (like the top 3 news) which are already added to the search index on the full news list, then you may create a Top News view which shouldn't return data If you show a tag-cloud this may not make sense to include in a search index This is where you can find the settings in the view configuration: Exclude Query-Streams from the Search Results In some cases your View may use a Query containing a lot of streams like Default and Categories , where only Default would make sense to include in the search. For this you can simply configure what streams you want. Note that these UIs automatically appear if you are using a Query : Custom Search-Index Using Code For very advanced cases you will want full control over what lands in the search index. To implement this, you can create your own Search Mapper in C#. This is how to configure this: üëâ Read about Custom Search in C# here Note In older versions of 2sxc (between 6 and 12) the Search Customization code was placed in the Razor file. This is deprecated and should not be used any more. History Introduced in 2sxc 6.2 Added support for newer Dnn versions at a later time - not sure when Introduced Search Configuration in 2sxc 12.02 Introduced separate Code-File for this in 2sxc 12.02"
  },
  "basics/cms/permissions/index.html": {
    "href": "basics/cms/permissions/index.html",
    "title": "Permissions | 2sxc 13 / EAV 13",
    "keywords": "Permissions <!-- Data Highlights --> <!-- ADAM --> <!-- Server --> <!-- Prepare --> <!-- Data Source --> <!-- Optimzers --> <!-- Process / Awesomize --> <!-- Libraries --> <!-- data formats --> <!-- Browser --> <!-- Frameworks --> <!-- App show parts --> <!-- Interact parts --> <!-- Edit parts --> <!-- Edit UI parts --> <!-- SPA parts --> <!-- Custom highlight boxes - can be controlled by in-page CSS --> you are here (click to zoom) - discover the stack .context-box-summary .data-configuration { visibility: visible; } 2sxc / EAV permissions help you configure who may edit/create data - optionally with \"may only save as draft\" (new in 9.30). Note that if something doesn't have custom permissions, you'll still have default permissions that apply (see below): Introduction to Permissions Permissions are usually a list of zero or more permissions - like this: When you edit a permission, it looks like this: To access the permissions, you'll usually find a person-button in the actions of an item: Permission Overview Items which can accept permissions are: Content Types - permissions regulate who can create / edit items of that type Views / Templates - permissions regulate, who can see this view if accessed through url-parameter Apps - permissions regulate across all content types, who may edit/create etc. new in 9.30 Fields - permissions regulate, who may upload files new in 9.30 Permissions consist of the following parts: Requirements - what the current user must fulfill, for it to apply Grants - what is allowed with this permission Understanding Requirements For a permission to apply, you must specify for whom this is. To do this, you can choose various requirements: Dnn Permissions: in this case, you can specify if the user has view permissions, this applies User Identity: in this case you can specifiy a user GUID new in 9.30, requires the feature to be enabled Group ID(s): if a user is in any of these Dnn groups, the rule applies new in 9.30, requires the feature to be enabled Understanding Grants If a permission applies, it will grant the current user some rights - like creating or editing data. Grants are internally coded as a letter of the alphabet, like: c for create d for delete ƒç for create drafts only f for full (all) permissions A grant can contain multiple rights - like crud for create, read, update, delete. Many grants like f will automatically grant other things (obviously). Default Permissions It's important to understand that for many scenarios, default permissions already apply. Super-users may always do everything, and admins may read/write all data. These default permissions cannot be reduced with new permissions at the moment, so an admin always has read/write and cannot be degraded to lower permissions. Using Permissions in Code As of now, the permissions API isn't final, so if you want to use it in code, you can immitate code you can find in the source. But these commands will change when the API is final, so you'll end up making adjustments. History Basic permissions (ContentType / View) added ca. 2sxc 7 Permissions for draft-save-only added in 2sxc 9.30 Permissions for user IDs and groups added in 2sxc 9.30"
  },
  "basics/cms/page-publishing/index.html": {
    "href": "basics/cms/page-publishing/index.html",
    "title": "Dnn/Evoq Page Versioning / Publishing and Workflow | 2sxc 13 / EAV 13",
    "keywords": "Dnn/Evoq Page Versioning / Publishing and Workflow This page explains how a Dnn / Evoq does page versioning and workflow, and how to leverage this with 2sxc. Background: Dnn / Evoq Page/Module Versioning Dnn / Evoq had a few different ways of doing versioning, but since Dnn 7.4.2 it basically uses a model which works as follows: Each page has a live version number (for this demo we'll say version P27 - for page 27). On this page, various modules exist, each having their own version number. Let's say we have a gallery-module which is currently on version 6 (MG6) and a module with a form in version 12 (MF12). So the page information currently has: P27 live Module 1: MG6 live Module 2: MF12 live Basic Example with Adding Module If a new module with a form is added in between, Dnn will do the following P28 draft (P27 is still live ) Mod 1: MG6 live (same version on live and draft ) Mod 2: MF1 new , regarded as draft Mod 3: MF13 draft (the position has changed, so the module info has changed) As further changes to modules additions / removals / reordering happen, this happens on the P28 version only. So even if we delete or rename a module, the live version will not show this. So Dnn mechanims incl. moving/renaming of modules is a Dnn/Evoq responsiblity, and is versioned by Dnn/Evoq. We'll talk about the internal content of a module further down. Publishing a Page Basically when an editor publishes a page, Dnn will do the following: set P28 to the published page tell each module to publish in that version (in case the module support inner versioning - read on...) Dnn / Evoq Workflows Because these topics are almost undocumented - and exist in different implementations, they are confusing. You need to know the following about workflows: Workflows apply to the page only, so pages need to know if they have a workflow and which one Modules don't know about these workflows... ...because Modules only get notified when the workflow reaches a \"publish\" state Background: Module Inside/Inner Versioning Modules have their own content which may or may not be versioned. 99% of all modules don't version their content and have no history. And 99.9% don't support Dnn/Evoq page versions & publishing . So IF a module doesn't know about these mechanisms, then changes inside that module will not be versioned and they will be live immediately as they are applied. But let's assume our modules do support this, and let's say the gallery with module-info in V6 (it was moved a few times, so it has 6 versions) still has the initial V1 content, which we'll call MGi1 (Module Gallery inside V1). Module Version Tree with Inner Version So let's look at the versioning tree as it really is P27 live Mod 1: MG6 live with MGi1 Mod 2: MF12 live with MFi26 (had made configuration changes, each versioned) Now let's simulate a change... Inner Content Changes Let's say the editor makes a small change to the Form-module. This will notify Dnn of a change. As this happens, it must tell Dnn that it has a new version - like this, so Dnn will also place the page in a new version (for later publishing): P28 draft Mod 1: MG6 live with MGi1 live Mod 2: MF12 live with MFi27 draft Note that if the form module makes more changes, it can choose to report this or not, since basically the newest version is a draft already, on a draft-page. Inner Content Publishing Now once the user decides to publish this page, each module (incl. the Forms-Module) will be notified to publish it's version. Dnn will tell the form which version it should publish (in this case v27). The form must take care of whatever processing to ensure that this version is now live / public. 2sxc Support for Dnn / Evoq Publishing 2sxc support the core parts of Dnn/Evoq Publishing and versioning. To be more specific, it will detect if the page requires a publishing workflow tell Dnn/Evoq that on-page content was edited modify the GUI to only allow draft/publish options as it corresponds with the page information listen to Dnn/Evoq messages to publish on-page information This sounds simple, but it's very complex because 2sxc can be used in many scenarios, and in some it's not always clear when to draft or publish something. So there are some exceptions, which are documented below. Activating Page Publishing Feature on 2sxc You don't have to do anything - 2sxc asks the environment (Dnn/Evoq) it it expects any publishing steps, and will automatically adjust its behavoir. Making Changes Start a Dnn-Page Versioning This too happens automatically, if the page has a publishing setup in Dnn/Evoq. Auto-Draft and Auto-Publish explained To be sure you understand what's going on, please note the following: Only changes which directly relate to a page cause auto-draft / auto-publish Example 1: A user changes a blog post on a blog-page. The page will get a new draft version and the live blog will show the old one, while the draft will show the new one. When the page is published, the draft will become live. Changes to content-items which are not directly tied to a page, will not cause drafting / publishing Example 2: When the user edits the blog post he also creates another category (which is used as data and not as on-page content). This category is immediately live, but will probably not show up as it's only used in the edited blog-post. Example 3: An admin-user goes into the admin UI and creates a blog post from within the admin-UI. It will not auto-default to draft , as this is not specific to any page. But if the user manually sets it to draft, it will be published when a page showing it is released. Restoring Previous Versions Dnn / Evoq has a mechanism for restoring previous page versions, and when implemented perfectly, all modules inside it could also revert back to the state it was in at that time. Such a perfect world is hard to implement and nearly impossible in a dynamic-content setup. For example, apps may have been deleted or content-types (schemas) may have changed. So the idea sounds good, but is impossible to implement correctly. So 2sxc goes the pragmatic way: You can restore any item to a previous version - so you can always roll back a blog-post to a previous copy, but putting the page back into an old version will not roll back anything inside a 2sxc-module. To Restore previous versions of content-items, use the history (clock) icon in the toolbar. Technical Deep Dive - Behind the Scenes In case you run into trouble or need to know more about the mechanisms, here's what you need to know What is an On-Page Change and What is Not By definition, any item created or modified directly from a toolbar button in the front end is regarded as an On-Page change and will start the page-draft process. This is basically all the buttons which normal (non-admin) users see. If you haven't heard of hiding admin-buttons, please read the concept on hiding advanced features . Specifically, this includes the following actions: editing content directly from a toolbar button adding new content to the page from a toolbar button moving items up/down in a content-item list using a toolbar button replacing an item on a page using the toolbar button The following actions are not regarded as on-page changes, and don't auto-force drafting: editing any data from the Admin-UI editing app-resources or app-settings creating / modifying views importing data / importing apps What is Published on Page-Publish and What Not When a page is published, Dnn/Evoq will tell each module that it should now publish that specific version assigned to that page version. When this happens, 2sxc does the following: Retrieves the (usually invisible/secret) content-group entity which contains the information, what template and what items are shown on this module. This one is probably stored as a draft from previous changes, as this one keeps track of the items to show and the order to show them in. This draft is then published. Reviews all items on the four primary in-streams, checks each entity and publishes draft versions. The streams it will process are: Default (this is the one provided on Content) Presentation ListContent (the header-content item) ListPresentation (the header presentation item) Note that other streams are not auto-published. This is to prevent side-effects. For example, a Blog-View could have additional streams to visualize authors, categories etc. but these will not be auto-published, as it is assumed that these are helper-data and not specifically on-page data for this page. Publishing Additional Items If you want to auto-publish additional items, just add them to a stream PartOfPage . Inner Content Handling (Very Rich Content) Inner Content is not currently treated as belonging to the page, as it is inside content which is already drafted/published. So inner-content is always published when created. Note that this is not fully tested/implemented, you may have unexpected consequences when working with inner content. Image And Asset Handling Images and assets are not versioned / published, as Dnn provides no effective way to enable this. So as of now, the following will happen: if a content-type has a file-field using ADAM with a single file (not library), then draging in an additional file will behave like the publishing, because the new file has a new number, and this is not in use till the item is published if the user drags in an updated file with the same name, it will internally receive a number at the end, and also stay unpublished, as it's a different file on the server if a user manually replaces a file (not drag-drop in ADAM) or deletes a file and then uploads the file with the same name, then this file is live, as it really changed the file on the server if you are using a library-field in ADAM (often used in galleries), then these files are automatically live as well, and deleted files are also removed immediately In case you are using an ADAM library and would like to only show the files which existed before you created an unpublished draft, this can be done in your template. Just remember that certain changes (like file-changes on the server) could change the modified date, and that deleting files also really removes live files as well. Here's how you can change your Razor: @* before, showing all files *@ @foreach(var pic in AsAdam(Content, \"Files\").Files) { <span>@pic.FileName, @pic.LastModificationTime</span><br> } @* only showing \"older\" files *@ @foreach(var pic in ((IEnumerable<ToSic.SexyContent.Adam.AdamFile>)AsAdam(Content, \"Files\").Files).Where(f => f.LastModificationTime <= Content.Modified)) { <span>@pic.FileName, @pic.LastModificationTime</span><br> } Notes and Clarifications As mentioned, this is the default setup. In the case of data-oriented apps, which query data from somewhere, you may have other expectations. At the moment there is no additional mechanism to customize this any further, but we believe that you can easily cover all possible scenarios with this setup. Read also Data Model of Dnn-Modules mapping to content In-Depth information about content-binding History Introduces in 2sxc 9.5"
  },
  "net-code/dynamic-code/create-instance.html": {
    "href": "net-code/dynamic-code/create-instance.html",
    "title": "CreateInstance(...) Command | 2sxc 13 / EAV 13",
    "keywords": "CreateInstance(...) Command If you have external code you want to import you can use CreateInstance . ‚ö° The official API docs . Discover More in the Razor Tutorials We have an rich series of Razor tutorials . You should really check them out üëç. Example @inherits Custom.Hybrid.Razor12 @{ var helper = CreateInstance(\"_helpers.cshtml\"); var businessLogic = CreateInstance(\"BusinessLogic.cs\"); } @helper.ShowIntroduction <div> @businessLogic.CalculateSecretHash() </div> The code you will import is either another Razor page ( _*.cshtml ) or a C# code file ( *.cs ). Also Read Tutorial: Reuse Shared Code Apps Catalog - we suggest you check out some apps - almost all use this. History General Tokens introduced in 2sxc 8.0 Added extra security switch in 2sxc 9.32"
  },
  "api/dot-net/ToSic.Eav.Apps.IAppDataConfiguration.html": {
    "href": "api/dot-net/ToSic.Eav.Apps.IAppDataConfiguration.html",
    "title": "Interface IAppDataConfiguration | 2sxc 13 / EAV 13",
    "keywords": "Interface IAppDataConfiguration The configuration of an app-data - usually relevant so the source will auto-filter out unpublished data for normal viewers. Namespace : ToSic.Eav.Apps Assembly : ToSic.Eav.Apps.dll Syntax [InternalApi_DoNotUse_MayChangeWithoutNotice(\"this is just fyi\")] public interface IAppDataConfiguration Properties | Improve this Doc View Source Configuration Configuration used to query data - will deliver url-parameters and other important configuration values. Declaration ILookUpEngine Configuration { get; } Property Value Type Description ILookUpEngine | Improve this Doc View Source ShowDrafts If this instance is allowed to show draft items This is usually dependent on the current users permissions Declaration bool ShowDrafts { get; } Property Value Type Description System.Boolean"
  },
  "api/dot-net/ToSic.Eav.DataFormats.EavLight.html": {
    "href": "api/dot-net/ToSic.Eav.DataFormats.EavLight.html",
    "title": "Namespace ToSic.Eav.DataFormats.EavLight | 2sxc 13 / EAV 13",
    "keywords": "Namespace ToSic.Eav.DataFormats.EavLight The ToSic.Eav.Formats Namespace contain DTO-style objects which are meant for transferring or import/export of data. Most of the formats are currently not publicly documented, as they can still change a bit. Note that the formats themselves are more like DTO objects, so they can be serialized to JSON, XML or other future data formats. EavLight The EAV Light data format is very trivial, basically a dictionary with values. It's mainly used to serialize entities for use in JS etc. Internally it's used for some admin-dialogs, and custom Razor and Web-APIs usually use this to provide one or more entities for direct use - either as inline-JSON or to then automatically serialize. Discover More in the Razor Tutorials We have an rich series of Razor tutorials . You should really check them out üëç. Classes EavLightEntity DTO for the most basic JSON format of EAV. It's a simple dictionary with name-value pairs. It is for export/serialization only, there is no official way to re-import an entity of this type. It is only meant to hold values of one language. Note that keys are always System.StringComparer.InvariantCultureIgnoreCase EavLightEntityReference DTO for a relationship pointer to other entities. Used in preparing Entities for Basic-JSON serialization. Interfaces IConvertToEavLight Helper / Service to prepare Entities, Streams and DataSources to ToSic.Eav.DataFormats.EavLight for automatic serialization in WebApis. It can prepare single items like IEntity and IEntityWrapper like DynamicEntities. It can also prepare IEnumerable/List of these types, as well as DataStream and DataSource objects. In Custom Code / Razor / WebApi you can get this service with Dependency Injection like var converter = GetService&lt;IConvertToEavLight>();"
  },
  "api/dot-net/ToSic.Eav.Data.IEntityLight.html": {
    "href": "api/dot-net/ToSic.Eav.Data.IEntityLight.html",
    "title": "Interface IEntityLight | 2sxc 13 / EAV 13",
    "keywords": "Interface IEntityLight Represents a light Entity, which is a very basic entity without multi-language capabilities, versions or publishing. For the more powerful Entity, use IEntity . Inherited Members IAppIdentityLight.AppId Namespace : ToSic.Eav.Data Assembly : ToSic.Eav.Core.dll Syntax [InternalApi_DoNotUse_MayChangeWithoutNotice(\"this is just fyi\")] public interface IEntityLight : IAppIdentityLight Properties | Improve this Doc View Source Created Gets the Created DateTime Declaration DateTime Created { get; } Property Value Type Description System.DateTime A date-time object. | Improve this Doc View Source EntityGuid Gets the EntityGuid Declaration Guid EntityGuid { get; } Property Value Type Description System.Guid The GUID of the Entity | Improve this Doc View Source EntityId Gets the EntityId Declaration int EntityId { get; } Property Value Type Description System.Int32 The internal EntityId - usually for reference in the DB, but not quite always (like when this is a draft entity). | Improve this Doc View Source Item[String] Gets an Attribute by its StaticName Declaration object this[string attributeName] { get; } Parameters Type Name Description System.String attributeName StaticName of the Attribute Property Value Type Description System.Object The attribute - probably an IAttribute<T> | Improve this Doc View Source MetadataFor Information which is relevant if this current entity is actually mapped to something else. If it is mapped, then it's describing another thing, which is identified in this MetadataFor. Declaration ITarget MetadataFor { get; } Property Value Type Description ITarget A ITarget object describing the target. | Improve this Doc View Source Modified Gets the Last Modified DateTime Declaration DateTime Modified { get; } Property Value Type Description System.DateTime A date-time object. | Improve this Doc View Source Owner Owner of this entity Declaration string Owner { get; } Property Value Type Description System.String A string identifying the owner. Uses special encoding to work with various user-ID providers. | Improve this Doc View Source Relationships Relationship-helper object, important to navigate to children and parents Declaration IRelationshipManager Relationships { get; } Property Value Type Description IRelationshipManager The IRelationshipManager in charge of relationships for this Entity. | Improve this Doc View Source Title Gets the \"official\" Title-Attribute IAttribute<T> Declaration object Title { get; } Property Value Type Description System.Object The title of this Entity. The field used is determined in the IContentType . If you need a string, use GetBestTitle() instead. | Improve this Doc View Source Type Gets the ContentType of this Entity Declaration IContentType Type { get; } Property Value Type Description IContentType The content-type object. Methods | Improve this Doc View Source GetBestTitle() Best way to get the current entities title. The field used is determined in the IContentType . If you need the attribute-object, use the Title instead. Declaration string GetBestTitle() Returns Type Description System.String The entity title as a string."
  },
  "api/dot-net/ToSic.Eav.Data.EntityBasedType.html": {
    "href": "api/dot-net/ToSic.Eav.Data.EntityBasedType.html",
    "title": "Class EntityBasedType | 2sxc 13 / EAV 13",
    "keywords": "Class EntityBasedType Foundation for a class which gets its data from an Entity. This is used for more type safety - because some internal objects need entities for data-storage, but when programming they should use typed objects to not accidentally access invalid properties. Inheritance System.Object EntityBasedType EntityBasedWithLog Permission Implements IEntityBasedType IEntityWrapper IHasDecorators < IEntity > Namespace : ToSic.Eav.Data Assembly : ToSic.Eav.Core.dll Syntax [PublicApi_Stable_ForUseInYourCode] public abstract class EntityBasedType : IEntityBasedType, IEntityWrapper, IHasDecorators<IEntity>, IMultiWrapper<IEntity> Constructors | Improve this Doc View Source EntityBasedType(IEntity) Create a EntityBasedType and wrap the entity provided Declaration protected EntityBasedType(IEntity entity) Parameters Type Name Description IEntity entity | Improve this Doc View Source EntityBasedType(IEntity, String) Declaration protected EntityBasedType(IEntity entity, string languageCode) Parameters Type Name Description IEntity entity System.String languageCode | Improve this Doc View Source EntityBasedType(IEntity, String[]) Declaration protected EntityBasedType(IEntity entity, string[] languageCodes) Parameters Type Name Description IEntity entity System.String [] languageCodes Properties | Improve this Doc View Source Decorators Declaration public List<IDecorator<IEntity>> Decorators { get; } Property Value Type Description System.Collections.Generic.List < IDecorator < IEntity >> | Improve this Doc View Source Entity The underlying entity. Declaration public IEntity Entity { get; protected set; } Property Value Type Description IEntity The entity, or null if not provided | Improve this Doc View Source Guid The entity guid, as quick, nice accessor. Declaration public Guid Guid { get; } Property Value Type Description System.Guid The guid, or an empty-guid of no entity available | Improve this Doc View Source Id The entity id, as quick, nice accessor. Declaration public int Id { get; } Property Value Type Description System.Int32 The id, or 0 if no entity available | Improve this Doc View Source Metadata Get the Metadata of the underlying Entity Declaration public IMetadataOf Metadata { get; } Property Value Type Description IMetadataOf Remarks Added in v12.10 | Improve this Doc View Source Title The title as string. Declaration public virtual string Title { get; } Property Value Type Description System.String The title, or an empty string if not available or not string-able Remarks Can be overriden by other parts, if necessary. Methods | Improve this Doc View Source Get<T>(String, T) Get a value from the underlying entity. Declaration protected T Get<T>(string fieldName, T fallback) Parameters Type Name Description System.String fieldName field name T fallback fallback value Returns Type Description T The value. If the Entity is missing, will return the fallback result. Type Parameters Name Description T type, should only be string, decimal, bool Implements IEntityBasedType IEntityWrapper IHasDecorators<T>"
  },
  "api/dot-net/ToSic.Eav.Apps.Assets.IAsset.html": {
    "href": "api/dot-net/ToSic.Eav.Apps.Assets.IAsset.html",
    "title": "Interface IAsset | 2sxc 13 / EAV 13",
    "keywords": "Interface IAsset Any asset (file/folder) of the EAV App System. This interface contains properties which both IFolder and IFile have in common Namespace : ToSic.Eav.Apps.Assets Assembly : ToSic.Eav.Apps.dll Syntax [PublicApi_Stable_ForUseInYourCode] public interface IAsset Properties | Improve this Doc View Source Created The creation date of the item, as reported by the environment. Declaration DateTime Created { get; set; } Property Value Type Description System.DateTime The date-time when the file was created. | Improve this Doc View Source Id The ID of the item, if the underlying environment uses int IDs Declaration int Id { get; } Property Value Type Description System.Int32 an int with the id used by the environment to track this item | Improve this Doc View Source Modified The modified date of the file, as reported by the environment. Declaration DateTime Modified { get; set; } Property Value Type Description System.DateTime The date-time when the file was modified last. | Improve this Doc View Source Name The asset name typically the folder or the file name Declaration string Name { get; } Property Value Type Description System.String | Improve this Doc View Source ParentId The folder ID of the file, or parent-folder of a folder, if the underlying environment uses int IDs Declaration int ParentId { get; } Property Value Type Description System.Int32 an int with the id used by the environment to track this item | Improve this Doc View Source Path The path of the item in the file system of the environment. Declaration string Path { get; set; } Property Value Type Description System.String The full path of this item | Improve this Doc View Source PhysicalPath The full physical path to folder or file to access them on the local server. Declaration string PhysicalPath { get; } Property Value Type Description System.String The full physical path to this asset"
  },
  "api/dot-net/Custom.Oqtane.Razor12.html": {
    "href": "api/dot-net/Custom.Oqtane.Razor12.html",
    "title": "Class Razor12 | 2sxc 13 / EAV 13",
    "keywords": "Class Razor12 The base class for Razor files in Oqtane. As of 2sxc 12.0 it's identical to Razor12 , but in future it may have some more Oqtane specific features. Inheritance System.Object Custom.Hybrid.Razor12 < System.Object > Custom.Oqtane.Razor12 < System.Object > Razor12 Implements IDynamicCode12 IDynamicCode ICreateInstance ICompatibilityLevel IHasLog Namespace : Custom.Oqtane Assembly : ToSic.Sxc.Razor.dll Syntax [PublicApi] public abstract class Razor12 : Razor12<object>, IRazor12, IRazor, IHasDynamicCodeRoot, INeedsDynamicCodeRoot, IDynamicCode12, IDynamicCode, ICreateInstance, ICompatibilityLevel, IHasLog Implements IDynamicCode12 IDynamicCode ICreateInstance ICompatibilityLevel IHasLog"
  },
  "api/dot-net/ToSic.Sxc.Context.ICmsModule.html": {
    "href": "api/dot-net/ToSic.Sxc.Context.ICmsModule.html",
    "title": "Interface ICmsModule | 2sxc 13 / EAV 13",
    "keywords": "Interface ICmsModule Information about the module context the code is running in. Inherited Members IHasMetadata.Metadata Namespace : ToSic.Sxc.Context Assembly : ToSic.Sxc.dll Syntax [PublicApi] public interface ICmsModule : IHasMetadata Remarks Note that the module context is the module for which the code is currently running. In some scenarios (like Web-API scenarios) the code is running for this module but not on this module, as it would then be running on a WebApi. Properties | Improve this Doc View Source Id The module id on the page. ü™í Use in Razor: CmsContext.Module.Id Declaration int Id { get; } Property Value Type Description System.Int32 The ID, unless unknown, in which case it's a negative number Remarks Corresponds to the Dnn ModuleId or the Oqtane Module Id. In some systems a module can be re-used on multiple pages, and possibly have different settings for re-used modules. 2sxc doesn't use that, so the module id corresponds to the Dnn ModuleId and not the PageModuleId."
  },
  "api/dot-net/ToSic.Eav.LookUp.LookUpInLookUps.html": {
    "href": "api/dot-net/ToSic.Eav.LookUp.LookUpInLookUps.html",
    "title": "Class LookUpInLookUps | 2sxc 13 / EAV 13",
    "keywords": "Class LookUpInLookUps This Value Provider chains two or more LookUps and tries one after another to deliver a result It's mainly used to override values which are given, by a special situation. Read more about this in LookUp System Inheritance System.Object LookUpBase LookUpInLookUps Implements ILookUp Inherited Members LookUpBase.Name LookUpBase.Get(String) LookUpBase.Format(Boolean) LookUpBase.Format(DateTime) Namespace : ToSic.Eav.LookUp Assembly : ToSic.Eav.Core.dll Syntax [PublicApi_Stable_ForUseInYourCode] public class LookUpInLookUps : LookUpBase, ILookUp Constructors | Improve this Doc View Source LookUpInLookUps(String, ILookUp, ILookUp, ILookUp, ILookUp) Generate a lookup-of-lookups. Declaration public LookUpInLookUps(string name, ILookUp first, ILookUp second = null, ILookUp third = null, ILookUp fourth = null) Parameters Type Name Description System.String name Name to use - if stored in a list ILookUp first First LookUp source ILookUp second Second LookUp source ILookUp third Optional third ILookUp fourth Optional fourth Methods | Improve this Doc View Source Get(String, String) Gets a value by Name/key and tries to format it in a special way (like for dates) Declaration public override string Get(string key, string format) Parameters Type Name Description System.String key Name of the Property System.String format Format String Returns Type Description System.String Overrides LookUpBase.Get(String, String) Implements ILookUp"
  },
  "abyss/releases/history/v13/datasource/index.html": {
    "href": "abyss/releases/history/v13/datasource/index.html",
    "title": "Fix Breaking Change DataSource in v13 | 2sxc 13 / EAV 13",
    "keywords": "Fix Breaking Change DataSource in v13 Keywords: #Deprecated #DataSource 2sxc v13 cleans up some historic, deprecated functionality. They were not used much, but if you have code which used this, here's how to fix any code in production. Specifically, this feature was removed: ToSic.Eav.DataSource to create DataSources Reason for Removal These features were removed because they relied on objects which need Dependency Injection, and calling this object directly cannot give us DI. These features were almost never used, and newer mechanisms are much more appropriate than that old stuff. History - How it Used to Work 2sxc V7 (ca. 2016) introduced this to create DataSources in code. Typically it would have looked like this: var dsMaker = new ToSic.Eav.DataSource(); var ds = dsMaker.GetDataSource<Sql>(); Upgrade to Newer functionality In Razor and WebApi there are always built-in methods to get data sources, specifically: CreateSource(...) CreateSource<T>(...) See docs If you need this in a DLL then these will be missing. For that, please ensure your classes also use DependencyInjection and are created from code which uses DI. Then, just put a dependency on the new ToSic.Eav.DataSources.DataSourceFactory to get the same functionality. Shortlink to here: https://r.2sxc.org/brc-13-datasource"
  },
  "abyss/releases/history/v13/conversion/index.html": {
    "href": "abyss/releases/history/v13/conversion/index.html",
    "title": "Fix Breaking Change Conversion in v13 | 2sxc 13 / EAV 13",
    "keywords": "Fix Breaking Change Conversion in v13 Keywords: #Deprecated #Conversion #DataToDictionary #EntitiesToDictionary 2sxc v13 cleans up some historic, deprecated functionality. They were not used much, but if you have code which used this, here's how to fix any code in production. Specifically, these features were removed which convert data to a simple JSON: ToSic.Eav.Conversion.EntitiesToDictionary ToSic.Sxc.Conversion.DataToDictionary Reason for Removal These features were removed because they relied on objects which need Dependency Injection, and calling this object directly cannot give us DI. These features were rarely used, and newer mechanisms are much more appropriate than that old stuff. History - How it Used to Work Some code samples suggested to use this in WebApis. Based on StackOverflow questions, we believe it has been used a few times. Upgrade to Newer functionality We suggest you search for EntitiesToDictionary and DataToDictionary in your code, and replace it with GetService<ToSic.Eav.DataFormats.EavLight.IConvertToEavLight>() . Example before: using ToSic.Eav.Conversion; var convert = new EntitiesToDictionary(); var result = convert.Convert(...); Example after fix: var convert = GetService<ToSic.Eav.DataFormats.EavLight.IConvertToEavLight>(); var result = convert.Convert(...); History Created ToSic.Eav.Conversion.EntitiesToDictionary ca. v5 Introduced ToSic.Sxc.Conversion.DataToDictionary ca. v7 Both marked as Deprecated in v12 Was only ever used in Dnn, never used in Oqtane To be removed ca. v14 ca. middle of 2022 Shortlink to here: https://r.2sxc.org/brc-13-conversion"
  },
  "basics/browser/edit-ux/index.html": {
    "href": "basics/browser/edit-ux/index.html",
    "title": "| 2sxc 13 / EAV 13",
    "keywords": "moved to Edit User Experience in the Page"
  },
  "basics/browser/edit-ux/hide-advanced-features.html": {
    "href": "basics/browser/edit-ux/hide-advanced-features.html",
    "title": "| 2sxc 13 / EAV 13",
    "keywords": "moved to Hide Advanced Features From Non-Admins"
  },
  "basics/browser/edit-ux/context.html": {
    "href": "basics/browser/edit-ux/context.html",
    "title": "| 2sxc 13 / EAV 13",
    "keywords": "moved to In-Page Editing Context (technical)"
  },
  "basics/browser/edit-form/index.html": {
    "href": "basics/browser/edit-form/index.html",
    "title": "| 2sxc 13 / EAV 13",
    "keywords": "moved to Edit Content or Data in Dnn / 2sxc"
  },
  "basics/browser/edit-form/fields.html": {
    "href": "basics/browser/edit-form/fields.html",
    "title": "| 2sxc 13 / EAV 13",
    "keywords": "moved to Fields in 2sxc"
  },
  "abyss/data-formats/json/web-api/index.html": {
    "href": "abyss/data-formats/json/web-api/index.html",
    "title": "JSON Data Format used in WebAPI calls (technical) | 2sxc 13 / EAV 13",
    "keywords": "JSON Data Format used in WebAPI calls (technical) <!-- Data Highlights --> <!-- ADAM --> <!-- Server --> <!-- Prepare --> <!-- Data Source --> <!-- Optimzers --> <!-- Process / Awesomize --> <!-- Libraries --> <!-- data formats --> <!-- Browser --> <!-- Frameworks --> <!-- App show parts --> <!-- Interact parts --> <!-- Edit parts --> <!-- Edit UI parts --> <!-- SPA parts --> <!-- Custom highlight boxes - can be controlled by in-page CSS --> you are here (click to zoom) - discover the stack .context-box-summary .format-json-headless { visibility: visible; } When reading or writing data to/from the Headless WebAPI the data format used is JSON. Here are the basics: Read Single Item is Super-Simple JSON Here's an example of a BusinessUnit item: { \"Name\": \"Web\", \"Description\": \"<p>We create websites!</p>\", \"Id\": 19403, \"Guid\": \"1252c52c-30e4-4c9f-8d45-e094160ca251\", \"Title\": \"Web\", \"Modified\": \"2021-02-25T20:32:52.94Z\", \"Created\": \"2021-02-18T20:47:58.827Z\" } Some notes All the value fields have their real names, usually uppercase as that's how the fields are typically named A few internal fields are also included Id (int) Title (string) Modified (date) Created (date) Guid (string with GUID) - this is only supplied on queries or if the REST API requests includes a ?includeGuid=true Dates are transferred as strings, using the international ISO format Html strings contain the real html Read Lists: Arrays of Items [ { \"Name\": \"Web\", \"Description\": \"<p>We create websites!</p>\", \"Id\": 19403, \"Guid\": \"1252c52c-30e4-4c9f-8d45-e094160ca251\", \"Title\": \"Web\", \"Modified\": \"2021-02-25T20:32:52.94Z\", \"Created\": \"2021-02-18T20:47:58.827Z\" }, { \"Name\": \"Dev\", \"Description\": \"<p>Our development unit</p>\", \"Id\": 19404, \"Guid\": \"c89cb53b-0f7b-441a-9e6c-5467dd9322e9\", \"Title\": \"Dev\", \"Modified\": \"2021-02-25T18:02:52.327Z\", \"Created\": \"2021-02-18T20:47:58.827Z\" }, { \"Name\": \"Eff\", \"Description\": \"<p>Everything regarding efficiency - like <a href=\\\"https://sphosting.ch\\\" target=\\\"_blank\\\" rel=\\\"noopener\\\">SharePoint</a>, Word &amp; Excel automation, <a href=\\\"https://azing.org\\\" target=\\\"_blank\\\" rel=\\\"noopener\\\">azing.org</a></p>\", \"Id\": 19405, \"Guid\": \"fa4a1de9-adf5-4e1d-ab70-63281b3e797b\", \"Title\": \"Eff\", \"Modified\": \"2021-02-25T18:03:12.84Z\", \"Created\": \"2021-02-18T20:47:58.827Z\" } ] Write / PUT has the Same Data Format To create data or update it, use the identical format. Some notes: When creating, the ID must be blank (otherwise an update is assumed) When creating, the Guid is usually blank and will be generated automatically (see special notes below) Special System Properties when Saving When creating or updating data, there are some system properties you can also set, which affect how things are saved EntityGuid on Create (ca. v8) You can provide an EntityGuid if necessary, for example when other code needs to know the Guid before creating. This would then be saved and returned on the Guid property on the next call. PublishState Controls Publishing (v13.03) If you set the property PublishState it can have these values and effects: null or \"\" will save new as is preset by permissions; on update it will leave the existing state unchanged true , \"true\" , 1 will always set the published to true (if permissions allow) false , \"false\" , 0 will alwyays set published to false \"draft\" will set published to false; if it's an update and there was a published one before, that will remain published For Determines Metadata-Target (ca. v11) For can contain metadata headers to anchor this item to another thing. Will only affect new data, and be ignored on updates. This is the schema of this object { TargetType: int; // one of known target types Number?: number; // Key if it's a number key String?: string; // Key if it's a string ey Guid?: string; // Guid if it's a GUID key } Note that you must provide one of the keys, othewise it will fail. See also Metadata Target Types See also Data Services of the Sxc Instance ParentRelationship Adds Item to a Parent (v13.03) If your data has a property ParentRelationship with these fields: Parent - a GUID to the parent Field - the name of the field it should be added to (must be an entity-field) Index - the location it should be added to in that field which is a list of items Then upon creating the new item, it will also be added to that parent and it's list of items. Read / Write Multi-Language Data This does not exist yet as a simple REST API but is a planned feature for 2022. For now, create your own WebApi if you need this. History REST API added ca. v7 on the path /app/content Ability to also set EntityGuid added ca. v8 For feature added ca. v11 primary path changed to /app/data/ PublishState added v13.03 ParentRelationship added v13.03"
  },
  "abyss/data-formats/index.html": {
    "href": "abyss/data-formats/index.html",
    "title": "Data Formats in 2sxc (technical) | 2sxc 13 / EAV 13",
    "keywords": "Data Formats in 2sxc (technical) <!-- Data Highlights --> <!-- ADAM --> <!-- Server --> <!-- Prepare --> <!-- Data Source --> <!-- Optimzers --> <!-- Process / Awesomize --> <!-- Libraries --> <!-- data formats --> <!-- Browser --> <!-- Frameworks --> <!-- App show parts --> <!-- Interact parts --> <!-- Edit parts --> <!-- Edit UI parts --> <!-- SPA parts --> <!-- Custom highlight boxes - can be controlled by in-page CSS --> you are here (click to zoom) - discover the stack .context-box-summary .data-all { visibility: visible; } This is very technical information, you usually won't need this. 2sxc has the following data formats ZIP for entire Apps XML for editing tables of items in Excel (export/import & mass editing) XML for App-Data for app-export / import JSON for Headless WebAPI use internal JSON format for Entity (export, import, history) single item VisualQuery configuration View Specs (includes the template) Content Type"
  },
  "abyss/contribute/unit-tests.html": {
    "href": "abyss/contribute/unit-tests.html",
    "title": "Run Unit Tests in .net | 2sxc 13 / EAV 13",
    "keywords": "Run Unit Tests in .net Important: If you only want to USE 2sxc / EAV, then you do NOT need this . This is meant for people who want to contribute to the source code of 2sxc and EAV. 2sxc and EAV have more than 600 Unit tests verifying all kinds of functionality. Many of them require a DB containing test-data to fully work. Pre-Requisites 2sxc server projects have been downloaded and placed as recommended in the checklists. Setup Tests Follow this checklist:"
  },
  "abyss/contribute/docs.html": {
    "href": "abyss/contribute/docs.html",
    "title": "How to contribute to this documentation | 2sxc 13 / EAV 13",
    "keywords": "How to contribute to this documentation This documentation is a github page created with docfx stored in a github repository here: https://github.com/2sic/2sxc-docs The way it works is that it takes data from 2 sources All the comments in source code All the markdown files in the 2sxc docs repo ...and merges them together to create HTML. It's then pushed back to the repo, which automatically hosts the final solution on https://docs.2sxc.org Working with images and asset-files Adding images is very difficult when editing online (there's no upload feature) but it's very easy when editing offline, because you can create folders and push them back. Please use the following structure for now assets (contains all the assets) logos (contains various logos, for re-use) contribute (assets for the page Contribute ) [page-name] (assets for each specific page) If you have any other image/file needs which need different structure, please discuss with Daniel @iJungleboy. About the Markdown Syntax If you're new to wikis or github comments / documentation, you may be a bit lost when it comes to markdown. I think the most important things you need to know are: Headers have 1-6 hashes in front, like ## Header 2 bold uses two * chars around the text, _italic_ uses one _ char, escaping chars uses the \\ slash (so any character right after a \\ is shown and doesn't format) Linking has many options, better read the manuals Lists have many options, better read the manuals Images use a ![alt-text](/assets/path/file.ext) syntax Note that line-breaks usually don't cause a line-break in the result (except in code-samples). You can enforce a simple line break by adding two spaces at the end of a line like \"check out: \" (two spaces after the \":\") Inline code starts and ends with a \"`\" character - like `code` - it will then look like code Multi-line code blocks start with three of these, like ``` var x = 17; // a comment ``` resulting in var x = 17; // a comment Multi-line code with syntax highlighting needs you to specifiy the language c#: ```c# var x = 17; // a comment ``` resulting in var x = 17; // a comment Copyright All docs are licensed as CC-BY . By contributing you agree that your work can be used in this way."
  },
  "abyss/contribute/doc-tags.html": {
    "href": "abyss/contribute/doc-tags.html",
    "title": "Documentation Tags | 2sxc 13 / EAV 13",
    "keywords": "Documentation Tags If you find such tags in a documentation, this means that whatever you are reading is marked because it's not done, needs more documentation or whatever (or that we forgot to remove the marker). wip This tag means Work-In-Progress. todoc This means that the feature exists, but needs documentation - you could help contribute :). todo This means that something should be done some time."
  },
  "abyss/index.html": {
    "href": "abyss/index.html",
    "title": "2sxc & EAV Abyss - The Deep Stuff (WIP) | 2sxc 13 / EAV 13",
    "keywords": "2sxc & EAV Abyss - The Deep Stuff (WIP) Here you will find things about the internals and depths (aka Abyss ) of the system. Important This is probably not for you. Most of the things in the Abyss are not relevant for developers of App, Razor or JavaScript. It focuses on information of how things work internally, integrations with platforms and more."
  },
  "net-code/dynamic-code/as-adam.html": {
    "href": "net-code/dynamic-code/as-adam.html",
    "title": "AsAdam(...) Command | 2sxc 13 / EAV 13",
    "keywords": "AsAdam(...) Command Note ADAM is the Automatic Digital Asset Manager. It manages files (Assets) for content in 2sxc. The files are managed so that they really belong to the item they are used in. Read more about ADAM When a content-item has a Library field (see Field Input-Type hyperlink-library ) your code needs to get a list of all the files and folders of that field. For example to show galleries. This is where AsAdam(...) comes in. It gives you the ADAM parts of this field. ‚ö° The official API docs . Basically all you need for AsAdam(...) is The Content Item (Entity or DynamicEntity) The field name of which you want the Adam objects As a result you'll get an IFolder object with which you can get all files in the folder or subfolders. Discover More in the Razor Tutorials We have an rich series of Razor tutorials . You should really check them out üëç. Example This example is taken from the Fancybox Gallery App @inherits Custom.Hybrid.Razor12 @using ToSic.Razor.Blade; @using Dynlist = System.Collections.Generic.IEnumerable<dynamic>; <div class=\"ga-wrapper\"> <div class=\"ga-albums row\"> @foreach (var album in AsList(Data)) { var images = AsAdam(album, \"Images\").Files as Dynlist; var albumThumbUrl = Text.Has(album.AlbumThumbnail) ? album.AlbumThumbnail : images.First().Url; <div class=\"ga-album col-12 col-sm-6 col-md-6 col-lg-4\" @Edit.TagToolbar(album)> <a href='@Tags.SafeUrl(Link.To(parameters: \"mid/\" + Dnn.Module.ModuleID + \"&album=\" + album.Path))'> <div class=\"ga-img\"> <div class=\"overlay\"> <div class=\"ga-album-title\"><h5 class=\"ga-title\">@album.Title</h5></div> <div class=\"ga-files-count\"><span class=\"badge badge-pill badge-dark float-right\">@images.Count()</span></div> </div> <img class=\"img-fluid\" src='@Tags.SafeUrl(albumThumbUrl + \"?w=720&h=500&mode=crop&scale=both&quality=80\")' alt=\"@album.Title\" /> </div> </a> </div> } </div> </div> We suggest you check out some apps which use ADAM to see how they work. Also Read ADAM - Automatic Digital Asset Management ToSic.Sxc.Adam check out AsAdam(...) in the RazorComponent and ApiController History General Tokens introduced in 2sxc 8.0 Added extra security switch in 2sxc 9.32"
  },
  "net-code/dependency-injection/oqtane.html": {
    "href": "net-code/dependency-injection/oqtane.html",
    "title": "Depedency Injection in Oqtane | 2sxc 13 / EAV 13",
    "keywords": "Depedency Injection in Oqtane Oqtane has used Dependency Injection since day one, so it's much better integrated than with Dnn. How Can I Get Oqtane Objects using Dependency Injection? Oqtane uses the same Dependency Injection like 2sxc, so your Razor-Code can access all Oqtane objects using GetService<ISomeOqtaneInterface>() . Just be aware of the fact that Oqtanes architecture is very different from the classic setup, so many services documented in the Oqtane docs will actually behave as remote services, so they will internally call http-endpoints to perform their work. This makes many Oqtane Services a bit slower than you might expect. Can I Use Razor .net Core @inject in Oqtane? Yes you can, as the 2sxc DI is fully integrated with the Oqtane DI. So your Razor could also do this: @inject ICmsContext Context How can I get 2sxc Objects in Oqtane Blazor Controls? This is currently not possible, as most of 2sxc runs on the server, while the Blazor controls run in the client. We're working on this, but I assume this will not be ready till ca. Q2 2022. History 2sxc introduced Dependency Injection 1.1 in v9 (May 2017) Integrated with Oqtane DI in v12 (May 2021) GetService<T> pattern introduced for Razor/C# in v12 (May 2021) Upgraded to Dependency Injection 2.1 in v13 (Dec. 2021) Integrated with Dnn DI in v13 (Dec. 2021)"
  },
  "net-code/dependency-injection/introduction.html": {
    "href": "net-code/dependency-injection/introduction.html",
    "title": "What is Depedency Injection? | 2sxc 13 / EAV 13",
    "keywords": "What is Depedency Injection? Dependency Injection is a way to structure applications and to get Services or Helpers in your code. Tip When an application becomes advanced it becomes more difficult to get Services and Helpers because these may also rely on other Services and Helpers to function. Dependency Injection makes sure that you don't need to know about the sub-dependencies, and just work with what you need. Most advanced solutions today use Dependency Injection or Inversion of Control (IoC) to handle this problem. The concept builds on two core parts: There is a shared Service Provider which can give me any Service I need Every piece of code uses this Service Provider to fetch everything it needs In .net Core and .net MVC this is a standard thing everybody learns early on (even though they probably don't understand it üòâ). But in the .net Classic it was not so common, so older developers tend to not use it, so here some more details to round off the picture how this works in .net: .net provides an IServiceProvider which is this shared ServiceProvider. At application start-up all parts & services are registered and there are specifications if they should be shared (singleton), shared-per-http-request (scoped) or recreated for each use (transient). All parts & services in turn must also get their dependencies from this ServiceProvider. This happens in 2 ways Either they have a constructor which lists all their dependencies, like public MyClass(ICmsContext context) - in this case the ServiceProvider will automatically fetch the ICmsContext when the MyClass is created. Or they depend on the service provider to generate new objects later on, using public MyClass(IServiceProvider sp) and later running things like var context = sp.GetService<ICmsContext>() . This is common in scenarios where you may need multiple separate objects (like to generate a list of objects which again need dependencies). Or they request Lazy dependencies - which are heavier objects that are maybe not used, using public MyClass(Lazy<ICmsContext> contextLazy) . These are not automatically created, but will be created if they are used. Or there is a Factory master-object which creates objects and adds their dependencies later on. This is how Razor in .net Core works. Using this setup anything can easily be requested when needed, and even if it needs dependencies which again have sub-dependencies, all this is automatically taken care of without the final code having to know about the structure. This also has 2 more important benefits: Internals can easily change, but the code using a service doesn't need to be updated It's easy to replace parts of the system without affecting the code itself. For example, 2sxc has different Url-Resolvers in Dnn and Oqtane, but your code doesn't need to know about this History 2sxc introduced Dependency Injection 1.1 in v9 (May 2017) Integrated with Oqtane DI in v12 (May 2021) GetService<T> pattern introduced for Razor/C# in v12 (May 2021) Upgraded to Dependency Injection 2.1 in v13 (Dec. 2021) Integrated with Dnn DI in v13 (Dec. 2021)"
  },
  "abyss/releases/history/changes-breaking.html": {
    "href": "abyss/releases/history/changes-breaking.html",
    "title": "Breaking Changes Overview for 2sxc/EAV | 2sxc 13 / EAV 13",
    "keywords": "Breaking Changes Overview for 2sxc/EAV We try to minimize breaking changes, and most breaking changes won't affect your work, because it's internal API. We're documenting it here to ensure you know what happened, in case you still run into this. üëâ please also read about the Deprecation Policy Breaking Changes in EAV and 2sxc v13 We try to minimize breaking changes, and most breaking changes won't affect your work, because it's internal API. We're documenting it here to ensure you know what happened, in case you still run into this. Summary V13 did some clean-up. It will rarely affect you, but if you are using the TimelineJs App it will. Breaking Changes in 2sxc 13.00 API Changes that may affect you An old, non-DI feature for Inner Content is being deprecated and will be removed in v14 see instructions An old feature for publishing module InstanceData as JSON is removed see instructions An old feature to create DataSources is removed see instructions Two old data-conversion features DataToDictionary and EntitiesToDictionary were removed see instructions Some internal functionality which enabled IEntity objects to convert links containing file:... and page:... has been removed. This only affects special deep code calls on IEntity and does _not affect DynamicEntity objects in Razor see instructions The old feature Eav.Factory.Resolve<T>() was deprecated and will be removed in v14 see instructions The old feature BlockDataSource.Cache.GetContentType(...) was removed see instructions The Dnn Static ToSic.Sxc.Dnn.Factory is being deprecated and will be removed in v14 see instructions Major Updates with may affect you The Image Resizer is being replaced with ImageFlow The App containing Site-wide settings is changed to Primary - previously it used the Content app for this. We believe this won't affect many users, as the settings-stack is still very new in v12 Things which probably don't affect anybody SQL changes - minor updates to the Database .net Framework and Dll Updated to Match Dnn 9 Requirements - but still works in Dnn 7.4.2 .net Framework 4.7.2 now required (previously .net Framework 4.5.1) .net Standard 2.0.3 required (previously .net Standard 1.6) Important : This will be referenced in the web.config upon installation Dependency Injection updated to .net core 2.1.1 (previously 1.1) Newtonsoft.Json updated to v10.0.3 Entity Framework updated to 2.1.1 (previously 1.1) - Oqtane is unmodified and uses 3.1.4 Dnn DLLs renamed ToSic.Sxc.Dnn.dll became ToSic.Sxc.Dnn.Core.dll for consistency ToSic.SexyContent.WebApi.dll became ToSic.Sxc.Dnn.WebApi.dll ToSic.SexyContent.Razor.dll became ToSic.Sxc.Dnn.Razor.dll An internal object ToSic.Eav.Apps.State was removed Internal APIs which were removed Static ToSic.Eav.Data.Builder.AttribBuilder.AddValue(...) Breaking Changes in EAV and 2sxc v12 We try to minimize breaking changes, and most breaking changes won't affect your work, because it's internal API. We're documenting it here to ensure you know what happened, in case you still run into this. Summary V12 did a lot of internal rework to get it to run on Oqtane. Almost none of the changes will affect you. Breaking Change Version 12.10 Jquery is completely removed. This shouldn't affect your code, since all old code usually runs in DNN where jQuery is included by default. Breaking Change Version 12.05 V12 adds new properties to Razor and WebAPI which could result in some surprises: Path , Convert , Settings , Resources and DevTools . Especially the new Path and Convert could clash with existing code which had @using System or @using System.IO so the code would just read Path.GetFileName(...) or something. Because of this, we only give the latest classes Custom.Dnn.Razor12 , Custom.Dnn.Code12 , Custom.Hybrid.Razor12 , Custom.Hybrid.Api12 etc. these properties. This means that previous base classes do not have these by design, and we encourage you to move to these latest base classes. Important: 2sxc 12.00 - 12.04 also had some of these properties on ToSic.Sxc.Dnn.RazorComponent as well as ToSic.Sxc.Dnn.ApiController . So if you were eager to use these properties but didn't change the base class, you were able to use it. To protect thousands of upgrade-scenarios we had to take them away from the old base classes. Sorry! Possible Breaking Changes We believe nothing broke, but it could be that some commands on EntitiesToDictionary or DataToDictionary were accidentally changed. Pls report so we can fix that. The Link.To(...) now returns safe URLs. This should not be an issue, but in rare cases post-processing of the string returned may expect spaces or something, which are now %20 We disabled old obsolete APIs on the new Razor12, Api12 and Code12 base classes. In case you were using this (not likely) you'll get an error telling you about this. Breaking Change Version 12.04 DynamicEntity now has a property Count because it's a list as well, this could cause issues if a content-type has a property Count DynamicEntity is now always a list. Because of this we removed the DynamicEntityWithList object. We believe the type is never referenced in user code, but if it is, this would be a breaking change. Many parts that prepare Entities returned a Dictionary<string, object> and now return an IDictionary<string, object> . We believe this shouldn't hurt much, since the result would usually be in a var or returend directly to the API for streaming, but in case someone had used explicitly typed code, this will require a minor change Breaking Changes in EAV and 2sxc v11 We try to minimize breaking changes, and most breaking changes won't affect your work, because it's internal API. We're documenting it here to ensure you know what happened, in case you still run into this. Summary There were small breaking changes in 11.00 to 11.11 but they were internal so shouldn't affect normal developers. Breaking Changes Version 11.07 - Drop the old edit UI In 11.07 the old edit UI was removed, so customizations for that UI would not be in effect any more. Breaking Changes Version 11.10 - Mainly Dependency Injection In v11.10 we used much more dependency injection than ever before and stopped using static values which were still in the API in many places. Because of this, certain helper objects to create entities or lookup values were changed and their constructors were changed. We invested a lot of time to try to ensure that old APIs still work, but in case you're hit by one of these, make sure you check the DI and switch to resolving the objects using DI. Breaking Changes Version 11.11 - Language Detection Previously the language detection used the Thread culture. Turns out this wasn't reliable because Dnn does some funny stuff (probably historical) which means that API-calls ended up using the language stored in some cookie instead of the one specified by the URL. We changed this, which should be more reliable. But if you were relying on this strange effect, then it may be a breaking change. Internally our tokens were also using the thread culture. When we changed this, we also had to change how tokens pick up the language. In rare cases this may affect you. We changed all tokens to always resolve boolean values to true / false (previously they would have been changed to the current language, like wahr for german). We believe this change is only an improvement, and should ensure that internal resolves in Queries etc. result in reliable output. Breaking Changes Version 11.11 - DataSources: DataSourceConfiguration Note that we also improved the DataSourceConfiguration to an interface IDataSourceConfiguration and documented this. As a side effect the API stays the same, but you will have to recompile your data sources for them to work again - sorry. Breaking Changes Version 11.11.03 - IEntity Values IEntity had a command called Value(fieldName) which was probably never used. The idea used to be that it does language lookup internally, but we refactored this out since it could never be fully reliable because the full language list wasn't known to the IEntity . So we re-purposed the method (assuming it's not used) to just lookup the first occurance of the value. This way it`s useful for configurations and similar which are not multi-language. IEntity also had a Value(fieldname, lookup) method. We are deprecating it, and making the lookup not happen from now on. We believe it was never used. IEntity had a command called PrimaryValue(fieldName) which was probably never ever used, so we're deprecating it. Use Value(fieldName) instead. Breaking Changes Version 11.11.03 - Other UI Toolbar dropped the button and command for item-history , as the history is now part of the edit dialog Breaking Changes in EAV and 2sxc We try to minimize breaking changes, and most breaking changes won't affect your work, because it's internal API. We're documenting it here to ensure you know what happened, in case you still run into this. Summary Version 10 has a lot of small breaking changes because we restructured the internal API so it's consistent when we publish it. All these things shouldn't affect you, because they were internal APIs, but in case it does - here's what we did. Version 10.22 and 10.23 Renamed the RootDataSource and the Interface to IAppRoot Split SOC of the AppRoot DataSource so that caching, Root-Metadata and ListCache is fully separate Since the Logging system now auto-picks up the code lines and names of the methods, we simplified the commands and dropped some parameters. Moved quite a bit of the DataSource objects into sub-objects, again for SOC. Version 10.20-04 (ca. 2019-12-03) Renamed DataTableDataSource to DataTable , old name still works. Renamed ExternalDataDataSource to ExternalData , old name still works. Renamed ToSic.SexyContent.DataSources.ModuleDataSource to ToSic.Sxc.DataSources.CmsBlock , old name still works. Renamed ToSic.Eav.DataSources.VisualQuery.VisualQueryAttribute to ToSic.Eav.DataSources.Queries.VisualQueryAttribute , old name still works. Renamed ToSic.SexyContent.Environment.Dnn7.Factory to ToSic.Sxc.Dnn.Factory , old name still works. Renamed ToSic.Eav.DataSources.BaseDataSource to ToSic.Eav.DataSources.DataSourceBase for consistency, old name still works. Moved the LookUp namespaces into the Core DLL Version 10.20-02 (ca. 2019-11-22) More internal changes which shouldn't affect anybody, but make the API ready for public docs... Moved/renamed the internal Eav.AppDataPackage to Eav.Apps.AppState Moved/renamed some internal interfaces like Entity... Did a major change for how Attribute<T> for relationships work. Before they were Attribute<EntityRelationship> and now they are Attribute<IEnumerable<IEntity>> . This also affects Value<EntityRelationship> which is now Value<IEnumerable<IEntity>> Moved Tenant<T> and Container<T> including matching interfaces to Eav.Environment Renamed IAppIdentity to IInAppAndZone and IZoneIdentity to IInZone Renamed ICacheKeyProvider to ICacheKey Renamed CacheChainedIEnumerable<T> to SynchronizedList<T> Moved/Renamed MetadataFor to Eav.Metadata.Target . Left old name compatible. Moved some extension methods for IEntity from ToSic.Eav.Data.Query to ToSic.Eav.Data Changed Permissions to be strongly typed EntityBased objects Version 10.20.01 (2019-11-12) Internal code now uses the term Header instead of ListContent . External code provides both for backward-compatibility moved internal interfaces for engines (Razor/Token) to final namespaces ToSic.Sxc.Engines IEngine EngineBase ITokenEngine IRazorEngine corrected architecture - some template-management code had slipped into Eav.Apps , was moved back to Sxc.Apps The Template object was moved from Eav.Apps to Sxc.Views and we added an interface IView . We also renamed the internal properti ViewNameInUrl to UrlIdentifier . To correct the API a CmsManager was created extending the AppManager, which is in charge of Views Moving internal stuff related to content blocks IContentBlock from SexyContent.Interfaces to Sxc.Blocks from ToSic.SexyContent.ISxcInstance to ToSic.Sxc.Blocks.IBlockContext actually moved a lot of things there incl. ContentBlock now BlockConfiguration and more - all internal stuff Moving the ToSic.SexyContent.App to ToSic.Sxc.Apps.App In a razor page, we added the preferred Purpose . The old InstancePurpose will still work Placed some things we just moved in 10.20 to a final place - since it's a very recent change, we updated the docs in the 10.20.00 section Changed, but completely internal Some namespaces on SexyContent.ContentBlocks were moved to Sxc.Blocks Version 10.20.00 (2019-11-05) the internal interface IInPageEditingHelpers was moved from ToSic.SexyContent.Interfaces to the namespace ToSic.Sxc.Web the internal interface ILinkHelper was moved to ToSic.Sxc.Web the internal interface IHtmlHelper was moved to ToSic.Sxc.Dnn the property Configuration on dynamic entities was deprecated in 2sxc 4 and removed in 2sxc 10 - we don't think it was ever used moved internal Metadata interfaces (ca. 5) into final namespace ToSic.Eav.Metadata Moved a bunch of internal interfaces which we believe were never used externally from ToSic.Eav.Interfaces to ToSic.Eav.Data ToSic.Eav.Data.IAttribute ToSic.Eav.IAttribute<T> IAttributeBase IAttributeDefinition IChildEntities IContentType IDimension IEntityLight ILanguage IRelationshipManager IValue IValue<T> IValueOfDimension<T> Moved a bunch of internal interfaces which we believe were never used externally from ToSic.Eav.Apps.Interfaces to ToSic.Eav.Apps IApp IAppData IAppDataConfiguration IAppEnvironment IEnvironmentFactory IInstanceInfo IItemListAction IPagePublishing ITenant IZoneMapper the internal namespace ToSic.Eav.ValueProvider was changed to ToSic.Eav.LookUp and inside it we renamed a bunch of internal interfaces and objects which we believe were never used externally Deprecated/Changed, but not broken the internal interface ToSic.SexyContent.IAppAndDataHelpers was renamed to ToSic.Sxc.IDynamicCode but the old interface still exists, so it shouldn't break it was used by Mobius Forms moved ToSic.Eav.Interfaces.IEntity to ToSic.Eav.Data.IEntity - but preserved the old interface for compatibility it was used everywhere Clean-Up, but not broken We're transitioning to the term Header instead of ListContent in templates. The Razor pages and WebApi have this starting now, while old terms still work. Note that we're not creating a HeaderPresentation , because you should use Header.Presentation Breaking Changes in EAV and 2sxc Version 9 We try to minimize breaking changes, and most breaking changes won't affect your work, because it's internal API. We're documenting it here to ensure you know what happened, in case you still run into this. Version 9.20.00 (2018-03-04) Minor breaking change in ADAM properties, like Id instead of FolderID which was a leftover of Dnn naming. see full blog post Version 09.08.00 (2017-11-28) Minor breaking change List<IEntity> instead of Dictionary<int, IEntity> on the IDataSource see full blog post Version 09.03.00 (2017-10-08) Breaking change on inconsistent naming ToSic.Eav.IEntity instead of ToSic.Eav.Interfaces.IEntity . see full blog post"
  },
  "basics/data/content-types/range-global-system.html": {
    "href": "basics/data/content-types/range-global-system.html",
    "title": "Global System Content-Types | 2sxc 13 / EAV 13",
    "keywords": "Global System Content-Types This explains System Content-Types . For an overview check out Understanding Data... . What is an System Content-Type? System Content-Types are built-in Content-Types which are defined in the 2sxc/EAV installation. These are internal Content-Types which are used to configure Fields, Data-Sources etc. They can only be used in every App They are not included upon export/import as they will also exist in the target system These Content-Types are stored in the File system History Introduced in 2sxc 1.0 Changed concept to File Storage in 2sxc 10.0"
  },
  "basics/data/content-types/range-app.html": {
    "href": "basics/data/content-types/range-app.html",
    "title": "App Content-Types | 2sxc 13 / EAV 13",
    "keywords": "App Content-Types This explains App Content-Types , the most common Content-Type. For an overview check out Understanding Data... . What is an App Content-Type? App Content-Types are the default kind of Content-Types which are defined in an app. They can only be used inside that App They are included upon export/import These Content-Types are stored in the SQL database History Introduced in 2sxc 1.0"
  },
  "basics/data/content-types/range-app-shared.html": {
    "href": "basics/data/content-types/range-app-shared.html",
    "title": "App Shared \"Ghost\" Content-Types (‚ö†) | 2sxc 13 / EAV 13",
    "keywords": "App Shared \"Ghost\" Content-Types (‚ö†) This explains App Shared Content-Types which used to be called Ghost Content-Type . For an overview check out Understanding Data... . Warning This is a very advanced topic which less than 1% of all developers use. You almost certainly will not need this. So if you start playing around with this, make sure that you really need this. What is an App Shared Content-Type? App Shared Content Types are a Content Types which are defined in one App and re-used in specific other Apps. They can only be used inside the App which are configured to share the definition The App data is in the export/import, but not the Content-Type Definition If you import an App with such data, the App containing the definition must be imported first. These Content-Types are stored in the SQL database You rarely want to use this. How it works Shared Content-Types are defined in a Primary App which manages this type. Other Slave Apps are configured to also use this Content-Type. They automatically inherit every configuration of the primary App even when the schema changes. Why does this Feature exist? The feature was originally introduced in 2sxc 1.0 because at that time we didn't have Global Shared Content-Types It has since been used in various complex sites. An example is a installation which has many Sites, each having the same News App . In such scenarios it's hard to keep changes synchronized, so it's usually implemented as follows: A primary App is on a hidden Site which just manages the Content-Types A template App is configured to use thes Content-Types. It usually also uses shared Templates etc. The template App is then exported and imported in each site where needed. Why would you want to use this? If you are creating a complex system with many portals and apps which should share the schema Why would you not want to do this? Using Shared Content-Types is fairly technical, so the developer must understand what this is. History Introduced in 2sxc 1.0"
  },
  "basics/data/content-types/names.html": {
    "href": "basics/data/content-types/names.html",
    "title": "Content-Type Names and StaticNames | 2sxc 13 / EAV 13",
    "keywords": "Content-Type Names and StaticNames This explains Content-Type Names . For an overview check out Understanding Data... . What is a Content-Type Name? Each Content-Type has a Name which the admin gave it - something like Person . Internally there is another name called the StaticName and it's usually a GUID, something like ad59b44d-41f2-4f02-9a68-dd914a98c19a . The Name can be changed at any time, but you'll have to update code which uses this name. The StaticName should never be changed, it's used internally and also necessary for Shared Content-Types Special StaticNames used In Internal Types Some older internal types have StaticNames which are not a GUID. This is just a leftover from the old days, you should never do this yourself. History Introduced in 2sxc 1.0"
  },
  "js-code/commands/content-items.html": {
    "href": "js-code/commands/content-items.html",
    "title": "CMS Command contentitems | 2sxc 13 / EAV 13",
    "keywords": "CMS Command contentitems <!-- Data Highlights --> <!-- ADAM --> <!-- Server --> <!-- Prepare --> <!-- Data Source --> <!-- Optimzers --> <!-- Process / Awesomize --> <!-- Libraries --> <!-- data formats --> <!-- Browser --> <!-- Frameworks --> <!-- App show parts --> <!-- Interact parts --> <!-- Edit parts --> <!-- Edit UI parts --> <!-- SPA parts --> <!-- Custom highlight boxes - can be controlled by in-page CSS --> you are here (click to zoom) - discover the stack .context-box-summary .edit-custom { visibility: visible; } This button opens the admin-dialog with all content-items. It has a (beta) feature which also allows you to add filters (since 2sxc 8.7). TODO: UPDATE TO SHOW MODERN TOOLBAR + USE ID Array of items How to use Here's a basic example showing a 2sxc-toolbar with a custom code: @* Example using hover TagToolbar (recommended) *@ <div @Edit.TagToolbar(toolbar: new { action = \"contentitems\", contentType= \"Tag\", filters = new { ManualWeight = 2 })> ... </div> @* Example using inline Toolbar (not recommended) *@ <div> @Edit.Toolbar(toolbar: new { action = \"contentitems\", contentType= \"Tag\", filters = new { ManualWeight = 2 }) ... </div> This shows a button which opens the table with all Tag items and filters for ManualWeight = 2. Let's try a more complex setup: @* Example using hover TagToolbar (recommended) *@ <div @Edit.TagToolbar( toolbar: new object[] { new { action = \"contentitems\", contentType= \"Tag\", filters = new { ManualWeight = 2 } }, new { action = \"contentitems\", contentType= \"BlogPost\", filters = new {Tags = new[] { tag.Tag } } } }, settings: new { show = \"always\" })> ... </div> This shows 2sxc-toolbar with 2 buttons, one opening tag-management (filtered by ManualWeight), the other opens all BlogPosts filtering by Tag. It also has some settings which always show it, even if the mouse is not hovering. Possible filters on contentitems The filters-object is a JS-object with properties. We're still working on the format, but for now it's probably NumberPropertyName: ## StringPropertyName: \"...\" BoolPropertyName: true EntityPropertyName: [\"title1\", \"title2\", ...] IsPublished: true IsMetadata: true Read also commands Demo App and further links Mobius Forms uses the contentitems command to let the admin see the forms-records for his use case only History Introduced in 2sxc v08.06 Filters introduced in 2sxc v08.08 Filters improved to support id-array in v13.0"
  },
  "basics/data/fields/string.html": {
    "href": "basics/data/fields/string.html",
    "title": "Field Data Type: String | 2sxc 13 / EAV 13",
    "keywords": "Field Data Type: String This explains String Fields . For an overview check out Understanding Data... . String data is a basic data type and is very commonly used in many fields. It's used for any basic kind of text, be it a character, a single-line text or wysiwyg-content. Features The basic string field doesn't have any features, since all the features are in the sub-types. Sub-Types of String Fields string-default - simple one or multi-line inputs drop-down for simple dropdowns drop-down-query for dropdowns which retrieve the data from a server wysiwyg font-icon-picker url-path Shared Settings All string field types currently don't have shared settings. Technical Information Storage in the SQL Database in the EAV-Model This is simply stored as a string in the DB. Storage in the SQL Database in the JSON-Model This is simply stored as a JSON string. Null Value Possible In some cases you may add a field to a type which already has Entities created previously. In this case the old data doesn't have a value for the field. If this happens, the field will return null , so you may need to catch this special exception in your code. Read also RazorBlade Text.Has(...) Tutorial RazorBlade Text.First(...) Tutorial History Introduced in EAV 1.0 / 2sxc 1.0 Changed in EAV 3.0 / 2sxc 6.0 (it used to have many configuration fields for all kinds of uses, which were then moved to sub-types) Enhanced in 12.02 to show old, invisible configuration which may still have an effect and allow copy/purge"
  },
  "basics/data/fields/string-wysiwyg.html": {
    "href": "basics/data/fields/string-wysiwyg.html",
    "title": "Field Input-Type string-wysiwyg | 2sxc 13 / EAV 13",
    "keywords": "Field Input-Type string-wysiwyg Use this field type for configuring simple text UI elements, storing string/text data . It's an extension of the basic string field type . Features provide a wysiwyg text box rich WYSIWYG experience using TinyMCE ADAM support to drop images and documents Configuring a String-Wysiwyg TODO TODO is for todo History Introduced in EAV 1.0 2sxc 1.0, originally as part of the string field type Changed in 2sxc 6.0 - Moved to it's own sub-type Changed to be full-screen dialog editing only in 10.00 Added option to switch between full-screen or directly in the form in 10.09 Added options to enable / disable HTML and Advanced buttons in 10.09"
  },
  "basics/data/fields/empty-message.html": {
    "href": "basics/data/fields/empty-message.html",
    "title": "Field Input-Type empty-message | 2sxc 13 / EAV 13",
    "keywords": "Field Input-Type empty-message Use this field type for showing a message in the edit dialog. It's an extension of the basic empty field type . Tip Messages can always be shown, or you can conditionally show/hide them using Formulas Features Show the title and message within the form Messages can be rich-text and contain formatted HTML Configuring a Empty-Default There is nothing to configure on this field which is special to empty-message. Just configure the normal Title/Comments and that will be shown. History Introduced in 2sxc 12.04"
  },
  "basics/data/fields/empty-end.html": {
    "href": "basics/data/fields/empty-end.html",
    "title": "Field Input-Type empty-end | 2sxc 13 / EAV 13",
    "keywords": "Field Input-Type empty-end Use this field type for closing a field-group. It's an extension of the basic empty field type . Tip Note that all field groups close automatically if another field group start afterwards. You only need the empty-end to close a group when you want the following fields to be in the normal / main group again. Features Closes a previously opened field-group Configuring a Empty-Default there is nothing to configure on this field - even the title will not be used for anything History Introduced in 2sxc 12.01"
  },
  "basics/index.html": {
    "href": "basics/index.html",
    "title": "2sxc Basics Overview | 2sxc 13 / EAV 13",
    "keywords": "2sxc Basics Overview In 2sxc most things just magically work . These docs give you a deep understanding of how they work so you can figure out really cool stuff. The Stack: How Systems and Users Interact This is what web-systems do from a bird's-eye perspective. On the top you see what happens in the browser : Show content / output using HTML Interact ive Content or SPAs where the UI is smart and works with data Edit ing content and data works by default, and you can do a lot more The bottom shows what happens on the server : Awesomeize is where you template the data and add logic on the Server . Prepare is a layer of data processing where the desired data is selected to be shown, filtered, sorted etc. Your Data is the original material - created by an editor in the CMS or it's data coming from SQL, CSV or elsewhere. How to Learn the Basics To learn the basics it's probably best tof first discover Tutorials and many example Apps The Stack in Detail <!-- Data Highlights --> <!-- ADAM --> <!-- Server --> <!-- Prepare --> <!-- Data Source --> <!-- Optimzers --> <!-- Process / Awesomize --> <!-- Libraries --> <!-- data formats --> <!-- Browser --> <!-- Frameworks --> <!-- App show parts --> <!-- Interact parts --> <!-- Edit parts --> <!-- Edit UI parts --> <!-- SPA parts --> <!-- Custom highlight boxes - can be controlled by in-page CSS --> you are here (click to zoom) - discover the stack Learn more about... What Happens in the Browser... What Happens on the Server... Prepare Data for Templates and WebApi Understanding Data..."
  },
  "api/dot-net/_warning-beta.html": {
    "href": "api/dot-net/_warning-beta.html",
    "title": "| 2sxc 13 / EAV 13",
    "keywords": "Warning This is Beta functionality and still work in progress. This means the APIs can still change until it's final. It's awesome, so have fun trying it out. But note that if you already use it, you may need make changes after an upgrade."
  },
  "abyss/contribute/code.html": {
    "href": "abyss/contribute/code.html",
    "title": "Contribute to 2sxc / EAV - Setup | 2sxc 13 / EAV 13",
    "keywords": "Contribute to 2sxc / EAV - Setup Important: If you only want to USE 2sxc / EAV, then you do NOT need this . This is meant for people who want to contribute to the source code of 2sxc and EAV. Pre-Requisites Visual Studio 2019 MSBuild Community Tasks 1.4 or newer (required for automatic module packaging if you want to create dnn-module packages of 2sxc to distribute to another dnn) https://github.com/loresoft/msbuildtasks or chec https://www.microsoft.com/en-in/download/details.aspx?id=19372 SQL Server 2017 or newer You have a working DNN 7.4.2 or higher with 2sxc already installed as a module, ideally in c:\\projects\\2sxc-dnn742\\ or something similar Basics The full solution pulls together 4 Github projects, some responsible for server-code, some for UI, some for in-page JS. We separated these to make it easier to contribute to a specific part without worrying about the rest. If you only want to contribute to something small - like the languages / translations - then you only need to download that repository. In the complex scenarios each project can build into the other target, so if you want to work full-stack and use all of the automation, you will want to put everything in C:\\Projects\\2sxc\\ . Contribute with Pull-Requests After you have made changes, you cannot just push the code back to our repo, since you probably won't have write permissions on the main repo. The correct procedure then is to fork the main repo into yours, and push into your own online repo. Then start a pull request, which we can then process. Setup Git Repos to use Use this checklist: GIT Branches We use the git-flow convention , and you should familiarize yourself with this, to properly work with the branches. As of now, the development-branch is called dev but we'll rename it to develop within the next few days. The EAV / 2sxc Server Solution Basically if you open the solution in the eav-server folder, it will open all the EAV server (C#) code and 2sxc code in Visual Studio. This is very important, because if you build anything extensive and rename anything, it guarantees that everything is correctly updated. The 2sxc UI This extends the EAV-UI with more field types, adds configuration and also adds a lot of other JS. if you run the gulp develop it too will auto-build and copy to the live Dnn / 2sxc site."
  },
  "abyss/architecture/index.html": {
    "href": "abyss/architecture/index.html",
    "title": "EAV / 2sxc / Dnn Architecture | 2sxc 13 / EAV 13",
    "keywords": "EAV / 2sxc / Dnn Architecture 2sxc is simple to use, but to enable that, it's pretty sophisticated on the inside. We'll give you an overview here, so you can better understand what you are using. Overall Architecture The Storage Systems This is fairly straight forward - data can be stored in SQL (spread across tables or using JSON) and the File System (stored as JSON). Note that assets like images are not handled here, but in the EAV-Apps layer (see below). The EAV Layer The data management system underneath everything is called the EAV - which stands for Entity , Attribute , Value . Anything in that namespace is about internal data models, reading/saving data etc. So anything inside the ToSic.Eav.Data is all about the internals, which you only need in special scenarios. The same applies to ToSic.Eav.Apps which is the sub-system responsible for combining data into virtual bundles called Apps . You can usually ignore this. The SXC Layer On top of the EAV layer we have the Sxc layer. It's responsible for Content Management on top of the App model provided by the EAV . The Sxc layer provides things like IDynamicEntity to let you code like @Content.Title . This is usually more interesting for you, but still fairly generic, because 2sxc is also meant to work with other platforms like NopCommerce, Orchard or Oqtane, but it hasn't been implemented yet. The Dnn Layer On top of the Sxc layer we have the Dnn layer. It connects 2sxc with Dnn. Usually when you're writing code and want to know about the API, you'll typically start here, and drill down to the other APIs as needed. Architecture of the EAV Layer Inside the EAV you'll find a whole ecosystem of parts which make the magic happen. Infrastructure This is very internal stuff, to make sure everything happens. You will usually not go here. Most if it is also not public API. Areas of interest may be the ToSic.Eav.Logging or ToSic.Eav.LookUp . Core Data Models This is more interesting and relevant to you, when you want to dive deep into the data model. Again you should note that this is advanced stuff. You'll find it in ToSic.Eav.Data - the most common bit you may care about is IEntity and IContentType . Data Processing This is where things get relevant for you. Check out the ToSic.Eav.DataSources to find all the bits and pieces used to process, filter and cache data. Storage This is still more an internal bit, and as of now you shouldn't use it. App System and Assets Another part that you may want to know more about. Here is where data is clustered together into virtual containers called Apps . These contain all the content-types and items of an App. It also has view-definitions, Content-Blocks (the logical unit usually called a Module in Dnn) and way more. You'll find it in ToSic.Eav.Apps . The assets - usually using ADAM - are found in ToSic.Eav.Apps .Assets. Web API This is ATM an internal section, mainly for connecting Dnn WebAPIs to the EAV. Not documented as of now. The Fine Line Between Eav.Apps and Sxc.* To keep the architecture clean, it's important to draw a clear line between Apps and what Sxc does. Basically it's this: Eav.Apps are virtual containers bundling things together. This means content-types, data, queries, settings, etc. Sxc is all about (Web) Content Management. So anything related to views, templates, assets, content-blocks is in Sxc. Specifically, these things may not be in Apps, and must be in Sxc Templates Rendering Engines like Token/Razor Content-Blocks Custom WebApi (which is also kind of a dynamic rendering engine)"
  },
  "abyss/integration/scenario-02.html": {
    "href": "abyss/integration/scenario-02.html",
    "title": "Your Custom Platform - Scenario #2 - Edit Data + ADAM | 2sxc 13 / EAV 13",
    "keywords": "Your Custom Platform - Scenario #2 - Edit Data + ADAM This is part of the Integration Guide for integrating EAV or 2sxc into your own solution. Tip You can find this fully implemented in the Integration\\SxcEdit01 project Search for #2sxcIntegration in the code to find all the things that were adjusted to get it to work. Warning These docs are still WIP. Scope of Scenario #2 - Edit EAV Data Functionality A link on a page can open the edit dialog Users can edit texts Users can save the result Users can see the history of an item and restore it to a previous state ADAM Users can upload assets in the edit-dialog - which is stored in this new web (not in the original Dnn/Oqtane) Users can see previously uploaded assets Users can delete and rename assets in the edit-dialog Assets are referenced using their path, not an ID (which would be the default in Dnn/Oqtane) Adam files of an entity can be shown on a page All API Controllers log what they do Not implemented Security checks are fake, it always returns that edit etc. is allowed Integration Overview for Basic Edit + ADAM To Integrate EAV and 2sxc into your system, these are the core things you must do: Add more necessary DLLs Copy additional relevant files - specifically the js/css files to be used in the dialogs Implement core objects which are different in your system Implement APIs for edit, probably also for delivering files etc. Test / Verify you can edit data 1. Add Minimal DLLs For this scenario you need to add just about all of the DLLs except for Razor helpers. You can add these manually, reference them or whatever. 2. 2sxc Web Files (JS, CSS) 2.1 Copy Important Web Files to Your Target All the dialogs are JS based, so you must get these JS files in a place where they can be loaded. Tip The dist , js folders etc. must be accessible from outside. For reference, check out the build script on the SxcEdit01 project. 2.2 Make sure in page 2sxc JSs are loaded For the page to be able to trigger edit dialogs, it needs at least these two files to be loaded on the page when a user should be able to edit: [2sxc public files root]/js/2sxc.api.min.js - note that the location could change in a future version [2sxc public files root]/dist/inpage/inpage.min.js - note that the location could change in a future version 2sxc does this automatically in a full implementation like in Dnn and Oqtane. The logic to do that and ensure it's part of the final output is sophisticated. So for this minimal implementation, best do it yourself, and choose yourself if you give it to all users or just admins. 2.3 Give the JS Environment Variables The JS needs to know a few global things for it to work. At the minimum it's the location of the WebAPI root as well as the location of the UI files. For this you either need a _jsApi meta header or add this to the page after the $2sxc-js has been loaded: $2sxc.env.load({ // optional pageId: 0, rvt: '@IntegrationConstants.EnvRvt', api: '@IntegrationConstants.EnvApiRoot', uiRoot: `@IntegrationConstants.EnvUiRoot`, }); The previous code was taken from the _Layout.cshtml in the example. 3. Implement Core Objects which are Necessary Specifically Implement Context\\ISite is needed to have information about the ContentPath Context\\IUser is needed to pretend it's a super-user and allow editing Adam\\IAdamPaths - our test-case assumes it's in wwwroot, for which there is already a prepared AdamPathsWwwroot object Register these replacements in the StartUp - in the demo project it's in the StartupEavAndSxc.AddImplementations(...) 4. Implement and Activate WebApis Implement a base class to assist in various aspects Add the request to the insights logs Ensure timing of the request to better spot issues Make sure your controllers are just proxies calling the Real controller Make some minor corrections to HTTP responses, so empty ones really return an HTTP 204 Implement WebApis to answer on the appropriate endpoints (see examples) DialogController is required to get general information for dialogs to work EditController is reponsible for loading and saving data from the dialog AdamController helps with file uploads etc. Register / activate Depending on the framework, registration is different. For .net core, check out the example AddControllersAndConfigureJson(...) or the Oqtane registration examples. Remember that it must also be configured - see the UseEndpoints(...) or the Startup.cs 4. Expand StartUp Configuration - TODO: Do the same as Some aspects of EAV & 2sxc are super important that they are configured before anything starts. These are the required ones as of 2022-02: The database ConnectionString required to connect to the EAV DB GlobalFolder of the distributed 2sxc files containing things like the .data subfolder - required to load initial configurations and initial data Call StartUp on the SystemLoader which you must get from DI This is the working code taken from BasicEav01 : /// <summary> /// This method gets called by the runtime. Use this method to configure the HTTP request pipeline. /// </summary> public void Configure(IApplicationBuilder app, IWebHostEnvironment env) { // ----- Start EAV stuff #2sxcIntegration ----- var serviceProvider = app.ApplicationServices; // Set Connection String serviceProvider.Build<IDbConfiguration>().ConnectionString = _connStringFromConfig; // Set global path where it will find the .data folder var globalConfig = serviceProvider.Build<IGlobalConfiguration>(); globalConfig.GlobalFolder = Path.Combine(env.ContentRootPath, \"sys-2sxc\"); // Trigger start where the data etc. will be loaded & initialized serviceProvider.Build<SystemLoader>().StartUp(); // ----- End EAV stuff #2sxcIntegration ----- // ... } 5. Test and Verify If you did everything right, you can now run your code and access data from the App Cache using code like this (see demo on the ShowEavData.cshtml ): @page @using ToSic.Eav.Apps @inject IAppStates AppStates @{ ViewData[\"Title\"] = \"First Read Data from EAV\"; // Adjust these values to your testing environment var zoneId = 2; var appId = 78; var appState = AppStates.Get(new AppIdentity(zoneId, appId)); var firstItem = appState.List.FirstOrDefault(); } Common Problems If the folder to the .data isn't quite correct, you will have a long loading time and then a stack overflow 5. Get Insights WebApi to Work The Insights will help you figure out what parts you need to implement. It will show you what services were requested which are not implemented yet, and will show you what code was used. Create your minimal InsightsController as you see in the demo project Register the routes using whatever system you have ATM (.net core, ASP.net Framework) Test the routes to see things are coming out Minimal InsightsController using Microsoft.AspNetCore.Mvc; using ToSic.Eav.Logging.Simple; using ToSic.Eav.WebApi.Sys; namespace IntegrationSamples.BasicEav01.Controllers { [Route(\"api/sxc/sys/[controller]\")] [ApiController] public class InsightsController : ControllerBase { /// <summary> /// Constructor which will retrieve the Insights backend for use here /// </summary> public InsightsController(Insights insights) => _insights = insights; private readonly Insights _insights; /// <summary> /// The main call on this controller, will return all kinds of views with information /// </summary> [HttpGet(\"{view}\")] public ContentResult Details( [FromRoute] string view, [FromQuery] int? appId = null, [FromQuery] string key = null, [FromQuery] int? position = null, [FromQuery] string type = null, [FromQuery] bool? toggle = null, [FromQuery] string nameId = null) { // Temporary setting to allow Insights despite minimal setup ToSic.Eav.Context.UserUnknown.AllowEverything = true; var result = _insights .Init(new Log(\"Int.Insights\")) .Details(view, appId, key, position, type, toggle, nameId); return base.Content(result, \"text/html\"); } } } Activate it in the StartUp.cs public void Configure(IApplicationBuilder app, IWebHostEnvironment env) { // ... app.UseEndpoints(endpoints => { endpoints.MapRazorPages(); // #2sxcIntegration - enable insights controllers endpoints.MapControllers(); }); } Test by calling https://localhost:44384/api/sxc/sys/Insights/Help - replace the base path as needed History Proof of Concept implemented with 2sxc 11 in 2021 Finalized when integrating Oqtane in 2sxc 12 Updated docs for basic Scenario for v13.03"
  },
  "abyss/integration/scenario-01.html": {
    "href": "abyss/integration/scenario-01.html",
    "title": "Your Custom Platform - Scenario #1 - Read EAV Data | 2sxc 13 / EAV 13",
    "keywords": "Your Custom Platform - Scenario #1 - Read EAV Data This is part of the Integration Guide for integrating EAV or 2sxc into your own solution. Tip You can find this fully implemented in the Integration\\BasicEav01 project. Search for #2sxcIntegration in the code to find all the things that were adjusted to get it to work. Scope of Scenario #1 - Read EAV Data In Scenario #1 we will setup a basic system. This is the foundation for more enhanced scenarios. Functionality Can read / get EAV Data from an existing Dnn or Oqtane Database Has a dummy IUser implementation which says the user is always a SystemAdmin Can see Insights to see what's happening internally and to verify everything is ok Integration Overview for Basic Read-From-Existing-DB Scenarios To Integrate EAV and 2sxc into your system, these are the core things you must do: Add necessary DLLs Copy all relevant files core files like .data Integrate into your Dependency Injection Do StartUp configuration as needed Test / Verify you can Read Data 1. Add Minimal DLLs For the first scenario, we need the main ToSic.Eav.* DLLs (no 2sxc DLLs needed): Apps Core DataSources ImportExport Persistence.Efc Repository.Efc You can add these manually, reference them or whatever. 2. Copy Important Data to Your Target The EAV loads important data from the file system when it starts. This data contains Content-Types and basic configuration which is necessary to work. In the basic implementation, you need the .data folder to be copied to the right location, which must be available at runtime. Tip The .data folder does not need to be accessible from outside. You may copy the .data manually, or automate it on build. The following script is used in the BasicEav01 project on build (adjust it to your needs): @Echo Configuration='$(Configuration)' @Echo StartWith ='$(Configuration.StartsWith('Debug'))' @Echo Platform ='$(Platform)' @Echo ProjectDir '$(ProjectDir)' @SET BuildTarget=$(ProjectDir)sys-2sxc @Echo BuildTarget '%BuildTarget%' @REM Copy the data folders robocopy /mir \"$(ProjectDir)..\\..\\Data\\.data\\ \" \"%BuildTarget%\\.data\\ \" 3. Integrate into your Dependency Injection The EAV and 2sxc need Dependency Injection to work. As of now (2022-02) we use the .net Standard 2.1 DI. Note The example below also registers the IntUser which is the Integration-implementation of the IUser . To see the code of that, just check out the example code in the project. 3.1 General Principles The general principle is as follows: At StartUp you'll either use the existing IServiceCollection like in the Oqtane examples or create a new ServiceCollection() like in the Dnn examples You'll later have custom services for your platform only, these should be added in an own method like AddSxcYourPlatform in your own static class Once you need these objects, you'll get a IServiceProvider from the framework or create your own, sometimes creating an own scope This would be a minimal StartUp taken from BasicEav01 : /// <summary> /// This method gets called by the runtime. Use this method to add services to the container. /// </summary> public void ConfigureServices(IServiceCollection services) { // #2sxcIntegration // Register our Always-Super-User (to allow Insights to be used) services.TryAddTransient<IUser, IntUser>(); // Enable all of EAV services.AddEav(); // RazorPages - standard .net core MVC feature services.AddRazorPages(); } 3.2 Various DI Scenarios Your project may already use DI, or it may not. Here are the common scenarios you will probably have: 3.2.1 DI Scenario #1 - No Dependency Injection This scenario is common in classic .net Framework and WebForms projects which are a bit older. We assume nobody will actually be needing this much, so we won't explain this in detail. Your work will basically consist of At Startup, create a new DI and store it somewhere (see DNN samples to see how this can be done) When you use it, make sure you get the IServiceProvider - probably in an own Scope per request and module 3.2.2 DI Scenario #2 - .net Core Dependency Injection This scenario is common in new Asp.net Core projects. It already has Dependency Injection setup, and all you need to do is use the existing one. For this scenario, best see how it's done in Oqtane 4. Do StartUp Configuration Some aspects of EAV & 2sxc are super important that they are configured before anything starts. These are the required ones as of 2022-02: The database ConnectionString required to connect to the EAV DB GlobalFolder of the distributed 2sxc files containing things like the .data subfolder - required to load initial configurations and initial data Call StartUp on the SystemLoader which you must get from DI This is the working code taken from BasicEav01 : /// <summary> /// This method gets called by the runtime. Use this method to configure the HTTP request pipeline. /// </summary> public void Configure(IApplicationBuilder app, IWebHostEnvironment env) { // ----- Start EAV stuff #2sxcIntegration ----- var serviceProvider = app.ApplicationServices; // Set Connection String serviceProvider.Build<IDbConfiguration>().ConnectionString = _connStringFromConfig; // Set global path where it will find the .data folder var globalConfig = serviceProvider.Build<IGlobalConfiguration>(); globalConfig.GlobalFolder = Path.Combine(env.ContentRootPath, \"sys-2sxc\"); // Trigger start where the data etc. will be loaded & initialized serviceProvider.Build<SystemLoader>().StartUp(); // ----- End EAV stuff #2sxcIntegration ----- // ... } 5. Test and Verify If you did everything right, you can now run your code and access data from the App Cache using code like this (see demo on the ShowEavData.cshtml ): @page @using ToSic.Eav.Apps @inject IAppStates AppStates @{ ViewData[\"Title\"] = \"First Read Data from EAV\"; // Adjust these values to your testing environment var zoneId = 2; var appId = 78; var appState = AppStates.Get(new AppIdentity(zoneId, appId)); var firstItem = appState.List.FirstOrDefault(); } Common Problems If the folder to the .data isn't quite correct, you will have a long loading time and then a stack overflow 5. Get Insights WebApi to Work The Insights will help you figure out what parts you need to implement. It will show you what services were requested which are not implemented yet, and will show you what code was used. Create your minimal InsightsController as you see in the demo project Register the routes using whatever system you have ATM (.net core, ASP.net Framework) Test the routes to see things are coming out Minimal InsightsController You can review the code of the InsightsController in the Controllers folder in the project. Activate it in the StartUp.cs public void Configure(IApplicationBuilder app, IWebHostEnvironment env) { // ... app.UseEndpoints(endpoints => { endpoints.MapRazorPages(); // #2sxcIntegration - enable insights controllers endpoints.MapControllers(); }); } Test by calling https://localhost:44384/api/sxc/sys/Insights/Help - replace the base path as needed. Tip Once the insights work, you can also see what objects were used in a fallback/unknown implementation . History Proof of Concept implemented with 2sxc 11 in 2021 Finalized when integrating Oqtane in 2sxc 12 Updated docs for basic Scenario for v13.03"
  },
  "abyss/integration/index.html": {
    "href": "abyss/integration/index.html",
    "title": "Integration into Your Custom Platform (WIP Docs) | 2sxc 13 / EAV 13",
    "keywords": "Integration into Your Custom Platform (WIP Docs) EAV and 2sxc can be included as part of your own custom platform or application. You may want to do this for things such as: Access existing EAV data which was created in Dnn or Oqtane Use dynamic data to extend the data of your application Use it to extend the functionality of your application Warning There docs are work in progress. Integration Overview Start with Scenario 1 - Read EAV Data Then expand to Scenario 2 - Edit EAV Data Then continue with Admin Razor ... TODO: Provide custom core services as needed Necessary for More Complex Scenarios Depending on your needs, you will activate more functionality in your application: Use Apps with Queries Use Razor Templates to render data Editing in your Web-UI Multi-Site / Tenant implementation Import/Export of data App level WebApi support Image Resizer Global / shared apps History Proof of Concept implemented with 2sxc 11 in 2021 Finalized when integrating Oqtane in 2sxc 12 final docs in v13.03"
  },
  "abyss/data-formats/zip/index.html": {
    "href": "abyss/data-formats/zip/index.html",
    "title": "ZIP App Data Format in 2sxc (technical) | 2sxc 13 / EAV 13",
    "keywords": "ZIP App Data Format in 2sxc (technical) <!-- Data Highlights --> <!-- ADAM --> <!-- Server --> <!-- Prepare --> <!-- Data Source --> <!-- Optimzers --> <!-- Process / Awesomize --> <!-- Libraries --> <!-- data formats --> <!-- Browser --> <!-- Frameworks --> <!-- App show parts --> <!-- Interact parts --> <!-- Edit parts --> <!-- Edit UI parts --> <!-- SPA parts --> <!-- Custom highlight boxes - can be controlled by in-page CSS --> you are here (click to zoom) - discover the stack .context-box-summary .data-all { visibility: visible; } When Apps are exported, they result in a ZIP file which can be easily re-imported. Info-Files in the Root Folder The root folder contains some files which are not important, but they should help in case someone tries to install the App in Dnn, because it would then show some messages that it's not a Dnn Package. Structure of the ZIP various info files Apps [AppName] (like Accordion3) app.xml - all the data in the App as XML 2sexy folder containing all the files in your app PortalFiles folder (optional) adam folder (optional) - would contain all the adam files [AppName] (like Accordion3) all folders / files in the site root, which were referenced by data Multi-App Package not Supported The file structure would support the ability to bundle many apps into one package, but the export/import system does not support this use case as of now."
  },
  "js-code/2sxc-api/sxc.webapi-jquery.html": {
    "href": "js-code/2sxc-api/sxc.webapi-jquery.html",
    "title": "| 2sxc 13 / EAV 13",
    "keywords": "Moved to The WebApi Helpers on the Sxc Controller using JQuery"
  },
  "js-code/2sxc-api/sxc.webapi-fetch.html": {
    "href": "js-code/2sxc-api/sxc.webapi-fetch.html",
    "title": "| 2sxc 13 / EAV 13",
    "keywords": "Moved to The WebApi Helpers on the Sxc Controller using Fetch"
  },
  "net-code/dynamic-code/object-data.html": {
    "href": "net-code/dynamic-code/object-data.html",
    "title": "Data / in Dynamic Code | 2sxc 13 / EAV 13",
    "keywords": "Data / @Data in Dynamic Code What is Data A 2sxc instance is a running 2sxc-engine which is about to execute some code (Razor, Token or a web service) together with some content-items which should be used in this case. These content-items are provided to the code in an object called Data . 2sxc will decide what items to deliver, based on the situation. In most cases, a Dnn-Module will show a 2sxc-template, and the content-editor will manually add items to it using the normal web-UI. In this case, these items will be tied to this use-case and 2sxc will deliver them in the Data object. In other cases, the template (or view) will be configured to get data from a query configered elsewhere. In this case, all data retrieved in the query will be provided in the same Data object. There are also cases, where a template needs both queried data (like all categories ) as well as content-items added manually. There are multiple easy ways of doing this todo - document later Note: if you want all data of a type, like \"Get me all Tag-items in the system\" you need to use App-Data . Discover More in the Razor Tutorials We have an rich series of Razor tutorials . You should really check them out üëç. Most common way to use the Data object In all Razor-templates and also the web-api files, the Data object is already created and ready to access. Here's a code example: <div class=\"app-blog\"> @foreach(var post in AsDynamic(Data)) { // do something with the @post here } </div> the foreach will loop through all items of the data in the Stream Default - read more about streams below the var post is the inner variable containing the current item the AsDynamic will ensure that the items we're working with are easy to code with, because they are Dynamic Entities The Streams in a Data Object The data object can have multiple Streams , each containing a list of items. In most cases you'll just have the Default stream, which you can access using Data[\"Default\"] . Read more about streams in the Stream docs But you may also have additional streams, depending on what has been configured in the data-preparation stuff (usually a VisualQuery). For example, if you are working on a view showing one product and a menu with all possible categories, then your query may have these streams: Book (the current book, this stream has 1 item with the ID matching the ID in the URL) Categories (all categories in the system, sorted A-Z) The code would then look a bit like this: var book = Data[\"Book\"].FirstOrDefault(); // returns an IEntity Object var cats = Data[\"Categories\"]; // returns an IEnumerable of iEntity objects Or in most cases, because of the simpler syntax later on: var book = AsDynamic(Data[\"Book\"].FirstOrDefault()); // returns one dynamic entity var cats = AsDynamic(Data[\"Categories\"]); // returns an IEnumerable of dynamic entities Changing what is provided by Data The main configuration of the template will determine, what data is initially provided to the template. Afterwards, other mechanisms can override / change this. Initial Sources Default type/list configuration - this can determine that 0, 1 or many items (of a certain type) are delivered if one or many are delivered, then the selection will be based on what the editor added to the module instance. VisualQuery - if the template has a query attached, this query will deliver the data Modifications to the source for the template The event CustomizeData can optionally completely reconfigure what Data contains in your code. Data Object API The Data object itself is actually a normal EAV IDataSource . So if you need to know more about the internals, read it up there. All other properties of the Data object are very special use only, so you probably shouldn't bother about them - which is why they are not documented here."
  },
  "net-code/dynamic-code/object-cms-context.html": {
    "href": "net-code/dynamic-code/object-cms-context.html",
    "title": "This page has moved | 2sxc 13 / EAV 13",
    "keywords": "This page has moved Moved to CmsContext in Dynamic Code ‚ú® new!"
  },
  "basics/query/visual-query/index.html": {
    "href": "basics/query/visual-query/index.html",
    "title": "VisualQuery Designer | 2sxc 13 / EAV 13",
    "keywords": "VisualQuery Designer <!-- Data Highlights --> <!-- ADAM --> <!-- Server --> <!-- Prepare --> <!-- Data Source --> <!-- Optimzers --> <!-- Process / Awesomize --> <!-- Libraries --> <!-- data formats --> <!-- Browser --> <!-- Frameworks --> <!-- App show parts --> <!-- Interact parts --> <!-- Edit parts --> <!-- Edit UI parts --> <!-- SPA parts --> <!-- Custom highlight boxes - can be controlled by in-page CSS --> you are here (click to zoom) - discover the stack .context-box-summary .query-app { visibility: visible; } 2sxc includes a visual designer for creating queries called VisualQuery . It's drag-and drop, and each component can be configured to your needs. The Designer This is what it looks like: This is what you see when you run a query: Add Parts / DataSources Just add parts to your query as you need them: ...and drag them around for positioning as you want: Connect Parts / DataSources Now just connect Out Streams of some parts to the In Streams on other parts: In some cases, the connection to drop unto already has the right name, otherwise just click on the name to rename it: Tip Renaming connections can be very important, as the receiver of data may expect a specifically named In Stream to bring it data. The most common name is Default BTW. You can also rename the Outbound connection if you want this: Tip Just like the In-Streams, the Out-Streams names can have an important effect. In the example above, renaming the Out means that the shown App DataSource will only give data of the type Company on this stream. Save, Run and Debug Here's an example of the result after running the query shown above: As you can see, the designer shows each connection and how much data was in it (and you'll see a dialog showing the data). If we click on a stream we can also see exactly what was in the stream: Read more about this in VisualQuery 3: Debugging . Add more DataSources and Connect To build your dream-query, add more parts as you need them... As you can see, the resulting stream has 0 items in it. Let's configure the Item-ID Filter to do something usefull: Configure the Parts All parts which can be configured show a gear-icon when you mouse over them: ...which then show a dialog for this specific DataSource: üëâ Learn more about Configuration and Parameters Where to go from Here Try out various apps to see how they use VisualQuery Discover all the features in these docs (see menu to the left) Read also Blog Posts about VisualQuery Designer Data Sources (IDataSource) History Introduced in 2sxc 07.00"
  },
  "basics/app/views.html": {
    "href": "basics/app/views.html",
    "title": "Page Moved | 2sxc 13 / EAV 13",
    "keywords": "Page Moved Moved to Views and Templates"
  },
  "basics/app/templates.html": {
    "href": "basics/app/templates.html",
    "title": "Template Files | 2sxc 13 / EAV 13",
    "keywords": "Template Files <!-- Data Highlights --> <!-- ADAM --> <!-- Server --> <!-- Prepare --> <!-- Data Source --> <!-- Optimzers --> <!-- Process / Awesomize --> <!-- Libraries --> <!-- data formats --> <!-- Browser --> <!-- Frameworks --> <!-- App show parts --> <!-- Interact parts --> <!-- Edit parts --> <!-- Edit UI parts --> <!-- SPA parts --> <!-- Custom highlight boxes - can be controlled by in-page CSS --> you are here (click to zoom) - discover the stack .context-box-summary .process-razor-app { visibility: visible; } Template files will generate HTML - often based on the data a editor entered, and/or which was provided from the App. Template File Types The system is built in a way, that furhter templating engines could also be implemented at any time. As of now there are two types of template files: Token (simple but limited) Razor (can do anything you can think of) How it Works Each View has a configuration referencing a template file. 2sxc will then decide what type it is, and run the appropriate engine. The template files usually reside inside app root folder or sub folder. As of now, there are two types: Razor / MVC - These always begin with an _ and end with .cshtml . Placeholders and code usually is marked with @ like @Content.Name Tokens - these always end with .html . Placeholders usually look like [Content.Name] . Tokens cannot have any server-side code aside from the basic placeholders. Tip If your view just hosts a JavaScript SPA, it will also be one of these types of files. Re-Using Templates Note Re-Using in many Views Sometimes you'll want to use the same template file in multiple Views. This can just be configured at the View level Tip Re-Using Templates Across Portals Instead of placing the template in the App-folder of the current portal, you can also place it in a global App-folder in the _default portal of Dnn. This is great if you have the same app in many portals, and want to centralize the template. Tip Razor Templates also support re-using template parts or any C# code. You can also pass parameters to these parts, which allows you to share template-code across templates. Read also Views and Templates Razor Tutorials RazorBlade Tutorials History Introduced in 2sxc 1.0 Automatic View-Polymorphism added in 2sxc 11"
  },
  "basics/app/settings.html": {
    "href": "basics/app/settings.html",
    "title": "App Settings | 2sxc 13 / EAV 13",
    "keywords": "App Settings <!-- Data Highlights --> <!-- ADAM --> <!-- Server --> <!-- Prepare --> <!-- Data Source --> <!-- Optimzers --> <!-- Process / Awesomize --> <!-- Libraries --> <!-- data formats --> <!-- Browser --> <!-- Frameworks --> <!-- App show parts --> <!-- Interact parts --> <!-- Edit parts --> <!-- Edit UI parts --> <!-- SPA parts --> <!-- Custom highlight boxes - can be controlled by in-page CSS --> you are here (click to zoom) - discover the stack .context-box-summary .data-configuration { visibility: visible; } Every App has a Settings Entity. The fields available can be anything your App needs, so there is no pre-defined set of fields. Edit/Configure App Settings This is where you can find the App Settings On 2 you can configure the fields you need, just like any other Entity: On 3 you can set the values you need Why would you use this? Imagine a Gallery App where each instance (Module) has settings like animation speed. You would place the default values in the App Settings so that by default all instances would behave the same, and you can still change this in one central location. Example from the Content App In newer versions, the Content-App has some App-Settings to store Google-Maps API keys Bootstrap versions (CSS Framework) to load if the Theme doesn't have Bootstrap activated Difference App Configuration / App Settings The App Configuration is a system Entity and 2sxc needs it for the App to work properly. The App Settings can contain any information you configure it to have, and the values are only used in the App itself. Use in C# Code (Razor / WebAPI) In 2sxc 12.04+ you should use the new Settings Stack object which stacks settings from different sources incl. the App Settings. See Settings C# Docs . In previous version you can access it on the App.Settings Dynamic Entity , like App.Settings.AnimationSpeed . Check out the App API docs Use in Token Templates Tokens templates are much more limited, but you can access these values using [App:Settings:...] - for example [App:Settings:AnimationSpeed] The new v12 Settings-Stack is not available in tokens. If you think you need it, please post an issue on github. Use in VisualQuery You can also access these properties in VisualQuery , also using tokens like [App:Settings:DefaultCategory] The new v12 Settings-Stack is not available in Visual Query. If you think you need it, please post an issue on github. Using Settings in Multi-Language Scenarios Settings are normal Entities, and as such can be multi-language. We strongly recommend to limit the use of multi-language settings, as it can often lead to unexpected results. Don't Use Settings for Labels Remember to use App Resources for button-labels, titles etc. and not Settings, as this would confuse the users. History Introduced in 2sxc 6.0 Extendend The Content App to have multi-language App Resources and Settings 2sxc v11 Created the global Settings in v12.04 Placed the global Settings in the Primary App in v13.0"
  },
  "basics/app/resources.html": {
    "href": "basics/app/resources.html",
    "title": "App Resources | 2sxc 13 / EAV 13",
    "keywords": "App Resources <!-- Data Highlights --> <!-- ADAM --> <!-- Server --> <!-- Prepare --> <!-- Data Source --> <!-- Optimzers --> <!-- Process / Awesomize --> <!-- Libraries --> <!-- data formats --> <!-- Browser --> <!-- Frameworks --> <!-- App show parts --> <!-- Interact parts --> <!-- Edit parts --> <!-- Edit UI parts --> <!-- SPA parts --> <!-- Custom highlight boxes - can be controlled by in-page CSS --> you are here (click to zoom) - discover the stack .context-box-summary .data-configuration { visibility: visible; } Every App has a Resources Entity. The fields available can be anything your App needs, so there is no pre-defined set of fields. Edit/Configure App Resources This is where you can find the App Resources On 2 you can configure the fields you need, just like any other Entity: On 3 you can set the values you need Why would you use this? Many templates may have special labels, intro-texts or buttons which would benefit from simple editing and from multi-language capabilities. This is what the App Resources are for. Use in C# Code (Razor / WebAPI) In 2sxc 12.04+ you should use the new Resources Stack object which merges resources from different sources incl. the App Resources. See Resources C# Docs . In previous version you can access it on the App.Resources Dynamic Entity , like App.Resources.Introduction . Check out the App API docs Use in Token Templates Tokens templates are much more limited, but you can access these values using [App:Resources:...] - for example [App:Resources:Introduction] . The new v12 Resources-Stack is not available in tokens. If you think you need it, please post an issue on github. Don't use in VisualQuery You could also access these properties in VisualQuery , using tokens like [App:Resources:Introduction] - but this is not recommended, as you should not use Resources for this. Use App Settings instead. Don't Use Resources for Settings Resources should only be used for labels, logos, introduction-texts and similar. For Settings always use App Settings . History Introduced in 2sxc 6.0 Extendend The Content App to have multi-language App Resources and Settings 2sxc v11 Created the global Resources in v12.04 Placed the global Resources in the Primary App in v13.0"
  },
  "js-code/2sxc-api/sxc/_webapi-history.html": {
    "href": "js-code/2sxc-api/sxc/_webapi-history.html",
    "title": "History | 2sxc 13 / EAV 13",
    "keywords": "History jQuery based webApi.get(...) etc. introduced in 2sxc 04.00 webApi.fetchRaw() , webApi.fetchJson() , webApi.url() , webApi.headers() API introduced as beta in v12.10 jQuery commands deprecated in v12.10 but will continue to work if the page has jQuery loaded webApi.url(...) enhanced with parameters object in v12.11 webApi.fetchRaw(...) created to fix difficult naming in 12.10; webApi.fetch(...) is now deprecated and will stop working soon - v13.04 webApi.fetchRaw , .fetchJson , sxc.data(...) and sxc.query(...) official for use 13.04"
  },
  "js-code/2sxc-api/sxc/index.html": {
    "href": "js-code/2sxc-api/sxc/index.html",
    "title": "The Module Level Sxc Instance | 2sxc 13 / EAV 13",
    "keywords": "The Module Level Sxc Instance <!-- Data Highlights --> <!-- ADAM --> <!-- Server --> <!-- Prepare --> <!-- Data Source --> <!-- Optimzers --> <!-- Process / Awesomize --> <!-- Libraries --> <!-- data formats --> <!-- Browser --> <!-- Frameworks --> <!-- App show parts --> <!-- Interact parts --> <!-- Edit parts --> <!-- Edit UI parts --> <!-- SPA parts --> <!-- Custom highlight boxes - can be controlled by in-page CSS --> you are here (click to zoom) - discover the stack .context-box-summary .interact-2sxc { visibility: visible; } The module-specific sxc -instance is the core JavaScript object helping you in these cases: if you want full control over the edit-experience with custom buttons etc. when you want to use view-data as an asyc-JS call if you wish to work with WebAPI REST calls - of your own App-WebApi, 2sxc-WebApi or Dnn-WebApi How to use First you must ensure that you have the $2sxc manager on your page, which will get you a module-specific sxc strong>. Read about the $2sxc manager here. Here's a simple example (assuming you have the $2sxc manager): <a onclick=\"var sxc = $2sxc(this); alert(sxc.isEditMode())\"> click me </a> The code above shows how the sxc-object is retrieved using the $2sxc(...) manager, based on the current context this how to ask if we're in edit-mode Here's another quick example, calling a C# web-api endpoint: var sxc = $2sxc(27); sxc.webApi.post(\"Form/ProcessForm\") .success(function(result) { // .... }); How to Get the Current Context's sxc Instance Before you continue, make sure you know how to resolve/get your sxc -strong>, as it is unique for each Dnn-Module. This is because each action needs to know which module it belongs to. Read about the 3 ways to get this in the $2sxc Manager docs . The API of an Initialized Module sxc Instance .cms - Run Cms Commands like edit etc. .data object to access backend data, see Data Services of the Sxc Instance .id int : the id of this sxc-instance, usually the module-id .isEditMode() bool : looks up if this module is editable - this can vary on each module .manage... object - to create your own buttons, toolbars or run CMS commands .query object to retrieve queries from the backend, see Query Services of the Sxc Instance .webApi... object : helpers to call server side WebApis and REST resources Internal objects which exist, but you shouldn't use: .cbid int : internal use .showDetailedHttpError(...) void : internal use Custom Toolbars, Buttons and Commands Read the manage documentation to discover more about the getToolbar(...) , getButton(...) or run(...) methods which let you customize the toolbars, buttons and use other UI elements like links to run commands like \"show layout selector\". Working with the JSON Data of the Current Module (TODO) The data object and how-to use, probably using the example of TimeLineJS Using the load-event, reload, and the \"one\" event The structure of the returned data Short note: The data is loaded using jQuery and when it's returned and processed, a callback will be executed. This is different from modern promise-implementations but easy to use anyhow. We haven't changed this, because it's trivial and we don't want to break existing code. Till we find time to document more, please consult the $2sxc API Working with REST Api to Read/Write Content-Items / Data In v.13+ you should should use the data . In older versions, use the Sxc WebApi Using App-Queries with $2sxc In v.13+ you should should use the query objects. In older versions, use the Sxc WebApi Working with Custom C# App WebAPIs Read about it in the Sxc WebApi page. Demo App and further links You should find some code examples in this demo App TimeLineJS all the JS-apps including AngularJS in the app-catalog More links: Description of the feature on 2sxc docs History Introduced in 2sxc 04.00"
  },
  "js-code/2sxc-api/cms/cms.run.html": {
    "href": "js-code/2sxc-api/cms/cms.run.html",
    "title": "How to Use Run() and RunParams | 2sxc 13 / EAV 13",
    "keywords": "How to Use Run() and RunParams <!-- Data Highlights --> <!-- ADAM --> <!-- Server --> <!-- Prepare --> <!-- Data Source --> <!-- Optimzers --> <!-- Process / Awesomize --> <!-- Libraries --> <!-- data formats --> <!-- Browser --> <!-- Frameworks --> <!-- App show parts --> <!-- Interact parts --> <!-- Edit parts --> <!-- Edit UI parts --> <!-- SPA parts --> <!-- Custom highlight boxes - can be controlled by in-page CSS --> you are here (click to zoom) - discover the stack .context-box-summary .edit-custom { visibility: visible; } Two commands in the 2sxc APIs allow running CMS commands $2sxc.cms.run(params: RunParamsWithContext) This is the run on the Global Cms object sxc.cms.run(params: RunParams) This is the run on the Instance Cms object Both of these commands will run a CMS command with parameters. Important There are some possibilities for confusion which you should be aware of. The $2sxc.cms.run(...) has a few old overloads with other parameters. We plan to discontinue these, as it had to do some magic to figure out what is what. So even if you find such code, please use the method described here. The Instance sxc also has an older run on sxc.manage.run(...) . We plan to discontinue this, so again please avoid that. Requirements and Prerequisites For this to work, the CMS JavaScripts must be loaded. This is done automatically or manually. If your user is an admin/editor, this happens automatically. If your user is not defined as an editor, but should still have these commands (possibly because the Content-Type allows editing for this user), you'll need to activate it manually. To activate these features manually just use the IPageService and activate 2sxc.JsCms . How to use (v13.03) Simple example: @{ // enable editing for all users GetService<ToSic.Sxc.Services.IPageService>().Activate(\"2sxc.JsCms\"); } <script> // Run the command and handle the returned promise // This uses the Instance object retrieved using $2sxc(tag) function addProject(tag) { $2sxc(tag).cms.run({ action: \"new\", params: { contentType: \"Project\"} }) .then(function () { alert(\"Thanks - we'll review your entry and publish it.\") }); } // This is the alternate way to write the code, using the Global object function addProjectAlternative(tag) { $2sxc.cms.run({ tag: tag, action: \"new\", params: { contentType: \"Project\"}}) .then(function () { alert(\"Thanks - we'll review your entry and publish it.\") }); }</script> <span onclick='window.addProject(this)'> add your project </span> the tag is an HTML tag in the DOM, which is used to look up the context automatically (see edit-context ) the action is the verb for the cms-command to run the params contains additional parameters for that command Returned Promise The run always returns a promise. As you can see in the sample above, this lets you show a specific message or do other things after the command has run. To handle special cases like prevent a page-refresh or to do custom JS actions at certain points, check out the Workflows . RunParams and RunParamsWithContext Both commands take one object with named properties, to help keep the API stable across changes. These are the objects and explanations: /** * Parameters for the Instance cms.run(...) command. * New in 13.03 */ export interface RunParams { /** * The action to perform. * Required if you don't have params which themselves have the action */ action?: string; /** * The command params, like contentType, entityId etc. * Optional for many actions, but can themselves also contain the property `action`, in which case action can be ommited. */ params?: CommandParams; /** * The event which triggered this command - sometimes useful internally further use. * Optional in most cases, but in some cases it will improve the behavior of the code. */ event?: MouseEvent; /** * Workflows work the same way as with a toolbar, except that they are added here and not registered on init */ workflows?: Workflow | Workflow[]; } /** * Parameters for the Global cms.run(...) command in Addition to the RunParams * New in 12.10 */ export interface RunParamsWithContext extends RunParams { /** * The tag on which the run was triggered - it's used to give the command a context to start from * We always need the tag OR the context, but never both */ tag?: HTMLElement; /** * The context to run in, basically containing module id, etc. * We always need the tag OR the context, but never both */ context?: SxcInstance | SxcEdit | ContextIdentifier; } Important The Instance call on sxc.cms.run(...) uses the RunParams . It will throw an error if a context is also provided, because that indicates you're doing something wrong. On the other hand the Global call on the $2sxc.cms.run(...) explicitly needs either tag or context , and will throw an error if both are missing. Command Workflow Example Commands can be called with additional workflow steps which are processed before or after certain steps. For example, you can prevent the page from refreshing - to trigger an own JS-Reload or something. üëâ Read more about Workflows and Steps . Demo App and further links TODO History Global $2sxc.cms.run(...) introduced in 2sxc 09.30 Enhanced with RunParams in 2sxc 12.10 to support registering workflows Use with context instead of tag added in v13.03 Instance version added in v13.03"
  },
  "js-code/2sxc-api/cms/cms.command-workflow.html": {
    "href": "js-code/2sxc-api/cms/cms.command-workflow.html",
    "title": "CMS Command Workflows for Commands and Toolbars | 2sxc 13 / EAV 13",
    "keywords": "CMS Command Workflows for Commands and Toolbars <!-- Data Highlights --> <!-- ADAM --> <!-- Server --> <!-- Prepare --> <!-- Data Source --> <!-- Optimzers --> <!-- Process / Awesomize --> <!-- Libraries --> <!-- data formats --> <!-- Browser --> <!-- Frameworks --> <!-- App show parts --> <!-- Interact parts --> <!-- Edit parts --> <!-- Edit UI parts --> <!-- SPA parts --> <!-- Custom highlight boxes - can be controlled by in-page CSS --> you are here (click to zoom) - discover the stack .context-box-summary .edit-custom { visibility: visible; } CMS Commands which are triggered using JS or using the toolbar can also have special workflows to customize what happens. Examples of things you can do You can conditionally intercept commands and prevent them You can prevent the page-reload after certain dialogs You can log things to the console for debugging Anything you want Simple Example This is a simple workflow step, which would log what's happening internally on every command which is executed by an action: // This workflow step will run on every action, just to log what's happening const workflowToLog = { command: 'all', // Run on every command/action phase: 'all', // Run before and after code: (wfArgs) => { console.log(\"We are doing something - here are the details.\", wfArgs); } } Workflow-Step Object Structure This is the definition of the Workflow Step object: /** * A workflow step (code-sequence) to run before/after specific events. */ export interface WorkflowStep { /** * The name of this step, in case it needs to be replaced or somehow controlled * Will be empty by default */ name?: string; /** * The action this step is for, can be 'any', 'edit', etc. * Will be 'all' by default */ command: string; /** * Action-phase being run, like 'all', 'before', 'after' * will be 'before' by default */ phase?: WorkflowPhases; /** * Execution priority, higher comes first * Will be 1 by default. */ priority?: number; /** * The code which is run, must be a promise-factory. * So it's a function that will return a promise. * Required. */ code: WorkflowCode; } The workflow step contains a command for which it will trigger see the Commands List There is also a special command called refresh which isn't a normal command used on a button, but an internal command called when refreshing the page through reload or ajax. This too can be handled and cancelled a phase (before/after) - possible phase values: before , after , all a code what is to be done Workflow Step Code The code in the above sample is this: code: (wfArgs) => { console.log(\"We are doing something - here are the details.\", wfArgs); } If your code is triggered, it will receive a wfArgs object containing a lot of internal stuff, workflow information and more note that this object isn't 100% final, it may still change a bit in future versions. We don't expect breaking changes, but be aware of this if you use deep properties. If your code returns false , the command (like refresh ) will stop - this can prevent the dialog from openening and the page from refreshing Register Workflow Steps Register When Using cms.run(...) When calling Commands from JavaScript, the workflow steps are directly included in the call, like this: <div class=\"alert alert-primary\" style=\"width: 50%;\"> The following command will open an edit dialog. When you click it and close the dialog again, the page will <em>not refresh</em>. <br> Instead, you'll see console messages that a custom JS took over the process. <br> <a href=\"#\" onclick=\"openAndCancelRefreshAfterwards(this, 'new', { contentType: 'UiEmptyHelloWorld'})\">Run open command</a> </div> <script> function openAndLogEverything(tag, action, params) { // This workflow step will run on every action, just to log what's happening const workflowToLog = { command: 'all', // Run on every command/action phase: 'all', // Run before and after code: (wfArgs) => { console.log(\"We are doing something - here are the details.\", wfArgs); } } // This is the workflow step we will register to stop page refresh const workflowToDisableRefresh = { command: 'refresh', // The command name it's for phase: 'before', // The workflow-step should run before the command is executed code: (wfArgs) => { // The code which should be run console.log('Asked to refresh, will return false to stop it. These are the arguments we got.', wfArgs); return false; // Return false to stop this command from happening } }; var steps = [workflowToLog, workflowToDisableRefresh]; $2sxc(tag).cms.run({ action: action, params: params, workflows: steps}) .then(function(data) { console.log(\"after run\", data); return false; }); } </script> Register With Toolbars When calling a command from a toolbar, you can't directly include it. Instead, you must add an event to register workflow steps when the toolbar executes an action. This is described in detail in Toolbar Workflows Demo App and further links TODO History Global $2sxc.cms.run(...) supporting workflows introduced in v12.10 Instance version added in v13.03"
  },
  "basics/data/how-data-flows.html": {
    "href": "basics/data/how-data-flows.html",
    "title": "How Data Flows | 2sxc 13 / EAV 13",
    "keywords": "How Data Flows This is documented here: How Data Flows in the Server"
  },
  "basics/content/presentation.html": {
    "href": "basics/content/presentation.html",
    "title": "Content Presentation Settings | 2sxc 13 / EAV 13",
    "keywords": "Content Presentation Settings <!-- Data Highlights --> <!-- ADAM --> <!-- Server --> <!-- Prepare --> <!-- Data Source --> <!-- Optimzers --> <!-- Process / Awesomize --> <!-- Libraries --> <!-- data formats --> <!-- Browser --> <!-- Frameworks --> <!-- App show parts --> <!-- Interact parts --> <!-- Edit parts --> <!-- Edit UI parts --> <!-- SPA parts --> <!-- Custom highlight boxes - can be controlled by in-page CSS --> you are here (click to zoom) - discover the stack .context-box-summary .data-entities, .context-box-summary .process-razor-app { visibility: visible; } When Data is used as Content it can also have Presentation settings. This is important because the same piece of content (like an Address) may need to be visualized different ways depending on how it's used. Quick Example Let's say we have an Address of 2sic in Switzerland as Data, and we're using it in a few places: In the footer of the website we're just showing it, the template says how it's shown In the We make Websites Page we have a CTA (Call to Action) with two addresses, and the 2sic address is configured to be highlighted using the Presentation We have a Contact Page where it's shown in a Google-Maps - there we configured the Presentation to use a pink pin Edit Behavior Since the Presentation is directly connected to the Item it's showing, the Edit-UI will open both items for editing together: More Use-Case Examples You have a template that shows simple content, and sometimes the title should be <h1> , sometimes <h2> , etc. Instead of creating 6 different templates, it would be easier to allow simple configuration of the heading-tag. This kind of presentation-configuration is handled by the Presentation-entity. Your Title/Text/Image allows the user to place the image no the right or on the left side. Instead of creating multiple templates, let's just let the user configure the variation he wants. This too is handled by the Presentation-entity. A complex template like a Google-map can configure 10-20 different parameters. These should not be set in the address which we will show - because these parameters have nothing to do with the address itself. So we need a way to provide 10-20 input-fields, drop-downs etc. - but not mix it with the address itself. These 10-20 input fields would be handled in a Presentation-entity. The same piece of information - like the address of 2sic - could be shown on different pages. Each instance might have some presentation configuration that differs from the other ones. It would be impossible to configure this if the config-fields were in the address-entity. So we place them in a separate Presentation-entity. Demo / Defaults Behavior One thing we discovered, is that configurable templates can be annoying because often there is a default configuration which applies to 90%. For example, if you create a configurable heading-tag <h1> through <h6> , usually 90% of the cases need <h1> because this is used on every page. Such defaults are handled easily by providing the template with a default-presentation entity containing these common settings. These will automatically be used if not overruled. Important Presentation Settings are not changed in 90% of all cases, so use Defaults whenever possible! Very often the Presentation contains default settings which are often left untouched. In these cases the Presentation-item is not stored, but the Demo-data is provided automatically. This allows you to update the defaults an any time and it will be reflected on all items which have unmodified Presentation settings. Here's what Presentation looks like when inheriting defaults: This is what Presentation looks like when you set it on the current item: Available on each Content-Item and on Header Presentation is available on each Content item and also in the Header (if a View is configured to have a List ). Each Content item will have it's own presentation settings. The View configuration determines if there is a Presentation setting on Content (or Header) and what Content-Type is to be used. Use in Code In C# you will usually do things like @Content.Presentation.Color or similar. Check the C# API Docs for this . In Tokens you will usually do things like [Content:Presentation:Color] . Check the Tokens docs . Real Example Example: Using the Presentation to control the heading-tag in a template The Content-Types Simple Content - with the following fields Title (text, 1 line) Content (wysiwyg-text) Image (link to an image file) Presentation for Simple Content with the following field Heading (text, drop-down containing h1, h2, h3, h4, h5, h6) The template configuration specifies the simple-content as the content type, and the presentation-for-simple-content as the Presentation-type. The user now has an additional section in the Edit-UI to configure the presentation. The Template This The template would then contain the following fragment: Token Instead of the classic <h1>[Content:Title]</h1> it would have <[Presentation:Heading]>[Content.Title]</[Presentation:Heading]> Razor Instead of the classic <h1>@Content.Title</h1> ...it would have <@Presentation.Heading>@Content.Title</@Presentation.Heading> Power-Feature: Using Default-Values in this Presentation Now remember that probably 90% of all use cases for this will want an <h1> tag. It would be annoying to have to specify this every time, so please create a demo-entity and assign it in the template-configuration. Features and Behavior of Presentation-Data Presentation-Types are optional, templates don't require them Default-Values are optional, but highly recommended Data / Values in a presentation-content-type are not indexed by the search Presentation-Items are unique for every use. So if you show a piece of content in many places, each occurrence can have different presentation-settings Content-Items can have a presentation... ...List Headers can have their own, different presentation. This is used to configure the list (for example, how many items to show before paging) ...and List Headers can also have their own default presentations for fallback The UI always allows the editor to revert back to the default-settings History Introduced in 2sxc v3.0"
  },
  "basics/content/content-assets.html": {
    "href": "basics/content/content-assets.html",
    "title": "Content Assets / Images / Documents | 2sxc 13 / EAV 13",
    "keywords": "Content Assets / Images / Documents <!-- Data Highlights --> <!-- ADAM --> <!-- Server --> <!-- Prepare --> <!-- Data Source --> <!-- Optimzers --> <!-- Process / Awesomize --> <!-- Libraries --> <!-- data formats --> <!-- Browser --> <!-- Frameworks --> <!-- App show parts --> <!-- Interact parts --> <!-- Edit parts --> <!-- Edit UI parts --> <!-- SPA parts --> <!-- Custom highlight boxes - can be controlled by in-page CSS --> you are here (click to zoom) - discover the stack .context-box-summary .data-assets-entities { visibility: visible; } Content has Assets like images and documents . Private Assets By default, all Assets belong to the item and field they were uploaded on. This happens automatically and is managed by ADAM . Shared Assets You can also have shared assets which are stored in the Site content folder, but we don't recommend this as it makes clean-up very difficult. Learn More About ADAM - Automatic Digital Asset Management Image Resizer Fields for Links / Files / Folders Asset Metadata Asset Permissions / Protected folders in Dnn / Oqtane App Assets like icons / logos used in an App #todoc Add screenshots of drag-drop upload"
  },
  "basics/content/content-app.html": {
    "href": "basics/content/content-app.html",
    "title": "Content App | 2sxc 13 / EAV 13",
    "keywords": "Content App Read about it here The Content App"
  },
  "abyss/data-formats/json-v01/entity.html": {
    "href": "abyss/data-formats/json-v01/entity.html",
    "title": "JSON Entity V1 | 2sxc 13 / EAV 13",
    "keywords": "JSON Entity V1 JSON based entities are items which are stored as JSON. This is used in the history, in dynamic-entities in the DB and more. Description As of now, it's using a envolope to package everything and includes a minimal header to ensure we know it's V1 . It then contains an Entity node containing various identification and description attributes / properties optional Entity Metadata optional Assets Example This example is an extract of the Config Content-Type to manage the SqlDataSource (will be releasen in 2sxc 9.8 with more help-text etc.): { \"_\": { \"V\": 1 }, \"Entity\": { \"Id\": 42900, \"Version\": 6, \"Guid\": \"e8a702d2-eccd-4b0f-83bd-600d8a8449d9\", \"Type\": { \"Name\": \"DataPipeline\", \"Id\": \"DataPipeline\" }, \"Attributes\": { \"String\": { \"Description\": { \"*\": \"Retrieve full list of all zones\" }, \"Name\": { \"*\": \"Zones\" }, \"StreamsOut\": { \"*\": \"ListContent,Default\" }, \"StreamWiring\": { \"*\": \"3cef3168-5fe8-4417-8ee0-c47642181a1e:Default>Out:Default\" }, \"TestParameters\": { \"*\": \"[Module:ModuleID]=6936\" } }, \"Boolean\": { \"AllowEdit\": { \"*\": true } } }, \"Owner\": \"dnn:userid=1\", \"Metadata\": [ ] } } Format Explained _ (header) mainly storing the version, in case we have to introduce a breaking change - see also format v1 Entity - this marks an entity - at the moment a json package should only have 1, but later it could contain more Id - the identity as a number Guid - the identity guid as a string Type - type information object Name - the type name Id - the type identity ( Static Name ) as a string. It's usually a guid, but special types can also use a specific string Attributes - the values of this entity String - all the string values; optional, only exists if there are string values [the field name] - an object containing languages/values, see JSON Values [language code]: [value] [language code]: [value] [more fields / languages / values] Boolean - all the boolean values; optional, only exists if there are boelean values Number - all numbers; optional, only exists if there are number values [more types] Owner a special string identifying the owner of this item Metadata (optional, array of more entities) - a list of Entities which further describe this Entity - see JSON Metadata V1 [item 1] Id Guid [more properties] [next items] For object optional , metadata target reference - see JSON Metadata V1 Assets object optional for including template files in View-exports - see JSON Assets V1 All Attributes are Grouped by Type Because JSON is itself a very loose data-format, and certain types like dates are not auto-detectable, we decided to have the type-specification as a first-class citizen in the format. This allows for automatic, reliable type-checking when materializing objects. Values and Languages üëâ JSON Value (Multilanguage) V1 Metadata üëâ JSON Metadata V1 Read also JSON Format V1 Blog post about the entity json format History Added in 2sxc 9.4 Extended to support attachments so Views can include templates and icons in 2sxc ca. v11.10"
  },
  "net-code/dynamic-data/entity.html": {
    "href": "net-code/dynamic-data/entity.html",
    "title": "Entity Objects | 2sxc 13 / EAV 13",
    "keywords": "<!-- Data Highlights --> <!-- ADAM --> <!-- Server --> <!-- Prepare --> <!-- Data Source --> <!-- Optimzers --> <!-- Process / Awesomize --> <!-- Libraries --> <!-- data formats --> <!-- Browser --> <!-- Frameworks --> <!-- App show parts --> <!-- Interact parts --> <!-- Edit parts --> <!-- Edit UI parts --> <!-- SPA parts --> <!-- Custom highlight boxes - can be controlled by in-page CSS --> you are here (click to zoom) - discover the stack .context-box-summary .data-all { visibility: visible; } Entity Objects All content-items in the EAV database of 2sxc are internally handled as Entity objects with the interface IEntity . When using content-items in Razor-Templates and WebAPIs you usually don't care about this, as you will use it as a IDynamicEntity . But there are some advanced cases where you need to look deeper into the object - maybe to check if a translation exists in another language, or if the value is blank because it's null, or an empty string. In this case you'll need to look at the internals, the IEntity . To learn more about the differences, check out DynamicEntity vs Entity Using the IEntity Interface Just a short piece of code to show how it would work (but not usually recommended). // This example shows how to get the link as stored in the data // without converting page:74 to the real link var languagePreference = [\"de\", \"en\"]; var autoResolveLinks = false; var rawLink = AsEntity(Content).GetBestValue(\"Link\", languagePreference, autoResolveLinks); // Hard-core accessing the internal data structure IEntity entity = AsEntity(Content); Dictionary<string, IAttribute> attribs = entity.Attributes; IAttribute titleMultiLanguage = attribs[\"Title\"]; string attType = titleMultiLanguage.Type; IEnumerable<IValue> titleVals = titleMultiLanguage.Values; IValue firstTitle = titleVals.First(); string firstString = firstTitle.ToString(); IEnumerable<ILanguage> langAssignments = firstTitle.Languages; //etc. When would You need to work with Entity objects For Razor and WebAPI these are edge cases, but they are real: The DynamicEntity will automatically resolve links like page:72 and give you http://... . In rare cases you may need to actually get page:72 and for this you need to convert back to Entity. If you want to explicitly figure out what languages have been translated on a value To find out more about the underlying Content-Type (like to list the fields) If the entity is Metadata and you want to know what it's assigned to If the entity has Metadata and you want to get that Read also Discover More in the Razor Tutorials We have an rich series of Razor tutorials . You should really check them out üëç. In case you feel like you really need to know more about the real Entity objects, check out these things: IEntity API AsEntity(...) Entity vs. Dynamic Entity Content-Items History Introduced in 2sxc 01.00 Multi-Language since 2sxc 02.00 Added Value and Value<T> as well as Parents() and Children(...) in 09.42. Note that Value does not do the same thing as GetBestValue."
  },
  "js-code/2sxc-api/2sxc/2sxc.http.html": {
    "href": "js-code/2sxc-api/2sxc/2sxc.http.html",
    "title": "The $2sxc.http API | 2sxc 13 / EAV 13",
    "keywords": "The $2sxc.http API <!-- Data Highlights --> <!-- ADAM --> <!-- Server --> <!-- Prepare --> <!-- Data Source --> <!-- Optimzers --> <!-- Process / Awesomize --> <!-- Libraries --> <!-- data formats --> <!-- Browser --> <!-- Frameworks --> <!-- App show parts --> <!-- Interact parts --> <!-- Edit parts --> <!-- Edit UI parts --> <!-- SPA parts --> <!-- Custom highlight boxes - can be controlled by in-page CSS --> you are here (click to zoom) - discover the stack .context-box-summary .interact-2sxc { visibility: visible; } The $2sxc.http object contains information for doig API calls. It's new - introduced in 2sxc 10.25 . Note The http -object was introduced to help $2sxc run without jQuery and without the rather instable ServicesFramework of Dnn. It has the following important methods: apiUrl(url) resolves a partial url like app/auto/api/Posts/All to the real url needed in Dnn apiUrl(url, endpointName) special version of the apiUrl(...) method, for calling endpoints which are not in 2sxc headers() returns the headers you need to add to a WebApi call for it to work in Dnn headers(moduleId) the headers incl. the one needed when addressing a specific module Internally this information is automatically retrieved from the html-header. The environment looks for a special meta-tag called _jsApi which contains all this information. This is new in 2sxc 10.25 and was added to avoid using jQuery when not necessary. Warning Internally all these commands need the env to be ready. This means that the entire html <head> tag was processed by the browser. A very safe way to do this is to run your code on-document-ready, or just to ensure that whatever bootstraps your application runs inside the <body> tag. Internal Stuff The http also has some internal methods like: apiRoot(endpointName) the full api-root to use in calling Dnn or 2sxc endpoints. It's internal, because for all 2sxc stuff and 2sxc Apps the endpointName is always 2sxc headers(moduleId, contentBlockId) headers incl. ModuleId and content-Block ID - rarely used History Introduced in 2sxc 10.25"
  },
  "js-code/2sxc-api/2sxc/2sxc.env.html": {
    "href": "js-code/2sxc-api/2sxc/2sxc.env.html",
    "title": "The $2sxc.env API | 2sxc 13 / EAV 13",
    "keywords": "The $2sxc.env API <!-- Data Highlights --> <!-- ADAM --> <!-- Server --> <!-- Prepare --> <!-- Data Source --> <!-- Optimzers --> <!-- Process / Awesomize --> <!-- Libraries --> <!-- data formats --> <!-- Browser --> <!-- Frameworks --> <!-- App show parts --> <!-- Interact parts --> <!-- Edit parts --> <!-- Edit UI parts --> <!-- SPA parts --> <!-- Custom highlight boxes - can be controlled by in-page CSS --> you are here (click to zoom) - discover the stack .context-box-summary .interact-2sxc { visibility: visible; } The $2sxc.env object manages environment information for the JavaScript. It's new - introduced in 2sxc 10.25 . Note The env -object was introduced to help $2sxc run without jQuery and without the rather instable ServicesFramework of Dnn. It has the following important methods: page() which will tell you the page number - often needed in API calls api() the root path for api-calls, used in http rvt() the request-verification token needed for internal WebAPI calls Internally this information is automatically retrieved from the html-header. The environment looks for a special meta-tag called _jsApi which contains all this information. This is new in 2sxc 10.25 and was added to avoid using jQuery when not necessary. Internal Stuff The env also has some internal methods like load(...) for special scenarios like using $2sxc in an html which does not come from Dnn. This is not documented in detail, but can be figured out by reading the code. For debugging, there is also a log object which contains some information how the env was built, how long it took etc. History Introduced in 2sxc 10.25"
  },
  "basics/data/metadata/target-types.html": {
    "href": "basics/data/metadata/target-types.html",
    "title": "| 2sxc 13 / EAV 13",
    "keywords": "Moved to Metadata Target Types"
  },
  "basics/edit/edit-ux/index.html": {
    "href": "basics/edit/edit-ux/index.html",
    "title": "Edit User Experience in the Page | 2sxc 13 / EAV 13",
    "keywords": "Edit User Experience in the Page <!-- Data Highlights --> <!-- ADAM --> <!-- Server --> <!-- Prepare --> <!-- Data Source --> <!-- Optimzers --> <!-- Process / Awesomize --> <!-- Libraries --> <!-- data formats --> <!-- Browser --> <!-- Frameworks --> <!-- App show parts --> <!-- Interact parts --> <!-- Edit parts --> <!-- Edit UI parts --> <!-- SPA parts --> <!-- Custom highlight boxes - can be controlled by in-page CSS --> you are here (click to zoom) - discover the stack .context-box-summary .browser-edit { visibility: visible; } 2sxc has powerfull CMS features, most of them just work by magic. You can also modify the behavior to fit your needs. When users edit content they usually use in-page buttons to access edit-dialogs and more. Here is a short overview and links to what you need to know. The Standard Edit Dialogs Editing mostly happens in stand-alone dialogs which are JavaScript based (built using Angular). These dialogs are typically dialogs like edit an item edit a combination of items - like a content item and an assigned presentation-settings item Note that other edit-actions happen in-page directly, like move-up/down in a list etc. All about Toolbars and Editing In-Page Item Edit Toolbars Most of the concept is explained in InPage Toolbars . You will usually create such toolbars from the Razor templates - read about Edit.TagToolbar and Edit.Toolbar The hovering insert-modules toolbar-system is called quickE for quick-edit . There you will also see how to customize the editing experience. Customize Toolbars and Buttons If you want to do more than the default toolbars do, you want to read about: Html toolbars and buttons to customize the toolbars Toolbar settings to configure alignment, hover etc. Buttons to understand in details how buttons work and how to customize them There is also a more technical article if you want to see deeper into the JavaScript . Commands to understand which commands the CMS can run, and how to call them from normal links Custom Code Buttons to create buttons which run your custom code Customize QuickE (Quick Edit) You can also Customize / Configure QuickE (Quick Edit) . Create Custom Input Fields (in the Edit Form) How to create Custom Input Fields Customize the Inner-Content Editing Behaviors TODO: Inner Content - edit/config Documentation WIP - so for now just learn about Inner Content Read also Blog post about Introducing Shake - Mobile Content Editing just turned sexy Blog post about Toolbars for Designers and Developers Blog post about Customize in-page toolbars Blog post about Calling commands from links"
  },
  "api/dot-net/ToSic.Eav.Apps.IAppIdentity.html": {
    "href": "api/dot-net/ToSic.Eav.Apps.IAppIdentity.html",
    "title": "Interface IAppIdentity | 2sxc 13 / EAV 13",
    "keywords": "Interface IAppIdentity Marks thing which belongs to an App and a Zone and know their full identity. Inherited Members IZoneIdentity.ZoneId IAppIdentityLight.AppId Namespace : ToSic.Eav.Apps Assembly : ToSic.Eav.Core.dll Syntax [PublicApi_Stable_ForUseInYourCode] public interface IAppIdentity : IZoneIdentity, IAppIdentityLight Remarks Technically many things could just identify the app they belong to, and let the system look up the zone. But this would be inefficient, so for optimization, many items identify themselves with both the app and zone Ids"
  },
  "api/dot-net/ToSic.Sxc.Web.IHybridHtmlString.html": {
    "href": "api/dot-net/ToSic.Sxc.Web.IHybridHtmlString.html",
    "title": "Interface IHybridHtmlString | 2sxc 13 / EAV 13",
    "keywords": "Interface IHybridHtmlString Implementation of IHtmlString in both .net Framework and .net Standard. This means that any such object will automatically be Raw output if used as @SomeHybridHtmlString so it's the same as Html.Raw(normalString) Namespace : ToSic.Sxc.Web Assembly : ToSic.Sxc.dll Syntax [InternalApi_DoNotUse_MayChangeWithoutNotice(\"Helper to ensure that code providing an IHtmlString will work on .net Framework and .net Standard\")] public interface IHybridHtmlString : IHtmlString"
  },
  "api/dot-net/ToSic.Eav.DataFormats.EavLight.IConvertToEavLight.html": {
    "href": "api/dot-net/ToSic.Eav.DataFormats.EavLight.IConvertToEavLight.html",
    "title": "Interface IConvertToEavLight | 2sxc 13 / EAV 13",
    "keywords": "Interface IConvertToEavLight Helper / Service to prepare Entities, Streams and DataSources to ToSic.Eav.DataFormats.EavLight for automatic serialization in WebApis. It can prepare single items like IEntity and IEntityWrapper like DynamicEntities. It can also prepare IEnumerable/List of these types, as well as DataStream and DataSource objects. In Custom Code / Razor / WebApi you can get this service with Dependency Injection like var converter = GetService&lt;IConvertToEavLight>(); Inherited Members IConvertEntity<EavLightEntity>.Languages IConvert<IEntity, EavLightEntity>.Convert(IEnumerable<IEntity>) IConvert<IEntity, EavLightEntity>.Convert(IEntity) IConvert<IEntityWrapper, EavLightEntity>.Convert(IEnumerable<IEntityWrapper>) IConvert<IEntityWrapper, EavLightEntity>.Convert(IEntityWrapper) IConvert<Object, EavLightEntity>.Convert(IEnumerable<Object>) IConvert<Object, EavLightEntity>.Convert(Object) Namespace : ToSic.Eav.DataFormats.EavLight Assembly : ToSic.Eav.WebApi.dll Syntax [PublicApi] public interface IConvertToEavLight : IConvertEntity<EavLightEntity>, IConvert<IEntity, EavLightEntity>, IConvert<IEntityWrapper, EavLightEntity>, IConvert<object, EavLightEntity>, IConvertDataSource<EavLightEntity> Remarks We're standardizing how conversions are done using the IConvert<TFrom, TTo> interface. This is why you don't see any methods on this interface in the docs. In most cases you'll just do var prepared = converter.Convert(someEntityObjectOrList); Methods | Improve this Doc View Source Convert(IEnumerable<Object>) Declaration IEnumerable<EavLightEntity> Convert(IEnumerable<object> list) Parameters Type Name Description System.Collections.Generic.IEnumerable < System.Object > list Returns Type Description System.Collections.Generic.IEnumerable < EavLightEntity > | Improve this Doc View Source Convert(IEnumerable<IEntity>) Declaration IEnumerable<EavLightEntity> Convert(IEnumerable<IEntity> entities) Parameters Type Name Description System.Collections.Generic.IEnumerable < IEntity > entities Returns Type Description System.Collections.Generic.IEnumerable < EavLightEntity > | Improve this Doc View Source Convert(IEnumerable<IEntityWrapper>) Declaration IEnumerable<EavLightEntity> Convert(IEnumerable<IEntityWrapper> list) Parameters Type Name Description System.Collections.Generic.IEnumerable < IEntityWrapper > list Returns Type Description System.Collections.Generic.IEnumerable < EavLightEntity > | Improve this Doc View Source Convert(Object) Declaration EavLightEntity Convert(object item) Parameters Type Name Description System.Object item Returns Type Description EavLightEntity | Improve this Doc View Source Convert(IEntity) Declaration EavLightEntity Convert(IEntity entity) Parameters Type Name Description IEntity entity Returns Type Description EavLightEntity | Improve this Doc View Source Convert(IEntityWrapper) Declaration EavLightEntity Convert(IEntityWrapper item) Parameters Type Name Description IEntityWrapper item Returns Type Description EavLightEntity | Improve this Doc View Source Convert(IDataSource, IEnumerable<String>) Declaration IDictionary<string, IEnumerable<EavLightEntity>> Convert(IDataSource source, IEnumerable<string> streams = null) Parameters Type Name Description IDataSource source System.Collections.Generic.IEnumerable < System.String > streams Returns Type Description System.Collections.Generic.IDictionary < System.String , System.Collections.Generic.IEnumerable < EavLightEntity >> | Improve this Doc View Source Convert(IDataSource, IEnumerable<String>, String[]) Declaration IDictionary<string, IEnumerable<EavLightEntity>> Convert(IDataSource source, IEnumerable<string> streams, string[] filterGuids) Parameters Type Name Description IDataSource source System.Collections.Generic.IEnumerable < System.String > streams System.String [] filterGuids Returns Type Description System.Collections.Generic.IDictionary < System.String , System.Collections.Generic.IEnumerable < EavLightEntity >> | Improve this Doc View Source Convert(IDataSource, String) Declaration IDictionary<string, IEnumerable<EavLightEntity>> Convert(IDataSource source, string streams) Parameters Type Name Description IDataSource source System.String streams Returns Type Description System.Collections.Generic.IDictionary < System.String , System.Collections.Generic.IEnumerable < EavLightEntity >>"
  },
  "api/dot-net/ToSic.Eav.Data.IEntityBasedType.html": {
    "href": "api/dot-net/ToSic.Eav.Data.IEntityBasedType.html",
    "title": "Interface IEntityBasedType | 2sxc 13 / EAV 13",
    "keywords": "Interface IEntityBasedType Foundation for interfaces which will enhance EntityBasedType which gets its data from an Entity. This is used for more type safety - so you base your interfaces - like IPerson on this, otherwise you're IPerson would be missing the Title, Id, Guid Inherited Members IEntityWrapper.Entity IHasDecorators<IEntity>.Decorators Namespace : ToSic.Eav.Data Assembly : ToSic.Eav.Core.dll Syntax [PublicApi_Stable_ForUseInYourCode] public interface IEntityBasedType : IEntityWrapper, IHasDecorators<IEntity>, IMultiWrapper<IEntity> Properties | Improve this Doc View Source Guid The entity guid, as quick, nice accessor. Declaration Guid Guid { get; } Property Value Type Description System.Guid The guid, or an empty-guid of no entity available | Improve this Doc View Source Id The entity id, as quick, nice accessor. Declaration int Id { get; } Property Value Type Description System.Int32 The id, or 0 if no entity available | Improve this Doc View Source Metadata Get the Metadata of the underlying Entity Declaration IMetadataOf Metadata { get; } Property Value Type Description IMetadataOf Remarks Added in v12.10 | Improve this Doc View Source Title The title as string. Declaration string Title { get; } Property Value Type Description System.String The title, or an empty string if not available or not string-able Remarks Can be overriden by other parts, if necessary."
  },
  "api/dot-net/ToSic.Eav.Apps.IZoneIdentity.html": {
    "href": "api/dot-net/ToSic.Eav.Apps.IZoneIdentity.html",
    "title": "Interface IZoneIdentity | 2sxc 13 / EAV 13",
    "keywords": "Interface IZoneIdentity Marks things which belongs to a Zone Namespace : ToSic.Eav.Apps Assembly : ToSic.Eav.Core.dll Syntax [PublicApi_Stable_ForUseInYourCode] public interface IZoneIdentity Properties | Improve this Doc View Source ZoneId ID of the zone (EAV Tenant) Declaration int ZoneId { get; } Property Value Type Description System.Int32 The zone ID this thing belongs to"
  },
  "api/dot-net/ToSic.Sxc.Code.IDynamicCode12.html": {
    "href": "api/dot-net/ToSic.Sxc.Code.IDynamicCode12.html",
    "title": "Interface IDynamicCode12 | 2sxc 13 / EAV 13",
    "keywords": "Interface IDynamicCode12 Interface for Dynamic Code with enhancements after v12. It extends IDynamicCode Dynamic Code is the API for files like Razor or WebApis. Supports many properties like App, etc. to ensure that the dynamic code has everything you need. Also provides many Conversions between IEntity and IDynamicEntity . Important for dynamic code files like Razor or WebApi. Note that there are many overloads to ensure that AsDynamic and AsEntity \"just work\" even if you give them the original data. Inherited Members ICreateInstance.CreateInstancePath ICreateInstance.CreateInstance(String, String, String, String, Boolean) ICompatibilityLevel.CompatibilityLevel IHasLog.Log Namespace : ToSic.Sxc.Code Assembly : ToSic.Sxc.dll Syntax [PublicApi] public interface IDynamicCode12 : IDynamicCode, ICreateInstance, ICompatibilityLevel, IHasLog Properties | Improve this Doc View Source App A fully prepared IApp object letting you access all the data and queries in the current app. Declaration IApp App { get; } Property Value Type Description IApp The current app | Improve this Doc View Source CmsContext The CmsContext tells you about the environment, like what page and module we're running in. It's supposed to replace the Dnn object in Razor and WebAPI code. Declaration ICmsContext CmsContext { get; } Property Value Type Description ICmsContext Remarks New in v11.11 | Improve this Doc View Source Content The content object of the current razor view - IF the current view has content. If the view is a list, it will return the first item. Will be null otherwise. To tell if it's the demo/default item, use IsDemoItem . Declaration dynamic Content { get; } Property Value Type Description System.Object A IDynamicEntity object with the current content - or null. | Improve this Doc View Source Convert Conversion helper for common data conversions in Razor and WebAPIs Declaration IConvertService Convert { get; } Property Value Type Description IConvertService Remarks Added in 2sxc 12.05 | Improve this Doc View Source Data The data prepared for the current Code. Usually user data which was manually added to the instance, but can also be a query. Declaration IBlockDataSource Data { get; } Property Value Type Description IBlockDataSource An IBlockDataSource which is as IDataSource . | Improve this Doc View Source Edit Helper commands to enable in-page editing functionality Use it to check if edit is enabled, generate context-json infos and provide toolbar buttons Declaration IEditService Edit { get; } Property Value Type Description IEditService An IEditService object. | Improve this Doc View Source Header The header object of the current razor view, if it's a list and has a header object. If it's a list and doesn't have a header (and no default), it will return null. To tell if it's the demo/default item, use IsDemoItem . Declaration dynamic Header { get; } Property Value Type Description System.Object A IDynamicEntity object with the current content. Remarks Introduced in 2sxc 10.10 - previously it was called ListContent, now deprecated. | Improve this Doc View Source Link Link helper object to create the correct links Declaration ILinkService Link { get; } Property Value Type Description ILinkService A ILinkService object. | Improve this Doc View Source Resources Resources for this Scenario. This is a dynamic object based on the IDynamicStack . It will combine both the Resources of the View and the App. The View-Resources will have priority. In future it may also include some global Resources. ü™í Use in Razor: @Resources.CtaButtonLabel Declaration dynamic Resources { get; } Property Value Type Description System.Object Remarks New in 12.03 | Improve this Doc View Source Settings Settings for this Scenario. This is a dynamic object based on the IDynamicStack . It will combine both the Settings of the View and the App. The View-Settings will have priority. In future it may also include some global Settings. ü™í Use in Razor: @Settings.ItemsPerRow Declaration dynamic Settings { get; } Property Value Type Description System.Object Remarks New in 12.03 Methods | Improve this Doc View Source AsAdam(IEntity, String) Provides an Adam instance for this item and field Declaration IFolder AsAdam(IEntity entity, string fieldName) Parameters Type Name Description IEntity entity The entity, often Content or similar System.String fieldName The field name, like \"Gallery\" or \"Pics\" Returns Type Description IFolder An Adam object for navigating the assets | Improve this Doc View Source AsAdam(IDynamicEntity, String) Provides an Adam instance for this item and field Declaration IFolder AsAdam(IDynamicEntity entity, string fieldName) Parameters Type Name Description IDynamicEntity entity The entity, often Content or similar System.String fieldName The field name, like \"Gallery\" or \"Pics\" Returns Type Description IFolder An Adam object for navigating the assets | Improve this Doc View Source AsDynamic(Object) Convert a dynamic entity and return itself again. This is so coders don't have to worry if the original object was an IEntity or a IDynamicEntity in the first place. Declaration dynamic AsDynamic(object dynamicEntity) Parameters Type Name Description System.Object dynamicEntity the original object Returns Type Description System.Object a dynamic object for easier coding | Improve this Doc View Source AsDynamic(Object[]) Convert one or many Entities and Dynamic entities into an IDynamicStack Declaration dynamic AsDynamic(params object[] entities) Parameters Type Name Description System.Object [] entities one or more source object Returns Type Description System.Object a dynamic object for easier coding Remarks New in 12.05 | Improve this Doc View Source AsDynamic(String, String) Take a json and provide it as a dynamic object to the code Declaration dynamic AsDynamic(string json, string fallback = \"{}\") Parameters Type Name Description System.String json the original json string System.String fallback Alternate string to use, if the original json can't parse. Can also be null or the word \"error\" if you would prefer an error to be thrown. Returns Type Description System.Object A dynamic object representing the original json. If it can't be parsed, it will parse the fallback, which by default is an empty empty dynamic object. If you provide null for the fallback, then you will get null back. Remarks Added in 2sxc 10.22.00 | Improve this Doc View Source AsDynamic(IEntity) Wraps an entity into a IDynamicEntity Declaration dynamic AsDynamic(IEntity entity) Parameters Type Name Description IEntity entity the original object Returns Type Description System.Object a dynamic object for easier coding | Improve this Doc View Source AsEntity(Object) Unwraps a dynamic entity back into the underlying IEntity Declaration IEntity AsEntity(object dynamicEntity) Parameters Type Name Description System.Object dynamicEntity the wrapped IEntity Returns Type Description IEntity A normal IEntity | Improve this Doc View Source AsList(Object) Converts a list of IEntity objects into a list of IDynamicEntity objects. Declaration IEnumerable<dynamic> AsList(object list) Parameters Type Name Description System.Object list typically a List/IEnumerable of Entities or DynamicEntities. Can also be a IDataSource in which case it uses the default stream. Returns Type Description System.Collections.Generic.IEnumerable < System.Object > a list of IDynamicEntity objects Remarks Added in 2sxc 10.21.00 | Improve this Doc View Source CreateSource<T>(IDataSource, ILookUpEngine) Create a IDataSource which will process data from the given stream. Declaration T CreateSource<T>(IDataSource inSource = null, ILookUpEngine configurationProvider = null) where T : IDataSource Parameters Type Name Description IDataSource inSource The data source which will be the default In of the new data-source. ILookUpEngine configurationProvider An alternate configuration provider for the DataSource Returns Type Description T A typed DataSource object Type Parameters Name Description T A data-source type - must be inherited from IDataSource | Improve this Doc View Source CreateSource<T>(IDataStream) Create a IDataSource which will process data from the given stream. Declaration T CreateSource<T>(IDataStream inStream) where T : IDataSource Parameters Type Name Description IDataStream inStream The stream which will be the default In of the new data-source. Returns Type Description T A typed DataSource object Type Parameters Name Description T A data-source type - must be inherited from IDataSource | Improve this Doc View Source GetService<TService>() Get a service from the EAV / 2sxc Dependency Injection. Declaration TService GetService<TService>() Returns Type Description TService An object of the type or interface requested Type Parameters Name Description TService Interface (preferred) or Class which is needed Remarks Added in 2sxc 11.11"
  },
  "api/dot-net/ToSic.Sxc.Code.IDynamicCode.html": {
    "href": "api/dot-net/ToSic.Sxc.Code.IDynamicCode.html",
    "title": "Interface IDynamicCode | 2sxc 13 / EAV 13",
    "keywords": "Interface IDynamicCode Dynamic code files like Razor or WebApis. Supports many properties like App, etc. to ensure that the dynamic code has everything you need. Also provides many Conversions between IEntity and IDynamicEntity . Important for dynamic code files like Razor or WebApi. Note that there are many overloads to ensure that AsDynamic and AsEntity \"just work\" even if you give them the original data. Inherited Members ICreateInstance.CreateInstancePath ICreateInstance.CreateInstance(String, String, String, String, Boolean) ICompatibilityLevel.CompatibilityLevel IHasLog.Log Namespace : ToSic.Sxc.Code Assembly : ToSic.Sxc.dll Syntax [PublicApi_Stable_ForUseInYourCode] public interface IDynamicCode : ICreateInstance, ICompatibilityLevel, IHasLog Properties | Improve this Doc View Source App A fully prepared IApp object letting you access all the data and queries in the current app. Declaration IApp App { get; } Property Value Type Description IApp The current app | Improve this Doc View Source CmsContext The CmsContext tells you about the environment, like what page and module we're running in. It's supposed to replace the Dnn object in Razor and WebAPI code. Declaration ICmsContext CmsContext { get; } Property Value Type Description ICmsContext Remarks New in v11.11 | Improve this Doc View Source Content The content object of the current razor view - IF the current view has content. If the view is a list, it will return the first item. Will be null otherwise. To tell if it's the demo/default item, use IsDemoItem . Declaration dynamic Content { get; } Property Value Type Description System.Object A IDynamicEntity object with the current content - or null. | Improve this Doc View Source Data The data prepared for the current Code. Usually user data which was manually added to the instance, but can also be a query. Declaration IBlockDataSource Data { get; } Property Value Type Description IBlockDataSource An IBlockDataSource which is as IDataSource . | Improve this Doc View Source Edit Helper commands to enable in-page editing functionality Use it to check if edit is enabled, generate context-json infos and provide toolbar buttons Declaration IEditService Edit { get; } Property Value Type Description IEditService An IEditService object. | Improve this Doc View Source Header The header object of the current razor view, if it's a list and has a header object. If it's a list and doesn't have a header (and no default), it will return null. To tell if it's the demo/default item, use IsDemoItem . Declaration dynamic Header { get; } Property Value Type Description System.Object A IDynamicEntity object with the current content. Remarks Introduced in 2sxc 10.10 - previously it was called ListContent, now deprecated. | Improve this Doc View Source Link Link helper object to create the correct links Declaration ILinkService Link { get; } Property Value Type Description ILinkService A ILinkService object. Methods | Improve this Doc View Source AsAdam(IEntity, String) Provides an Adam instance for this item and field Declaration IFolder AsAdam(IEntity entity, string fieldName) Parameters Type Name Description IEntity entity The entity, often Content or similar System.String fieldName The field name, like \"Gallery\" or \"Pics\" Returns Type Description IFolder An Adam object for navigating the assets | Improve this Doc View Source AsAdam(IDynamicEntity, String) Provides an Adam instance for this item and field Declaration IFolder AsAdam(IDynamicEntity entity, string fieldName) Parameters Type Name Description IDynamicEntity entity The entity, often Content or similar System.String fieldName The field name, like \"Gallery\" or \"Pics\" Returns Type Description IFolder An Adam object for navigating the assets | Improve this Doc View Source AsDynamic(Object) Convert a dynamic entity and return itself again. This is so coders don't have to worry if the original object was an IEntity or a IDynamicEntity in the first place. Declaration dynamic AsDynamic(object dynamicEntity) Parameters Type Name Description System.Object dynamicEntity the original object Returns Type Description System.Object a dynamic object for easier coding | Improve this Doc View Source AsDynamic(String, String) Take a json and provide it as a dynamic object to the code Declaration dynamic AsDynamic(string json, string fallback = \"{}\") Parameters Type Name Description System.String json the original json string System.String fallback Alternate string to use, if the original json can't parse. Can also be null or the word \"error\" if you would prefer an error to be thrown. Returns Type Description System.Object A dynamic object representing the original json. If it can't be parsed, it will parse the fallback, which by default is an empty empty dynamic object. If you provide null for the fallback, then you will get null back. Remarks Added in 2sxc 10.22.00 | Improve this Doc View Source AsDynamic(IEntity) Wraps an entity into a IDynamicEntity Declaration dynamic AsDynamic(IEntity entity) Parameters Type Name Description IEntity entity the original object Returns Type Description System.Object a dynamic object for easier coding | Improve this Doc View Source AsEntity(Object) Unwraps a dynamic entity back into the underlying IEntity Declaration IEntity AsEntity(object dynamicEntity) Parameters Type Name Description System.Object dynamicEntity the wrapped IEntity Returns Type Description IEntity A normal IEntity | Improve this Doc View Source AsList(Object) Converts a list of IEntity objects into a list of IDynamicEntity objects. Declaration IEnumerable<dynamic> AsList(object list) Parameters Type Name Description System.Object list typically a List/IEnumerable of Entities or DynamicEntities. Can also be a IDataSource in which case it uses the default stream. Returns Type Description System.Collections.Generic.IEnumerable < System.Object > a list of IDynamicEntity objects Remarks Added in 2sxc 10.21.00 | Improve this Doc View Source CreateSource<T>(IDataSource, ILookUpEngine) Create a IDataSource which will process data from the given stream. Declaration T CreateSource<T>(IDataSource inSource = null, ILookUpEngine configurationProvider = null) where T : IDataSource Parameters Type Name Description IDataSource inSource The data source which will be the default In of the new data-source. ILookUpEngine configurationProvider An alternate configuration provider for the DataSource Returns Type Description T A typed DataSource object Type Parameters Name Description T A data-source type - must be inherited from IDataSource | Improve this Doc View Source CreateSource<T>(IDataStream) Create a IDataSource which will process data from the given stream. Declaration T CreateSource<T>(IDataStream inStream) where T : IDataSource Parameters Type Name Description IDataStream inStream The stream which will be the default In of the new data-source. Returns Type Description T A typed DataSource object Type Parameters Name Description T A data-source type - must be inherited from IDataSource | Improve this Doc View Source GetService<TService>() Get a service from the EAV / 2sxc Dependency Injection. Declaration TService GetService<TService>() Returns Type Description TService An object of the type or interface requested Type Parameters Name Description TService Interface (preferred) or Class which is needed Remarks Added in 2sxc 11.11"
  },
  "api/dot-net/ToSic.Eav.Metadata.TargetTypes.html": {
    "href": "api/dot-net/ToSic.Eav.Metadata.TargetTypes.html",
    "title": "Enum TargetTypes | 2sxc 13 / EAV 13",
    "keywords": "Enum TargetTypes Metadata targets specific things, and the TargetTypes determines what kind of thing this is. Namespace : ToSic.Eav.Metadata Assembly : ToSic.Eav.Core.dll Syntax [PublicApi_Stable_ForUseInYourCode] public enum TargetTypes Fields Name Description App App metadata (3). Used to give Apps additional properties. Attribute Metadata of attributes / fields (2). This is used to store configuration like the field label, amount-of-rows, etc. CmsItem Item / Object of the Platform, like a File or Folder etc. (10) ContentType Metadata of a content-type / data-schema (5). Used to give it a description etc. Custom Custom target (90). This is what you should use for basic apps which have a custom target that's none of the other defaults. Custom1 Custom target (91). Use this for basic apps which need multiple different custom targets (advanced, rare use case) Custom2 Custom target (92). Use this for basic apps which need multiple different custom targets (advanced, rare use case) Custom3 Custom target (93). Use this for basic apps which need multiple different custom targets (advanced, rare use case) Custom4 Custom target (94). Use this for basic apps which need multiple different custom targets (advanced, rare use case) Custom5 Custom target (95). Use this for basic apps which need multiple different custom targets (advanced, rare use case) Custom6 Custom target (96). Use this for basic apps which need multiple different custom targets (advanced, rare use case) Custom7 Custom target (97). Use this for basic apps which need multiple different custom targets (advanced, rare use case) Custom8 Custom target (98). Use this for basic apps which need multiple different custom targets (advanced, rare use case) Custom9 Custom target (99). Use this for basic apps which need multiple different custom targets (advanced, rare use case) Dimension Dimension Metadata (8) - for languages and similar data-dimensions Entity Metadata of entities / data-items (4). This lets us enhance entities with additional information. Module A Module - like a module containing some content (16) None Things that are not used as Metadata (1). This is the default for most Entities. Page A Page - like the current page (14) Scope Scope metadata (7) - for data-scopes like \"System\" or \"System-Configuration\" etc. Site A Site - like the current site (12) System The entire system / platform - so Metadata for the current Dnn/Oqtane installation (11). Undefined Undefined Type (0) - included for completeness User A User - like the admin-user (18) Zone Zone metadata (6) - used to give a Zone additional information. Only used in very special cases, best not use."
  },
  "api/dot-net/ToSic.Eav.Metadata.Target.html": {
    "href": "api/dot-net/ToSic.Eav.Metadata.Target.html",
    "title": "Class Target | 2sxc 13 / EAV 13",
    "keywords": "Class Target Reference to target. Usually used on IEntity to define what thing it provides additional metadata for. Basically it contains all the references necessary to identify what it belongs to. Inheritance System.Object Target Implements ITarget Namespace : ToSic.Eav.Metadata Assembly : ToSic.Eav.Core.dll Syntax [PublicApi_Stable_ForUseInYourCode] public class Target : ITarget Constructors | Improve this Doc View Source Target() Constructor for a new MetadataTarget, which is empty. Declaration public Target() Properties | Improve this Doc View Source IsMetadata Determines if the current thing is used as Metadata. Declaration [JsonIgnore] public bool IsMetadata { get; } Property Value Type Description System.Boolean True if it's a metadata item, false if not. | Improve this Doc View Source KeyGuid A GUID key identifying a target. Declaration public Guid? KeyGuid { get; set; } Property Value Type Description System.Nullable < System.Guid > The GUID key of the target. Null if the identifier is not a string. | Improve this Doc View Source KeyNumber A number (int) key identifying a target. Declaration public int? KeyNumber { get; set; } Property Value Type Description System.Nullable < System.Int32 > The number key of the target. Null if the identifier is not a string. | Improve this Doc View Source KeyString A string key identifying a target. Declaration public string KeyString { get; set; } Property Value Type Description System.String The string key of the target. Null if the identifier is not a string. | Improve this Doc View Source TargetType If this is metadata, then the target could be anything. This is an ID telling what kind of thing we're enhancing. Declaration public int TargetType { get; set; } Property Value Type Description System.Int32 An ID from the system which registers all the types of things that can be described. See also ITargetTypes . Remarks In 2sxc 8 - 12 this is called AssignmentObjectTypeId in the DB, but will change some day. It must be an int, not a TargetTypes enum, because the DB could hold values which are not in the enum Implements ITarget"
  },
  "api/dot-net/ToSic.Eav.Run.ICompatibilityLevel.html": {
    "href": "api/dot-net/ToSic.Eav.Run.ICompatibilityLevel.html",
    "title": "Interface ICompatibilityLevel | 2sxc 13 / EAV 13",
    "keywords": "Interface ICompatibilityLevel Carries information about what compatibility level to use. Important for components that have an older and newer API. Namespace : ToSic.Eav.Run Assembly : ToSic.Eav.Core.dll Syntax [InternalApi_DoNotUse_MayChangeWithoutNotice(\"this is just fyi\")] public interface ICompatibilityLevel Properties | Improve this Doc View Source CompatibilityLevel The compatibility level to use. Declaration int CompatibilityLevel { get; } Property Value Type Description System.Int32"
  },
  "api/dot-net/ToSic.Eav.DataSources.IDataPartShared.html": {
    "href": "api/dot-net/ToSic.Eav.DataSources.IDataPartShared.html",
    "title": "Interface IDataPartShared | 2sxc 13 / EAV 13",
    "keywords": "Interface IDataPartShared Shared properties of IDataSource and IDataTarget Namespace : ToSic.Eav.DataSources Assembly : ToSic.Eav.DataSources.dll Syntax [InternalApi_DoNotUse_MayChangeWithoutNotice] public interface IDataPartShared Properties | Improve this Doc View Source Guid Internal ID usually from persisted configurations IF the configuration was build from an pre-stored query. Declaration Guid Guid { get; set; } Property Value Type Description System.Guid The guid of this data source which identifies the configuration IEntity of the data source. | Improve this Doc View Source Name Name of this DataSource - not usually relevant. Declaration string Name { get; } Property Value Type Description System.String Name of this source."
  },
  "api/dot-net/ToSic.Eav.Data.IConvertEntity-1.html": {
    "href": "api/dot-net/ToSic.Eav.Data.IConvertEntity-1.html",
    "title": "Interface IConvertEntity<T> | 2sxc 13 / EAV 13",
    "keywords": "Interface IConvertEntity<T> Convert an entity into another format Inherited Members IConvert<IEntity, T>.Convert(IEnumerable<IEntity>) IConvert<IEntity, T>.Convert(IEntity) IConvert<IEntityWrapper, T>.Convert(IEnumerable<IEntityWrapper>) IConvert<IEntityWrapper, T>.Convert(IEntityWrapper) IConvert<Object, T>.Convert(IEnumerable<Object>) IConvert<Object, T>.Convert(Object) Namespace : ToSic.Eav.Data Assembly : ToSic.Eav.Core.dll Syntax [InternalApi_DoNotUse_MayChangeWithoutNotice] public interface IConvertEntity<out T> : IConvert<IEntity, T>, IConvert<IEntityWrapper, T>, IConvert<object, T> Type Parameters Name Description T The target format we'll convert into Properties | Improve this Doc View Source Languages Languages to prefer when looking up the values Declaration string[] Languages { get; set; } Property Value Type Description System.String []"
  },
  "js-code/2sxc-api/sxc.html": {
    "href": "js-code/2sxc-api/sxc.html",
    "title": "| 2sxc 13 / EAV 13",
    "keywords": "Moved to The Module Level Sxc Instance"
  },
  "api/dot-net/ToSic.Sxc.Context.ICmsContext.html": {
    "href": "api/dot-net/ToSic.Sxc.Context.ICmsContext.html",
    "title": "Interface ICmsContext | 2sxc 13 / EAV 13",
    "keywords": "Interface ICmsContext This is the runtime context of your code in the CMS. It can tell you about the site, page, module etc. that you're on. Note that it it Platform Agnostic so it's the same on Dnn, Oqtane etc. CMS Context in your Code All your Razor and WebApi code will have a property CmsContext which provides you information about the environment you're running in. Here's a Code Snippet for Razor, showing you what page etc. your code is running on: ModuleId: @CmsContext.Module.Id History Added in 2sxc 11.11 Namespace : ToSic.Sxc.Context Assembly : ToSic.Sxc.dll Syntax [PublicApi] public interface ICmsContext Properties | Improve this Doc View Source Culture Information about languages / culture of the current request Declaration ICmsCulture Culture { get; } Property Value Type Description ICmsCulture | Improve this Doc View Source Module Information about the Module / Container which holds an 2sxc content block in the CMS Declaration ICmsModule Module { get; } Property Value Type Description ICmsModule | Improve this Doc View Source Page Information about the Page (called Tab in DNN) Declaration ICmsPage Page { get; } Property Value Type Description ICmsPage | Improve this Doc View Source Platform Information about the platform that's currently running. Declaration ICmsPlatform Platform { get; } Property Value Type Description ICmsPlatform | Improve this Doc View Source Site Information about the Site (called Portal in DNN) Declaration ICmsSite Site { get; } Property Value Type Description ICmsSite | Improve this Doc View Source User Information about the current user Declaration ICmsUser User { get; } Property Value Type Description ICmsUser | Improve this Doc View Source View Experimental feature for 12.02 - not final. Provides View-information. Declaration ICmsView View { get; } Property Value Type Description ICmsView Remarks New in v12.02, WIP"
  },
  "api/dot-net/ToSic.Sxc.Code.ICreateInstance.html": {
    "href": "api/dot-net/ToSic.Sxc.Code.ICreateInstance.html",
    "title": "Interface ICreateInstance | 2sxc 13 / EAV 13",
    "keywords": "Interface ICreateInstance Marks objects - usually DynamicCode - which can create instances of other C# files. A special feature is that it must store a reference to the path it's in (provided by the compiler that created this instance). This is important, so that CreateInstance knows what path to start in. Namespace : ToSic.Sxc.Code Assembly : ToSic.Sxc.dll Syntax [PublicApi_Stable_ForUseInYourCode] public interface ICreateInstance Properties | Improve this Doc View Source CreateInstancePath Location of the current code. This is important when trying to create instances for other code in relative folders - as this is usually not known. Declaration string CreateInstancePath { get; set; } Property Value Type Description System.String The real path to the currently executed code - important for dynamically compiled code like WebApis Methods | Improve this Doc View Source CreateInstance(String, String, String, String, Boolean) Create an instance of code lying in a file near this Declaration dynamic CreateInstance(string virtualPath, string noParamOrder = \"Rule: All params must be named (https://r.2sxc.org/named-params)\", string name = null, string relativePath = null, bool throwOnError = true) Parameters Type Name Description System.String virtualPath path to the other code file to compile System.String noParamOrder see Convention: Named Parameters System.String name Override the class name to compile - usually not required as it should match the file name System.String relativePath optional relative path, will usually use the CreateInstancePath System.Boolean throwOnError throw errors if compiling fails, recommended Returns Type Description System.Object An object of the class in the file Remarks Note that the C# code which we are creating an instance of inherits from DynamicCode then it will automatically be initialized to support App, AsDynamic etc."
  },
  "basics/data/fields/string-dropdown-query.html": {
    "href": "basics/data/fields/string-dropdown-query.html",
    "title": "Field Input-Type string-dropdown-query | 2sxc 13 / EAV 13",
    "keywords": "Field Input-Type string-dropdown-query Use this field type for configuring a dropdown UI elements, storing string/text data . It's an extension of the string field type . The special thing about this is that the items shown for selecting are retrieved from Query and not pre-defined as part of the the field definition. This allows you to look up any kind of data and offer it for selection. Features provide values to select from a query optionally provide query parameters optionally use tokens in query-parameters, to pass on values from other fields in the form provide visible labels which are different from the stored value you can configure which field is stored (like an ID etc.) you can configure which field is shown visible in the drop-down data is semi-lazy loaded, so the query is only hit again, if the dropdown is opened after parameters change optionally allow users to type in something different, in scenarios where this is important Configuring a String-Dropdown-Query This shows the configuration dialog: Query the name of the query to use Advanced Parameters a string like country=Switzerland or country=[Country] to parameterize the query Stream Name the stream name, in case you don't want the Default stream Value Field the value which is stored - basically the field you want in your string at the end Label Field the label which is shown - basically for nice display in the UI Multi-Select Multiple Items enable this if you want to allow multi-select Separator the character which will separate the selected items, like \"company1,company2,company3\" Cascading Dropdowns Dropdown-Fields can be cascaded - so that a selection on one dropdown changes the list of possible items on another dropdown. You'll have to work with the Parameters to get this to fly. S Special Behavior When the drop-down UI element finds data stored, which doesn't match any of the values it has available, it will leave that data intact unless the users selects something manually History Introduced in EAV 4.5 2sxc 9.11 Enhanced with options to allow edit/delete in 10.20"
  },
  "basics/data/fields/hyperlink.html": {
    "href": "basics/data/fields/hyperlink.html",
    "title": "Field Data Type: Hyperlink | 2sxc 13 / EAV 13",
    "keywords": "Field Data Type: Hyperlink This explains Hyperlink Fields . For an overview check out Understanding Data... . Hyperlink data is a basic data type and is actually a string, but on reading it's automatically converts to an output-friendly format. It's used for normal links, page or file/image references as well as for complete sets of files (like image galleries). Features The basic hyperlink (links/files) field is used for normal links, page or file/image references as well as for complete sets of files (like image galleries) Sub-Types of Hyperlink Fields hyperlink-default - it's input field for normal links, page or file/image references. In menu it has ADAM (automatic digital asset manager), page picker, image manager and file manager. hyperlink-library - it's for complete sets of files (like image galleries). Shared Settings All Hyperlink-Field Types have the following settings: File Filter - list of extensions allowed in file/image picker. Example: .jpg, .bmp, .png, .gif Paths - this is only needed if you use the old file pickers (not ADAM). Root paths for the picker dialog - ideal if you want all images for this Content-Type to be in the same folder use the syntax foldername - without \"/\" in front to specify a subfolder of the portal-root. Examples are \"Apps\" or \"Gallery\" or \"Employees/Photos\" you can also use subfolders - that would be \"Employees/Photos\" always remember that this folder must already exist, and Dnn must know that it is visible (readable) by the editing user. There are cases where the security settings were not set correctly in dnn - then the file picker won't show anything. Default Dialog - none, ADAM, page picker, image manager or file manager Show Page Picker - show page picker in the drop-down Show Image Manager - show image manager in the drop-down Show File Manager - show file manager in the drop-down Show Adam - show the ADAM (automatic digital asset manager) in the drop-down menu. Buttons - will let you specify which buttons are visible directly. The default is \"adam,more\" but you could also do \"adam,page,more\" or just \"page\". File / image are currently not supported, because as of now, Dnn doesn't have a good image/file browser so we discourage its use. Automatic Conversions of file and page references The hyperlink data internally can contain values like: http://whatever/whatever - will not be converted /some-relative-url - will not be converted page:42 - will usually be converted to the real url of the page in Dnn page:42?something=value - this will also be converted, but keeping the parameters page:42#something=value - this will also be converted, but keeping the parameters file:2750 - will usually be converted to the real url of the file in Dnn file:2750?w=200 - this will also be converted, but keeping the parameters (like for thumbnails) file:2750#page=2 - this will also be converted, but keeping the parameters (like for pdf-page-links) In 99% of all use cases, you want to generate html with a real link, which is why the content-objects in Razor will deliver an http:... instead of file:27 . Some demo-code: // assume that Content is a dynamic entity // assume that Image actually contains \"file:274\" <img src=\"@Content.Image\"> // the result is now <img src=\"/portals/0/adam/20603963uaothutaoer/daniel.jpg\"> Accessing the Real Inner Value In rare cases you may want the originl page:22 instead of the converted value. To do this, use AsEntity(yourObject) and then use the EAV API on IEntity to read the underlying original value. Special: Hyperlink Libraries A special use case is Libraries - where a hyperlink-field doesn't actually contain anything, but is a placeholder for ADAM assets. In such a scenario, you will use AsAdam(...) in your code to get the folders/files in the ADAM repository. Null Value Possible In some cases you may add a field to a type which already has Entities created previously. In this case the old data doesn't have a value for the field. If this happens, the field will return null , so you may need to catch this special exception in your code. A common shorthand to work with this is either the ?? operator or using RazorBlade with Text.Has(...) or Text.First(...) . Technical Information Storage in the SQL Database in the EAV-Model This is simply stored as a string in the DB, in the original format like page:22 . Storage in the SQL Database in the JSON-Model This is simply stored as a JSON string in the original format like page:22 . Read also Field Data Type: Hyperlink RazorBlade Text.Has(...) Tutorial RazorBlade Text.First(...) Tutorial History Introduced in EAV 1.0 / 2sxc 1.0 Changed in EAV 3.0 / 2sxc 6.0 (it used to have many configuration fields for all kinds of uses, which were then moved to sub-types)"
  },
  "basics/data/fields/hyperlink-library.html": {
    "href": "basics/data/fields/hyperlink-library.html",
    "title": "Field Input-Type hyperlink-library | 2sxc 13 / EAV 13",
    "keywords": "Field Input-Type hyperlink-library Use this field type for complete sets of files (like image galleries), storing Hyperlink . It's an extension of the hyperlink field type . Configuring an Hyperlink-Library This shows the configuration dialog: Folder Depth - if sub folders are allowed and how deply they may be nested. Use 0 for no sub folders, 1 for 1 level only, 2 for 2 levels (like /gallery/subgallery) etc. Use a large number like 100 for practically unlimited sub folders, but not recommended for realistic use cases. Allow assets In Root Folder - specifies if files may be placed in the core / root container, or if the user is required to create sub folders. This would be the case if you expect multiple groups of files, but never a top-level list. Metadata Content Types - the content-type (or types) to be used for assets in this library. To use this, first create a content-type (like DownloadMetadata or MugshotMetadata) and type the name of the content type into this field. History Introduced in EAV 1.0 / 2sxc 1.0, originally as part of the hyperlink field type Changed in EAV 3.0 / 2sxc 6.0 (it used to have many configuration fields for all kinds of uses, which were then moved to sub-types)"
  },
  "basics/data/fields/hyperlink-default.html": {
    "href": "basics/data/fields/hyperlink-default.html",
    "title": "Field Input-Type hyperlink-default | 2sxc 13 / EAV 13",
    "keywords": "Field Input-Type hyperlink-default Use this field type for configuring normal links, page or file/image references, storing Hyperlink . It's an extension of the hyperlink field type . Features input field for normal links, page or file/image references ( like http://whatever/whatever , /some-relative-url , page:42 , page:42?something=value , file:2750 , file:2750?w=200 ...) allows users to pick files/images with ADAM (automatic digital asset manager) if activated allows users to pick page reference with the page picker if activated allows users to pick images with the the image manager if activated allows users to pick images with the the file manager if activated Configuring an Hyperlink-Default No relevant settings to be configured. History Introduced in EAV 1.0 / 2sxc 1.0, originally as part of the hyperlink field type Changed in EAV 3.0 / 2sxc 6.0 (it used to have many configuration fields for all kinds of uses, which were then moved to sub-types)"
  },
  "net-code/web-api/custom-web-api-files.html": {
    "href": "net-code/web-api/custom-web-api-files.html",
    "title": "Custom C# Web API File Structure | 2sxc 13 / EAV 13",
    "keywords": "Custom C# Web API File Structure Default Setup without Editions All your WebAPIs are C# files saved in the special folder called api . The folder must be in root of your 2sxc app, and the files have to end with ...Controller.cs (this is a convention in ASP.net). File: [app-folder]/api/[Your]Controller.cs Url: [api-root]/app/auto/api/[Your] Example File: /Portals/0/2sxc/DemoApp/api/PersonController.cs Url: GET : /api/2sxc/auto/app/auto/api/Person/List Read more about url schema in the URLs for 2sxc WebAPI and REST APIs Advanced Setup with Editions Tip New in 2sxc 9.35+ : you can now also create api folders as _subfolders to run the api in multiple editions. This is the polymorph feature . It let's you have the same api-controller in multiple editions, where the end-user is using live and you're doing open-heart-surgery in the background on a new edition like staging . File: [app-folder]/[edition]/api/YourController.cs Url: [api-root]/app/auto/[edition]/api/[Your] Example File: /Portals/0/2sxc/DemoApp/staging/api/PersonController.cs Url: GET : /api/2sxc/auto/app/auto/staging/api/Person/List Read more about url schema in the URLs for 2sxc WebAPI and REST APIs Recommended Reading Web API Tutorials WebApi Concepts: Polymorphisms History Introduced in 2sxc 06.05 Enhanced with Polymorph Editions in 2sxc 9.35 (allowing subfolder/api)"
  },
  "net-code/web-api/custom-web-api-dotnet-saveinadam.html": {
    "href": "net-code/web-api/custom-web-api-dotnet-saveinadam.html",
    "title": "SaveInAdam(...) Command in ApiController | 2sxc 13 / EAV 13",
    "keywords": "SaveInAdam(...) Command in ApiController The SaveInAdam command helps your WebApi to upload files so they are in an ADAM container of an item. The API is documented here and on this page we'll explain how to use it. How to use Here's a simple example, taken from mobius forms SaveInAdam(stream: dataStream, fileName: fileNameInForm, contentType: \"Advertisement\", guid: guid, field: \"Images\"); Here's what the parameters are: stream contains a stream of bytes with the file fileName contain the file name contentType is the content-type of the entity we're saving to guid is the entity-guid which receives this item field is the field we're saving to Example The following example is also from mobius forms and assumes that the html form encoded the data in JavaScript for sending to the WebApi: // Save files to Adam var files = ((Newtonsoft.Json.Linq.JArray)contactFormRequest[\"Files\"]) .ToObject<IEnumerable<Dictionary<string, string>>>(); foreach(var file in files) { var data = Convert.FromBase64String((file[\"Encoded\"]).Split(',')[1]); SaveInAdam(stream: new MemoryStream(data), fileName: file[\"Name\"], contentType: type.Name, guid: guid, field: file[\"Field\"]); } Notes and Clarifications all parameters ( stream , fileName , ...) must be named by convention the uploaded files are placed in the container of the field... ...and not added as a link to the file, so you will usually use library fields the field must be a field of type hyperlink, library or wysiwyg, other fields cannot receive files Difference in Field-Library and Field-Link-Default Note that the form has two different ways the field can behave. In hyperlink-Library mode nothing is really stored in the field name, the UI will simply load all the files in a folder that belong to that field. SaveInAdam will simply add files to this folder, so the most common way to use it is that the entity will have a link-library field to browse one or more files uploaded. If you really only want 1 file to be uploaded, and want to put it into the field as if it's linked directly, then choose a hyperlink-default field. SaveInAdam will give you a IFile object which has an Id . Use that to create a file:72 kind of link and add it to data you just created. Read also, Demo App and further links You should find some code examples in these apps C# API Documentation of SaveInAdam Mobius Forms v2 in App Catalog Mobius Forms v2 on Github Blog Recipe for uploading into ADAM in your WebAPI History Introduced in 2sxc 9.30"
  },
  "net-code/web-api/custom-web-api-dotnet-api.html": {
    "href": "net-code/web-api/custom-web-api-dotnet-api.html",
    "title": "C# APIs in ApiController | 2sxc 13 / EAV 13",
    "keywords": "C# APIs in ApiController The following gives you an overview to the APIs you get when you inherit from ToSic.Sxc.Dnn.ApiController . APIs in Razor Components / Templates Tip Most of these APIs can be seen live in action with source code in the Web API Tutorials Standard Dynamic Code API Razor templates / components have all the objects and APIs of Dynamic Code The .net Code Docs for ApiController . Common Standard ASP.net Controller APIs and Keywords Request Standard object in ASP.net giving you http-request information. Special Object / Commands in ApiController The ApiController provides additional commands productive: SaveInAdam(...) new in 9.30 History A first base controller (not recommended any more) was added v6.05 The ToSic.Sxc.Dnn.ApiController was introduced in 2sxc v10.25"
  },
  "api/dot-net/ToSic.Eav.LookUp.LookUpInDictionary.html": {
    "href": "api/dot-net/ToSic.Eav.LookUp.LookUpInDictionary.html",
    "title": "Class LookUpInDictionary | 2sxc 13 / EAV 13",
    "keywords": "Class LookUpInDictionary Look Up values from a .net dictionary. Case-Insensitive. Read more about this in LookUp System Inheritance System.Object LookUpBase LookUpInDictionary Implements ILookUp Inherited Members LookUpBase.Name LookUpBase.Get(String) LookUpBase.Format(Boolean) LookUpBase.Format(DateTime) Namespace : ToSic.Eav.LookUp Assembly : ToSic.Eav.Core.dll Syntax [PublicApi_Stable_ForUseInYourCode] public class LookUpInDictionary : LookUpBase, ILookUp Constructors | Improve this Doc View Source LookUpInDictionary(String, IDictionary<String, String>) Constructor, can optionally take a dictionary to reference with, otherwise creates a new one Declaration public LookUpInDictionary(string name, IDictionary<string, string> valueList = null) Parameters Type Name Description System.String name Name to use System.Collections.Generic.IDictionary < System.String , System.String > valueList value list (dictionary) to reference Properties | Improve this Doc View Source Properties List with static properties and Test-Values Declaration public IDictionary<string, string> Properties { get; } Property Value Type Description System.Collections.Generic.IDictionary < System.String , System.String > Methods | Improve this Doc View Source Get(String, String) Gets a value by Name/key and tries to format it in a special way (like for dates) Declaration public override string Get(string key, string format) Parameters Type Name Description System.String key Name of the Property System.String format Format String Returns Type Description System.String Overrides LookUpBase.Get(String, String) Implements ILookUp"
  },
  "api/dot-net/ToSic.Eav.LookUp.LookUpInDataTarget.html": {
    "href": "api/dot-net/ToSic.Eav.LookUp.LookUpInDataTarget.html",
    "title": "Class LookUpInDataTarget | 2sxc 13 / EAV 13",
    "keywords": "Class LookUpInDataTarget Look up stuff in a DataSource. It will take the first IEntity in a source and look up properties/attributes in that. Normally this is used in Queries, where you want to get a parameter from the In stream. Inheritance System.Object LookUpBase LookUpInDataTarget Implements ILookUp Inherited Members LookUpBase.Name LookUpBase.Get(String) LookUpBase.Format(Boolean) LookUpBase.Format(DateTime) Namespace : ToSic.Eav.LookUp Assembly : ToSic.Eav.DataSources.dll Syntax [PublicApi_Stable_ForUseInYourCode] public class LookUpInDataTarget : LookUpBase, ILookUp Constructors | Improve this Doc View Source LookUpInDataTarget(IDataTarget) Constructor expecting the data-target, of which it will use the In-Stream Declaration public LookUpInDataTarget(IDataTarget dataTarget) Parameters Type Name Description IDataTarget dataTarget Fields | Improve this Doc View Source InStreamName The stream name to read when finding the entity which is the source of this. Declaration public const string InStreamName = \"In\" Field Value Type Description System.String Methods | Improve this Doc View Source Get(String, String) Will check if any streams in In matches the requested next key-part and will retrieve the first entity in that stream to deliver the required sub-key (or even sub-sub-key) Declaration public override string Get(string key, string format) Parameters Type Name Description System.String key Name of the Property System.String format Format String Returns Type Description System.String Overrides LookUpBase.Get(String, String) Implements ILookUp"
  },
  "api/dot-net/ToSic.Eav.Data.html": {
    "href": "api/dot-net/ToSic.Eav.Data.html",
    "title": "Namespace ToSic.Eav.Data | 2sxc 13 / EAV 13",
    "keywords": "Namespace ToSic.Eav.Data The EAV Data system underlying 2sxc is the core data management system, in charge of Entities and such. For long term stability, we only use interfaces in the API. To better understand this stuff, best read about the Understanding Data... . In most cases you only care about the IEntity interface and things below that. Classes EntityBasedType Foundation for a class which gets its data from an Entity. This is used for more type safety - because some internal objects need entities for data-storage, but when programming they should use typed objects to not accidentally access invalid properties. EntityBasedWithLog A strongly typed object which gets its data from an entity, and also logs what it does. LazyEntities Delivers entities which are needed. It's lazy, because on initialization it only knows the Ids (int/guid) of the items to pick up, and only retrieves them when needed. Once retrieved, it will cache the result, until the up-stream reports changes. An additional optimization: in special cases where we just need the IDs for saving, it won't actually query the cache if the IDs are already known. Value<T> Represents a typed Value object in the memory model Interfaces IAttribute Represents an Attribute with Values - without knowing what data type is in the value. Usually we'll extend this and use IAttribute<T> instead. IAttribute<T> Represents an Attribute (Property), but strongly typed IAttributeBase Represents properties we should know about Attributes. This is the base for both IContentTypeAttribute (in the IContentType) attribute with values-list (in the IEntity) IContentType Represents a Content Type information (the schema) used for IEntity objects. IContentTypeAttribute Represents an Attribute definition in a ContentType. This is the base for attributes in IContentType IConvert<TFrom, TTo> Interface which converts one type into another, or a list of that type into a list of the resulting type. Commonly used to convert entities to dictionaries etc. IConvertEntity<T> Convert an entity into another format IDataBuilder This is a Builder-Object which is used to create any kind of data. Get it using Dependency Injection IDecorator This marks add-on information for things which can be decorated. This allows taking something (like an IEntity and adding additional information for later processing IDecorator<T> This marks add-on information for things which can be decorated. This allows taking something (like an IEntity and adding additional information for later processing IDimension Represents a Dimension to assign values to. Dimensions are usually languages ( ILanguage ), but in future they could also be multi-dimensional, like values which are mapped to a language and to a specific edition, use case, etc. IEntitiesSource This marks something which can give a list of entities. Usually used for lazy-loading data, where the source is attached, but the data isn't loaded yet. IEntity The primary data-item in the system, IEntity is a generic data-item for any kind of information. Note that it inherits IEntityLight which is the basic definition without languages, versioning, publishing etc. We recommend you read about the Understanding Data... IEntityBasedType Foundation for interfaces which will enhance EntityBasedType which gets its data from an Entity. This is used for more type safety - so you base your interfaces - like IPerson on this, otherwise you're IPerson would be missing the Title, Id, Guid IEntityLight Represents a light Entity, which is a very basic entity without multi-language capabilities, versions or publishing. For the more powerful Entity, use IEntity . IEntityWrapper A interface to ensure all things that carry an IEntity can be compared based on the Entity they carry. IHasDecorators<T> This marks objects which carry additional decorator information ILanguage Represents a Language Dimension. It's identical to an IDimension for now. IRelationshipManager Manages relationships of an entity - to it's children and parents. IValue Represents a Value in the EAV system. Values belong to an attribute and can belong to multiple languages. IValue<T> Represents a Value with a specific type (string, decimal, etc.). IValueConverter Marks objects that can convert values - like \"file:22\" to \"/images/logo.jpg\" and back. IWrapper<T> This is for any object which does something, but caries with it an original object which is the type of the hosting system (environment) Enums ValueTypes Value / Attribute Type List"
  },
  "api/dot-net/ToSic.Sxc.Data.html": {
    "href": "api/dot-net/ToSic.Sxc.Data.html",
    "title": "Namespace ToSic.Sxc.Data | 2sxc 13 / EAV 13",
    "keywords": "Namespace ToSic.Sxc.Data The dynamic data system used in 2sxc. It's primary purpose is to ensure that you can easily use dynamic objects to write templates, tokens and more. we have two different topics covered: Dynamic Entities to simplify code using IEntity objects - IDynamicEntity and DynamicEntity Dynamic Jackets to simplify code using JSON - DynamicJacket s and DynamicJacketList s Classes DynamicEntity A dynamic entity object - the main object you use when templating things in RazorComponent objects Note that it will provide many things not listed here, usually things like .Image , .FirstName etc. based on your ContentType. DynamicJacket Case insensitive dynamic read-object for JSON. Used in various cases where you start with JSON and want to provide the contents to custom code without having to mess with JS/C# code style differences. You will usually do things like AsDynamic(jsonString).FirstName etc. DynamicJacketBase<T> Base class for DynamicJackets. You won't use this, just included in the docs. To check if something is an array or an object, use \"IsArray\" DynamicJacketList This is a DynamicJacket for JSON arrays. You can enumerate through it. Interfaces IDynamicEntity This is a wrapper for IEntity objects. It provides nicer access to underlying properties and automatically handles things like multi-language etc. The underlying IEntity IEntity is in the Entity property. Normally you will use it without caring about these internals. Please check @HowTo.DynamicCode.DynamicEntity IDynamicField BETA Work in progress. This is an interface which should describe a field. It's important for APIs which can need to know more about the field holding an item, like: The field name Any metadata of the field IDynamicMetadata Metadata on Dynamic Objects - like IDynamicEntity or IAsset (files/folders). Behaves like a normal DynamicEntity, but has additional commands to detect if specific Metadata exists IDynamicStack This is a dynamic object which contains multiple dynamic objects (Sources). It will try to find a value inside each source in the order the Sources are managed. ISecureData<T> This object contains decrypted data (if it was encrypted originally) and tells you if the data was encrypted, signed etc. It's still very basic, and will grow in functionality to assist in handling secure / encrypted / signed data."
  },
  "api/dot-net/ToSic.Sxc.Data.ISecureData-1.html": {
    "href": "api/dot-net/ToSic.Sxc.Data.ISecureData-1.html",
    "title": "Interface ISecureData<T> | 2sxc 13 / EAV 13",
    "keywords": "Interface ISecureData<T> This object contains decrypted data (if it was encrypted originally) and tells you if the data was encrypted, signed etc. It's still very basic, and will grow in functionality to assist in handling secure / encrypted / signed data. Namespace : ToSic.Sxc.Data Assembly : ToSic.Sxc.dll Syntax [PublicApi] public interface ISecureData<out T> Type Parameters Name Description T Type of this secure data - as of now it's always a string Remarks Introduced in 2sxc 12.05 Properties | Improve this Doc View Source Value The value returned by the secure data - usually a string. Declaration T Value { get; } Property Value Type Description T Methods | Improve this Doc View Source IsSecuredBy(String) Determines what authority secured this secure data. This is to figure out what certificate or source verified the decryption / signing As of 2sxc 12.05, it can only be \"preset\", other keys are currently not handled yet Declaration bool IsSecuredBy(string authorityName) Parameters Type Name Description System.String authorityName Returns Type Description System.Boolean | Improve this Doc View Source ToString() This object explicitly has a ToString, so you can use the result in string concatenation like &quot;key:&quot; + secureResult Declaration string ToString() Returns Type Description System.String"
  },
  "api/dot-net/ToSic.Sxc.Services.IEditService.html": {
    "href": "api/dot-net/ToSic.Sxc.Services.IEditService.html",
    "title": "Interface IEditService | 2sxc 13 / EAV 13",
    "keywords": "Interface IEditService Contains status and commands to configure the in-page editing system. You will never create this yourself, as get this automatically in Razor or WebAPIs on an object called Edit . Inherited Members IHasLog.Log Namespace : ToSic.Sxc.Services Assembly : ToSic.Sxc.dll Syntax [PublicApi_Stable_ForUseInYourCode] public interface IEditService : IInPageEditingSystem, IHasLog, INeedsDynamicCodeRoot Remarks History First version created ca. v2 - originally as ToSic.Sxc.Web.IInPageEditEditingHelper Moved to ToSic.Sxc.Services.IEditService in v13.05 Properties | Improve this Doc View Source Enabled If editing is enabled or not Declaration bool Enabled { get; set; } Property Value Type Description System.Boolean True if enabled, false if not. Methods | Improve this Doc View Source Attribute(String, Object) Generate an HTML attribute by converting the value to JSON but only in edit mode Declaration IHybridHtmlString Attribute(string name, object value) Parameters Type Name Description System.String name the attribute name, used for ...= System.Object value the attribute value, used for =\"...\" Returns Type Description IHybridHtmlString A string but as HtmlString, so it can be used with @Attribute(...) | Improve this Doc View Source Attribute(String, String) Generate an HTML attribute by converting the value to JSON but only in edit mode Declaration IHybridHtmlString Attribute(string name, string value) Parameters Type Name Description System.String name the attribute name, used for ...= System.String value the attribute value, used for =\"...\" Returns Type Description IHybridHtmlString A string but as HtmlString, so it can be used with @Attribute(...) | Improve this Doc View Source ContextAttributes(IDynamicEntity, String, String, String, Nullable<Guid>, String, Int32) Get html-attributes to mark the current context these will be added to a wrapper tag (usually a div) so that in-page editing knows what the context is Please read more about Inner Content (Content Within Other Content) Declaration IHybridHtmlString ContextAttributes(IDynamicEntity target, string noParamOrder = \"Rule: All params must be named (https://r.2sxc.org/named-params)\", string field = null, string contentType = null, Guid? newGuid = default(Guid? ), string apps = null, int max = 100) Parameters Type Name Description IDynamicEntity target The content-item for which the new context should be. This item usually has a field which has Inner Content (Content Within Other Content) System.String noParamOrder see Convention: Named Parameters System.String field the field of this content-item, which contains the inner-content-items System.String contentType type name used for 'new' items in a toolbar - usually for inner-content and list-contexts System.Nullable < System.Guid > newGuid the guid of a new item - use null for auto-generate System.String apps Restrict the apps which can be added to this placeholder System.Int32 max Limit the amount of content-blocks that can be added to this placeholder Returns Type Description IHybridHtmlString An IHybridHtmlString object containing an html-attribute to add to the wrapper of the inner content Remarks History Introduced in 2sxc 8.4 Enhanced with apps and max in 10.27 | Improve this Doc View Source Enable(String, Nullable<Boolean>, Nullable<Boolean>, Nullable<Boolean>, Nullable<Boolean>, Nullable<Boolean>, Nullable<Boolean>) Ensure that the UI will load the correct assets to enable editing. See Method in C# Razor Declaration string Enable(string noParamOrder = \"Rule: All params must be named (https://r.2sxc.org/named-params)\", bool? js = default(bool? ), bool? api = default(bool? ), bool? forms = default(bool? ), bool? context = default(bool? ), bool? autoToolbar = default(bool? ), bool? styles = default(bool? )) Parameters Type Name Description System.String noParamOrder see Convention: Named Parameters System.Nullable < System.Boolean > js optional, default false. automatically true if api or forms is true Will add the basic JS APIs ($2sxc) usually for enabling WebApi calls from your JS code. added in v10.20 System.Nullable < System.Boolean > api optional, default false. automatically true, if forms is true If JS etc. should be included to enable editing API - ensures JavaScripts are loaded enabling commands to run System.Nullable < System.Boolean > forms optional, default false. Ensures JavaScripts are loaded enabling forms to open System.Nullable < System.Boolean > context optional, default false. If context ( In-Page Editing Context (technical) ) should be added, to ensure in-instance data editing System.Nullable < System.Boolean > autoToolbar optional, default false. Disables the automatic generation of a toolbar (this is important, as there usually won't be a toolbar in public pages, which would then trigger the fallback-toolbar to be generated) System.Nullable < System.Boolean > styles optional, default false. Ensures styles to be loaded, which would be necessary for the standard toolbars to look right Returns Type Description System.String null - but we wanted to make sure it returns something, so you can use it in razor like @Edit.Enable(...) Remarks History Introduced in 2sxc 9.30 Enhanced with parameter jsApi in 10.20 Being deprecated in 12.02, as you should now use the IPageService instead for most of these features | Improve this Doc View Source TagToolbar(Object, String, String, String, Object, Object, Object, Object) Generate a toolbar attribute inside an html-tag See also @HowTo.Razor.Edit.Toolbar Declaration IHybridHtmlString TagToolbar(object target = null, string noParamOrder = \"Rule: All params must be named (https://r.2sxc.org/named-params)\", string actions = null, string contentType = null, object condition = null, object prefill = null, object settings = null, object toolbar = null) Parameters Type Name Description System.Object target The content-item this toolbar is for, can be null. Usually a Dynamic Entity Objects or a Entity Objects If the first parameter is a IToolbarBuilder then all other parameters will be ignored. System.String noParamOrder see Convention: Named Parameters System.String actions List of actions on this toolbar. If null, will use default actions for this item. If provided, must be comma-separated action-names - see CMS Commands in JavaScript . System.String contentType Content-type of this toolbar, used when it has new or add buttons. This allows you to create a button for a new \"Category\" and another button for a new \"BlogPost\" etc. System.Object condition Condition will make that no toolbar is created, if it's 0, false or \"false\" System.Object prefill Allows a new dialog to receive values as a prefill. For example to already specify a date, title, category, etc. It's a dynamic object, see also the JS documentation on the prefill. System.Object settings Toolbar settings controlling hover etc. See Toolbar Settings System.Object toolbar Full manual toolbar configuration. Setting this will cause actions to be ignored. See In-Page Edit-Item Toolbars and Buttons If the the toolbar is a IToolbarBuilder then other parameters except for the target will be ignored. Returns Type Description IHybridHtmlString If the user is an editor, it returns the attribute containing all the toolbar configuration. Remarks History Added in 2sxc 9.40 condition added in 2sxc 12.05 option to just use a ToolbarBuilder as first parameter or toolbar parameter added in v13 - this will skip all other parameters | Improve this Doc View Source Toolbar(Object, String, String, String, Object, Object, Object, Object) Generate a toolbar tag - must be used in normal html, not as an attribute. See also and Methods in Razor / .net Declaration IHybridHtmlString Toolbar(object target = null, string noParamOrder = \"Rule: All params must be named (https://r.2sxc.org/named-params)\", string actions = null, string contentType = null, object condition = null, object prefill = null, object settings = null, object toolbar = null) Parameters Type Name Description System.Object target The content-item this toolbar is for, can be null. Usually a Dynamic Entity Objects or a Entity Objects If the first parameter is a IToolbarBuilder then all other parameters will be ignored. System.String noParamOrder see Convention: Named Parameters System.String actions List of actions on this toolbar. If null, will use default actions for this item. If provided, must be comma-separated action-names - see CMS Commands in JavaScript . System.String contentType Content-type of this toolbar, used when it has new or add buttons. This allows you to create a button for a new \"Category\" and another button for a new \"BlogPost\" etc. System.Object condition Condition will make that no toolbar is created, if it's 0, false or \"false\" System.Object prefill Allows a new dialog to receive values as a prefill. For example to already specify a date, title, category, etc. It's a dynamic object, see also the JS documentation on the prefill. System.Object settings Toolbar settings controlling hover etc. See Toolbar Settings System.Object toolbar Full manual toolbar configuration. Setting this will cause actions to be ignored. See In-Page Edit-Item Toolbars and Buttons If the the toolbar is a IToolbarBuilder then other parameters except for the target will be ignored. Returns Type Description IHybridHtmlString If the user is an editor, it returns HTML UL tag containing all the toolbar configuration. Remarks History Added in 2sxc 8.04 condition added in 2sxc 12.05 option to just use a ToolbarBuilder as first parameter or toolbar parameter added in v13 - this will skip all other parameters"
  },
  "api/dot-net/ToSic.Sxc.Services.IDynamicCodeService.html": {
    "href": "api/dot-net/ToSic.Sxc.Services.IDynamicCodeService.html",
    "title": "Interface IDynamicCodeService | 2sxc 13 / EAV 13",
    "keywords": "Interface IDynamicCodeService This is a service to give you DynamicCode outside of 2sxc. Use this to access 2sxc data from a Theme, a .ascx WebControl or anywhere else. Namespace : ToSic.Sxc.Services Assembly : ToSic.Sxc.dll Syntax [PublicApi] public interface IDynamicCodeService Remarks New in v13.02 This is meant to replace the ToSic.Sxc.Dnn.Factory . Please use this from now on. Methods | Improve this Doc View Source App(String, Nullable<Int32>, Nullable<Int32>, ISite, Nullable<Boolean>) Get a rich IApp object for a specific App. This is the simplest way to work with data of this App, but won't give you commands like AsDynamic(...) Declaration IApp App(string noParamOrder = \"Rule: All params must be named (https://r.2sxc.org/named-params)\", int? zoneId = default(int? ), int? appId = default(int? ), ISite site = null, bool? withUnpublished = default(bool? )) Parameters Type Name Description System.String noParamOrder see Convention: Named Parameters System.Nullable < System.Int32 > zoneId The ZoneId of the App (optional) System.Nullable < System.Int32 > appId The AppId - REQUIRED ToSic.Eav.Context.ISite site Site information for further context (optional) System.Nullable < System.Boolean > withUnpublished Determines if the App.Data gives you unpublished data (like in admin-mode) or just published data. If not set, will default to user permissions. Returns Type Description IApp An initialized App object which you can use to access App.Data | Improve this Doc View Source OfApp(Int32) Get a IDynamicCode12 object for a specific App. This is the simplest way to work with Dynamic Code for this App. Note that this is without Page/Module context, so there will be no useful Content object on the dynamic code. Declaration IDynamicCode12 OfApp(int appId) Parameters Type Name Description System.Int32 appId The AppId Returns Type Description IDynamicCode12 The dynamic code object for this App | Improve this Doc View Source OfApp(Int32, Int32) Get a IDynamicCode12 object for a specific App. This is the simplest way to work with Dynamic Code for this App. Note that this is without Page/Module context, so there will be no useful Content object on the dynamic code. Declaration IDynamicCode12 OfApp(int zoneId, int appId) Parameters Type Name Description System.Int32 zoneId The ZoneId of the App System.Int32 appId The AppId Returns Type Description IDynamicCode12 The dynamic code object for this App | Improve this Doc View Source OfApp(IAppIdentity) Get a IDynamicCode12 object for a specific App. This is the simplest way to work with Dynamic Code for this App. Note that this is without Page/Module context, so there will be no useful Content object on the dynamic code. Declaration IDynamicCode12 OfApp(IAppIdentity appIdentity) Parameters Type Name Description IAppIdentity appIdentity The App Identifier Returns Type Description IDynamicCode12 The dynamic code object for this App | Improve this Doc View Source OfModule(Int32, Int32) Get a IDynamicCode12 object for a specific Module on a page Declaration IDynamicCode12 OfModule(int pageId, int moduleId) Parameters Type Name Description System.Int32 pageId System.Int32 moduleId Returns Type Description IDynamicCode12"
  },
  "api/dot-net/ToSic.Eav.DataSources.Queries.DataSourceType.html": {
    "href": "api/dot-net/ToSic.Eav.DataSources.Queries.DataSourceType.html",
    "title": "Enum DataSourceType | 2sxc 13 / EAV 13",
    "keywords": "Enum DataSourceType Describes what a DataSource is for in the visual query (for logical grouping) Namespace : ToSic.Eav.DataSources.Queries Assembly : ToSic.Eav.DataSources.dll Syntax [PublicApi_Stable_ForUseInYourCode] public enum DataSourceType Fields Name Description Cache Debug Filter Logic Lookup Modify Security Sort Source System Target"
  },
  "api/dot-net/ToSic.Eav.DataSources.IConvertDataSource-1.html": {
    "href": "api/dot-net/ToSic.Eav.DataSources.IConvertDataSource-1.html",
    "title": "Interface IConvertDataSource<T> | 2sxc 13 / EAV 13",
    "keywords": "Interface IConvertDataSource<T> Marks objects which can convert a DataSource to another format. This will always return some kind of dictionary with stream-names and the converted items as sub-lists. Usually used in serialization scenarios. Namespace : ToSic.Eav.DataSources Assembly : ToSic.Eav.DataSources.dll Syntax [InternalApi_DoNotUse_MayChangeWithoutNotice] public interface IConvertDataSource<T> Type Parameters Name Description T Methods | Improve this Doc View Source Convert(IDataSource, IEnumerable<String>) Returns an converted IDataSource, but is serializable. Declaration IDictionary<string, IEnumerable<T>> Convert(IDataSource source, IEnumerable<string> streams = null) Parameters Type Name Description IDataSource source the source System.Collections.Generic.IEnumerable < System.String > streams names of streams to publish. if null, will return all streams Returns Type Description System.Collections.Generic.IDictionary < System.String , System.Collections.Generic.IEnumerable <T>> | Improve this Doc View Source Convert(IDataSource, String) Returns an converted IDataSource, but is serializable. Declaration IDictionary<string, IEnumerable<T>> Convert(IDataSource source, string streams) Parameters Type Name Description IDataSource source the source System.String streams names of streams to publish. if null, will return all streams Returns Type Description System.Collections.Generic.IDictionary < System.String , System.Collections.Generic.IEnumerable <T>>"
  },
  "basics/metadata/create.html": {
    "href": "basics/metadata/create.html",
    "title": "Create Metadata - (advanced ‚ö†) | 2sxc 13 / EAV 13",
    "keywords": "Create Metadata - (advanced ‚ö†) <!-- Data Highlights --> <!-- ADAM --> <!-- Server --> <!-- Prepare --> <!-- Data Source --> <!-- Optimzers --> <!-- Process / Awesomize --> <!-- Libraries --> <!-- data formats --> <!-- Browser --> <!-- Frameworks --> <!-- App show parts --> <!-- Interact parts --> <!-- Edit parts --> <!-- Edit UI parts --> <!-- SPA parts --> <!-- Custom highlight boxes - can be controlled by in-page CSS --> you are here (click to zoom) - discover the stack .context-box-summary .data-all { visibility: visible; } To create Metadata, new data must be assigned to a Target the moment it's created. Metadata can be created in 3 ways Through the Edit-UI : If the toolbar which opens a new dialog adds metadata information, then the newly created item will be stored as metadata In the REST WebAPI : the REST calls for creating new data can contain target information In the App.Data.Create(...) : The Create(...) command can include target information Create when Opening the Edit-Dialog #todoc The toolbar has various commands like new where you can include target-information which will then ensure that it's set when saved. In addition there is a simpler button/command called metadata which will create metadata if it doesn't exist, or edit existing if it's already created . This is documented in Toolbar Customizations for Metadata Create Automatically on any ADAM field in the Edit-UI #todoc Create using the Headless REST API #todoc Create using the C# API #todoc Manually create Metadata for Tests #todoc The Admin-UI has a special feature to manually create Metadata. It's technical, but it's meant to quickly create some test-metadata. Demo App and further links #todoc Fancybox Gallery App History Introduced in 2sxc v2"
  },
  "basics/licenses-features/license-manual.html": {
    "href": "basics/licenses-features/license-manual.html",
    "title": "Manually Add a License | 2sxc 13 / EAV 13",
    "keywords": "Manually Add a License <!-- Data Highlights --> <!-- ADAM --> <!-- Server --> <!-- Prepare --> <!-- Data Source --> <!-- Optimzers --> <!-- Process / Awesomize --> <!-- Libraries --> <!-- data formats --> <!-- Browser --> <!-- Frameworks --> <!-- App show parts --> <!-- Interact parts --> <!-- Edit parts --> <!-- Edit UI parts --> <!-- SPA parts --> <!-- Custom highlight boxes - can be controlled by in-page CSS --> you are here (click to zoom) - discover the stack .context-box-summary .data-configuration { visibility: visible; } 2sxc 13 has a new licensing system, and at the moment there is no UI to add a license. Until this is provided, here's how you add a license manually: Get the license file from 2sxc - usually because you are a beta-tester or because you purchased it. The file will always have a name like [something].license.json Put it into your .data-custom\\configurations folder in 2sxc. Usually something like this: [some-root]\\DesktopModules\\ToSIC_SexyContent\\.data-custom\\configurations Restart your Dnn Got to the System-Management (Apps-Management) and verify your license is active History Licenses introduced iv v13.02"
  },
  "js-code/angular/dnn-sxc-angular/index.html": {
    "href": "js-code/angular/dnn-sxc-angular/index.html",
    "title": "NPM Package @2sic/dnn-sxc-angular | 2sxc 13 / EAV 13",
    "keywords": "NPM Package @2sic/dnn-sxc-angular <!-- Data Highlights --> <!-- ADAM --> <!-- Server --> <!-- Prepare --> <!-- Data Source --> <!-- Optimzers --> <!-- Process / Awesomize --> <!-- Libraries --> <!-- data formats --> <!-- Browser --> <!-- Frameworks --> <!-- App show parts --> <!-- Interact parts --> <!-- Edit parts --> <!-- Edit UI parts --> <!-- SPA parts --> <!-- Custom highlight boxes - can be controlled by in-page CSS --> you are here (click to zoom) - discover the stack .context-box-summary .spa-2sxc-js { visibility: visible; } We've created a library to help you connect Angular with Dnn called dnn-sxc-angular . You can find it here: dnn-sxc-angular on Npm . To start, you should learn how to install . The library contains the following bits of magic to get you going: Http Interceptor which ensures that all calls to Dnn have the necessary security headers Data API to quickly get data from WebAPIs CMS directives to create toolbars in the Angular App for editing content Context information about the page/module and current sxc-objects History ca. 2015 first version for Angular 2 ca. 2016 enhanced for Angular 6 and latest 2sxc features 2019 Enhanced with Hot-Reloading features for Angular 8 and completely reworked how context is detected in Dnn 2020 Improved Hot-Reloading 2021-02 Added tag-toolbar attribute and created refresh callback so the page doesn't reload (requires 2sxc 11.12) 2021-02-26 v.11.01 - added new attribute angular-path to use as base for lazy loading To Do Status 2021-03 enhance the content-manager to provide write commands (ATM read-only) - you can still do this, but must use the context.sxc... classic JS API enhance the content-manager to provide create-metadata commands - you can still do this, but must use the context.sxc... classic JS API"
  },
  "js-code/angular/dnn-sxc-angular/http-interceptor.html": {
    "href": "js-code/angular/dnn-sxc-angular/http-interceptor.html",
    "title": "dnn-sxc-angular HttpInterceptor | 2sxc 13 / EAV 13",
    "keywords": "dnn-sxc-angular HttpInterceptor <!-- Data Highlights --> <!-- ADAM --> <!-- Server --> <!-- Prepare --> <!-- Data Source --> <!-- Optimzers --> <!-- Process / Awesomize --> <!-- Libraries --> <!-- data formats --> <!-- Browser --> <!-- Frameworks --> <!-- App show parts --> <!-- Interact parts --> <!-- Edit parts --> <!-- Edit UI parts --> <!-- SPA parts --> <!-- Custom highlight boxes - can be controlled by in-page CSS --> you are here (click to zoom) - discover the stack .context-box-summary .spa-2sxc-js { visibility: visible; } One of the core challenges when using any JavaScript in Dnn is ensuring that WebAPI calls have all the important http headers to make it work. This is what the HttpInterceptor does. It ensures that: Security headers like the RequestVerificationToken are included Context headers like ModuleId are correct Shorthand api urls like app/data/BlogPost are mapped to the correct endpoints How it works For this to work, the page must have this data available before Angular loads. Thanks to 2sxc (the non-angular parts) this is automatically provided ahead of time. Here's the initialization process behind the scenes: 2sxc adds important headers to the page on the server for 2sxc and dnn-sxc-angular to work (this happens automatically) When the root module is built (usually called AppModule ) it must include DnnSxcRootModule to register the Http-Interceptor When Angular bootstraps the base class DnnAppComponent gets everything from the page when it's constructed. Without this the Http-Interceptor wouldn't have the configuration necessary. After this has happened, all calls using the Angular HttpClient will automatically behave as expected."
  },
  "js-code/angular/dnn-sxc-angular/data-query-dollar.html": {
    "href": "js-code/angular/dnn-sxc-angular/data-query-dollar.html",
    "title": "Data.query$<T>(...) | 2sxc 13 / EAV 13",
    "keywords": "Data.query$<T>(...) <!-- Data Highlights --> <!-- ADAM --> <!-- Server --> <!-- Prepare --> <!-- Data Source --> <!-- Optimzers --> <!-- Process / Awesomize --> <!-- Libraries --> <!-- data formats --> <!-- Browser --> <!-- Frameworks --> <!-- App show parts --> <!-- Interact parts --> <!-- Edit parts --> <!-- Edit UI parts --> <!-- SPA parts --> <!-- Custom highlight boxes - can be controlled by in-page CSS --> you are here (click to zoom) - discover the stack .context-box-summary .spa-2sxc-js { visibility: visible; } With dnn-sxc-angular it's really easy to access Data from the backend. The easiest way to access a Query is to use data.query$<T>(...) which gets you a Stream ( $ ) of Entities from a Query . Here's what it does: data.query$<T>(...) will get you... ...an observable of T you'll usually use <YourType[]> since you'll get an array back the Query name is specified in the ('BusinessUnitTeam') Example We'll explain how to run a query based on the Template App . Check out the team.service.ts - you'll see some code like this: @Injectable({ providedIn: 'any', }) export class TeamService { /** This will contain the persons returned from the API */ team$: Observable<Person[]>; constructor(data: Data, context: Context) { this.team$ = data.query$<Person[]>(`BusinessUnitTeam?bu=Web`); } } The important line is this: this.team$ = data.query$<Person[]>(`BusinessUnitTeam?bu=Web`); This will query the BusinessUnitTeam Query on the backend with parameter bu being Web (to only get members of the Web-team). Here's what it does We're using the Data object provided by dnn-sxc-angular The query$<T>(...) requests an observable stream of BusinessUnit[] objects The term ...('BusinessUnitTeam') is the name of the query The additional parameters like ?bu=Web is expected by the query (in this case the query could also accept an empty BU) Other overloads The query$<T>(...) has various other overloads to include parameters. You'll see them in the intellisense in VS Code. Difference to Data.query<T>(...) The Data object also has a query<T>(...) without the $ . That doesn't return a stream/observable of data, but instead returns a Query object which can be used for multiple calls. As of now it's probably not very usefull, so let's stick to this."
  },
  "basics/data/content-types/specs/object-structure.html": {
    "href": "basics/data/content-types/specs/object-structure.html",
    "title": "Content-Type Object Structure | 2sxc 13 / EAV 13",
    "keywords": "Content-Type Object Structure This section explains Content-Type Object Structure . For an overview check out Understanding Data... . Warning What follows is very technical. For most use cases you don't need to know this stuff. Content-Types are internally structured as follows (in C# / .net): Metadata of Content-Types and Attributes Both the Content-Type and Attributes can have Metadata providing more information about them. Since the Metadata for Content-Types and Attributes is stored as Entities, it's also multi-language History Added in 2sxc 1.0"
  },
  "basics/data/content-types/specs/index.html": {
    "href": "basics/data/content-types/specs/index.html",
    "title": "Content-Type Technical Specs | 2sxc 13 / EAV 13",
    "keywords": "Content-Type Technical Specs This section explains Technical Specs of Content-Types . For an overview check out Understanding Data... ."
  },
  "basics/data/content-types/specs/file-storage.html": {
    "href": "basics/data/content-types/specs/file-storage.html",
    "title": "File-Stored Content-Types | 2sxc 13 / EAV 13",
    "keywords": "File-Stored Content-Types This section explains File-Stored Content-Types . For an overview check out Understanding Data... . Usually Content-Types are stored in the database . For a special use case, content-type definitions can also stored in a json-file. This is used for System Content-Types and Global Content-Types . Examples of such types are: configurations of data-sources (like the SqlDataSource in 2sxc 9.8) any kind of input-configuration types (like string-dropdown, etc. starting in 2sxc 9.10) any kind of global types like view metadata etc. Overview Basically the app-repository is a folder which contains content-type definitions in a contenttype sub folder. The format is the json-format V1 Storage of System Content-Types This is located in: /desktopmodules/ToSIC_SexyContent/.data/contenttypes/ Storage of Custom Global Shared Content-Types This is located in: /desktopmodules/ToSIC_SexyContent/.data-custom/contenttypes/ Storage of Content-Types which are Part of a Dnn-Extension Dnn Extensions can include content-types, for example to configure a DataSource which is part of that Dnn Extension. These files can be anywhere in the system, but the DLL will have to tell 2sxc to load them. Limitation: No GUI As of now the system will pick up the content-types stored there and everything works. BUT there is no built-in UI to edit these. We (2sic) can easily create content-types in a normal 2sxc and export them to json for this purpose, but as of now there is no GUI to do so. This should not affect you, as it's not meant to be managed by anybody else than us as of now. When To Use You will almost never need these, except for 2 important scenarios: Shared Content-Types across all Apps (similar to Shared Content-Types ) When you create a custom data-source , and want to distribute the Configuration Content-Type along with your DLL Future Features & Wishes App level content-types. This would dramatically enhance our ability to upgrade existing apps, as it's easier to detect type-changes. History Added in 2sxc 9.7"
  },
  "basics/data/content-types/scopes.html": {
    "href": "basics/data/content-types/scopes.html",
    "title": "Content-Type Scopes | 2sxc 13 / EAV 13",
    "keywords": "Content-Type Scopes This explains Content-Type Scopes . For an overview check out Understanding Data... . What is a Content-Type Scope? Content-Types have a Scope . This is like a category for the Content-Type. Normally you only see the Content-Types and Entities of the default Scope. The other Scopes have internal and system Content-Types like @String . Here's the full list of current Scopes Switch Scopes Just use the built-in scope switcher like this: For older versions see this checklist on how to switch Scopes to manage data of other Scopes Nice to Know about Scopes You can easily create your own scope at any time. This is usually used for Global Content-Types (‚ö†) or if your App is getting really complex and has so many Content-Types that it confuses the Admin. History Introduced in 2sxc 2.0"
  },
  "basics/data/content-types/range-global.html": {
    "href": "basics/data/content-types/range-global.html",
    "title": "Global Content-Types (‚ö†) | 2sxc 13 / EAV 13",
    "keywords": "Global Content-Types (‚ö†) This explains Global Content-Types . For an overview check out Understanding Data... . Warning This is a very advanced topic which less than 1% of all developers use. You almost certainly will not need this. So if you start playing around with this, make sure that you really need this. What is a Global Content-Type? Global Content Types are a Content Types which are defined in a central location and available in all Apps of your system. These are custom Content-Types which are treated like System Content-Types. They can be used inside every single App The App data is in the export/import, but not the Content-Type Definition . If you import an App with such data, the Global Type must be configured first. These Content-Types are stored in the file system For most scenarios you don't want to use this. How it works Global Content-Type are stored in special folders as JSON files and are loaded by the system when it starts. From then on they are automatically available in all apps for use. Since the schema is not stored in the SQL database, the Entities cannot use the normal storage system. Instead they are stored as JSON Entities in the SQL tables. Why does this Feature exist? 2sxc uses this concept for all the internal Content-Types. So any time you edit Field-settings or Visual-Query configurations, they use Global Content-Types. We also have some really sophisticated solutions which use this feature. Why would you want to use this? If you are creating a complex system with many portals and apps which should share the schema Why would you not want to do this? If you only want to share the Content-Type across 2-3 Apps, you should prefer App Shared Types instead If you have one specific App (like News) which is installed on many Sites you should prefer App Shared Types instead Important Warnings Since the data for the Global Content-Types is stored as JSON Entities there are a few drawbacks you should be aware of: If you plan on using the raw SQL data (not recommended anyhow) then the JSON format used in Global Content-Types adds quite a lot of complexity. If you ever rename fields in the Global Content-Type, the stored data will not follow the rename. From the systems perspective it has lost the old field and gotten a new one. Create a Global Content-Type Assume you really want to do this, here's how: Create the Content-Type in the normal way Export the Content-Type Definition as JSON Store it in your global custom folder (you may need to create these folders) In Dnn: [system-root]/DesktopModules/ToSIC_SexyContent/.data-custom/contenttypes In Oqtane: TODO Restart the system You should now have this Content-Type show up in every App. Update a Global Content-Type Make the updates in the original system Re-export the JSON Overwrite the original file Restart your system Delete a Global Content-Type Remove the JSON file Restart the system Best Practices From our experience the main use case for Global Content-Types is very technical, so the content-editor usually doesn't need to see this. So we strongly recommend placing it in an own Scope . History Introduced in 2sxc 9.7"
  },
  "basics/cms/inner-content/index.html": {
    "href": "basics/cms/inner-content/index.html",
    "title": "Inner Content (Content Within Other Content) | 2sxc 13 / EAV 13",
    "keywords": "Inner Content (Content Within Other Content) Inner Content is the feature to place content-blocks (apps or common content-items) inside another content-item. There are two common scenarios for this: Apps with list/details views, with a feature rich details-view . For example: a blog, which lets the editor add galleries and other apps into each blog-post. This is called a mashup app as it mixes apps together Apps which wrap other content/apps, for example an accordion-app which lets the editor add further content-blocks or apps into each collapsing segment. Basic Concept Inner Content links other content-blocks (apps, content) to a Content Item , allowing the template to then show this inner content where it wants to. An Item can have Many Sets of Inner-Content A template can have multiple sets of inner content. For example: a real-estate app showing a details-page with 2 columns, each containing an variety of content-items, different from house-item to house-item. One house could have a gallery-app in the first column, while the other house would have a 3D walkthrough app and preferr to use the gallery in the second column a Catalog app containing many WYSIWYG text blocks (ProductDescription, ShowCase, ApplicationSuggestions) shown in multiple tabs, each WYSIWYG containing apps inline between the paragraphs. To achieve this flexibility, the Inner Content items are linked not only to a Content Item but to a specific field in that item. So each set of related items is stored in one field, and by using multiple fields you can have multiple sets of items. This allows the template to handle each set separately. Standalone Inner-Content - like a Dnn Pane just for this item A common use case is to provide the editor with an area into which he/she can add as many content-blocks/apps as they want to. This feels like a Dnn-pane - the editor just adds apps as he needs them. This mode is common for mashup-apps and is mostly used on sophisticated details-pages with a clear area containing additional functionality. It's also common in layout-changing apps like the accordion app . In WYSIWYG Inner-Content this is new in 2sxc 8.9 Sometimes you may let the editor add inner-content blocks within a wysiwyg-field, so that normal written content can be interspersed with apps. This is common in news-style apps or blogs, where additional features are needed (galleries, code-snippets, etc.) but mixed with the main text and not in a separate area. Here is a blog tutorial on implementing Very Rich Text . The Parts that Make it Work For Inner Content to work, the following parts play together: Data storage : you need fields in your content-type to link to the external content blocks. Just create entity-fields and use the type Content Block Items . In many cases you also want to hide the field because it's not important to the content-editor. Just go to the field-settings and set Visible in Edit UI to off. Content-Block rendering in the templates, using the Razor API - it is prepared both for the standalone-area-mode as well as the merge-with-wysiwyg-mode. In-Page Editing : to allow the editor to add / edit content-blocks in the normal view, the UI must support it. This is handeled automatically by Quick-Edit . To do the in-page Editing, quickE needs to know some context information (what field to store the links in, etc.), provided in an HTML-attribute. It's either rendered in automatically when using the Razor commands or you can manually place them using [context attributes](xref:Razor.ContextAttributes]. If you want the WYSIWYG-integration the wysiwyg must know which field to use to manage the linked content-blocks. This is simply done by convention: as soon as a content-block field follows right after a wysiwyg-field, they will be linked and the button will appear. This also works it the content-block field is set to invisible. Read also Inner Content Blocks - blog about inner content-blocks V1 - the Area Mode Demo App and further links You should find some code examples in this demo App 2sxc blog History Inner Content 1.0 in 2sxc v08.04 Enhanced Razor API in v08.09 WYSIWYG mode in v08.09"
  },
  "basics/cms/features/index.html": {
    "href": "basics/cms/features/index.html",
    "title": "Features Management | 2sxc 13 / EAV 13",
    "keywords": "Features Management Moved to Features Management"
  },
  "basics/cms/content-blocks/inner-content.html": {
    "href": "basics/cms/content-blocks/inner-content.html",
    "title": "Inner Content | 2sxc 13 / EAV 13",
    "keywords": "Inner Content Content Blocks are usually added to pages as Dnn Modules . But there is another way: as Inner Content . What this means is that a Content Item like a Blog-Post says \"Show this other content-block right...here\". To help 2sxc keep track of what is used where, this relationship is stored as a Content Block Reference . Inner Content from Another App Usually an App is self-contained, so everything it shows comes from the same App . This also means that exporting/importing an app will result in the same stuff arriving at the destination. The following diagram shows how Content can come from multiple apps Important So if you're using Inner Content and referencing content from another App , this crosses the borders between apps, and you'll need to export/import both Apps to get the same result."
  },
  "basics/cms/content-blocks/index.html": {
    "href": "basics/cms/content-blocks/index.html",
    "title": "Content Blocks | 2sxc 13 / EAV 13",
    "keywords": "Content Blocks Content items wouldn't do much - they must be shown to the user in the intended layout. The configuration of such a show these things using this template is handled in a ContentBlock . The data model for these Content Blocks looks like this: So each Content Block has: One reference to a View configuration Zero, one or many references to content items The same amount of Content-Presentation items Zero or one references to Header items The same amount of Header-Presentation items Tip Content Blocks contain a reference to the View and optionally a bunch of Content Items that will be used/shown in that View . But there are actually 4 possible scenarios deciding what is actually shown: The View can show the content-items provided by the Content Block The View can be configured to use a Query and show data from that The Template code could also get data from the App directly and show that Combinations of the three options above are possible Important Since the View can also be configured to get data from other sources, it may show items that are not in the list of the Content Block . Content Blocks in a CMS like Dnn When you see 2sxc data in Dnn, that's because a module was added to the page pointing to a Content Block . If you want to know more about that, read 2sxc Content in Dnn . Manually Managing this Data Note: you shoudn't usually do this - but sometimes you have to. Check out this short explanation: Note This scerenshot above is from 2sxc 8. In 2sxc 11 you can change scopes in the dropdown below the data table. FAQ If a page or module is deleted, does it also delete the Content Block ? No. Note that if a page or module is deleted, it goes into the Dnn trash, so it could always be restored again. If a page or module is deleted from the trash, does it also delete the Content Block ? No. Dnn does not inform modules about delete actions, so we can't do clean-up. Are Content Blocks which don't appear on a page orphaned and can I delete them? Maybe. Since they could be used in other apps (see Content - Data made Useful ) as Inner Content , there is no quick way to tell if it's being used elsewhere. Can a Content Block be used on multiple modules / pages? Yes. It's not common, but since a module can be shown on multiple pages or even on other portals, it would show the same Content Block there as well."
  },
  "abyss/platforms/dnn/index.html": {
    "href": "abyss/platforms/dnn/index.html",
    "title": "Dnn Platform | 2sxc 13 / EAV 13",
    "keywords": "Dnn Platform Dnn is the most popular open-source CMS platform on .net. It's been around since ca. 2001. 2sxc has been running on Dnn since it's inception in 2012. Features currently not implemented None History 2sxc v1 was for Dnn 4 in 2012 2sxc v7 - v12 all run on Dnn 7.4.2 up until the latest Dnn 9.x"
  },
  "net-code/features/index.html": {
    "href": "net-code/features/index.html",
    "title": "Features API in .net | 2sxc 13 / EAV 13",
    "keywords": "Features API in .net 2sxc / EAV in 9.30+ has a features management . In certain cases it would be good if the razor-view could verify that the feature is enabled - for example to show a warning when it isn't enabled yet. This is what the Features API is for. How To Use This example is taken from Mobius Forms and the code can be found in the Mobius Github Repo . @{ var feats = GetService<ToSic.Sxc.Services.IFeaturesService>(); // show warning if the save-attachments in web api isn't activated if(!feats.IsEnabled(\"SaveInAdamApi\")) { <div class=\"alert alert-warning\"> Warning: file upload won't work yet, as it hasn't been enabled. </div> } // Show warning if any of the following features are not enabled if(!feats.IsEnabled(\"PublicEditForm\", \"PublicUploadFiles\")) { <div class=\"alert alert-warning\"> Warning: Edit Form and file upload have not been enabled. </div> } } The code above checks if a feature is enabled, and if not, will show a message to the viewer that this must be enabled first. What you Need To Know The (new) API lies in the namespace ToSic.Sxc.Services - see IFeaturesService The IFeaturesService will do the checks for you ATM the public API has the following commands Enabled(string nameId) which checks if a feature is enabled based on the name Enabled(string nameId, nameId) use with more parameters Enabled(string nameId, nameId, nameId, ...) use with as many parameters a you want Enabled(string[] nameIds) use with string-array Finding Feature NameIds and GUIDs As of v13 we always recommend using the NameIds since they are easier to read. These features are currently managed: PasteImageFromClipboard - enables paste image from clipboard in the TinyMCE editor WysiwygPasteFormatted - enables paste formatted text in the TinyMCE editor PublicEditForm - enables the form to open up for non-editors (to use as input dialogs) - security will still be checked based on config, so it's safe PublicUploadFiles - allows public (non-editors) to upload files (types will still be checked), so it's safe SaveInAdamApi - enables the SaveInAdam API in the WebAPIs PermissionCheckUsers - enables you to set permissions for specific users (by default you can only set by standard roles like Admin, etc.) PermissionCheckGroups - enables you to set permissions for specific groups (by default you can only set by standard roles like Admin, etc.) WebFarmCache - enables the enterprise WebFarmCache (requires a license) Read also ... History Introduced in 2sxc 09.30 Moved from the static object Features to a proper Sxc Service in v13.01 Added nameId checks for more readable code in v13.01"
  },
  "basics/data/fields/notes-null.html": {
    "href": "basics/data/fields/notes-null.html",
    "title": "Null Value Possible | 2sxc 13 / EAV 13",
    "keywords": "Null Value Possible In some cases you may add a field to a type which already has Entities created previously. In this case the old data doesn't have a value for the field. If this happens, the field will return null , so you may need to catch this special exception in your code."
  },
  "basics/data/fields/entity.html": {
    "href": "basics/data/fields/entity.html",
    "title": "Field Data Type: Entity (List of Entity-Items) | 2sxc 13 / EAV 13",
    "keywords": "Field Data Type: Entity (List of Entity-Items) This explains Entity Fields . For an overview check out Understanding Data... . Entity or Item data is a basic data type and is used to mark item-relationships, like books-to-authors or blog-to-tags. Features The basic entity field simply allows you to select items of a specific type, with various add/remove/create/delete features. Sub-Types of Entity Fields entity-default - standard selector with type, add/remove, one/multi, delete, etc. entity-query for picking entities which were pre-processed in a query Shared Settings All Entity-Field Types have the following settings: Basic Entity Type Advanced UI Settings Multiple Items Enable Edit Enable Create New Enable Add Existing Enable Remove Enable Delete Specials of the Entity type: The entity-type has these specials it's good to know about It's always a list It preserves the relationship order Special #1: It's always a List Since it could contain 1 or many items (and the configuration can change whenever you want), reading it always means reading a list. So you'll always use something like this (C#): // full name of author var fn = Book.Author[0].FullName; // in case you're not sure if the author was added or null, you can do var fn2 = (Book.Author.Any() ? Book.Author[0].FirstOrDefault : \"\"); // This will also work in newer versions of C# // making fullName either the name, or a null var fn3 = Book.Author.FirstOrDefault()?.FullName; // the following won't work! var wontWork = Book.Author.FullName; // this won't work Or the same in JavaScript: var fn = Book.Author[0].FullName; // in case you're not sure if it has any // this uses the JS-syntax which returns the last-value of an && condition var fn = Book.Author && Book.Author[0].FullName; Special #2: It preserves Order If the user said a book has 2 authors: Daniel Abraham Then it's sometimes useful to preserve the order - in this case Daniel was probably the main author and Abraham helped out a bit. To allow for this, the Entity field will keep the order of items as they were added. Side-effect: Sometimes you want to have an A-Z order when showing items. As the order is not auto-sorted, you will have to do this yourself if you want to have them sorted. Use LINQ to do that. Technical Information Storage in the SQL Database in the EAV-Model This is stored in a special relationships-table, so internally the current DB IDs are used to track relationships. Storage in the SQL Database in the JSON-Model This is stored as an array of strings, which contain the GUIDs of the related information. Null Values not Possible These fields will never return a null. If there is no content, you'll just get an empty list. Read also Razor LINQ Tutorials History Introduced in EAV 1.0 / 2sxc 1.0 Changed in EAV 3.0 / 2sxc 6.0 (it used to have many configuration fields for all kinds of uses, which were then moved to sub-types) Enhanched in EAV 4 / 2sxc 7 when item-delete was introduced, to allow for \"private\" items"
  },
  "basics/data/fields/entity-query.html": {
    "href": "basics/data/fields/entity-query.html",
    "title": "Field Input-Type entity-query | 2sxc 13 / EAV 13",
    "keywords": "Field Input-Type entity-query Use this field type for configuring an entity-picker storing relationships . It's an extension of the entity field type . The special thing about this is that the items shown for selecting are retrieved from Query and not based on a content-type name. This allows you to look up any kind of data and offer it for selection. Features provide values to select from a query optionally specify other streams than Default optionally provide query parameters optionally use tokens in query-parameters, to pass on values from other fields in the form todo/maybe data is lazy loaded, so the query is only hit when the dropdown is opened Configuring an Entity-Query This shows the configuration dialog: Query the name of the query to use Advanced Parameters a string like country=Switzerland or country=[Country] to parameterize the query Stream Name the stream name, in case you don't want the Default stream In addition to these settings, you also have the basic entity settings which enhance the features you are using here. Cascading Dropdowns Dropdown-Fields can be cascaded - so that a selection on one dropdown changes the list of possible items on another dropdown. You'll have to work with the Parameters to get this to fly. S Important Notes Note that this stores item-relationships so you can only use it to select items which exist in the 2sxc/EAV database. You cannot use it to select items provided from non-entity sources, like Sql-data or File-lists. To select such data, you'll need the String-Dropdown-Query instead. History Introduced in EAV 4.x 2sxc 9.11"
  },
  "net-code/dynamic-code/header.html": {
    "href": "net-code/dynamic-code/header.html",
    "title": "Header / Object | 2sxc 13 / EAV 13",
    "keywords": "Header / @Header Object The Header is a Dynamic Entity in all Dynamic Code (Razor and WebAPI). It's used on Views which are configured to have lists - and allows you to add information for the header or similar. So basicall List-Views have 0 or 1 Header and 0 or many Content items. If the View is not a list, the Header will not be available. ‚ö° The official API docs . Since it's a Dynamic Entity it carries all values as properties, like Header.Link etc. Discover More in the Razor Tutorials We have an rich series of Razor tutorials . You should really check them out üëç. Example Razor Code <h2> @Header.Title </h2> Header.Presentation Depending on the view configuration the Header can carry additional presentation information, for example how to format the title etc. This is available on Header.Presentation . The Presentation object is also a Dynamic Entity . <h2 class=\"@Header.Presentation.Highlight\"> @Header.Title </h2> Demo Data Note that the View can be configured to contain demo data for both the Header as well as the Header.Presentation . In this case your template will receive data to show even if the editor has not added anything. History Introduced in 2sxc 1.0 under the name List which was confusing Changed to Header in ca. V10 (but List still works for compatibility) Presentation added in this documented form ca. 2sxc 8"
  },
  "js-code/commands/custom-code.html": {
    "href": "js-code/commands/custom-code.html",
    "title": "Buttons with Custom Code in a Toolbar | 2sxc 13 / EAV 13",
    "keywords": "Buttons with Custom Code in a Toolbar <!-- Data Highlights --> <!-- ADAM --> <!-- Server --> <!-- Prepare --> <!-- Data Source --> <!-- Optimzers --> <!-- Process / Awesomize --> <!-- Libraries --> <!-- data formats --> <!-- Browser --> <!-- Frameworks --> <!-- App show parts --> <!-- Interact parts --> <!-- Edit parts --> <!-- Edit UI parts --> <!-- SPA parts --> <!-- Custom highlight boxes - can be controlled by in-page CSS --> you are here (click to zoom) - discover the stack .context-box-summary .edit-custom { visibility: visible; } In some cases you want to add buttons to a toolbar, which run custom JavaScript code. How to use Here's a basic example showing a 2sxc-toolbar with a custom code: <ul class=\"sc-menu\" data-toolbar='{ \"groups\": [{ \"buttons\": [{ \"command\": { \"action\": \"custom\", \"customCode\": \"alert(\\\"custom button!\\\")\" } }] }] }'></ul> This shows 2sxc-toolbar with 1 button, calling the command custom and giving it the code customCode which will be executed. Here's a more extensive example: <div class=\"sc-element\"> custom js action <ul class=\"sc-menu\" data-toolbar='{\"groups\": [ { \"buttons\": [ { \"command\": { \"action\": \"custom\", \"customCode\": \"alert(\\\"custom button!\\\")\" }, \"icon\": \"icon-sxc-code\", \"title\": \"my custom code\" },{ \"command\": { \"action\": \"custom\", \"customCode\": \"someCustomAction(settings, event, sxc);\" }, \"icon\": \"icon-sxc-code\", \"title\": \"my custom code\" }, \"layout\", \"more\" ]}, { \"buttons\": \"layout,more\" } ], \"debug\": true}'></ul> </div> <script> function someCustomAction(settings, event, sxc) { console.log(\"found these settings: \", settings); console.log(\"for this click event: \", event); console.log(\"in the context of this sxc: \", sxc); alert(\"check js console output\"); } </script> The above example also provides a custom icon, a title and a second button which also knows about the event (the click), the settings (like the entityId) and the sxc (the controller). How it works Internally, the command custom is meant to simply execute the code which is in the attribute customCode . That's all it does. Notes and Clarifications JSON Encode if using data-toolbar attribute If you're adding this in the HTML, then everything must be correctly JSON encoded (which isn't exactly fun). So if you plan to do that, we recommend to put most of the JS in an external file and just put the call to it in the button itself. More Specs On Click The second example shows 3 additional variables which are available inside the click event. They are settings - these are the parameters passed in, like entityId event - this is the JS event like click sxc - this is the current sxc-controller - you can also access sxc.manage if you need it Read also commands Demo App and further links You should find some code examples in this demo App JS Manage / Toolbar API Tutorial App History Introduced in 2sxc v08.06"
  },
  "js-code/angular/dnn-sxc-angular/install.html": {
    "href": "js-code/angular/dnn-sxc-angular/install.html",
    "title": "Installing and Bootstrapping dnn-sxc-angular | 2sxc 13 / EAV 13",
    "keywords": "Installing and Bootstrapping dnn-sxc-angular <!-- Data Highlights --> <!-- ADAM --> <!-- Server --> <!-- Prepare --> <!-- Data Source --> <!-- Optimzers --> <!-- Process / Awesomize --> <!-- Libraries --> <!-- data formats --> <!-- Browser --> <!-- Frameworks --> <!-- App show parts --> <!-- Interact parts --> <!-- Edit parts --> <!-- Edit UI parts --> <!-- SPA parts --> <!-- Custom highlight boxes - can be controlled by in-page CSS --> you are here (click to zoom) - discover the stack .context-box-summary .spa-2sxc-js { visibility: visible; } Step 1. Install the Package Just run npm i \"@2sic.com/dnn-sxc-angular\" This will download dnn-sxc-angular on Npm and add it to your package.json . Step 2. Add to your Root module Here's an extract from Template Angular App - in /ng/src/app/app.module.ts : /* --------------------------------------------------------------------------- Tutorial --------------------------------------------------------------------------- This main module configuration has two special things it includes - DnnInterceptor: this ensures all http-requests will have the neecessary Dnn headers - ContentManagerModule: this enables attributes like sxc-toolbar for editing UIs --------------------------------------------------------------------------- */ import { BrowserModule } from \"@angular/platform-browser\"; import { NgModule } from \"@angular/core\"; import { HttpClientModule } from \"@angular/common/http\"; import { ContentManagerModule, DnnSxcRootModule } from \"@2sic.com/dnn-sxc-angular\"; import { AppRoutingModule } from \"./app-routing.module\"; import { AppComponent } from \"./app.component\"; import { TitleComponent } from \"./layout/title.component\"; import { NavigationComponent } from \"./layout/navigation.component\"; @NgModule({ declarations: [ AppComponent, TitleComponent, NavigationComponent, ], imports: [ BrowserModule, // this tells Angular to run in a browser AppRoutingModule, // this contains the application link-structure HttpClientModule, // this enables web-api calls and should only be included in the App root // Impontant: don't load sub-modules here if you want lazy-loading to work // ExamplesModule, // not added here, as it should lazy-load // 2sxc Module #StepBootstrap DnnSxcRootModule, // this is important in the app-root, as it ensures that context is shared in sub-modules ContentManagerModule, // this is needed for edit-toolbars to work ], providers: [], bootstrap: [AppComponent], }) export class AppModule {} The most important bit is to ensure that HttpClientModule is imported here DnnSxcRootModule is imported here Step 3. Ensure Correct Bootstrapping dnn-sxc-angular must do some initial work when loading, so the AppComponent must inherit from the DnnAppComponent . Heres' the code from /ng/src/app/app.component.ts : /* --------------------------------------------------------------------------- Tutorial --------------------------------------------------------------------------- This entry component extends the DnnAppComponent By doing this, it will - pick up any configuration attributes on the <app-root> tag - automatically initialize all http adapters to auto-set Dnn headers - ensure that hitting an enter-key on an input field doesn't submit the page, because asp.net would do that #StepBootstrap --------------------------------------------------------------------------- */ import { Component, ElementRef } from '@angular/core'; import { DnnAppComponent, Context } from '@2sic.com/dnn-sxc-angular'; @Component({ selector: 'app-root', templateUrl: './app.component.html' }) export class AppComponent extends DnnAppComponent { constructor(el: ElementRef, context: Context) { super(el, context); } } This ensures that DnnAppComponent has a chance to initialize the Http-Interceptor and pick up any other configuration the app-root tag may have."
  },
  "basics/data/fields/index.html": {
    "href": "basics/data/fields/index.html",
    "title": "Content-Type Fields | 2sxc 13 / EAV 13",
    "keywords": "Content-Type Fields This explains Content-Type Fields . For an overview check out Understanding Data... . The EAV (Entity-Attribute-Value) system and 2sxc is all about data. The data in the Attributes (aka Fields, Properties) are have a Type This Value-Type or Data-Type describes how data is stored (persisted) in various formats (SQL, JSON, XML) and how it's used in code (C#, JavaScript, Tokens, Angular, ...). General Settings for all Fields General Settings contain core information about a field like name, help-text and more. Every field has these configurations. Field Types These are the core Field-Types . Each may have one or more Input-Types . Boolean - basic true/false or yes/no values Custom - a JSON data type for GPS and other JSON data DateTime - for dates and times Empty - a UI-only field for things like grouping fields together under a title Entity - an item-picker field to choose existing items, for relationships between items - like a book to the author or a blog-post to tags Hyperlink - a special string with helper objects which resolve \"file:72\" to the real link Number - for any kind of number like 1, 2, 3 or with decimals String - for string types or when you other options don't fit History Almost all types were introduced in EAV 1.0 2sxc 1.0 Changed continously - most of it in EAV 2-4 which matches 2sxc 4, 6 and 9"
  },
  "net-code/data/linq-datasource.html": {
    "href": "net-code/data/linq-datasource.html",
    "title": "Querying Data and Data Sources with code and LINQ | 2sxc 13 / EAV 13",
    "keywords": "Querying Data and Data Sources with code and LINQ To get started, we recommend you read the LINQ Guide and play around with the Razor Tutorial App These common (extension) methods can be used on lists from 2sxc data streams (they all inherit from types implementing IEnumerable ): .Where() - filter a list (IEnumerable) based on a specific criteria .Any() - returns true if any of the elements matches a criteria .OrderBy() / .OrderByDescending() - order a list (IEnumerable) by a specific field .First() / .Last() - get first or last element in the list .Select() - transform list into a new list, selecting specific field(s) .Take() / .Skip() - paging functions .Count() - count number of elements .IndexOf() - find index of a specific element in the list For a full list of all System.Linq methods, check out the methods of IEnumerable Discover More in the Razor Tutorials We have an rich series of Razor tutorials . You should really check them out üëç. Using Statements As explained in the guide we recommend the following using statements in Razor: @using System.Linq; @using Dynlist = System.Collections.Generic.IEnumerable<dynamic>; Where Filter a list (IEnumerable) based on a criteria. Example: Basic filter of a list by string var items = AsDynamic(Data[\"Default\"]); items = items.Where(p => p.Name == \"Chuck Norris\"); // items now contains only items which have \"Chuck Norris\" as name property Any Returns true if any of the elements matches a criteria. var items = AsDynamic(Data[\"Default\"]); var containsChuckNorris = items.Any(p => p.Name == \"Chuck Norris\"); // if containsChuckNorris is true, at least one element has name \"Chuck Norris\" Here's another Any - to see if a relationship contains something. It's a bit more complex, because Razor needs to know what it's working with: // filter - keep only those that have this Category // note that the compare must run on the EntityId because of object wrapping/unwrapping postsToShow = postsToShow .Where(p => (p.Categories as List<dynamic>) .Any(c => c.EntityId == ListContent.Category[0].EntityId)) OrderBy / OrderByDescending Order a list (IEnumerable) by a specific field. var items = AsDynamic(Data[\"Default\"]); items = items.OrderBy(p => p.Name); // items are now ordered by property \"Name\" First / Last Get first or last element of the list. var items = AsDynamic(Data[\"Default\"]); var first = items.First(); // contains the first element var last = items.Last(); // contains the last element Select Transform list into a new list, selecting only specified field(s). var items = AsDynamic(Data[\"Default\"]); var names = items.Select(p => p.Name); // names is a list of all names Take / Skip Paging functions: Take only n elements, skip m elements var items = AsDynamic(Data[\"Default\"]); items = items.Skip(10).Take(10); // Skips the first 10 elements and select only 10 Count Count number of elements in a list. var items = AsDynamic(Data[\"Default\"]); var count = items.Count(); // contains the number of elements in the list IndexOf Find index of a specific element in the list. @{ var items = AsDynamic(Data[\"Default\"]); } @foreach(var item in items) { <h1>Item number @items.IndexOf(item)</h1> }"
  },
  "net-code/data/index.html": {
    "href": "net-code/data/index.html",
    "title": "Use LINQ with Dynamic Data in Dynamic Code | 2sxc 13 / EAV 13",
    "keywords": "Use LINQ with Dynamic Data in Dynamic Code LINQ (Language Integrated Query) from Microsoft is a highly efficient API to quickly sort, filter and reorganize list of data. It's built into .net. You probably want to check out one of the following: Tutorials Discover More in the Razor Tutorials We have an rich series of Razor tutorials . You should really check them out üëç. LINQ Tutorials on 2sxc.org 2sxc LINQ Docs Guide to Working with LINQ and 2sxc/EAV Data Querying Data and Data Sources with code and LINQ Microsoft Docs LINQ in the Microsoft Docs"
  },
  "net-code/conventions/unknown-implementations/index.html": {
    "href": "net-code/conventions/unknown-implementations/index.html",
    "title": "Convention: Unknown Implementations | 2sxc 13 / EAV 13",
    "keywords": "Convention: Unknown Implementations Tip This convention is not relevant for App developers . So if your focus is App Razor or App WebAPIs, you don't need this. It's meant for people who integrate 2sxc/EAV into another system . EAV and 2sxc have about 30 objects which can be implemented specifically to a platform. Examples: ISite gives information about the current site IUser gives information about the current user IEnvironmentPermission determines if certain user permissions are given (like Edit rights) To make integration easier, these objects have an ...Unknown implementation which is registered if you didn't specifically provide a custom implementation first. Examples: SiteUnknown will be auto-registered, always reporting Id: -2742 and ZoneId: 2 IUserUnknown will always say that it's not a Admin Because they are auto-registered as a fallback, they will be used if you didn't provide your own implementation. This ensures that even minimal integrations can work, but will be missing some functionality. Warnings when Unknown Objects are Used All the unknown objects will add a warning to the Insights-log, so you can see that these objects were used. You will see an entry for warnings-not-implemented Which Objects to Replace As you integrate 2sxc/EAV on your platform, you will probably not implement all these services, as you won't need them all. But it's a good idea to keep an eye on the logs, to determine if a specific object should be implemented. History Introduced when integrating Oqtane in 2sxc 12 final docs in v13.03 Coverage: ca. 100% of relevant objects implement this Shortlink: https://r.2sxc.org/unknown-implementations"
  },
  "net-code/conventions/proxy-controllers/index.html": {
    "href": "net-code/conventions/proxy-controllers/index.html",
    "title": "Convention: Proxy and Real Controllers | 2sxc 13 / EAV 13",
    "keywords": "Convention: Proxy and Real Controllers Tip This convention is not relevant for App developers . So if your focus is App Razor or App WebAPIs, you don't need this. It's meant for people who integrate 2sxc/EAV into another system . EAV and 2sxc have about 30 WebAPI Controllers which must work on every platform (Dnn/Oqtane) and custom integrations. To keep code maintenance low, we have a setup with Real controllers and Proxy Controllers which just serve as the entry-point in each platform. Here's how it works: The code which actually does work is called the Real controller and it's code is in ToSic.Sxc.WebApi or ToSic.Eav.WebApi The platform has the surface Proxy controller which just ensures that the endpoint is available on that platform Note This concept is still being developed in v13 so it's not final. As of 2022-02 it's only been implemented for ca. 4 controllers, the others are still not fully migrated into this model. The Real Controller The real controller is responsible for doing all the work, getting all the dependencies etc. It must be programmed in a way that the Proxies have as little code as possible. As of 2022-02, they are all named ...ControllerReal to better identify them. Once all controllers are built this way, they will probably be renamed just to ...Controller The Proxy Controller Each platform and integration will just have the minimal Proxy Controller which has the following functions: Make the endpoint available on this platform, on the correct address Ensure basic endpoint security as the platform does it (like ensure authentication, etc.) Forward all calls to the Real controller In rare cases, convert data which is treated differently on that platform to the format the Real Controller expects. History Introduced in v13 Shortlink: https://r.2sxc.org/proxy-controllers"
  },
  "net-code/conventions/named-parameters.html": {
    "href": "net-code/conventions/named-parameters.html",
    "title": "Convention: Named Parameters | 2sxc 13 / EAV 13",
    "keywords": "Convention: Named Parameters When working with the C# / Razor API, most commands require named parameters. This means that a command like this is valid <div @Edit.TagToolbar(actions: \"new\", contentType: \"BlogPost\")> ... </div> ...and this is not <div @Edit.TagToolbar(\"new\", \"BlogPost\")> ... </div> Reason Behind Named Parameters We often have APIs which start simple - like @Edit.TagToolbar() and continue to receive new features. At first, the parameter order will make sense - for that simple use case. But as the API grows, the parameter-order will become strange, simply because we would have to order them in the sequence they were added (to keep compatibility) and not in the order that makes sense. By using named parameters, we're making sure that the parameter order never matters and the API stays stable/compatible for the future. Not all Parameters Require Names Because of historic reasons and because some APIs simply have a very obvious first or second parameter, it may be that the first 1-2 parameters are not named. An example is @Edit.TagToolbar(Content) which assumes that the first parameter without name is the item (entity) for which this toolbar is meant. How It's Implemented Internally the real signature of the command uses a parameter which has a fairly random value. The call then checks if the value of that parameter is this random value, and if not, shows an error. This is to protect you from accidentally using the command without naming the parameters. Note: you could of course work around this, by providing that random value and trick the call to accept unnamed parameters. Don't do this - as we will no guarantee that the API signature (parameter order) will stay the same. History Introduced ca. in 2sxc 6 Shortlink: https://r.2sxc.org/named-params"
  },
  "net-code/conventions/index.html": {
    "href": "net-code/conventions/index.html",
    "title": "Code Conventions | 2sxc 13 / EAV 13",
    "keywords": "Code Conventions Here we will collect important coding conventions to help you understand the APIs better."
  },
  "basics/data/metadata/of.html": {
    "href": "basics/data/metadata/of.html",
    "title": "| 2sxc 13 / EAV 13",
    "keywords": "Moved to Metadata Of Something - (advanced ‚ö†)"
  },
  "basics/data/metadata/index.html": {
    "href": "basics/data/metadata/index.html",
    "title": "Metadata | 2sxc 13 / EAV 13",
    "keywords": "Metadata Metadata now has an own documentation section here: Metadata - (advanced ‚ö†)"
  },
  "basics/browser/javascript.html": {
    "href": "basics/browser/javascript.html",
    "title": "JavaScript in the Browser | 2sxc 13 / EAV 13",
    "keywords": "JavaScript in the Browser <!-- Data Highlights --> <!-- ADAM --> <!-- Server --> <!-- Prepare --> <!-- Data Source --> <!-- Optimzers --> <!-- Process / Awesomize --> <!-- Libraries --> <!-- data formats --> <!-- Browser --> <!-- Frameworks --> <!-- App show parts --> <!-- Interact parts --> <!-- Edit parts --> <!-- Edit UI parts --> <!-- SPA parts --> <!-- Custom highlight boxes - can be controlled by in-page CSS --> you are here (click to zoom) - discover the stack .context-box-summary .show-js { visibility: visible; } The JavaScript which the browser receives can come from multiple sources: App Assets located in your App folder CDN (Content Delivery Network) - this is often used for common JS libraries Asset Recommendations In general you should bundle and pre-optimize any JavaScript / Typescript code using automations such as WebPack for best possible performance. Use Asset Optimizations Where possible, use CDNs for common libraries Try to use deferred loading for JS and CSS where possible JavaScript Recommendations Point your JS to target the HTML DOM you created in your templates Create dynamic JavaScript or Styles based on values in the data #todoc Pass CMS data (content-items) to scripts using inline JSON using HTML attributes using REST APIs to get data / content-items the JSON format of data in the APIs #todoc History Added in 2sxc 1.0"
  },
  "basics/browser/index.html": {
    "href": "basics/browser/index.html",
    "title": "What Happens in the Browser... | 2sxc 13 / EAV 13",
    "keywords": "What Happens in the Browser... <!-- Data Highlights --> <!-- ADAM --> <!-- Server --> <!-- Prepare --> <!-- Data Source --> <!-- Optimzers --> <!-- Process / Awesomize --> <!-- Libraries --> <!-- data formats --> <!-- Browser --> <!-- Frameworks --> <!-- App show parts --> <!-- Interact parts --> <!-- Edit parts --> <!-- Edit UI parts --> <!-- SPA parts --> <!-- Custom highlight boxes - can be controlled by in-page CSS --> you are here (click to zoom) - discover the stack .context-box-summary .browser-all { visibility: visible; } In 2sxc most things just work . These docs give you a deep understanding of how they work so you can figure out really cool stuff. But don't be intimidated - by default things just magically work. This is what web-systems do from a bird's-eyes perspective. On the top you see what happens in the browser (the purple boxes). Show : Output using HTML and a little CSS + JS. This is the simplest way to work with 2sxc. Interact : Content or SPAs where the UI does some hard work like reorganizing data and getting data from JSON endpoints. This requires additional skills. Edit : Editing is built into everything by default and you can customized it as much as you need, up to creating custom WebAPIs, forms and input fields. This document will go into more detail what happens at that level. To understand the server level go to 2sxc Basics Overview . Tip Everything that's green in the image can be customized. Standard CSS and JS Libraries and Frameworks A key goal of 2sxc is to stay out of the way and let you do things using your favorite CSS and JS Frameworks. So the frameworks-section is simply here for you to see that you can use any standard framework or library you want. <!-- Data Highlights --> <!-- ADAM --> <!-- Server --> <!-- Prepare --> <!-- Data Source --> <!-- Optimzers --> <!-- Process / Awesomize --> <!-- Libraries --> <!-- data formats --> <!-- Browser --> <!-- Frameworks --> <!-- App show parts --> <!-- Interact parts --> <!-- Edit parts --> <!-- Edit UI parts --> <!-- SPA parts --> <!-- Custom highlight boxes - can be controlled by in-page CSS --> you are here (click to zoom) - discover the stack .context-box2 .frameworks-browser { visibility: visible; } Basically you can simply add these frameworks to your Razor-template files as <script> or <link> tags, and everything will just work. You may want to learn more about Bundling / Optimizing assets Use Koi to detect if the Skin/Theme already has some frameworks (like Bootstrap) to not load them Custom App HTML is created by the Server-Templates The HTML you need is 100% customizable and comes from the server using your templates . Usually you'll use Razor templates to generate this. <!-- Data Highlights --> <!-- ADAM --> <!-- Server --> <!-- Prepare --> <!-- Data Source --> <!-- Optimzers --> <!-- Process / Awesomize --> <!-- Libraries --> <!-- data formats --> <!-- Browser --> <!-- Frameworks --> <!-- App show parts --> <!-- Interact parts --> <!-- Edit parts --> <!-- Edit UI parts --> <!-- SPA parts --> <!-- Custom highlight boxes - can be controlled by in-page CSS --> you are here (click to zoom) - discover the stack .context-box3 .show-html { visibility: visible; } üëâ HTML in the Browser Custom CSS and JS Assets JS and CSS files are stored in your app folder and included in your output. <!-- Data Highlights --> <!-- ADAM --> <!-- Server --> <!-- Prepare --> <!-- Data Source --> <!-- Optimzers --> <!-- Process / Awesomize --> <!-- Libraries --> <!-- data formats --> <!-- Browser --> <!-- Frameworks --> <!-- App show parts --> <!-- Interact parts --> <!-- Edit parts --> <!-- Edit UI parts --> <!-- SPA parts --> <!-- Custom highlight boxes - can be controlled by in-page CSS --> you are here (click to zoom) - discover the stack .context-box4 .show-js { visibility: visible; } üëâ CSS in the Browser üëâ JavaScript in the Browser Create Awesome SPAs (Single-Page-Applications) 2sxc is great and bundling SPA JS Applications built using Angular, React, Vue or whatever. <!-- Data Highlights --> <!-- ADAM --> <!-- Server --> <!-- Prepare --> <!-- Data Source --> <!-- Optimzers --> <!-- Process / Awesomize --> <!-- Libraries --> <!-- data formats --> <!-- Browser --> <!-- Frameworks --> <!-- App show parts --> <!-- Interact parts --> <!-- Edit parts --> <!-- Edit UI parts --> <!-- SPA parts --> <!-- Custom highlight boxes - can be controlled by in-page CSS --> you are here (click to zoom) - discover the stack .context-box5 .spa-all { visibility: visible; } üëâ JavaScript in the Browser üëâ Angular in Dnn Automatic In-Page Editing Experience By default 2sxc creates hover toolbars to add modules and on most items which only a Content Editor can see. These let them edit the content or data. It's made possible thanks to the server helper @Edit.TagToolbar in your templates. <!-- Data Highlights --> <!-- ADAM --> <!-- Server --> <!-- Prepare --> <!-- Data Source --> <!-- Optimzers --> <!-- Process / Awesomize --> <!-- Libraries --> <!-- data formats --> <!-- Browser --> <!-- Frameworks --> <!-- App show parts --> <!-- Interact parts --> <!-- Edit parts --> <!-- Edit UI parts --> <!-- SPA parts --> <!-- Custom highlight boxes - can be controlled by in-page CSS --> you are here (click to zoom) - discover the stack .context-box6 .edit-auto { visibility: visible; } üëâ Edit Content or Data in Dnn / 2sxc Custom In-Page Editing Experience The edit experience can be customized to a very large extent: <!-- Data Highlights --> <!-- ADAM --> <!-- Server --> <!-- Prepare --> <!-- Data Source --> <!-- Optimzers --> <!-- Process / Awesomize --> <!-- Libraries --> <!-- data formats --> <!-- Browser --> <!-- Frameworks --> <!-- App show parts --> <!-- Interact parts --> <!-- Edit parts --> <!-- Edit UI parts --> <!-- SPA parts --> <!-- Custom highlight boxes - can be controlled by in-page CSS --> you are here (click to zoom) - discover the stack .context-box-edit-js .edit-custom { visibility: visible; } üëâ Edit Content or Data in Dnn / 2sxc Edit Form The edit form is generated automatically from the Content-Type information (Schema) and the template configuration. <!-- Data Highlights --> <!-- ADAM --> <!-- Server --> <!-- Prepare --> <!-- Data Source --> <!-- Optimzers --> <!-- Process / Awesomize --> <!-- Libraries --> <!-- data formats --> <!-- Browser --> <!-- Frameworks --> <!-- App show parts --> <!-- Interact parts --> <!-- Edit parts --> <!-- Edit UI parts --> <!-- SPA parts --> <!-- Custom highlight boxes - can be controlled by in-page CSS --> you are here (click to zoom) - discover the stack .context-box-edit-form .browser-edit-ui { visibility: visible; } üëâ Edit Content or Data in Dnn / 2sxc"
  },
  "basics/browser/images.html": {
    "href": "basics/browser/images.html",
    "title": "Images in the Browser | 2sxc 13 / EAV 13",
    "keywords": "Images in the Browser <!-- Data Highlights --> <!-- ADAM --> <!-- Server --> <!-- Prepare --> <!-- Data Source --> <!-- Optimzers --> <!-- Process / Awesomize --> <!-- Libraries --> <!-- data formats --> <!-- Browser --> <!-- Frameworks --> <!-- App show parts --> <!-- Interact parts --> <!-- Edit parts --> <!-- Edit UI parts --> <!-- SPA parts --> <!-- Custom highlight boxes - can be controlled by in-page CSS --> you are here (click to zoom) - discover the stack .context-box-summary .image-resizer { visibility: visible; } Images which the browser receives and shows usually come from these sources: App Assets located in your App folder Content / ADAM Assets Icon-fonts from the App-Assets or CDNs Recommendations Use the Image Resizer as much as possible If you can, use <picture> tags and provide multiple sizes/formats based on what the browser needs Be careful with Icon-Fonts, they can hurt your Google PageSpeed History Added in 2sxc 1.0"
  },
  "net-code/log/index.html": {
    "href": "net-code/log/index.html",
    "title": "Logging in 2sxc / EAV | 2sxc 13 / EAV 13",
    "keywords": "Logging in 2sxc / EAV This should give you some minimal guidance into logging what your code does. The General Concept Most objects have a Log where the add notes what they are doing When objects create child-objects they link their logs so that we have a call hierarchy Most calls in the objects will declare that they opened a function, log that, and log the result or a comment With this we can easily see what the code did in the Insights . How to Use in Your Code We strongly suggest that you use the same concepts in your code. You'll have to look at the 2sxc/EAV source in Github to discover more. History Introduced in 2sxc 9.6 Added 2sxc Insights (server-side) v9.31 Major enhancements in v10.22"
  },
  "basics/data/multi-language/index.html": {
    "href": "basics/data/multi-language/index.html",
    "title": "Multilanguage Data | 2sxc 13 / EAV 13",
    "keywords": "Multilanguage Data <!-- Data Highlights --> <!-- ADAM --> <!-- Server --> <!-- Prepare --> <!-- Data Source --> <!-- Optimzers --> <!-- Process / Awesomize --> <!-- Libraries --> <!-- data formats --> <!-- Browser --> <!-- Frameworks --> <!-- App show parts --> <!-- Interact parts --> <!-- Edit parts --> <!-- Edit UI parts --> <!-- SPA parts --> <!-- Custom highlight boxes - can be controlled by in-page CSS --> you are here (click to zoom) - discover the stack .context-box-summary .data-all { visibility: visible; } Data in 2sxc is Multi-Language by default, but the UI will only offer languages which have been activated in the Site settings. Multi-Language Attributes Every Attribute (like a Title ) can be stored in multiple languages. So the data model of some content can look like this: Title en-US : Enjoy a Visit to our Headquarters de-DE : Genie√üen Sie einen Besuch in unserem Hauptquartier de-CH : Geniessen Sie einen Besuch in unserem Hauptquartier Photo * : file:7402 SloganImage en-US : file:7405 de-DE , de-CH : file:7406 GpsCoordinates en-US : { \"Long\": 74.6020030, \"Lat\": 53.002030060 } Employees * : [ 74, 592, 6030, 39 ] Some things to understand in the above data model: Title is translated in 3 languages (Germany/Switzerland only differing with √ü vs ss ) The Photo has the language * which means that it was edited before languages were enabled and doesn't map to any particular language The GpsCoordinates are only set in 1 language, so every language will show the same value The SloganImage is translated so en and de have different images The Employees relationship to other data is not translatable, and the order of the items is also preserved Language Assignment and Read/Write State Each Attribute or Property like Title has one or more Values . These Values are mapped to the Attribute with one or more languages . Each language-assignment also stores the read/write state for the UI. As such, a value can have different internal rules It can be assigned to one language only. It can be assigned to multiple languages and editable in the UI of each language. Changing it would change the value in all the languages. It can be assigned to multiple languages and editable in the UI of some of these languages. Changing it (in one of the editable languages) would change it in all assigned languages. The assigned languages which are not editable would always just show this language, but not enable editing in the UI. Relationships Cannot be Translated Relationships are not Translatable. If a Blog-Post references Tags, the same tags are referenced in all languages . Note that related items may again have multi-language properties, so even if the Authors list contains the same authors across languages, accessing the Bio of a related Author will probably return a different value. Assets are Multi-Language, but the Files are Shared Across Languages A link/file-field can have a different value in each language, but the files uploaded will be available to that field in the UI of every language. So a SloganImage field would show all the files that were uploaded to this field, but the selected file can be different in each language. This wil also affect Libraries of files - the libraries will always contain the same files/images in all languages. But if these files have Metadata, then that Metadata can be different in each language. Disable Translation for Individual Fields The UI can be configured to not allow translation of specific fields if this is desired (for example URL-key fields). See also Multi-Language Content . Internal Functionality When languages are enabled, this is what happens Every field can be translated individually - or you can translate all fields of an Entity On every Entity the primary language must always be created first The primary language will then serve as the fallback for all languages which have not been translated In addition to translating values you can also link them to other languages, so that editing a value in de-DE would automatically affect de-CH but not en-US History Introduced in 2sxc 2.0 Non-Translatable fields were made an option in 2sxc 11"
  },
  "basics/data/instance/index.html": {
    "href": "basics/data/instance/index.html",
    "title": "Instance Data (vs. All App Data) | 2sxc 13 / EAV 13",
    "keywords": "Instance Data (vs. All App Data) <!-- Data Highlights --> <!-- ADAM --> <!-- Server --> <!-- Prepare --> <!-- Data Source --> <!-- Optimzers --> <!-- Process / Awesomize --> <!-- Libraries --> <!-- data formats --> <!-- Browser --> <!-- Frameworks --> <!-- App show parts --> <!-- Interact parts --> <!-- Edit parts --> <!-- Edit UI parts --> <!-- SPA parts --> <!-- Custom highlight boxes - can be controlled by in-page CSS --> you are here (click to zoom) - discover the stack .context-box-summary .server-all, .context-box-summary .data-all { visibility: visible; } Apps can have a lot of data and the entirety of this data is called the App Data . Usually every Instance (use) of a Template will only work with a selection of this data. You could write code to find the parts you need, but usually that work is automatically done by 2sxc. This is possible thanks to two common scenarios which determine what data should to be used: An editor added content manually, so this is the data that should be worked with A Query prepared data for this Module Instance Instance Data is data which is pre-selected for one Module Instance . Either because it was edited this way or because the View Configuration specified a Query . Common Scenarios for Instance Data Content with text, images etc. which should appear on a Module Lists of Content items which are added/edited individually Views which need a bit of configuration information specific to that instance Views which receive the data to work with from a Query (so the Query defines what Data should be used in this instance) Difference Instance-Data and App Data Instance Data is only a part of the App Data , while the App Data contains everything in the App. In your code, Instance Data is prepared by the engine and available on objects like Content if the editor added content or if a Query was specified . On the other hand the complete App Data is available on objects like App which are always available even if no Instance Data exists. Read more about where data comes from in your code History Introduced in 2sxc v1 App.Data added ca. 2sxc 6 App.Query added ca. 2sxc 7"
  },
  "net-code/errors/linq-cannot-use-lambda.html": {
    "href": "net-code/errors/linq-cannot-use-lambda.html",
    "title": "Error Cannot use a lambda expression | 2sxc 13 / EAV 13",
    "keywords": "Error Cannot use a lambda expression If you see an error like this: Cannot use a lambda expression as an argument to a dynamically dispatched operation without first casting it to a delegate or expression tree type at System.Web.Compilation.AssemblyBuilder.Compile() at System.Web.Compilation.BuildProvidersCompiler.PerformBuild() at System.Web.Compilation.BuildManager.CompileWebFile(VirtualPath virtualPath) at System.Web.Compilation.BuildManager.GetVPathBuildResultInternal(VirtualPath virtualPath, Boolean noBuild, Boolean allowCrossApp, Boolean allowBuildInPrecompile, Boolean throwIfNotFound, Boolean ensureIsUpToDate) at System.Web.Compilation.BuildManager.GetVPathBuildResultWithNoAssert(HttpContext context, VirtualPath virtualPath, Boolean noBuild, Boolean allowCrossApp, Boolean allowBuildInPrecompile, Boolean throwIfNotFound, Boolean ensureIsUpToDate) at System.Web.Compilation.BuildManager.GetVirtualPathObjectFactory(VirtualPath virtualPath, HttpContext context, Boolean allowCrossApp, Boolean throwIfNotFound) at System.Web.Compilation.BuildManager.GetCompiledType(VirtualPath virtualPath) at ToSic.Sxc.Engines.RazorEngine.CreateWebPageInstance() in It usually means that you tried to write LINQ code like a .First(...) or .Select(...) on an object, and the compiler can't be sure that you tried to write LINQ. Background: Dynamic Code and Extension Methods Razor is dynamically compiled code, and many objects like Content are typed as dynamic . Because of this, the compiler can't be sure what's in a dynamic object, and also not what is in a Content.Tags - since this too is regarded as dynamic . This is why you can't just write Content.Tags.First() , because .First() is an extension method which the compiler must find first - but it can't do that, since it doesn't know that Content.Tags are of the type IEnumerable<...> . Solution #1 - use AsList(...) 2sxc 10.20 introduces AsList(...) which the compiler knows is an IEnumerable. Unfortunately if the the compiler isn't sure about Content.Tags , then it's also not sure about AsList(Content.Tags) . This is a minor inconvenience, since AsList(...) would figure things out, but Razor wants to be sure. So to use AsList() for solving this problem, you'll need to write AsList(Content.Tags as object) . That solves it. Solution #2 - cast as IEnumerable<dynamic> If you already know it's a list, you can also cast it as an IEnumerable<dynamic> . Since IEnumerable<T> is in the namespace System.Collections.Generic you have 3 options: Cast with full Namespace This is what the compiler actually understands - but it's a bit long and hard to read: var authors = (book.Authors as System.Collections.Generic.IEnumerable<dynamic>) .Select(a => a.FirstName + \" \" + a.LastName); Cast with @using and IEnumerable<dynamic> This is the same thing, just nicer to read: @using System.Collections.Generic; var authors = (book.Authors as IEnumerable<dynamic>) .Select(a => a.FirstName + \" \" + a.LastName); Cast with @using Dynlist = ... This is the same thing, but the nicest, easiest to read method: @using Dynlist = System.Collections.Generic.IEnumerable<dynamic>; var authors = (book.Authors as Dynlist) .Select(a => a.FirstName + \" \" + a.LastName);"
  },
  "net-code/errors/index.html": {
    "href": "net-code/errors/index.html",
    "title": "Solving typical Errors in Dynamic Code | 2sxc 13 / EAV 13",
    "keywords": "Solving typical Errors in Dynamic Code Here we strive to provide you with quick help to solve common problems in your dynamic code."
  },
  "net-code/errors/ientity-not-found.html": {
    "href": "net-code/errors/ientity-not-found.html",
    "title": "Error IEntity does not exist in the Namespace | 2sxc 13 / EAV 13",
    "keywords": "Error IEntity does not exist in the Namespace If you see an error like this: error CS0234: The type or namespace name 'IEntity' does not exist in the namespace 'ToSic.Eav It usually means that you have code using IEntity which had to be moved to another namespace for consistency. We're sorry about the breaking change. Background: IEntity was moved To create the public documentation we had to make sure our API was consistent, and IEntity was one of the exceptions. Before 2sxc 10.20 it was in the namespace ToSic.Eav and later in ToSic.Eav.Interfaces . We standardized it now to ToSic.Eav.Data so the full name is ToSic.Eav.Data.IEntity . Solution: Change the namespace Your code probably has a @using ToSic.Eav or @using ToSic.Eav.Interfaces . You should change this to @using ToSic.Eav.Data; And everything should work."
  },
  "net-code/errors/dynamicentity-not-be-found.html": {
    "href": "net-code/errors/dynamicentity-not-be-found.html",
    "title": "Error: The type or namespace name 'DynamicEntity' could not be found | 2sxc 13 / EAV 13",
    "keywords": "Error: The type or namespace name 'DynamicEntity' could not be found If you see an error like this: Error: System.Web.HttpCompileException (0x80004005): ...: error CS0246: The type or namespace name 'DynamicEntity' could not be found (are you missing a using directive or an assembly reference?) It usually means that you have code using DynamicEntity which had to be moved to another namespace for consistency. We're sorry about the breaking change. From what we see it mainly affects the very old FAQ app which had some very old coding style in it for LINQ. In this case it was not possible to clean 2sxc and still ensure that this works, because of type-casting restrictions in C# related to covariance and contravariance . Background: DynamicEntity was moved To create the public documentation we had to make sure our API was consistent, and IEntity was one of the exceptions. Before 2sxc 10.20 it was in the namespace ToSic.SexyContent . We standardized it now to ToSic.Sxc.Data so the full name is ToSic.Sxc.Data.DynamicEntity . Quick Fix: Change the namespace Your code probably has a @using ToSic.SexyContent . You should change this to @using ToSic.Sxc.Data; And everything should work. But please also check the good fix below: Good Fix: Change to <dynamic> Razor code shouldn't actually need to know the type of this dynamic entity. So it's better to replace occurances of DynamicEntity with the appropriate dynamic . For example, replace List<DynamicEntity> with IEnumerable<dynamic> (note that List<dynamic> won't work because of covariance restrictions). In the example of the FAQ app, it's recommended you change line 23 <li class=\"sc-element faq-set\" data-tags=\"@String.Join(\",\", ((List<DynamicEntity>)q.Categories).Select(a => AsDynamic(a).EntityId))\"> to <li class=\"sc-element faq-set\" data-tags=\"@String.Join(\",\", (q.Categories as IEnumerable<dynamic>) .Select(a => AsDynamic(a).EntityId))\"> To better understand this, best consult the LINQ Tutorials Full Error Example A full error can look like this: Error: System.Web.HttpCompileException (0x80004005): ...\\Portals\\...\\2sxc\\FAQ with Categories\\_All questions (sorted) of a selected category.cshtml(23): error CS0246: The type or namespace name 'DynamicEntity' could not be found (are you missing a using directive or an assembly reference?) at System.Web.Compilation.AssemblyBuilder.Compile() at System.Web.Compilation.BuildProvidersCompiler.PerformBuild() at System.Web.Compilation.BuildManager.CompileWebFile(VirtualPath virtualPath) at System.Web.Compilation.BuildManager.GetVPathBuildResultInternal(VirtualPath virtualPath, Boolean noBuild, Boolean allowCrossApp, Boolean allowBuildInPrecompile, Boolean throwIfNotFound, Boolean ensureIsUpToDate) at System.Web.Compilation.BuildManager.GetVPathBuildResultWithNoAssert(HttpContext context, VirtualPath virtualPath, Boolean noBuild, Boolean allowCrossApp, Boolean allowBuildInPrecompile, Boolean throwIfNotFound, Boolean ensureIsUpToDate) at System.Web.Compilation.BuildManager.GetVirtualPathObjectFactory(VirtualPath virtualPath, HttpContext context, Boolean allowCrossApp, Boolean throwIfNotFound) at System.Web.Compilation.BuildManager.GetCompiledType(VirtualPath virtualPath) at ToSic.Sxc.Engines.RazorEngine.CreateWebPageInstance() in C:\\Projects\\2sxc-dnn742\\Website\\DesktopModules\\ToSIC_SexyContent\\2Sexy Content Razor\\Engines\\Razor\\RazorEngine.cs:line 107 at ToSic.Sxc.Engines.RazorEngine.InitWebpage() in C:\\Projects\\2sxc-dnn742\\Website\\DesktopModules\\ToSIC_SexyContent\\2Sexy Content Razor\\Engines\\Razor\\RazorEngine.cs:line 128 at ToSic.Sxc.Engines.RazorEngine.Init() in C:\\Projects\\2sxc-dnn742\\Website\\DesktopModules\\ToSIC_SexyContent\\2Sexy Content Razor\\Engines\\Razor\\RazorEngine.cs:line 43 at ToSic.Sxc.Engines.EngineBase.Init(ICmsBlock cmsBlock, Purpose purpose, ILog parentLog) in C:\\Projects\\2sxc-dnn742\\Website\\DesktopModules\\ToSIC_SexyContent\\ToSic.Sxc\\Engines\\EngineBase.cs:line 76 at ToSic.Sxc.Blocks.CmsBlock.GetRenderingEngine(Purpose renderingPurpose) in C:\\Projects\\2sxc-dnn742\\Website\\DesktopModules\\ToSIC_SexyContent\\ToSic.Sxc\\Blocks\\CmsBlock_Render.cs:line 122 at ToSic.Sxc.Blocks.CmsBlock.Render() in C:\\Projects\\2sxc-dnn742\\Website\\DesktopModules\\ToSIC_SexyContent\\ToSic.Sxc\\Blocks\\CmsBlock_Render.cs:line 56 Here's a print-screen:"
  },
  "net-code/dynamic-code/object-html.html": {
    "href": "net-code/dynamic-code/object-html.html",
    "title": "Object ü™í (Razor only) | 2sxc 13 / EAV 13",
    "keywords": "@Html Object ü™í (Razor only) The Html object is a .net helper from the framework. It's only available in Razor ü™í and not in WebApis. Important Dnn and Oqtane have a different version of .net, so they Html object has more or less features depending on what framework you're using. Here we'll just document the important parts which will work on both Dnn and Oqtane @Html.Raw(string) This will put the string into the page and not escape the html. Example @{ var demo = \"<strong>hello!</strong>\"; } <div> @demo </div> <div> @Html.Raw(demo) </div> Will create this: <div> &lt;strong&gt;hello!&lt;/strong&gt; </div> <div> <strong>hello!</strong> </div> @Html.Partial(path) - v12 only This will render another razor file in the current location. Important @Html.Partial(...) is actually a newer command which would only work in Oqtane, but we back-ported it to the Dnn Razor implementation to make portable Razor possible. In Dnn it will actually call the old .net function @RenderPage(...) . Example - this would be the main file: <h1>Some Title</h1> @Html.Partial(\"_intro.cshtml\") @Html.Partial(\"_intro.cshtml\") This would be the sub-file _intro.cshtml : <div>Greetings!</div> Result: <h1>Some Title</h1> <div>Greetings!</div> <div>Greetings!</div> @Html.Partial(path, data) - v12 only This is the same as Html.Partial(path) but allows you to add more data. Main file: <h1>Some Title</h1> @{ var preparedData = new { Name = \"iJungleboy\" }; } @Html.Partial(\"_intro.cshtml\", preparedData) @Html.Partial(\"_intro.cshtml\", new { Name = \"Daniel\" }) This would be the sub-file _intro.cshtml : <div>Greetings @DynamicModel.Name!</div> Result: <h1>Some Title</h1> <div>Greetings iJungleboy!</div> <div>Greetings Markus!</div> History Html.Raw existed since 2sxc 1.0 Html.Partial was added in 2sxc 12 to ensure identical syntax with Oqtane"
  },
  "net-code/dynamic-code/object-dynamic-model.html": {
    "href": "net-code/dynamic-code/object-dynamic-model.html",
    "title": "DynamicModel Object ü™í (Razor only, new in v12) | 2sxc 13 / EAV 13",
    "keywords": "DynamicModel Object ü™í (Razor only, new in v12) The DynamicModel object is used on sub-pages (which were rendered to the page using Html.Partial ) to get the data which was passed as parameters. Tip This is an abstraction for PageData in Dnn and Model in Oqtane. Using DynamicModel lets you write Razor pages which will work on both Dnn and Oqtane. DynamicModel.anything Will get you a parameter passed to the page. It's a dynamic object, so Razor doesn't know what type it is. Sometimes you may want to explicitly type it. Here some examples of an inner-page which was called using parameters @{ var person = DynamicModel.Person; var name = DynamicModel.Name as string; var nameOrDefault = DynamicModel.Name ?? \"unknown\"; } üëâ more examples in Html.Partial . History Added in 2sxc 12 to ensure identical syntax with Oqtane"
  },
  "api/dot-net/ToSic.Eav.Security.Permission.html": {
    "href": "api/dot-net/ToSic.Eav.Security.Permission.html",
    "title": "Class Permission | 2sxc 13 / EAV 13",
    "keywords": "Class Permission Helper object for constants related to the permissions-type Inheritance System.Object EntityBasedType Permission Implements IEntityBasedType IEntityWrapper IHasDecorators < IEntity > Inherited Members EntityBasedType.Entity EntityBasedType.Decorators EntityBasedType.Title EntityBasedType.Id EntityBasedType.Guid EntityBasedType.Metadata EntityBasedType.Get<T>(String, T) Namespace : ToSic.Eav.Security Assembly : ToSic.Eav.Core.dll Syntax [InternalApi_DoNotUse_MayChangeWithoutNotice(\"this is just fyi\")] public class Permission : EntityBasedType, IEntityBasedType, IEntityWrapper, IHasDecorators<IEntity>, IMultiWrapper<IEntity> Constructors | Improve this Doc View Source Permission(IEntity) Declaration public Permission(IEntity entity) Parameters Type Name Description IEntity entity Fields | Improve this Doc View Source FieldCondition Declaration public const string FieldCondition = \"Condition\" Field Value Type Description System.String | Improve this Doc View Source FieldGrant Declaration public const string FieldGrant = \"Grant\" Field Value Type Description System.String | Improve this Doc View Source FieldIdentity Declaration public const string FieldIdentity = \"Identity\" Field Value Type Description System.String | Improve this Doc View Source FieldOwner Declaration public const string FieldOwner = \"Owner\" Field Value Type Description System.String | Improve this Doc View Source TypeName Declaration public const string TypeName = \"PermissionConfiguration\" Field Value Type Description System.String Properties | Improve this Doc View Source Condition The condition in this permission - like \"this rule applies to admins\" The condition is usually a text-code by the hosting CMS Declaration public string Condition { get; } Property Value Type Description System.String | Improve this Doc View Source Grant The rights granted by this permission, usually a series of characters like r=read, u=update, etc. Declaration public string Grant { get; } Property Value Type Description System.String | Improve this Doc View Source Identity The identity this rule should apply to This is usually a user guid or group-id; exact specs vary based on the hosting CMS Declaration public string Identity { get; } Property Value Type Description System.String Implements IEntityBasedType IEntityWrapper IHasDecorators<T>"
  },
  "api/dot-net/ToSic.Eav.LookUp.ILookUpEngine.html": {
    "href": "api/dot-net/ToSic.Eav.LookUp.ILookUpEngine.html",
    "title": "Interface ILookUpEngine | 2sxc 13 / EAV 13",
    "keywords": "Interface ILookUpEngine Resolves Configurations from LookUps. Common use is for configurable DataSources Inherited Members IHasLog.Log Namespace : ToSic.Eav.LookUp Assembly : ToSic.Eav.Core.dll Syntax [PublicApi_Stable_ForUseInYourCode] public interface ILookUpEngine : IHasLog Methods | Improve this Doc View Source Add(ILookUp) Add (or replace) a value provider in the source list Declaration void Add(ILookUp lookUp) Parameters Type Name Description ILookUp lookUp An source to add to this configuration provider. The name will be taken from this object. | Improve this Doc View Source AddOverride(IEnumerable<ILookUp>) Add many overriding sources. This is used when the underlying configuration provider is shared, and this instance needs a few custom configurations. Declaration void AddOverride(IEnumerable<ILookUp> lookUps) Parameters Type Name Description System.Collections.Generic.IEnumerable < ILookUp > lookUps list of ILookUp which should override the original configuration | Improve this Doc View Source AddOverride(ILookUp) Add an overriding source. This is used when the underlying configuration provider is shared, and this instance needs a few custom configurations. Declaration void AddOverride(ILookUp lookUp) Parameters Type Name Description ILookUp lookUp a ILookUp which should override the original configuration | Improve this Doc View Source LookUp(IDictionary<String, String>, IDictionary<String, ILookUp>, Int32) This will go through a dictionary of strings (usually configuration values) and replace all tokens in that string with whatever the token-resolver delivers. It's usually needed to initialize a DataSource. Declaration IDictionary<string, string> LookUp(IDictionary<string, string> values, IDictionary<string, ILookUp> overrides = null, int depth = 4) Parameters Type Name Description System.Collections.Generic.IDictionary < System.String , System.String > values Dictionary of configuration strings. System.Collections.Generic.IDictionary < System.String , ILookUp > overrides Optional override LookUps which would be consulted first. System.Int32 depth Max recursion when looking up tokens which return other tokens. Returns Type Description System.Collections.Generic.IDictionary < System.String , System.String >"
  },
  "api/dot-net/ToSic.Sxc.Search.ISearchItem.html": {
    "href": "api/dot-net/ToSic.Sxc.Search.ISearchItem.html",
    "title": "Interface ISearchItem | 2sxc 13 / EAV 13",
    "keywords": "Interface ISearchItem Defines an item in the search system - which is prepared by Sxc, and can be customized as needed Namespace : ToSic.Sxc.Search Assembly : ToSic.Sxc.dll Syntax [PublicApi_Stable_ForUseInYourCode] public interface ISearchItem : ISearchInfo Properties | Improve this Doc View Source Body Contents of this item - will be indexed Declaration string Body { get; set; } Property Value Type Description System.String | Improve this Doc View Source CultureCode Culture code, for language sensitive searches Declaration string CultureCode { get; set; } Property Value Type Description System.String | Improve this Doc View Source Description Description in search results Declaration string Description { get; set; } Property Value Type Description System.String | Improve this Doc View Source Entity The underlying data in the search Declaration IEntity Entity { get; set; } Property Value Type Description IEntity | Improve this Doc View Source IsActive Determines if this item should appear in search or be ignored Declaration bool IsActive { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source ModifiedTimeUtc Timestamp in GMT / UTC Declaration DateTime ModifiedTimeUtc { get; set; } Property Value Type Description System.DateTime | Improve this Doc View Source QueryString Query String params to access this item Declaration string QueryString { get; set; } Property Value Type Description System.String | Improve this Doc View Source Title Title in search results Declaration string Title { get; set; } Property Value Type Description System.String | Improve this Doc View Source UniqueKey Declaration string UniqueKey { get; set; } Property Value Type Description System.String | Improve this Doc View Source Url Url to go to, when looking at the details of this search result Declaration string Url { get; set; } Property Value Type Description System.String"
  },
  "api/dot-net/ToSic.Sxc.Search.ICustomizeSearch.html": {
    "href": "api/dot-net/ToSic.Sxc.Search.ICustomizeSearch.html",
    "title": "Interface ICustomizeSearch | 2sxc 13 / EAV 13",
    "keywords": "Interface ICustomizeSearch This interface marks custom code which views use to customize how search treats data of that view. It's meant for customizing the internal indexer of the platform, not for Google Search. To use it, create a custom code (.cs) file which implements this interface. You can also inherit from a DynamicCode base class (like Code12) if you need more functionality. Namespace : ToSic.Sxc.Search Assembly : ToSic.Sxc.dll Syntax [PublicApi] public interface ICustomizeSearch Remarks History: Released v12.02 Methods | Improve this Doc View Source CustomizeSearch(Dictionary<String, List<ISearchItem>>, IModule, DateTime) Will be called by the search indexer to pre-process the results. Declaration void CustomizeSearch(Dictionary<string, List<ISearchItem>> searchInfos, IModule moduleInfo, DateTime beginDate) Parameters Type Name Description System.Collections.Generic.Dictionary < System.String , System.Collections.Generic.List < ISearchItem >> searchInfos Dictionary containing the streams and items in the stream for this search. ToSic.Sxc.Context.IModule moduleInfo Module information with which you can find out what page it's on etc. System.DateTime beginDate Last time the indexer ran - because the data you will get is only what was modified since."
  },
  "api/dot-net/ToSic.Sxc.Apps.IApp.html": {
    "href": "api/dot-net/ToSic.Sxc.Apps.IApp.html",
    "title": "Interface IApp | 2sxc 13 / EAV 13",
    "keywords": "Interface IApp An app-object as is available in a razor template or WebApi Inherited Members IApp.Name IApp.Folder IApp.Hidden IApp.NameId IApp.Data IApp.Query IApp.Metadata IZoneIdentity.ZoneId IAppIdentityLight.AppId Namespace : ToSic.Sxc.Apps Assembly : ToSic.Sxc.dll Syntax [PublicApi_Stable_ForUseInYourCode] public interface IApp : IAppPaths, IApp, IApp, IAppIdentityWithPublishingState, IAppIdentity, IZoneIdentity, IAppIdentityLight, IHasMetadata Properties | Improve this Doc View Source Configuration Configuration object as a DynamicEntity. This contains things like app version, path etc. Declaration AppConfiguration Configuration { get; } Property Value Type Description AppConfiguration An IDynamicEntity object | Improve this Doc View Source Path The path to the current app, for linking JS/CSS files and images in the app folder. Declaration string Path { get; } Property Value Type Description System.String Path usually starting with /portals/... | Improve this Doc View Source PathShared The path to the current apps shared/global folder, for linking JS/CSS files and images in the app folder. Declaration string PathShared { get; } Property Value Type Description System.String Path usually starting with /portals/_default/... Remarks Added v13.01 | Improve this Doc View Source PhysicalPath The path on the server hard disk for the current app. Declaration string PhysicalPath { get; } Property Value Type Description System.String Path usually starting with c:... | Improve this Doc View Source PhysicalPathShared The path on the server hard disk for the current apps shared/global folder. Declaration string PhysicalPathShared { get; } Property Value Type Description System.String Path usually starting with c:... Remarks Added v13.01 | Improve this Doc View Source Resources All the app resources (usually used for multi-language labels etc.) Declaration dynamic Resources { get; } Property Value Type Description System.Object An IDynamicEntity object | Improve this Doc View Source Settings All the app settings which are custom for each app. Declaration dynamic Settings { get; } Property Value Type Description System.Object An IDynamicEntity object | Improve this Doc View Source Thumbnail The thumbnail path for the current app. Declaration string Thumbnail { get; } Property Value Type Description System.String path + app-icon.png if there is an icon there."
  },
  "api/dot-net/ToSic.Sxc.Apps.AppConfiguration.html": {
    "href": "api/dot-net/ToSic.Sxc.Apps.AppConfiguration.html",
    "title": "Class AppConfiguration | 2sxc 13 / EAV 13",
    "keywords": "Class AppConfiguration The configuration of the app, as you can set it in the app-package definition. Inheritance System.Object EntityBasedType EntityBasedWithLog AppConfiguration Implements IEntityBasedType IEntityWrapper IHasDecorators < IEntity > IHasLog Inherited Members EntityBasedWithLog.Log EntityBasedType.Entity EntityBasedType.Decorators EntityBasedType.Title EntityBasedType.Id EntityBasedType.Guid EntityBasedType.Metadata EntityBasedType.Get<T>(String, T) Namespace : ToSic.Sxc.Apps Assembly : ToSic.Sxc.dll Syntax [PublicApi_Stable_ForUseInYourCode] public class AppConfiguration : EntityBasedWithLog, IEntityBasedType, IEntityWrapper, IHasDecorators<IEntity>, IMultiWrapper<IEntity>, IHasLog Properties | Improve this Doc View Source Description Declaration public string Description { get; } Property Value Type Description System.String | Improve this Doc View Source EnableAjax Declaration public bool EnableAjax { get; } Property Value Type Description System.Boolean | Improve this Doc View Source EnableRazor Declaration public bool EnableRazor { get; } Property Value Type Description System.Boolean | Improve this Doc View Source EnableToken Declaration public bool EnableToken { get; } Property Value Type Description System.Boolean | Improve this Doc View Source Folder Declaration public string Folder { get; } Property Value Type Description System.String | Improve this Doc View Source IsHidden Declaration public bool IsHidden { get; } Property Value Type Description System.Boolean | Improve this Doc View Source Name Declaration public string Name { get; } Property Value Type Description System.String | Improve this Doc View Source OriginalId Declaration public Guid OriginalId { get; } Property Value Type Description System.Guid | Improve this Doc View Source RequiredDnn Declaration public Version RequiredDnn { get; } Property Value Type Description System.Version | Improve this Doc View Source RequiredOqtane Declaration public Version RequiredOqtane { get; } Property Value Type Description System.Version | Improve this Doc View Source RequiredSxc Declaration public Version RequiredSxc { get; } Property Value Type Description System.Version | Improve this Doc View Source Version Declaration public Version Version { get; } Property Value Type Description System.Version Implements IEntityBasedType IEntityWrapper IHasDecorators<T> IHasLog"
  },
  "js-code/toolbars/workflows.html": {
    "href": "js-code/toolbars/workflows.html",
    "title": "Toolbar Workflows | 2sxc 13 / EAV 13",
    "keywords": "Toolbar Workflows <!-- Data Highlights --> <!-- ADAM --> <!-- Server --> <!-- Prepare --> <!-- Data Source --> <!-- Optimzers --> <!-- Process / Awesomize --> <!-- Libraries --> <!-- data formats --> <!-- Browser --> <!-- Frameworks --> <!-- App show parts --> <!-- Interact parts --> <!-- Edit parts --> <!-- Edit UI parts --> <!-- SPA parts --> <!-- Custom highlight boxes - can be controlled by in-page CSS --> you are here (click to zoom) - discover the stack .context-box-summary .edit-custom { visibility: visible; } 2sxc Toolbars do a lot of things automatically, but in some cases you want to... ... prevent certain actions/commands under certain conditions (like no edit if something on the page isn't as expected) ... do a custom page / data refresh instead of the default This can be done using Toolbar Workflows . It's especially useful in SPA applications (think React, Angular and custom SPAs) which don't want a page reload. Demo üëâ Here's a live demo with source of the 2sxc Toolbar Workflow <div id='tagWithToolbar1' @Edit.TagToolbar( toolbar: new [] { \"toolbar=empty\", \"+new?contentType=UiEmptyHelloWorld\" }, settings: new { hover = \"left\", show = \"always\" } )> Float over this box to get a (+) button. When you click it and close the dialog again, the page will <em>not refresh</em>. <br> Instead, you'll see console messages that a custom JS took over the process. </div> // This workflow definition will run on every action, just to log what's happening const workflowToLog = { command: 'all', // Run on every command/action phase: 'all', // Run before and after code: (wfArgs) => { console.log(\"Toolbar asked to to something - here are the details.\", wfArgs); } } // This is the workflow definition we will register to stop page refresh const workflowToDisableRefresh = { command: 'refresh', // The command name it's for phase: 'before', // The workflow-step should run before the command is executed code: (wfArgs) => { // The code which should be run console.log('Asked to refresh, will return false to stop it. These are the arguments we got.', wfArgs); return false; // Return false to stop this command from happening } }; // Attach event-listener to the TagToolbar parent, so we can register the workflow when the toolbar is created var parent = document.getElementById('tagWithToolbar1'); parent.addEventListener('toolbar-init', (initEvent) => { console.log(\"Workflow Demo: Tag Toolbar was initialized - event kicked in - will now register\"); const workflow = initEvent.detail.workflow; workflow.add(workflowToLog); workflow.add(workflowToDisableRefresh); // Stop the event here, otherwise parent elements which have an event listener would get triggered as well initEvent.stopPropagation(); }); How Workflows Work üëâ Learn more about Workflows How Toolbars Register the Workflows Each toolbar can have different workflows attached. The toolbars are generated on-the-fly and sometimes re-generated on partial reloading. So you must register your workflow-steps when the toolbar reports that it's ready. So this is the flow of logic: A toolbar is created - often on mouse-over It will fire a toolbar-init event contains a lot of internal information on the event.details and also a workflow object which is the Workflow Manager for this toolbar. Your code will pick up the event.details.workflow and then add(...) a workflow step - see Workflow Step Object probably call event.stopPropagation() or similar to prevent other event listeners from also adding stuff. This is especially important if you have entities within entities, in which case there may be listeners for each toolbar at various DOM levels. üëâ Learn more about Workflows TagToolbar workflows created using @Edit.TagToolbar(...) should attach the init-listener to that tag Toolbar workflows created using @Edit.Toolbar(...) should attach the init-listener to a parent tag Angular Implementation In dnn-sxc-angular there is a directive for toolbars, which hides all this and just allows you to do a custom refresh as you need it. See Toolbars in Angular (dnn-sxc-angular) React Implementation As of now, there is no pre-built React implementation, but you can easily create your own based on the angular version. Demo App and further links You should find some code examples in this demo App Demo of the 2sxc Toolbar Workflow History Introduced in 2sxc v11.12 Enhanced so it also works on inline toolbars ( Edit.Toolbar(...) ) in 12.10"
  },
  "js-code/toolbars/metadata.html": {
    "href": "js-code/toolbars/metadata.html",
    "title": "Toolbars which Create Metadata | 2sxc 13 / EAV 13",
    "keywords": "Toolbars which Create Metadata <!-- Data Highlights --> <!-- ADAM --> <!-- Server --> <!-- Prepare --> <!-- Data Source --> <!-- Optimzers --> <!-- Process / Awesomize --> <!-- Libraries --> <!-- data formats --> <!-- Browser --> <!-- Frameworks --> <!-- App show parts --> <!-- Interact parts --> <!-- Edit parts --> <!-- Edit UI parts --> <!-- SPA parts --> <!-- Custom highlight boxes - can be controlled by in-page CSS --> you are here (click to zoom) - discover the stack .context-box-summary .edit-custom { visibility: visible; } If your toolbar should create Metadata when creating new data, it must supply the for parameter. When you do this, the edit-dialog should open just like always, but once the data is saved it should have the metadata target assignment. Schema for the Simple Toolbar ...&for=[stringKey] - will default to TargetType 10 (CMS Object) and key-type string ...&for=[targetType],[keyType],[key] Examples ...&for=file:74 ...&for=4,guid,5f09bc36-1ada-4f74-8992-a90587b09af5 Razor Example This example will create a new item which will provide metadata for the Entity ( Target-Type 4 ) 5f09bc36-1ada-4f74-8992-a90587b09af5 . This example would usually need an @if(...) around it, as you would normally only want to have a create-button if nothing exists yet. <div @Edit.TagToolbar(Content, toolbar: \"+new?contentType=Category&for=4,guid,5f09bc36-1ada-4f74-8992-a90587b09af5\")> ... </div> This example is used in the Fancybox3 Gallery and will either edit existing Metadata or create new Metadata for this file. <div class=\"ga-image\" @Edit.TagToolbar(toolbar: new [] { \"toolbar=empty\", \"metadata?entityId=\" + pic.Metadata.EntityId + \"&contentType=ImageMetadata&for=file:\" + pic.FileId })> ... </div> Schema for the Advanced Toolbar System The old toolbar system which was much harder to set up also as a model for this, but we won't document it, as we don't recommend using it any more. Read More Basically you have what it takes. To go further: Metadata - (advanced ‚ö†) How To Customize the Toolbars"
  },
  "js-code/toolbars/index.html": {
    "href": "js-code/toolbars/index.html",
    "title": "In-Page Edit Toolbars and Buttons | 2sxc 13 / EAV 13",
    "keywords": "In-Page Edit Toolbars and Buttons <!-- Data Highlights --> <!-- ADAM --> <!-- Server --> <!-- Prepare --> <!-- Data Source --> <!-- Optimzers --> <!-- Process / Awesomize --> <!-- Libraries --> <!-- data formats --> <!-- Browser --> <!-- Frameworks --> <!-- App show parts --> <!-- Interact parts --> <!-- Edit parts --> <!-- Edit UI parts --> <!-- SPA parts --> <!-- Custom highlight boxes - can be controlled by in-page CSS --> you are here (click to zoom) - discover the stack .context-box-summary .edit-custom { visibility: visible; } When a user is logged on and has edit permissions, he should see buttons to edit his content or perform other actions. This is all done in HTML / JavaScript. By default, the server will render this in places defined by the template using placeholders like @Edit.TagToolbar(Content) and similar. Note that usually this HTML is generated by a server-side template, and will usually be wrapped in a if-user-logged-in condition. So if you want to do things differently, here's how - just remember that this is an advanced use case so it's a bit harder than what you're used to with 2sxc :). New much simpler method in v10.27+ Tip Before you try anything you should really check out the newest, easiest way to customize toolbars . Demo App and further links Toolbar Tutorials JS Manage / Toolbar API Tutorial App History Introduced in 2sxc v02.00 Published API for use in templates in 2sxc v08.06 Enhanced / Standardized in 2sxc v09.40 Made much simple in v10.27"
  },
  "basics/data/entities/specs/object-structure.html": {
    "href": "basics/data/entities/specs/object-structure.html",
    "title": "Entity Object Structure | 2sxc 13 / EAV 13",
    "keywords": "Entity Object Structure This explains the C# Entity Object Structure . For an overview check out Understanding Data... . Warning What follows is very technical. For most use cases you don't need to know this stuff. Entities are structured as follows: EAV+D = Entity-Attribute-Value + Dimension EAV stands for Entity , Attribute , Value The D stands for Dimension , it says what Dimension (Language) a Value is for APIs ToSic.Eav.Data Namespace has almost everything you see here IEntity describes the main unit, the Entity IContentType defines what fields exist, it's the ContentType / Schema IAttributeBase , IAttribute , IAttribute<T> , IAttribute<T> determine the internal model how an attribute is built IValue , IValue<T> , Value<T> determines how values in an attribute are stored, because an attribute like Description can have many values in different languages ILanguage , IDimension , ILanguage languages and dimensions determine how the values are used in each language ITarget , Target this determines if the Entity is by itself, or if it's enriching something else - in which case this Entity is Metadata. IMetadataOf sometimes an Entity may itself have more metadata, which would then be stored here. History Introduced in 2sxc 1.0"
  },
  "basics/data/entities/index.html": {
    "href": "basics/data/entities/index.html",
    "title": "Entities (Data, Records, Items) | 2sxc 13 / EAV 13",
    "keywords": "Entities (Data, Records, Items) This explains Entities aka Data Items . For an overview check out Understanding Data... . Every thing , record or object in 2sxc is called an Entity . So if you have a list of Book objects, then each Book is an entity. Many other systems use the term Record , Content Item , Item or Object . Tip Before you start: Remember that you usually don't need this if you are creating Razor templates or WebApi - for that, you want to read Dynamic Entity Objects . Data Model: EAV+D = Entity-Attribute-Value + Dimension EAV stands for Entity , Attribute , Value The D stands for Dimension , it says what Dimension (Language) a Value is for How it Works Each Entity has many fields, some containing text, numbers etc. The fields an Entity can have is defined in the Content-Type , so each Entity is like a record of that type. This basic principle is used everywhere in 2sxc. For example, all these things are Entities: Simple Content items in the Content-App are entities containing a title, body and image View configurations are entities containing name, thumbnail, template-name etc. Blog posts in the Blog App are entities containing around 20 fields Tag items in the Blog App are also entities Anything you define in your apps will result in entities Multilanguage Data Each value can also be multilanguage , so there are actually many Descriptions in a multi-language product Entity. Relationships Entities are much more than just records, as they can have relationships . Input Forms and Fields (like WYSIWYG) The input mask is automatically generated from the Content-Type . Based on the specifications, it will generate the correct Input-Field like a simple text field, a multiline text field, a WYSIWYG or even a file-uploader. History Introduced in 2sxc 1.0"
  },
  "basics/data/content-types/specs/sql-storage.html": {
    "href": "basics/data/content-types/specs/sql-storage.html",
    "title": "SQL-Stored Content-Types | 2sxc 13 / EAV 13",
    "keywords": "SQL-Stored Content-Types This section explains SQL-Stored Content-Types . For an overview check out Understanding Data... . Usually Content-Types are stored in the database as part of the App they were defined in. This is how they are stored: A table contains the primary entry with StaticName (usually a GUID) and the nice Name - the one you give it. Other tables list the fields of this Content-Type and assigns them to the Type Description of the Content-Type is Metadata - so it's also a multi-lingual Entity which is stored in the App Descriptions of the Fields are also Metadata - so it's also a multi-lingual Entity which is stored in the App Nice to Know For advanced scenarios you can also share Content-Types across Apps In even more advanced scenarios you can use file based Content-Types History Added in 2sxc 1.0"
  },
  "net-code/web-api/issue-http-response-message.html": {
    "href": "net-code/web-api/issue-http-response-message.html",
    "title": "Common Issue: Missing HttpResponseMessage | 2sxc 13 / EAV 13",
    "keywords": "Common Issue: Missing HttpResponseMessage The WebApi sometimes needs to return an HttpResponseMessage , for example to trigger redirects. In some cases you simply cannot get the code to run, with an error similar to this 2sxc Api Controller Finder: Error while selecting / compiling a controller for the request. Pls check the event-log and the code. See the inner exception for more details.\", \"ExceptionMessage\": \"[Some-Path]\\Portals\\0\\2sxc\\[Some-App]\\api\\InstallController.cs(23): error CS0012: The type 'System.Net.Http.HttpRequestMessage' is defined in an assembly that is not referenced. You must add a reference to assembly 'System.Net.Http, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.\", \"ExceptionType\": \"System.Web.HttpCompileException\", \"StackTrace\": \" at System.Web.Compilation.AssemblyBuilder.Compile() at System.Web.Compilation.BuildProvidersCompiler.PerformBuild() at System.Web.Compilation.BuildManager.CompileWebFile(VirtualPath virtualPath) at System.Web.Compilation.BuildManager.GetVPathBuildResultInternal(VirtualPath virtualPath, Boolean noBuild, Boolean allowCrossApp, Boolean allowBuildInPrecompile, Boolean throwIfNotFound, Boolean ensureIsUpToDate) at System.Web.Compilation.BuildManager.GetVPathBuildResultWithNoAssert(HttpContext context, VirtualPath virtualPath, Boolean noBuild, Boolean allowCrossApp, Boolean allowBuildInPrecompile, Boolean throwIfNotFound, Boolean ensureIsUpToDate) at System.Web.Compilation.BuildManager.GetVPathBuildResult(HttpContext context, VirtualPath virtualPath, Boolean noBuild, Boolean allowCrossApp, Boolean allowBuildInPrecompile, Boolean ensureIsUpToDate) at System.Web.Compilation.BuildManager.GetCompiledAssembly(String virtualPath) at ToSic.SexyContent.WebApi.AppApiControllerSelector.SelectController(HttpRequestMessage request) in C:\\Projects\\2SexyContent\\Web\\DesktopModules\\ToSIC_SexyContent\\Sxc WebApi\\AppApiControllerSelector.cs:line 77 The reason is that the compiler has a hard time figuring out where to locate this class. We believe it's because Dnn has gone through various .net versions and that makes these things a bit harder. The solution is to tell the Compiler that you're using System.Net.Http in the desired version. Add the add tag to the web.config in the location below: <configuration> <system.web> <compilation> <assemblies> <add assembly=\"System.Net.Http, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\" /> ... Note: you shouldn't add the whole block - it should just show you where it must go History Reported in 2017"
  },
  "net-code/web-api/index.html": {
    "href": "net-code/web-api/index.html",
    "title": "2sxc Custom C# Web APIs | 2sxc 13 / EAV 13",
    "keywords": "2sxc Custom C# Web APIs You can easily create custom C# WebAPIs, and then access them from JavaScript or anywhere. What these endpoints do is completely up to you. <!-- Data Highlights --> <!-- ADAM --> <!-- Server --> <!-- Prepare --> <!-- Data Source --> <!-- Optimzers --> <!-- Process / Awesomize --> <!-- Libraries --> <!-- data formats --> <!-- Browser --> <!-- Frameworks --> <!-- App show parts --> <!-- Interact parts --> <!-- Edit parts --> <!-- Edit UI parts --> <!-- SPA parts --> <!-- Custom highlight boxes - can be controlled by in-page CSS --> you are here (click to zoom) - discover the stack .context-box-process .process-web-api { visibility: visible; } Access Endpoints with JavaScript You can find a good example on live tutorials or in the Mobius Forms App . Calling these is as follows: .../app/auto/api/[YourName] when accessing a WebApi of the current app (from a dnn-page with this module), as then 2sxc uses auto-detect .../app/[app-folder]/api/[YourName] when using this endpoint from external, as auto-detect can't work then. Most WebApi Actions will require additional parameters. Just add them as url-parameters like ?param1=This&param2=That Discover More in the Web API Tutorials We have an rich series of Web API tutorials . You should really check them out üëç. Basic Example A file in your app in the api folder called BooksController.cs could look like the following: using DotNetNuke.Security; using DotNetNuke.Web.Api; using System; using System.Collections.Generic; using System.Linq; using System.Net.Http; using System.Web.Http; public class BooksController : ToSic.Sxc.Dnn.ApiController { [HttpGet] [DnnModuleAuthorize(AccessLevel = SecurityAccessLevel.Anonymous)] [ValidateAntiForgeryToken] public object Persons() { return new ToSic.Sxc.Conversion.DataToDictionary(Edit.Enabled) .Convert(App.Data[\"Persons\"]); } } The custom controller BooksController must have the same name as the file and extends the ApiController controller. It has a method returning all items of the Persons data type. The method is decorated with several attributes: [HttGet] defines that the method must be invoked with HTTP GET [DnnModuleAuthorize(AccessLevel = ...)] defines the permission an invoker must have [ValidateAntiForgeryToken] ensures that a security token from the cookies is validated before the mehod is invoked The custom controller can be called with JavaScript like this: <!-- this ensures the $2sxc scripts are loaded --> @Edit.Enable(js: true) <!-- the button which loads everything --> <button type=\"button\" class=\"btn btn-primary\" onclick=\"getPersons(this)\"> Get Persons Custom </button> <script> // this script does the API call and then shows the result function getPersons(moduleContext) { $2sxc(moduleContext) .webApi.get('app/auto/api/books/persons') .then(function (results) { alert('Found ' + results.length + ' persons. \\n' + 'The first one is \"' + results[0].FirstName + ' ' + results[0].LastName + '\"\\n\\n' + 'The raw JSON: \\n' + JSON.stringify(results) ); }); } </script> The $2sxc API ensures that the GET request is send to the correct url /DesktopModules/2sxc/API/app/auto/api/Books/Persons . You can also read more about the sxc Controller . The Awesomeness of these API Controllers First and foremost, these API controllers let you run your code as you wish. But there's a lot more that make this the ideal choice for your code: Fast Development without ever Restarting 2sxc Web API Controllers are stored in your app as pure source code, and you can edit them at runtime. They will be compiled on the fly and don't require Dnn to restart. The built in source-code editor in 2sxc lets you make simple changes through your browser. And if you want more power then just open it in Visual Studio or Visual Studio Code. Simple Distribution and Tweaking 2sxc Apps can easily be exported and imported to other solutions. What's also typical is that new copies of the App may need some modifications to better suit the new needs. Since the C# files are included as source you can easily adapt the controllers to your needs. All 2sxc Objects Initialized Much of the productivity with 2sxc comes with the fact that so much is already done. When you create custom 2sxc Web APIs you automatically get everything like App and Data objects prepared for the context your code is running in. Notes Instead of App.Data[\"MyData\"] you can fetch data from another data source provided by 2sxc (for exmple from the App.Query[\"MyQueryData\"] ) Sxc.Serializer.Prepare(...) converts the object returned by App.Data[\"MyData\"].List to a dynamic and serializable object Recommended Reading Web API Tutorials WebApi Concepts: Polymorphisms History Introduced in 2sxc 06.05 Enhanced with Polymorph Editions in 2sxc 9.35 (allowing subfolder/api)"
  },
  "net-code/web-api/custom-web-api-security.html": {
    "href": "net-code/web-api/custom-web-api-security.html",
    "title": "Security & Permissions in Custom WebAPIs | 2sxc 13 / EAV 13",
    "keywords": "Security & Permissions in Custom WebAPIs Important This page explains how security is configured in custom WebAPI controllers. But there is much more to security, so please read Security for 2sxc WebAPI and REST APIs as well. Custom WebAPI Security is configured using Attributes . These attributes can be placed on the class (in which case they apply to all actions/methods of that class) or on a specific method (in which case it only applies to that method). This example will NOT respond to Anonymous requests from outside: using System.Web.Http; public class BasicController : ToSic.Sxc.Dnn.ApiController { [HttpGet] public string Hello() { return \"Hello from the basic controller in /api\"; } } This example from the dnn web api tutorials will: using System.Web.Http; [AllowAnonymous] // define that all commands can be accessed without a login public class BasicController : ToSic.Sxc.Dnn.ApiController { [HttpGet] public string Hello() { return \"Hello from the basic controller in /api\"; } } And this example as well: using System.Web.Http; public class BasicController : ToSic.Sxc.Dnn.ApiController { [HttpGet] [AllowAnonymous] // only his command can be accessed without a login public string Hello() { return \"Hello from the basic controller in /api\"; } } Common Security Attributes for Custom WebAPI Controllers The exact set of attributes varies a bit on Dnn and Oqtane, but we're working on a unified set. As of now, these attributes are common in Dnn. You can apply all to both classes and methods: [AllowAnonymous] This allows non-identified users to use this endpoint. requires using System.Web.Http; [SupportedModules(\"2sxc,2sxc-app\")] This says to only respond to requests if they originate from a 2sxc module or a 2sxc-app Module. Note that this will only work if the Module Context is known. requires using DotNetNuke.Web.Api; [ValidateAntiForgeryToken] Verifies that the RequestVerificationToken in the header is valid. These requests will be blocked if the Anti-Forgery-Token is missing, invalid or is meant for another user. Note: this means such requests can only be called from a JS on a Dnn page requires DotNetNuke.Web.Api; [DnnModuleAuthorize(AccessLevel = SecurityAccessLevel.Admin)] In place of the SecurityAccessLevel.Admin you can also use SecurityAccessLevel.Anonymous or other values . Note that this will only work if the Module Context is known. requires using DotNetNuke.Web.Api; Common Other Attributes (HttpGet, HttpPost, HttpDelete) These attributes [HttpGet] , [HttpPost] and [HttpDelete] are not really security attributes, but because they often lead to problems we figured we should mention them. Adding these to your method means that your method will listen to the Verbs mentioned, and only to these verbs. So a method like this: using System.Web.Http; public class BasicController : ToSic.Sxc.Dnn.ApiController { [HttpGet] [HttpDelete] public string Hello() { return \"Hello from the basic controller in /api\"; } } ...will only respond to GET and DELETE requests, but not to POST . Using Multiple Attributes You can use many attributes on the same class or method like this: [HttpGet] [ValidateAntiForgeryToken] [SupportedModules(\"2sxc,2sxc-app\")] [DnnModuleAuthorize(AccessLevel = SecurityAccessLevel.Admin)] { return \"Hello from the basic controller in /api\"; } In most cases it will do exactly what you expect - and each condition must be met for the command to process. Common Mistakes Combining HttpGet with ValidateAntiForgeryToken Warning Combining [HttpGet] and [ValidateAntiForgeryToken] will fail, as GET requests cannot add custom headers. Deny Access at Class level and Allowing at Method Level Warning Class level attributes are handled first, and if these result in denying the request then method-level attributes won't be checked. Using Context-Requiring-Attributes for External Access Warning Certain tags like [DnnModuleAuthorize(...)] or [SupportedModules(...)] require a context . If you plan to use the API from outside of the site (like from a mobile app) then those requests will not have the context, and fail. Using ValidateAntiForgeryToken for External Access Warning Classes/methods decorated with [ValidateAntiForgeryToken] will require the token, which is only available for calls made by JavaScript on the page itself. If you plan to use the API from outside of the site (like from a mobile app) then those requests will fail. Read also DotNet WebApi Security for 2sxc WebAPI and REST APIs - understanding Security for all Web API calls Context for 2sxc WebAPI and REST APIs - every request has a context, it's best you read up on that Demo App and further links You should find some code examples in this demo App Razor Web API tutorials REST and WebApi Tutorial Mobius Forms App History These security features have been part of Dnn since ca. Dnn 6.0"
  },
  "net-code/services/_history.html": {
    "href": "net-code/services/_history.html",
    "title": "History | 2sxc 13 / EAV 13",
    "keywords": "History 2sxc introduced Dependency Injection 1.1 in v9 (May 2017) Integrated with Oqtane DI in v12 (May 2021) GetService<T> pattern introduced for Razor/C# in v12 (May 2021) Upgraded to Dependency Injection 2.1 in v13 (Dec. 2021) Integrated with Dnn DI in v13 (Dec. 2021)"
  },
  "net-code/services/index.html": {
    "href": "net-code/services/index.html",
    "title": "C# Services | 2sxc 13 / EAV 13",
    "keywords": "C# Services 2sxc and EAV provide Services through Dependency Injection to get stuff done. <!-- Data Highlights --> <!-- ADAM --> <!-- Server --> <!-- Prepare --> <!-- Data Source --> <!-- Optimzers --> <!-- Process / Awesomize --> <!-- Libraries --> <!-- data formats --> <!-- Browser --> <!-- Frameworks --> <!-- App show parts --> <!-- Interact parts --> <!-- Edit parts --> <!-- Edit UI parts --> <!-- SPA parts --> <!-- Custom highlight boxes - can be controlled by in-page CSS --> you are here (click to zoom) - discover the stack .context-box-process .process-cs { visibility: visible; } Standard Services As of 2sxc 13+ we publish all services which your Razor / C# code usually uses on ToSic.Sxc.Services . This helps you figure out what's in the box - just go check it out. How Services Work Technically a service is just a .net object which does stuff for you. You can get Services in your C# code like this: using ToSic.Sxc.Services; var page = GetService<IPageService>(); Internally services may require additional information to work - like the current Page it's on etc. This happens almost by magic thanks to Dependency Injection . If this is new to you, you should read up on it . Integration with Dnn Services Dnn is still new to Dependency Injection. Because of this, there are some limitations if you want to get a Dnn service. For example: It requires that you use Dnn 9.4+ It also requires 2sxc v13 as that now fully integrations with Dnns Service Provider Not all Dnn Objects exist as services. You'll need to browse Dnn code to figure this out. Integration with Oqtane Services Oqtane started as a .net Core project so Dependency Injection is in it's DNA. Anything Oqtane has can be requested as a Service, but there are some caveats: If you're writing Blazor code then most services only exist as a proxy, the real work happens on the backend If you're writing server-side code then most services are available, but the name / signature may be a bit different than the Blazor service Create your own Service üëâ Check out Create Custom C# Services History 2sxc introduced Dependency Injection 1.1 in v9 (May 2017) Integrated with Oqtane DI in v12 (May 2021) GetService<T> pattern introduced for Razor/C# in v12 (May 2021) Upgraded to Dependency Injection 2.1 in v13 (Dec. 2021) Integrated with Dnn DI in v13 (Dec. 2021)"
  },
  "net-code/services/custom.html": {
    "href": "net-code/services/custom.html",
    "title": "Create Custom C# Services | 2sxc 13 / EAV 13",
    "keywords": "Create Custom C# Services You can create Custom C# Services in DLLs for Dnn and Oqtane. <!-- Data Highlights --> <!-- ADAM --> <!-- Server --> <!-- Prepare --> <!-- Data Source --> <!-- Optimzers --> <!-- Process / Awesomize --> <!-- Libraries --> <!-- data formats --> <!-- Browser --> <!-- Frameworks --> <!-- App show parts --> <!-- Interact parts --> <!-- Edit parts --> <!-- Edit UI parts --> <!-- SPA parts --> <!-- Custom highlight boxes - can be controlled by in-page CSS --> you are here (click to zoom) - discover the stack .context-box-process .process-cs { visibility: visible; } System Requirements Custom Services are compiled into a DLL They must register themselves at startup of the Application (Dnn, Oqtane) In DNN you must have at least Dnn 9.4 and 2sxc 13 In Oqtane any version of Oqtane and compatible 2sxc will do Constructor Requirements Any class / interface can be used as a Service, but there are some important requirements in regards to the Constructor: Your Service must have an empty constructor like MyService() ...or a constructor that only expects objects which themselves are known services, like MyService(ToSic.Sxc.Services.IConvertService converter) Register a Service in Dnn Dnn 9.4 introduces a new interface DotNetNuke.DependencyInjection.IDnnStartup . Use this to create a class which registers your services. Check out Andrew Hoeflings awesome tutorial . Register a Service in Oqtane Oqtane Server uses the interface Oqtane.Infrastructure.IServerStartup to register services ( docs ). Oqtane client uses the interface Oqtane.Service.IClientStartup for this ( docs )."
  },
  "net-code/search/index.html": {
    "href": "net-code/search/index.html",
    "title": "Customize the Search-Index Results (Dnn ‚ò¢Ô∏è only) | 2sxc 13 / EAV 13",
    "keywords": "Customize the Search-Index Results (Dnn ‚ò¢Ô∏è only) Dnn has a built-in search engine which crawls all the modules asking them for data. You can easily modify how data in your modules appear in the Dnn search results. Tip Before you start, make sure you understand how the Search Index and Customizations work . Note This document applies to 2sxc 12.02+. As of 2sxc 12 we only recommend this new approach using the separate code file. Previous versions used another mechanism which is deprecated. If you need to know more, read the Obsolete Razor docs. Programming a Search Mapper Here's an example of a SearchMapper.cs : using System; using System.Collections.Generic; using System.Linq; using ToSic.Sxc.Context; using ToSic.Sxc.Search; /* Custom code which views use to customize how dnn search treats data of that view. It's meant for customizing the internal indexer of the platform, _not_ for Google Search. To use it, create a custom code (.cs) file which implements ICustomizeSearch interface. You can also inherit from a DynamicCode base class (like Code12) if you need more functionality. For more guidance on search customizations, see https://r.2sxc.org/customize-search */ public class SearchMapper : Custom.Hybrid.Code12, ICustomizeSearch { /// <summary> /// Populate the search /// </summary> /// <param name=\"searchInfos\">Dictionary containing the streams and items in the stream for this search.</param> /// <param name=\"moduleInfo\">Module information with which you can find out what page it's on etc.</param> /// <param name=\"beginDate\">Last time the indexer ran - because the data you will get is only what was modified since.</param> public void CustomizeSearch(Dictionary<string, List<ISearchItem>> searchInfos, IModule moduleInfo, DateTime beginDate) { // Set this to true if you want to see logs of this search in the insights // Only do this while developing, otherwise you'll flood the logs and never see the important parts Log.Preserve = false; foreach (var si in searchInfos[\"AllPosts\"]) { var entity = AsDynamic(si.Entity); si.Title = \"Title: \" + entity.Title; si.QueryString = \"details=\" + entity.UrlKey; } // Remove not needed streams var keys = searchInfos.Keys.ToList(); foreach (var key in keys) { if (key != \"AllPosts\") { searchInfos.Remove(key); } } } } Basics to get Right The File name can be anything you want, but the class name must match it. Your code can be a simple C# class, but we recommend it inherits from Custom.Hybrid.Code12 ...because you then also get more objects like App or CmsContext You can also inherit from Custom.Dnn.Code12 which would give you the Dnn object but we don't suggest it, because you should use the CmsContext where possible. Your class must implement ToSic.Sxc.Search.ICustomizeSearch to inform the compiler that it can help with search mapping You must then implement public void CustomizeSearch(...) as shown in the example Understanding Search-Mapping Your code will receive the data which would otherwise just be passed to the Dnn Indexer. You can then modify it as you want and make changes like: Remove streams from the dictionary streamInfos - thereby dropping entire sets of Entities Remove Entities in a specific stream Change properties like the Title Change properties like the QueryString - this is great on list views where data is indexed in the list, but the link in the search results should go to a details page. Develop Search Customizations To create your search indexing code you'll probably need to tweak and test a few times. Note that the 2sxc Blog App shows you a real-life example of Search-Customizations. So once you've configured a View to use a custom Search-Mapper your work will usually consist of doing the following Making some changes Going into the Dnn Admin and flushing the search-index Then run the indexer and wait till it's completed Check the results or debug issues using the Dnn Events-Log or 2sxc Insights (see below) Debugging Search Indexing Two tools will help you to debug issues 1. Dnn Events Log Really bad issues (like if your code cannot compile) will be logged in the Dnn Events. So if your code isn't even running, check that. 2. 2sxc Insights 2sxc Insights will help you see what's happening exactly in your code when you need it. Warning By default the search index will not log its work in the Insights, because it would flood the logs and you wouldn't find the occurances which you need. Because of this, logging is disabled by default, and your code can activate it using Log.Preserve = true; Remember to add a bunch of logging like Log.Add(\"Got to here\"); etc. to verify everything works step-by-step. Common Issues Already Indexed Data is not Reindexed Often when you're playing with indexing customizations you'll re-run the indexer and expect to see the changed results - but it's still what was there before. This is because each Entity has a modified timestamp and only changed entities will be re-indexed. This is great for performance, but challenging when making changes. üëâ Remember to flush the Dnn Search Index before re-indexing to really see if your code worked. Search Index and Multilanguage (i18n) It's important to know that on multi-language sites, the module is indexed multiple times for each language. So just be aware of that. This event is called by the view-engine after calling CustomizeData and before passing the Data object to the Dnn Search Indexer. You can override this event to change how data is presented to the search, for example by bundling items together, or by giving items different URLs so that search knows that they are to appear on a sub-page. Tip 2sxc 11 introduces Code-Behind. You can now place the CustomizeSearch(...) method in the code-behind file. Discover More in the Razor Tutorials We have an rich series of Razor tutorials . You should really check them out üëç. How to use In your razor page (.cshtml file) you can add a script block implementing this, as follows: @using ToSic.Eav.Run; @using ToSic.Sxc.Dnn.Run; @using ToSic.Sxc.Search; @functions { // this method is optional - your code wouldn't need it, but it's in here to show how it would work together // the CustomizeData would be called first, and potentially modify what is in the Data-object public override void CustomizeData() { // Don't customize anything, nothing to customize in this case } /// <summary> /// Populate the search - ensure that each entity has an own url/page /// </summary> /// <param name=\"searchInfos\"></param> /// <param name=\"moduleInfo\"></param> /// <param name=\"startDate\"></param> public override void CustomizeSearch(Dictionary<string, List<ISearchItem>> searchInfos, IContainer moduleInfo, DateTime beginDate) { foreach (var si in searchInfos[\"Default\"]) { // tell the search system what url it should use in the result si.QueryString = \"mid=\"+ (moduleInfo as DnnContainer).Id + \"&feature=\" + si.Entity.EntityId; } } } The code above will skip customizing any data (but often you would want that too), then CustomizeSearch modifies the list of search-items before they are indexed. How it works In general everything will work automatically. This is what happens: 2sxc will retrieve the data added to this module 2sxc will call the CustomizeData() event if the template has such an event. In this event, your code can add more data to the module as needed. Note that during the search index, no Request-variables exist. So your method will cause an error if it does something like var x = Request[\"Category\"]. In case of an error, the index will still continue to work, but your changes to the data will fail To help you with this, a new property called Purpose was added. It tells you if this view/template was created for displaying or for indexing. 2sxc will then use the data and create SearchItems, ready to index. Each entity will be turned into a SearchItem Each Content-Type will have an own list (so you can differentiate between all the SearchItems for the Categories and the SearchItems for the Questions) Multi-Language is handled correctly, so the English index will contain the English content, etc. 2sxc will then call a CustomizeSearch() event, so your code could provide changes. A common scenario is to say that each entity (say each question) has a different URL (say a details-page). So even though all entities belong to the module (and Dnn only knows of this one module), the module can say that each entity has an own details page. One this is done, the SearchItems are converted to official SearchDocument-objects and handed over to Dnn Read also Purpose - which tells you why the current code is running so you could change the data added CustomizeData Demo App and further links You should find some code examples in this demo App FAQ with Categories More links: Description of the feature on 2sxc docs History Introduced in 2sxc 6.2 Added support for newer Dnn versions at a later time - not sure when Easier standalone .cs implementation introduced in 2sxc 12"
  },
  "basics/query/data-sources/share-point/index.html": {
    "href": "basics/query/data-sources/share-point/index.html",
    "title": "SharePoint DataSources | 2sxc 13 / EAV 13",
    "keywords": "SharePoint DataSources <!-- Data Highlights --> <!-- ADAM --> <!-- Server --> <!-- Prepare --> <!-- Data Source --> <!-- Optimzers --> <!-- Process / Awesomize --> <!-- Libraries --> <!-- data formats --> <!-- Browser --> <!-- Frameworks --> <!-- App show parts --> <!-- Interact parts --> <!-- Edit parts --> <!-- Edit UI parts --> <!-- SPA parts --> <!-- Custom highlight boxes - can be controlled by in-page CSS --> you are here (click to zoom) - discover the stack .context-box-summary .query { visibility: visible; } 2sic can help you with additional DataSources for SharePoint 2016/2019/Online. These are third-party DataSources and not part of 2sxc. They require a purchase of this DataSource. The Solution contains 2 DataSources SharePointList SharePointSearch History Created ca. 2017 for 2sxc 7 Continously updated for 2sxc 9 and 10 Latest Version for 2sxc 11.14"
  },
  "basics/query/data-sources/third-party.html": {
    "href": "basics/query/data-sources/third-party.html",
    "title": "Third-Party DataSources | 2sxc 13 / EAV 13",
    "keywords": "Third-Party DataSources <!-- Data Highlights --> <!-- ADAM --> <!-- Server --> <!-- Prepare --> <!-- Data Source --> <!-- Optimzers --> <!-- Process / Awesomize --> <!-- Libraries --> <!-- data formats --> <!-- Browser --> <!-- Frameworks --> <!-- App show parts --> <!-- Interact parts --> <!-- Edit parts --> <!-- Edit UI parts --> <!-- SPA parts --> <!-- Custom highlight boxes - can be controlled by in-page CSS --> you are here (click to zoom) - discover the stack .context-box-summary .query { visibility: visible; } Anybody can create additional DataSources for your use. They will require separate installation of the DataSource and may not be free. Our goal is to list the known stable DataSources of other parties here. Create and Add your DataSource To create your own DataSources check out the Custom DataSources . To add your DataSource to this list, please contact us . List of Third-Party DataSources The following list was updated April 2021 SharePointList DataSource Property Description Purpose Get data from a SharePoint List or Document Library Creator 2sic Free no Last Update 2021-04 2sxc Versions v7 - 11.14 Dnn Versions v7.4.2 - 9.* Details SharePoint DataSources SharePointSearch DataSource Property Description Purpose Run a Full-Text Search on SharePoint Creator 2sic Free no 2sxc Versions v7 - 11.14 Dnn Versions v7.4.2 - 9.* Details SharePoint DataSources"
  },
  "basics/configuration/settings/images/recipes.html": {
    "href": "basics/configuration/settings/images/recipes.html",
    "title": "Recipes in Image Resize Settings in 2sxc ‚ú® new! / BETA | 2sxc 13 / EAV 13",
    "keywords": "Recipes in Image Resize Settings in 2sxc ‚ú® new! / BETA <!-- Data Highlights --> <!-- ADAM --> <!-- Server --> <!-- Prepare --> <!-- Data Source --> <!-- Optimzers --> <!-- Process / Awesomize --> <!-- Libraries --> <!-- data formats --> <!-- Browser --> <!-- Frameworks --> <!-- App show parts --> <!-- Interact parts --> <!-- Edit parts --> <!-- Edit UI parts --> <!-- SPA parts --> <!-- Custom highlight boxes - can be controlled by in-page CSS --> you are here (click to zoom) - discover the stack .context-box-summary .data-configuration { visibility: visible; } Version 13.10 will introduce a new ImageService which can generate advanced multi-resolution img and picture tags. As the configuration can be quite complex, it is explained here: A Resize Recipe A resize recipe has the following values, most of which are optional: Resize Settings variants (string) - determines which variant resolutions will be provided width (int) size of the initial image before variants are applied Restrictions forFactor if set, the rule will only apply to images which should be resized to this factor forCss if set, the rule will only apply to images when the page uses this Css Framework forTag if set, the rule will only apply to this tag type - either img or source Additional Effects setWidth (bool) will add an appropriate width attribute to the img tag if width is known setHeight (bool) will add an appropriate height attribute to the img tag if height is known attributes (Dictionary<string, object>) lists additional tag-attributes to apply to the img tag This is an example of a simple resize recipe: { \"recipe\": { // Means the initial image will be 700px wide \"width\": 700, // This will generate 3 variants: 700px, 1400px and 350px \"variants\": \"1*, 2*, 0.5*\", \"attributes\": { // This will always add an img-fluid class to the img-tag \"class\": \"img-fluid\" } } } Variants variants is a string which tells us which variants to generate. It is comma-separated. There are three different ways to specify the variants: By multiplier - marked by * or no trailing character 1* means the original image will be used 2* means the image will be resized to 2 times its original size 0.5* means the image will be resized to half its original size By Pixel size marked by w 700w means the image will be resized to 700px wide 1400w means the image will be resized to 1400px wide 350w means the image will be resized to 350px wide By Screen Pixel Density marked by x 1x means the image will be used as is, for normal screen pixel density 2x means the image will be douled in size for 2x screen pixel density 3x means the image will be trippled in size for 3x screen pixel density Warning It's tempting to mix these, but only * and w can be combined. Trying to combine x (pixel density) with any of the others results in an invalid configuration which the browser cannot handle. It will not generate an error, but the browser will usually then just ignore the x variants. Adding Many Recipes A perfect resizing system must actually behave differently in many scenarios. Here are some reasons, why we need many recipes: If we use Bootstrap5 we may want to add the class img-fluid , but not if we use Tailwind If we want an image that fits 1/2 the content-area and we have Bootstrap5, then 100% is 1230px, but a 50% image is 600px because of paddings So a really amazing configuration will need a LOT of recipes - easily 10-20 per CssFramework. This is how it's done: { // Default Recipe \"recipe\": { \"width\": 1400, \"variants\": \"1*, 2*, 0.5*\", \"setWidth\": true, // Sub-Recipes, which inherit all the settings from main, unless they override it \"recipes\": [ { // This section would only affect Bootstrap5 \"forCss\": \"bs5\", \"width\": 1230, \"attributes\": { \"class\": \"img-fluid\" }, // Sub-Sub-Recipes, which inherit from the BS5 and from main, unless they override it \"recipes\": [ { \"forFactor\": \"1\", \"width\": 1230 }, { \"forFactor\": \"1/2\", \"width\": 600 }, { \"forFactor\": \"12/3\", \"width\": 400 }, { \"forFactor\": \"12/4\", \"width\": 300 } ] }, { // This section would only affect non-Bootstrap5, as that would match first \"setWidth\": false, // override default to false \"attributes\": { \"class\": \"img\" } } ] } } Tip Sub-Recipes inherit everything from the parents. This is so you are DRY - you don't have to repeat yourself. It's important to know that at runtime this is flattened to a table. So the hierarchy you see in the JSON is purely to make the configuration easier to write. Tip Attributes are cummulative, so if a parent-node has attributes and a child-node has other attributes, they will be merged. Child node attributes will replace parent node attributes. To reset an attribute which the parent had set already, use null on the child node. History Advanced Json configuration with Recipe added in v13.05, to be released v13.10"
  },
  "basics/configuration/settings/images/index.html": {
    "href": "basics/configuration/settings/images/index.html",
    "title": "Image Resize Settings in 2sxc | 2sxc 13 / EAV 13",
    "keywords": "Image Resize Settings in 2sxc <!-- Data Highlights --> <!-- ADAM --> <!-- Server --> <!-- Prepare --> <!-- Data Source --> <!-- Optimzers --> <!-- Process / Awesomize --> <!-- Libraries --> <!-- data formats --> <!-- Browser --> <!-- Frameworks --> <!-- App show parts --> <!-- Interact parts --> <!-- Edit parts --> <!-- Edit UI parts --> <!-- SPA parts --> <!-- Custom highlight boxes - can be controlled by in-page CSS --> you are here (click to zoom) - discover the stack .context-box-summary .data-configuration { visibility: visible; } This explains the Settings which will be used by subssystemms which... ...generate links for the Image Resizer using the Link.Image(...) API ...generate img and picture tags using the IImageService It is part of the System Settings . Settings seen here start with System.Images. ... Predefined Image Settings - Overview These are the names of the predefined configurations. You can always create your own and give them other names (like Blog ) or override these settings. You can do this at the global, site or app level. Content for any kind of images in the normal content of a page Lightbox for images which should open in a lightbox - usually almost full-screen Screen for images which cover the entire screen, like page-background images Section for images used in page sections, like parallax backgrounds Configurations on these Settings Each of these settings have the following properties: Width determines how wide an image should be - this should always be set, as it's very important for image resizing Height determines how tall an image should be - in most cases this should be empty AspectRatio also determines the height of the image, but using a factor of the width - so 2:1 means twice as wide ResizeMode how images are resized on the server - typically crop is what is used ScaleMode determines if resizing also happens, if the desired size is larger than the original image (upscaling) Advanced a complex JSON configuration used for advanced tuning of resizing and generation of img and picture tags. It uses the ImageService . üëâ see Recipes in Image Resize Settings in 2sxc ‚ú® new! / BETA Note We recommend to use AspectRatio instead of Height to determine the image height, as it often makes a more consistent look and feel. If both Height and AspectRatio are set, then AspectRatio takes precendence. Values in the Images Settings of v12.04 and later Part Key Value in Default Introduced Comments Images.Content v12.04 For sizing Content-Images Images.Content Width # 1400 v12.04 Full-Content-Width images Images.Content Height # 865 v12.04 Based on golden ratio Images.Content Quality # 75 v12.04 Good average jpg/png compression Images.Content AspectRatio # 1.618 v12.04 Golden Ratio Images.Content ResizeMode $ crop v12.04 Will fill area exactly Images.Content ScaleMode $ both v12.04 Up-scale small images Images.Content Advanced $ {...complex...} v13.10 Sizes to use for SrcSets Images.Lightbox v12.04 For Lightbox-Images Images.Lightbox Width # 2000 v12.04 Full-screen Lightboxes Images.Lightbox Height # 1500 v12.04 4:3 Images.Lightbox Quality # 75 v12.04 Good average jpg/png compression Images.Lightbox AspectRatio # 1.333 v12.04 4:3 Images.Lightbox ResizeMode $ max v12.04 Will keep image shape Images.Lightbox ScaleMode $ down v12.04 Only down-scale, never up-scale Images.Lightbox Advanced $ {...complex...} v13.10 Sizes to use for SrcSets Images.Screen v12.04 For Screen-Size related images like backgrounds Images.Screen Width # 2000 v12.04 Full-Content-Width images Images.Screen Height # 1500 v12.04 4:3 Images.Screen Quality # 60 v12.04 Stronger jpg/png compression Images.Screen AspectRatio # 1.333 v12.04 4:3 Images.Screen ResizeMode $ crop v12.04 Will fill area exactly Images.Screen ScaleMode $ both v12.04 Up-scale small images Images.Screen Advanced $ {...complex...} v13.10 Sizes to use for SrcSets Images.Section v12.04 For Backgrounds in Content-Area Images.Section Width # 1600 v12.04 Full-Content-Width images Images.Section Height # 1200 v12.04 Based on golden ratio Images.Section Quality # 60 v12.04 Stronger jpg/png compression Images.Section AspectRatio # 1.333 v12.04 4:3 Images.Section ResizeMode $ crop v12.04 Will fill area exactly Images.Section ScaleMode $ both v12.04 Up-scale small images Images.Section Advanced $ {...complex...} v13.10 Sizes to use for SrcSets History Full Settings Stack introduced in v12.04 and includes the here mentioned Image settings Advanced Json configuration with recipes added in v13.05"
  },
  "basics/configuration/settings/settings-webresources.html": {
    "href": "basics/configuration/settings/settings-webresources.html",
    "title": "WebResources in Settings Stack ‚ú® new! | 2sxc 13 / EAV 13",
    "keywords": "WebResources in Settings Stack ‚ú® new! <!-- Data Highlights --> <!-- ADAM --> <!-- Server --> <!-- Prepare --> <!-- Data Source --> <!-- Optimzers --> <!-- Process / Awesomize --> <!-- Libraries --> <!-- data formats --> <!-- Browser --> <!-- Frameworks --> <!-- App show parts --> <!-- Interact parts --> <!-- Edit parts --> <!-- Edit UI parts --> <!-- SPA parts --> <!-- Custom highlight boxes - can be controlled by in-page CSS --> you are here (click to zoom) - discover the stack .context-box-summary .data-configuration { visibility: visible; } WebResources are JS/CSS libraries which your code will use, like Fancybox4 . These can be managed in Settings to ensure that it can be changed as needed, and that all Apps will load the same versions . Important WebResources are not Resources. WebResources are JS/CSS needed in the browser. Resources are i18n language resources for multi-language assets. See also App Resources . The following Resources are pre-configured in Settings: Web Resource Added in 2sxc Comments Bootstrap4 v12.04 Bootstrap5 v12.04 fancybox3 v12.04 fancybox4 v12.04 FontAwesome5 v12.04 You can override these configurations in the Settings at any level you want. Tip You can also just configure a WebResource to be deactivated ( Enabled = false ). You would do this if the skin already loads the assets you need. Usually your code will activate it using the IPageService . You can also access the values in Razor directly, like this: @Settings.WebResources.Bootstrap4.Enabled (will be true) History Settings WebResources introduced in 2sxc 12.04"
  },
  "basics/configuration/settings/google-maps.html": {
    "href": "basics/configuration/settings/google-maps.html",
    "title": "GoogleMaps Settings in 2sxc | 2sxc 13 / EAV 13",
    "keywords": "GoogleMaps Settings in 2sxc <!-- Data Highlights --> <!-- ADAM --> <!-- Server --> <!-- Prepare --> <!-- Data Source --> <!-- Optimzers --> <!-- Process / Awesomize --> <!-- Libraries --> <!-- data formats --> <!-- Browser --> <!-- Frameworks --> <!-- App show parts --> <!-- Interact parts --> <!-- Edit parts --> <!-- Edit UI parts --> <!-- SPA parts --> <!-- Custom highlight boxes - can be controlled by in-page CSS --> you are here (click to zoom) - discover the stack .context-box-summary .data-configuration { visibility: visible; } Tip This documentation is for 2sxc 12.04+. For older versions, consult this checklist . 2sxc include centralized settings for Google Maps. This ensures that people testing 2sxc can install/use apps which show maps. It also lets you set the API-Key and other settings at Global, Site or App level. Background Various Apps include templates which show Google Maps. Since 2016, Google requires all new domains using maps to first get a key. Because of this, the included maps include a demo-key which works, but you shouldn't use it in production. Consequences if you don't Replace the Key If you only disable the warning we added to the JS, then it would work for a short time. But it will randomly fail some time in the future, when your site is live. So don't try that. Why will it fail randomly? The included key can only generate a few thousand maps per day. If people start using it in production, then these maps will be added up. So every day a few thousand maps will work, and the rest will fail. This will feel very random, because all the maps generated on other sites are counted too. üëâ So you must use your own maps API key How to Change the API Key History Global Maps Settings introduced in v12.04"
  },
  "abyss/platforms/index.html": {
    "href": "abyss/platforms/index.html",
    "title": "Platforms | 2sxc 13 / EAV 13",
    "keywords": "Platforms 2sxc runs on the following platforms:"
  },
  "abyss/platforms/differences.html": {
    "href": "abyss/platforms/differences.html",
    "title": "Platform Differences | 2sxc 13 / EAV 13",
    "keywords": "Platform Differences This is a temporary documentation. We'll try to collect differences in behavior and APIs of all the supported platforms and how to work around limitations of each. App / File Management App files ‚ò¢Ô∏è Dnn places App folders in the [PortalRoot]/2sxc/[AppName] eg. /Portals/0/2sxc/Blog5 üíß Oqtane places App folders in /2sxc/[SiteId]/[AppName] eg. /2sxc/1/Blog5 ADAM Files (Automatic Digital Asset Management) ‚ò¢Ô∏è Dnn places ADAM assets in the [PortalRoot]/adam/[AppName] eg. /Portals/0/adam/[AppName] üíß Oqtane places ADAM assets in /Content/Tenants/[TenantId]/Sites/[SiteId]/adam/[AppName] eg. /Content/Tenants/1/Sites/1/adam/Blog5 Razor API Dnn uses ASP.net Framework MVC v.3 which is much older than Oqtane, but 95% is compatible. Feature Dnn Oqtane Compatibility Notes / Alternatives @helper ‚úÖ ‚õî .net 4 create a separate file for each helper and use Html.Partial(...) Dnn object ‚úÖ ‚õî Dnn only Use CmsContext , a bit more limited. For Oqtane features use Dependency Injection. Html.Raw(...) ‚úÖ ‚úÖ all .net RenderPage(...) ‚úÖ ‚õî .net 4 Use Html.Partial(...) instead Html.Partial(...) ‚úÖ ‚úÖ .net core Polyfill added to Dnn in 2sxc 12 Request object ‚úÖ ‚õî .net 4 .net core uses a much longer name ViewContext.HttpContext.Request Request.QueryString ‚úÖ ‚õî .net 4 .net core uses a much longer name ViewContext.HttpContext.Request.Query CmsContext.Page.Parameters ‚úÖ ‚úÖ 2sxc 12 Use this for cross-platform QueryString params Razor 2sxc API These are 2sxc APIs which are often used in Razor. Feature Dnn Oqtane Compatibility Notes / Alternatives Link.To(...) ‚úÖ ‚úÖ 2sxc 6 works cross-platform CreateInstance(.cs) ‚úÖ ‚úÖ 2sxc 10 works cross-platform CreateInstance(.cshtml) ‚úÖ ‚õî Dnn only Doesn't make sense on .net core, use .cs Code.Something() ‚úÖ ‚õî 2sxc 11 Doesn't make sense on .net core, use .cs Sub-View Data Feature Dnn Oqtane Compatibility Notes / Alternatives Model object ‚õî ‚úÖ .net core Use DynamicModel PageData object ‚úÖ ‚õî .net 4.5 Use DynamicModel DynamicModel ‚úÖ ‚úÖ 2sxc 12 Works in old & new RazorBlade Extension Feature Dnn Oqtane Compatibility Notes / Alternatives Tag object ‚úÖ ‚úÖ - Tags object ‚úÖ ‚úÖ - Text object ‚úÖ ‚úÖ - HtmlPage object ‚úÖ ‚õî - Use IPageService IPageService ‚úÖ ‚úÖ 2sxc 12.02 see IPageService Koi Extension Feature Dnn Oqtane Compatibility Notes / Alternatives Koi static object ‚úÖ ‚õî Not supported Use Dependency Injection version of Koi 2 Koi ICss Service ‚úÖ ‚úÖ v12.01 New Koi 2. See ICss Koi 2 supports the CSS Information API, but not the class-generating API. We probably won't implement it, as it was too complicated. Not yet Implemented features in Oqtane CustomizeData / CustomizeSearch are not implemented yet, we're not yet sure how we want to implement this RazorBlade feature to change page title or set headers etc. cannot work yet WebAPIs We should probably create a list of viable base classes and explain the differences REST APIs No relevant differences, except that the root paths to the APIs are different. This is automatically handled if you use 2sxc, and for external code you can get the exact endpoints in the admin UI. JavaScript Differences No relevant differences, except that Oqtane doesn't include jQuery by default. If you need jQuery, activate it using the IPageService . CSS-Frameworks / HTML Differences No relevant differences. Note that Oqtane by default uses Bootstrap5 so the output may look a bit different. Image Resizing In Oqtane, only ADAM files can use the ImageResizer. Files from the normal file management cannot use it. History Last update 2021-10-25 with regards to 2sxc 12.06 LTS"
  },
  "abyss/parts/look-up/sources.html": {
    "href": "abyss/parts/look-up/sources.html",
    "title": "LookUp Sources | 2sxc 13 / EAV 13",
    "keywords": "LookUp Sources <!-- Data Highlights --> <!-- ADAM --> <!-- Server --> <!-- Prepare --> <!-- Data Source --> <!-- Optimzers --> <!-- Process / Awesomize --> <!-- Libraries --> <!-- data formats --> <!-- Browser --> <!-- Frameworks --> <!-- App show parts --> <!-- Interact parts --> <!-- Edit parts --> <!-- Edit UI parts --> <!-- SPA parts --> <!-- Custom highlight boxes - can be controlled by in-page CSS --> you are here (click to zoom) - discover the stack .context-box-summary .lookup-sources { visibility: visible; } The LookUp System will use the LookUp Engine to retrieve values for Queries and more. The LookUp engine will parse tokens like [Module:ModuleId] and then look for a LookUp Source with the matching name, in this case Module . For this to be possible, the Engine has a list of named sources like Module QueryString Params etc. On this page we'll explain how these work, and what special sources exist. LookUp Sources These are the sources which are automatically included in 2sxc App Sources App - the current App, which can give you folders (to link JS files) ‚ò¢Ô∏èü©∏ App:Settings - app settings ‚ò¢Ô∏èü©∏ App:Resources - app resources, translated labels etc. ‚ò¢Ô∏èü©∏ Web Server and System Sources Hybrid These work both on Dnn and Oqtane (2sxc 12+) [Query] ‚ò¢Ô∏èü©∏ Web Server and System Sources QueryString - url parameters ‚ò¢Ô∏è Form - form post parameters ‚ò¢Ô∏è DateTime - current date/time information ‚ò¢Ô∏èü©∏ CMS / Dnn Sources [Site] [Page] [Module] Portal - the current Dnn portal Tab - the current Dnn page Module - the current Dnn module User Information Sources User Membership User Profile Token Template Sources In Token Templates we also have 3 special lookups Content - the current content Content:Presentation - presentation settings of the current content, if configured ListContent ? ListContent:Presentation AnyNameYouWant specified in a <repeat> tag Query Sources In Queries we also have the following sources In Params DataSource Settings Source In DataSources code you will usually only work with Settings which contain all the settings that specific DataSource should work with. The Settings source only exists in your C# code, not in the VisualQuery. Settings What is a LookUp Source (technical ‚ö†) LookUp Sources are ILookUp objects and have a Name like like QueryString , Module , Portal etc. Each one is capable of retrieving values like Id or DefaultPage . So the Engine will ask the specific source for the expected value and the source will try to find it. If it has an answer, it will return that. If it doesn't find anything it will return null and let the Engine take care of fallback options. Tip Everything is lazy, so these objects are only accessed and populated if the parameter is actually needed. This results in great performance. All LookUp objects implement the ILookUp interface and inherit the LookUpBase object. Internal LookUp Objects (technical ‚ö†) Just to give you an idea of the power of LookUp objects, here are some in use: LookUpInEntity - this resolves entity values. LookUpInNameValueCollection - this resolves from name/value lists like Dictionary or Request.QueryString objects LookUpInMetadata - will get values from Metadata of something LookUpInLookUps - will look up values in various attached LookUp objects LookUpInDataTarget - will look up a value from an In stream of a DataSource LookUpInDnnPropertyAccess - will look up stuff in Dnn specific PropertyAccess objects, which are similar to LookUp objects LookUpInEntity - will look up things in an IEntity and also provide more information like Count, IsFirst, etc. for the Token Engine Also Read LookUp System History General Tokens introduced in 2sxc 1.0 Most enhancements were in 2sxc 07.00"
  },
  "abyss/parts/look-up/lookup-web.html": {
    "href": "abyss/parts/look-up/lookup-web.html",
    "title": "Web / Server / HTTP LookUps | 2sxc 13 / EAV 13",
    "keywords": "Web / Server / HTTP LookUps <!-- Data Highlights --> <!-- ADAM --> <!-- Server --> <!-- Prepare --> <!-- Data Source --> <!-- Optimzers --> <!-- Process / Awesomize --> <!-- Libraries --> <!-- data formats --> <!-- Browser --> <!-- Frameworks --> <!-- App show parts --> <!-- Interact parts --> <!-- Edit parts --> <!-- Edit UI parts --> <!-- SPA parts --> <!-- Custom highlight boxes - can be controlled by in-page CSS --> you are here (click to zoom) - discover the stack .context-box-summary .lookup-sources { visibility: visible; } There are three Sources for web parameters which can be used in LookUps: QueryString - for url parameters Form - for fields in the http-post Server - for HTTP Server_... variables QueryString Tokens Extended Standard Tokens The following tokens are still very \"normal\" but not part of the common Dnn tokens. They work in 2sxc - but not in many Dnn-Tools Token Description Result [QueryString:<Url-Param-Name>] String - [QueryString:TabId] String - this demo shows the TabId which is in the QueryString because of the internal URL-Rewrite. 730 [QueryString:Category] String - click here to see effect Form Tokens Form Tokens only exist if the request was a Post. Token Description Result [Form:<Form-Param-Name>] Form post values. Usually not needed, but if you do need it, it's here. - History Params added in 2sxc ca. v2 Enhanced with Settings/Resources ca. v4"
  },
  "abyss/parts/look-up/lookup-user.html": {
    "href": "abyss/parts/look-up/lookup-user.html",
    "title": "User Information LookUps | 2sxc 13 / EAV 13",
    "keywords": "User Information LookUps <!-- Data Highlights --> <!-- ADAM --> <!-- Server --> <!-- Prepare --> <!-- Data Source --> <!-- Optimzers --> <!-- Process / Awesomize --> <!-- Libraries --> <!-- data formats --> <!-- Browser --> <!-- Frameworks --> <!-- App show parts --> <!-- Interact parts --> <!-- Edit parts --> <!-- Edit UI parts --> <!-- SPA parts --> <!-- Custom highlight boxes - can be controlled by in-page CSS --> you are here (click to zoom) - discover the stack .context-box-summary .lookup-sources { visibility: visible; } Dnn has various LookUps built in, which won't be available on Oqtane: User - current user information Membership - ASP.net user information Profile - user profile (values not in the normal User object) User Tokens Token Description Result [User:DisplayName] User‚Äôs Display Name [User:Email] User‚Äôs Email Address [User:FirstName] User‚Äôs First Name [User:FullName] (deprecated) [User:LastName] User‚Äôs Last Name [User:Username] User‚Äôs Login User Name Membership Tokens Token Description Result [Membership:Approved] Is User Approved? [Membership:CreatedOnDate] User Signup Date [Membership:IsOnline] Is User Currently Online? User Profile Tokens Token Description Result [Profile:<property>] Use any default or custom Profile Property as listed in Profile Property Definition section of Manage User Accounts. Use non-localized Property Name only. - Other Dnn Token Sources Note that according to the Dnn-Source-Code there are a total of 11 sources (status 2015-05-05). The ones not mentioned here but are relevant to the User are: Culture History Params added in 2sxc ca. v2"
  },
  "abyss/parts/look-up/lookup-settings.html": {
    "href": "abyss/parts/look-up/lookup-settings.html",
    "title": "Settings LookUp in DataSources | 2sxc 13 / EAV 13",
    "keywords": "Settings LookUp in DataSources <!-- Data Highlights --> <!-- ADAM --> <!-- Server --> <!-- Prepare --> <!-- Data Source --> <!-- Optimzers --> <!-- Process / Awesomize --> <!-- Libraries --> <!-- data formats --> <!-- Browser --> <!-- Frameworks --> <!-- App show parts --> <!-- Interact parts --> <!-- Edit parts --> <!-- Edit UI parts --> <!-- SPA parts --> <!-- Custom highlight boxes - can be controlled by in-page CSS --> you are here (click to zoom) - discover the stack .context-box-summary .lookup-sources { visibility: visible; } The Settings LookUp is special because it's only used in C# on DataSources . The VisualQuery Designer can show the user a unique edit-dialog for each data source. The data itself is then stored as an Entity, and when the DataSource is being built in the Query engine, the Settings for that data-source are made available on the Settings LookUp. You usually need this in the ConfigMask . Read also VisualQuery Parameters History In added in 2sxc 07.00"
  },
  "abyss/parts/look-up/lookup-dnn.html": {
    "href": "abyss/parts/look-up/lookup-dnn.html",
    "title": "Dnn Specific LookUps | 2sxc 13 / EAV 13",
    "keywords": "Dnn Specific LookUps <!-- Data Highlights --> <!-- ADAM --> <!-- Server --> <!-- Prepare --> <!-- Data Source --> <!-- Optimzers --> <!-- Process / Awesomize --> <!-- Libraries --> <!-- data formats --> <!-- Browser --> <!-- Frameworks --> <!-- App show parts --> <!-- Interact parts --> <!-- Edit parts --> <!-- Edit UI parts --> <!-- SPA parts --> <!-- Custom highlight boxes - can be controlled by in-page CSS --> you are here (click to zoom) - discover the stack .context-box-summary .lookup-sources { visibility: visible; } Dnn has various LookUps built in, which won't be available on Oqtane: Portal - Everything about the current Portal Tab - information about the current Page Module - information about the current Module Portal Tokens Note: Dnn ‚ò¢Ô∏è only The following tokens are common Dnn/DotNetNuke tokens which should work everywhere tokens are in use. Some very common extensions are in the other view Extended Tokens. Token Description Result [Portal:Currency] Currency String USD [Portal:Description] Portal Description [Portal:Email] Portal Admin Email the.admin@2sxc.org [Portal:FooterText] Portal Copyright Text Copyright 2019 by DotNetNuke Corporation [Portal:HomeDirectory] Portal Path (relative) of Home Directory /App-Demos/ [Portal:LogoFile] Portal Path to Logo File [Portal:PortalName] Portal Name Dnn / DotNetNuke App Demos [Portal:PortalAlias] Portal URL [Portal:TimeZoneOffset] Difference in Minutes between Portal Default Time and UTC Token Description Result [Profile:<property>] Use any default or custom Profile Property as listed in Profile Property Definition section of Manage User Accounts. Use non-localized Property Name only. - Tab Tokens Note: Dnn ‚ò¢Ô∏è only Token Description Result [Tab:Description] Page Description Text for Search Engine [Tab:EndDate] Page Display Until Date **** [Tab:FullUrl] Page Full URL https://2sxc.org/dnn-app-demos/en/Apps/Tutorial-Tokens [Tab:IconFile] Page Relative Path to Icon File [Tab:KeyWords] Page Keywords for Search Engine [Tab:PageHeadText] Page Header Text * [Tab:StartDate] Page Display from Date **** [Tab:TabName] Page Name Tutorial - Tokens [Tab:TabPath] Page Relative Path //Apps//Tutorial-Tokens [Tab:Title] Page Title (Window Title) [Tab:URL] Page URL Module Tokens Note: Dnn ‚ò¢Ô∏è only Token Description Result [Module:Description] Module Definition Description 2sxc App is an extension that allows to install and use a 2sxc app. [Module:EndDate] Module Display Until Date **** [Module:Footer] Module Footer Text [Module:FriendlyName] Module Definition Name App [Module:Header] Module Header Text [Module:HelpURL] Module Help URL [Module:IconFile] Module Path to Icon File [Module:ModuleTitle] Module Title App [Module:PaneName] Module Name of Pane (where the module resides) ContentPane [Module:StartDate] Module Display from Date **** Other Dnn Token Sources Note that according to the Dnn source code there are a total of 11 sources per 2015. The ones not mentioned here are: Culture Host History Params added in 2sxc ca. v2"
  },
  "abyss/parts/look-up/lookup-datetime.html": {
    "href": "abyss/parts/look-up/lookup-datetime.html",
    "title": "DateTime LookUps | 2sxc 13 / EAV 13",
    "keywords": "DateTime LookUps <!-- Data Highlights --> <!-- ADAM --> <!-- Server --> <!-- Prepare --> <!-- Data Source --> <!-- Optimzers --> <!-- Process / Awesomize --> <!-- Libraries --> <!-- data formats --> <!-- Browser --> <!-- Frameworks --> <!-- App show parts --> <!-- Interact parts --> <!-- Edit parts --> <!-- Edit UI parts --> <!-- SPA parts --> <!-- Custom highlight boxes - can be controlled by in-page CSS --> you are here (click to zoom) - discover the stack .context-box-summary .lookup-sources { visibility: visible; } There is one DateTime Source which can be used in LookUps: DateTime Tokens Token Description Result [DateTime:Now] Current Date and Time 12/2/2019 3:05 AM [DateTime:System] Current Date and Time of the System 12/2/2019 3:05 AM [DateTime:UTC] Current Date and Time on UTC 12/2/2019 3:05 AM [Ticks:Now] CPU Tick Count for Current Second 637108851369920459 [Ticks:Today] CPU Tick Count since Midnight 637108416000000000 [Ticks:TicksPerDay] CPU Ticks per Day (for calculations) 864000000000 For Date/Time and numeric values, you can also append a string defined by the .NET framework, for example: [DateTime:Now|] current Date/Time formatted according to , e.g. [DateTime:Now|f] displays current date in short format (does not apply to Calculated Column expressions) or [DateTime:Now|dd.MM.yyyy] in German date format. Text items may be formatted using {0}, e.g. [User:Displayname|Hello {0}]. You can also add alternative text that gets returned if the requested value is Null or empty: [Token:Property|Format|Alternative] e.g. [User:Displayname|Welcome Back,{0}|Hello Guest] History Params added in 2sxc ca. v2 Enhanced with Settings/Resources ca. v4"
  },
  "abyss/parts/look-up/lookup-cms.html": {
    "href": "abyss/parts/look-up/lookup-cms.html",
    "title": "Cms LookUps for Dnn ‚ò¢Ô∏è and Oqtane ü©∏ | 2sxc 13 / EAV 13",
    "keywords": "Cms LookUps for Dnn ‚ò¢Ô∏è and Oqtane ü©∏ <!-- Data Highlights --> <!-- ADAM --> <!-- Server --> <!-- Prepare --> <!-- Data Source --> <!-- Optimzers --> <!-- Process / Awesomize --> <!-- Libraries --> <!-- data formats --> <!-- Browser --> <!-- Frameworks --> <!-- App show parts --> <!-- Interact parts --> <!-- Edit parts --> <!-- Edit UI parts --> <!-- SPA parts --> <!-- Custom highlight boxes - can be controlled by in-page CSS --> you are here (click to zoom) - discover the stack .context-box-summary .lookup-sources { visibility: visible; } The following lookups are new in v12 and work across platforms for both Dnn ‚ò¢Ô∏è and Oqtane ü©∏: <!-- ## `Tenant` Tokens | Token | Dnn | Oqtane | Description | Result | --- | :-: | :-: | --- | --- | `[Tenant:Id]` | ‚úÖ | ‚úÖ | | `[Tenant:Guid]` | - | - | future feature | - --> Site Tokens (new in v12 ‚ò¢Ô∏èü©∏) Token Dnn Oqtane Description Result [Site:Id] ‚úÖ ‚úÖ [Site:Guid] ? ‚úÖ Page Tokens (new in v12 ‚ò¢Ô∏èü©∏) Token Dnn Oqtane Description Result [Page:Id] ‚úÖ ‚úÖ [Page:Guid] ? ? tbd Module Tokens Note: these are the module tokens which work in both Dnn & Oqtane. In Dnn the Module tokens will provide more options - check out Dnn Module Tokens . History Params added in 2sxc v12"
  },
  "js-code/quick-e/quicke.html": {
    "href": "js-code/quick-e/quicke.html",
    "title": "Html & JS: quickE - Quick Edit 2.0 | 2sxc 13 / EAV 13",
    "keywords": "Html & JS: quickE - Quick Edit 2.0 <!-- Data Highlights --> <!-- ADAM --> <!-- Server --> <!-- Prepare --> <!-- Data Source --> <!-- Optimzers --> <!-- Process / Awesomize --> <!-- Libraries --> <!-- data formats --> <!-- Browser --> <!-- Frameworks --> <!-- App show parts --> <!-- Interact parts --> <!-- Edit parts --> <!-- Edit UI parts --> <!-- SPA parts --> <!-- Custom highlight boxes - can be controlled by in-page CSS --> you are here (click to zoom) - discover the stack .context-box-summary .edit-custom { visibility: visible; } quickE (pronounced quicky) is the quick-edit feature inside 2sxc to quickly add / move modules and inner content blocks. This page explains the In-Browser things you must know, incl. JSON configuration Concept and Background For this please read Concept-Quick-Edit , which also explains how to include it in a Skin etc. How to use Assuming that the $quickE is already on the page and you're logged on, there is not much to do for now. Note that the internal API of $quickE is still prone to change, so anything you do which isn't officially documented could brake on a future upgrade. Configuring quickE Quick-Edit in HTML Since quickE 2.0 (released in 2sxc 8.7) you can now also configure it a bit. Here are the most important features enable / disable the entire quickE enable / disable module quick-edit enable / disable inner-block quick edit To do this, just add a quick-edit-config=\"{...}\" attribute to any DOM node with the desired configuration. Here's what will happen if you add it to a skin-dom-node, you can set \"defaults\" like \"never enable at all\" if you add it to a view-template, you can change the behavior if that view is included Why include configuration it in a View? As explained above, quickE changes it's behavior by default if it finds inner-content. This is desired on details-views, but not on templates which just create more complex content on a normal page. So on these templates, you could add a config to continue enabling module-quick-edit. The Configuration Object Structure config = { enable: true, // default buttons: { addApp: true, addContent: true, select: true, paste: true, delete: true, move: true, }, modules: { enable: null // auto-detect, can also be true/false buttons: { // same structure as above, if not set, defaults to the main settings }, }, innerBlocks: { enable: null // auto-detect, can also be true/false buttons: { // same structure as above, if not set, defaults to the main settings }, } } A Quick Razor Example If you want to add this attribute only when the user is editing the page, the best way to do it is like this: <div @Edit.Attribute(\"quick-edit-config\", new { modules = new { enable = true }})> ... </div> or this <div @Edit.Attribute(\"quick-edit-config\", new { buttons = new { select = false}, modules = new { enable = true, buttons = new { addApp = false }}})> ... </div> Read also Inner Content Blocks - blog about inner content-blocks Demo App and further links You should find some code examples in this demo App Accordion (collapsible sections) 2sxc blog History Introduced in 2sxc v08.04 Enhanced / made configurable in 2sxc 08.06.01 Added ability to specify each button in 2sxc 11.11.03"
  },
  "js-code/dnn/jquery.html": {
    "href": "js-code/dnn/jquery.html",
    "title": "JQuery in Dnn and 2sxc | 2sxc 13 / EAV 13",
    "keywords": "JQuery in Dnn and 2sxc <!-- Data Highlights --> <!-- ADAM --> <!-- Server --> <!-- Prepare --> <!-- Data Source --> <!-- Optimzers --> <!-- Process / Awesomize --> <!-- Libraries --> <!-- data formats --> <!-- Browser --> <!-- Frameworks --> <!-- App show parts --> <!-- Interact parts --> <!-- Edit parts --> <!-- Edit UI parts --> <!-- SPA parts --> <!-- Custom highlight boxes - can be controlled by in-page CSS --> you are here (click to zoom) - discover the stack .context-box-summary .frameworks-js { visibility: visible; } Often you'll need and want jQuery, but when you don't it shouldn't be loaded for performance reasons. Tip Removing jQuery and jQueryUI will boost your mobile PageSpeed like crazy. So only include it on pages where you really need it. How Dnn Auto-Loades jQuery There is some history to this which we'll explain briefly. Dnn made jQuery a first-class citizen around Dnn 4, and since then most of the UI was jQuery based. For a while there even was a standard that buttons etc. should be built and styled with jQuery UI. That is not the case any more. You can now easily run Dnn (at least in browsing mode, not editing) without jQuery. But because jQuery was always there developers never noticed that they could leave it away, and many parts like Templates would simply rely on them. There were also many things that automatically added jQuery but were never noticed. Here some important examples: 2sxc always used the ServicesFramework of Dnn which internally auto-added jQuery Most Dnn websites use popups for login, and just doing this automatically adds jQueryUI and jQuery to the page. You can easily stop this using the recipe Remove jQueryUI from my page In case your code is running on a page without jQuery but you need it, your code should tell Dnn that you want jQuery, like this: Warning Don't manually add urls to the jQuery files, make sure you use the official API. This should help you prevent loading jQuery multiple times and avoid conflicts between jQuery version. Tip If you do need a newer version of jQuery, that is possible but needs some tweaking to get them to run side-by-side. It's done using the jQuery.noConflict() . How 2sxc loads jQuery in Dnn Up until 2sxc 10.24, every 2sxc module automatically loaded jQuery because 2sxc used the ServicesFramework of Dnn Starting from 2sxc 10.25 old templates auto-load jQuery for backward compatibility. This includes token-templates and Razor templates which don't have an @inherits statement at the beginning. Anything new done using the RazorComponent will not do that unless your template code requests it. In 2sxc 10.25 and newer, all core features of 2sxc don't need jQuery. So anonyomus browsing of your site won't require jQuery at all, even if you're doing API calls or using the $2sxc javascript API . But what you do need (if you're using the new RazorComponent ) is to tell 2sxc that you plan to use JavaScript and APIs, so that 2sxc can add the stuff to the page to make the magic happen. This is done with this line in your razor code: @Edit.Enable(js:true) Because 2sxc doesn't use jQuery any more for normal stuff, this will have the following effect: Add a special header to the page containing information needed for API calls Load the 2sxc.api.min.js in the correct way It's important to note that this will not load jQuery."
  },
  "js-code/custom-fields/index.html": {
    "href": "js-code/custom-fields/index.html",
    "title": "How To Create Custom Input Fields (v11.2) | 2sxc 13 / EAV 13",
    "keywords": "How To Create Custom Input Fields (v11.2) <!-- Data Highlights --> <!-- ADAM --> <!-- Server --> <!-- Prepare --> <!-- Data Source --> <!-- Optimzers --> <!-- Process / Awesomize --> <!-- Libraries --> <!-- data formats --> <!-- Browser --> <!-- Frameworks --> <!-- App show parts --> <!-- Interact parts --> <!-- Edit parts --> <!-- Edit UI parts --> <!-- SPA parts --> <!-- Custom highlight boxes - can be controlled by in-page CSS --> you are here (click to zoom) - discover the stack .context-box-summary .edit-ui-custom { visibility: visible; } Sometimes you want a custom input field - as color-picker, dropdown-from-api or whatever. Tip 2sxc 11 finally allows you to do this using simple WebComponents Registering these happens by placing them in a specific folder You can also make them configurable by placing a content-type json in another folder Note There are more ways to provide and register custom input fields - like when you need them globally across many apps and portals. That is not discussed here. Quick-Start Video and Tutorial If you're new here, best watch this video: Then check out the tutorials . What kind of Custom Input Field can you Create You can create any kind of custom input field, as a JavaScript WebComponent. Look and Feel however you want it Any kind of JS code Talking to any other system (Google Maps, etc.) Talking to any endpoint (weather APIs) Tip This overview will get you started, but we've already created demos on the 2sxc Tutorials . If you want to know more, you should also read the specs Getting Started with Custom Input Fields Basically a custom Input Field is just a index.js in the correct folder. These are the specs: An input field as described here is an App Extension . All App Extensions must each lie in an own folder... within a folder called system inside the App folder The folder name for your custom input field must obey certain naming rules so that they are auto-detected. The javascript that will be loaded must be called index.js Your script must register a custom element - a WebComponent - in the browser The name of your custom element is predefined, and must adhere to the naming rules. Here's a checklist to get this setup Note Once you have that setup, the input field is automatically detected and a user can choose it as a field type in the configuration. Some Background on WebComponents The WebComponent has a simple lifecycle - from when it's created to when it receives data and can push changes back to the form. The form itself is reactive. This means that your field will receive messages when the value changes or when other values change (in case you want to use other field values in your input). The API to communicate with the form has a few complexities you need to know. This is because the form is very dynamic - so the user could switch languages, and your input field needs to react to this. So let's get started üöÄ! Getting the HTML into the Custom Input WebControls are developed using pure JavaScript, but a control is automatically a rich DOM object. So your this object can do all kinds of DOM manipulations, but in most cases you'll just do something like this: this.innerHTML = 'Hello <em>world</em>!'; Now you have to wait with doing this, till your object has been added to the DOM, so you need to kick this off in the connectedCallback() like this: class EmptyHelloWorld extends HTMLElement { /* Constructor for WebComponents - the first line must always be super() */ constructor() { super(); } /* connectedCallback() is the standard callback when the component has been attached */ connectedCallback() { this.innerHTML = 'Hello <em>world</em>!'; } } Reading and Writing Values The 2sxc form will initialize your custom element and attach a connector object. This happens automatically, so you will have it once connectedCallback() is fired. This connector is a rich object with lots of stuff, but for your field value you need to know these bits connector.data.value gets you the current value connector.data.update(newValue) updates the form with the changed value connector.data.value$ is the observable version of the value - this is great for advanced use cases, but otherwise you can stick to the simple .value Tip Avoid calling update(...) if nothing changed - as it will make the form dirty, so the user will be asked if he wants to save when cancelling the dialog, even though nothing changed. Tip Check out this tutorial example of Pickr to see all this in action Loading Custom CSS and JS Libraries Since this is all standard JavaScript, you can do it anyhow you want. For example, to load some CSS we recommend that you simply add a <link> tag to your html, like this: <link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/@simonwep/pickr/dist/themes/classic.min.css\"/> For JavaScript you can do the same, either using a <script> tag or telling the browser to load the JS using DOM commands. We also provide a helper on connector.loadScript(name, url, callback) which does the following: Check if the name given in the first parameter exists on the window object (to check if it's already loaded) If not, load the script provided in the url Watch the window object using polling to see when the item with name is created Then trigger your callback function Tip Check out the tutorial example of Pickr to see all this in action Making your Fields Configurable Now you have a color-picker, but each field may require a different set of preconfigured colors. Or maybe your date picker has could optionally restrict dates to weekdays. In these cases, you need configuration specific for the field. Create Your own WYSIWYG Field WYSIWYG fields are very hard to do right. Basically you can simply create your own using the same principles as mentioned above. But we recommend that you use the existing WYSIWYG field provided by 2sxc and just change some of the configurations. Tip By just reconfiguring the existing 2sxc WYSIWYG you will benefit from ADAM file-upload and continuous updates to the main component. Here's what you need to know The WYSIWYG field is based on TinyMCE - so to make configuration changes, you'll need to understand that API pretty well. To change it, you need to create a wrapper component which contains the standard 2sxc-wysiwyg and give it different configurations. To do this, we are calling various methods on a reconfigure object of your wrapper - so you can override most of the defaults To learn more, best look at the tutorials and the API Basic tutorial, just providing 4 standard buttons Advanced tutorial adding a custom button WYSIWYG Reconfigure API"
  },
  "js-code/custom-fields/field-wysiwyg.html": {
    "href": "js-code/custom-fields/field-wysiwyg.html",
    "title": "Customizing the WYSIWYG Field in 2sxc 11 | 2sxc 13 / EAV 13",
    "keywords": "Customizing the WYSIWYG Field in 2sxc 11 <!-- Data Highlights --> <!-- ADAM --> <!-- Server --> <!-- Prepare --> <!-- Data Source --> <!-- Optimzers --> <!-- Process / Awesomize --> <!-- Libraries --> <!-- data formats --> <!-- Browser --> <!-- Frameworks --> <!-- App show parts --> <!-- Interact parts --> <!-- Edit parts --> <!-- Edit UI parts --> <!-- SPA parts --> <!-- Custom highlight boxes - can be controlled by in-page CSS --> you are here (click to zoom) - discover the stack .context-box-summary .edit-ui-custom { visibility: visible; } These are the technical specs for reference. Make sure you first read the how to before you start. Since WYSIWYG is so complex, with image-handling, special paste etc. we believe most developers are better of using the existing system, and just reconfiguring it. That's what we'll explain here. Make sure TinyMCE is loaded We must first load the standard WYSIWYG control before we start, otherwise you'll run into timing issues. The best way to do this can be seen in the tutorial , but this is what you need: const builtInWysiwyg = '[System:Path]/system/field-string-wysiwyg/index.js'; /** Our WebComponent which is a custom, lightweight wysiwyg editor */ class StringWysiwygCustom extends HTMLElement { /* connectedCallback() is the standard callback when the component has been attached */ connectedCallback() { // We need to ensure that the standard WYSIWYG is also loaded this.connector.loadScript('tinymce', builtInWysiwyg, (x) => { this.initWysiwygCallback() }) } initWysiwygCallback() { // ... } } This way the form will load the built-in WYSIWYG control and trigger your callback, OR if it has already been loaded, immediately trigger your callback. Configure the TinyMCE WYSIWYG Web Control The control has these public properties: mode - values can be edit and preview , default is preview connector - the object that every form control needs. You must connect this reconfigure a special object that can change the configuration at various points Code Sample: const tagName = 'field-string-wysiwyg-micro'; const builtInWysiwyg = '[System:Path]/system/field-string-wysiwyg/index.js'; /** Our WebComponent which is a custom, lightweight wysiwyg editor */ class StringWysiwygCustom extends HTMLElement { /* connectedCallback() is the standard callback when the component has been attached */ connectedCallback() { // We need to ensure that the standard WYSIWYG is also loaded this.connector.loadScript('tinymce', builtInWysiwyg, (x) => { this.initWysiwygCallback() }) } initWysiwygCallback() { // 1. Create a built-in field-string-wysiwyg control const wysiwyg = document.createElement('field-string-wysiwyg'); // 2. tell it if it should start in preview or edit wysiwyg.mode = 'edit'; // can be 'preview' or 'edit' // 3. attach connector wysiwyg.connector = this.connector; // 4. also attach reconfigure object which can change the TinyMCE as it's initialized wysiwyg.reconfigure = new WysiwygReconfigurator(); // 5. Append it to the DOM. Do this last, as it will trigger connectedCallback() in the wysiwyg this.appendChild(wysiwyg); } } /** The object which helps reconfigure what the editor will do */ class WysiwygReconfigurator { configureOptions(options) { options.toolbar = \"undo redo | bold italic\" return options; } } // Register this web component - if it hasn't been registered yet if (!customElements.get(tagName)) customElements.define(tagName, StringWysiwygCustom); connector Object for the connector object please consult connector API Understanding TinyMCE and Life-Cycle TincMCE has a huge set of options, so let's just get a quick idea of how things work inside it Once loaded, there is a global tinymce object which is like a master-controller for all tinyMCE editors. We call it the Editor Manager Each editor has a personal editor object which has the configuration for just that editor What is configured on tinymce ? The global tinymce controller is responsible for things like Translations options , including plugins which are activated skin and theme custom_elements ...and way more What is configured on an editor ? Buttons (for use in Toolbars) Toolbars ADAM and Dnn-Bridge Initialization Process / Life-Cycle This is how the control is loaded / built in the 2sxc/EAV form. Note that for each method explained on the reconfigure object, the initializers will do duck typing to check if that method exists and if detected, will run that. #1 Load Phase The field-string-wysiwyg WebControl is created At this time, the mode , connector and reconfigure must already be set by the parent It will requests that the from loads all the TinyMCE JavaScripts When that has completed, it will fire a callback to start translating / configuring #2 Translation Phase In this phase, translation maps are built, so buttons can show labels in various languages. This map is global, so try to avoid name clashes. First the built-in translations of 2sxc/EAV are added Then reconfigure.addTranslations(editorManager, currentLanguage) is called. In this phase you can add your own translations according to tinyMCE standards or modify prebuilt translations. #3 Manager Configuration Phase At the beginning reconfigure.managerInit(editorManager) is called so you can pre-initialize something. We don't really know why you would need this, but we added it just in case. Then the default options are generated Now reconfigure.optionsInit(options, buttonOptions) is called. Here you can change the objects as you need to add/remove options. the options are the standard tinyMCE options which have been prebuilt The buttonOptions are a special object which affects automatic button definitions. This is still WIP Now the configuration system builds more options based on the environment, features etc. Then it calls reconfigure.optionsReady(options) so you could make some final changes. Now tinymce (the Editor Manager) receives the options to start. This also includes a callback (provided by our form) which will do editor initialization. #4 Editor Configuration Phase When the tinyMCE editor is finally created, a callback or the wysiwyg is triggered. This will attach various events like init , focus , blur , change , undo etc. Once attaching these events is done, it calls reconfigure.editorBuilt(editor) so you could make changes. When init is triggered, it will first call reconfigure.editorInit(editor) so you can make changes or add buttons using the tinyMCE API. It will then run internal code to add all the button definitions like H1 , H2 etc. Then it asks for reconfigure.disablePagePicker and if not true , will attach the Dnn page picker It will also ask for reconfigure.disableAdam and if not true, will attach ADAM functionality How to Modify the Behavior Best check out these tutorials Basic tutorial, just providing 4 standard buttons Advanced tutorial adding a custom button History New system in 2sxc 11 using WebComponents (previously this was not possible)"
  },
  "js-code/custom-fields/connector.html": {
    "href": "js-code/custom-fields/connector.html",
    "title": "API of Connector Object in Custom Input Fields | 2sxc 13 / EAV 13",
    "keywords": "API of Connector Object in Custom Input Fields <!-- Data Highlights --> <!-- ADAM --> <!-- Server --> <!-- Prepare --> <!-- Data Source --> <!-- Optimzers --> <!-- Process / Awesomize --> <!-- Libraries --> <!-- data formats --> <!-- Browser --> <!-- Frameworks --> <!-- App show parts --> <!-- Interact parts --> <!-- Edit parts --> <!-- Edit UI parts --> <!-- SPA parts --> <!-- Custom highlight boxes - can be controlled by in-page CSS --> you are here (click to zoom) - discover the stack .context-box-summary .edit-ui-custom { visibility: visible; } The connector object provides values to your WebComponent and let's you communicate with the form. Here's the API you need: Background The connector object is attached by the form to your custom WebComponent before the connectedCallback() is triggered. So you can access it using this.connector . connector API data - a ConnectorData<T> object which has various properties you need to read/write values dialog - a ConnectorDialog<T> object which lets you open/close details-dialogs in your component field - contains a FieldConfig object telling you about the field, it's configuration etc. field$ - an observable with the field configuration, will emit a new FieldConfig whenever it changes loadScript(...) - a helper method to load additional javascript files _experimental - internal API for things which do not have a stable API yet connector.data Object The data object is of type ConnectorData<T> . It has these members: export interface ConnectorData<T> { /** Current value of the field */ value: T; /** * Client updates value in the host * @param newValue - New value of the field from the client */ update(newValue: T): void; /** * Client adds callback functions to be executed every time value changes in the host. * So call it to register your function which should run on change. * * Use this if you are not familier with observables. * @param callback - Function to be executed every time value changes in the host */ onValueChange(callback: (newValue: T) => void): void; /** * Observable on field value * Use this if you are familiar with observables. */ value$: Observable<T>; /** * Fired before form is saved. * It tells your control that the form is about to save, and that this is the last moment you can update the value. * Used in case your input doesn't always push changed values, like in WYSIWYG and other complex input fields which may buffer changes. */ forceConnectorSave$: Observable<T>; } connector.dialog Object This is the API to open a new dialog or close it again. /** * Responsible for opening/closing dialogs in a control. */ export interface ConnectorDialog<T> { /** * Opens a dialog and shows a WebComponent inside it. * * @param {string} [componentTag] name of the WebComponent which will be loaded inside the dialog */ open(componentTag?: string): void; /** * Closes the dialog */ close(): void; } connector.field FieldConfig Object This gives you information about the field. For simplity in maintaining the docs, here's a copy of the type file: export interface FieldConfig { /** Static name of the field */ name: string; /** Ordering index of the field inside the form */ index: number; /** Field label */ label: string; // updated on language change /** Field placeholder text */ placeholder: string; // never updated atm. Probably will be /** Input type of the field. e.g. string-default, string-dropdown, etc. */ inputType: string; /** Data type of the field. e.g. String, Hyperlink, Entity, etc. */ type: string; /** Tells whether the field is required */ required: boolean; // updated on language change /** Tells whether the field is disabled. This is the initial value that was set in settings for this field */ disabled: boolean; settings: FieldSettings; } connector.field and connector.field$ FieldConfig Object The connector.field object tells you how the field is configured. Note that if you use this object directly, you won't be notified of changes. For that you should use the connector.field$ stream. export interface FieldConfig { /** Static name of the field */ name: string; /** Ordering index of the field inside the form */ index: number; /** Field label */ label: string; // updated on language change /** Field placeholder text */ placeholder: string; // never updated atm. Probably will be /** Input type of the field. e.g. string-default, string-dropdown, etc. */ inputType: string; /** Data type of the field. e.g. String, Hyperlink, Entity, etc. */ type: string; /** Tells whether the field is required */ required: boolean; // updated on language change /** Tells whether the field is disabled. This is the initial value that was set in settings for this field */ disabled: boolean; /** * Settings of the field, as configured in the UI * This is just a normal dictionary-object with keys having the same names as the fields in the configuration dialog. * Note that most keys are PascalCase, not camelCase. */ settings: FieldSettings; } connector.loadScript() Method /** * Load a script into the browser - but only once. * Makes sure that script with the same source is loaded only once and executes callback. * * @param {string} globalObject - name on window.xxx which is checked if the js is already loaded * @param {string} src - path to the script * @param {(...args: any[]) => any} callback - your callback function * @memberof Connector */ loadScript(globalObject: string, src: string, callback: (...args: any[]) => any): void; Read Also How To Create Custom Input Fields Tutorials for Custom Input Fields History Introduced in 2sxc 11.02"
  },
  "js-code/commands/index.html": {
    "href": "js-code/commands/index.html",
    "title": "CMS Commands in JavaScript | 2sxc 13 / EAV 13",
    "keywords": "CMS Commands in JavaScript <!-- Data Highlights --> <!-- ADAM --> <!-- Server --> <!-- Prepare --> <!-- Data Source --> <!-- Optimzers --> <!-- Process / Awesomize --> <!-- Libraries --> <!-- data formats --> <!-- Browser --> <!-- Frameworks --> <!-- App show parts --> <!-- Interact parts --> <!-- Edit parts --> <!-- Edit UI parts --> <!-- SPA parts --> <!-- Custom highlight boxes - can be controlled by in-page CSS --> you are here (click to zoom) - discover the stack .context-box-summary .edit-custom { visibility: visible; } Whenever you press a button in the edit-ui, a edit-command is handled by the javascript layer. These commands are things like edit an item on the screen open the layout -picker dialog for a content-block To keep things simple, these commands all have the convention of using a short command name like new , some parameters like entityId which differ for each command and usually some context like this is happening in the module 7503 . How to use Tip These examples are fairly technical - in most cases you just want the commands for custom toolbars. You can find them below. In most cases you don't have to even think about this, because the hover-buttons will automatically call the command as needed. But there are cases where you may want to do so yourself - for example with very custom buttons or if you want to automate something. Here's an example: <!-- quick version with name only --> <a onclick=\"$2sxc(this).manage.run('layout', event)\"> change layout </a> <!-- expanded version --> <a onclick=\"$2sxc(this).manage.run({ action: 'layout' }, event)\"> change layout </a> <!-- expanded version with many params --> <a onclick=\"$2sxc(this).manage.run({ action: 'new', contentType: 'BlogPost' }, event)\"> createBlogPost </a> These examples example gets the $2sxc-controller related to the <a> tag using $2sxc(this) and thereby giving it a context so it knows what module-id, etc. Then it executes the command. Here's a fairly realistic setup using Razor and custom buttons in HTML: @if(Edit.Enabled) { <ol> <li> <a onclick='$2sxc(this).manage.run({\"action\": \"layout\"})'>layout</a> </li> <li> <a onclick='$2sxc(this).manage.run({\"action\": \"new\", \"contentType\": \"Dummy\"})'>new</a> </li> <li> <a onclick='$2sxc(this).manage.run({\"action\": \"edit\", \"entityId\": @Content.EntityId})'>edit #@Content.EntityId</a> </li> <li> <a onclick='$2sxc(this).manage.run({\"action\": \"edit\", \"useModuleList\": true, \"sortOrder\": 0 })'>edit slot 0 of module list</a> </li> <li>manage table of <a onclick='$2sxc(this).manage.run({\"action\": \"contentitems\"})'>items of the type used in this template</a> or of <a onclick='$2sxc(this).manage.run({\"action\": \"contentitems\", contentType: \"Quotes\"})'>Quotes</a> </li> </ol> } Maybe you also want to put the command-construction in more code, like this: // the function which does this function openLayout(moduleId){ var command = { action: \"layout\" } $2sxc(moduleId).manage.run(command); } // the jquery call to do this on-load $(function() { openLayoutOnPageLoad(740); }) Running a Command Always use the sxc-controller of a module, then access the .manage.run(...) method to run a command. There are 3 calls you can use: run(\"layout\") - for simple commands requiring only the name run(\"new\", { contentType: \"BlogPost\" }) - for additional parameters run({ action: \"new\", contentType: \"BlogPost\" }) - does the same as above run(..., event) - if you had an event like click, it's best to always include it as last parameter Some Examples Every action in the UI is a command, and for it to run, it must know a few things, like var sxc = $2sxc(7523); // get sxc for moduleId 7523 var newCommand = { action: \"new\", contentType: \"BlogPost\" }; sxc.manage.run(newCommand); var editItemCommand = { action: \"edit\", entityId: 760 }; sxc.manage.run(editItemCommand); var editSlot7Params = { useModuleList: true, sortOrder: 7 }; sxc.manage.run(\"edit\", editSlot7Params); Command With Custom Code There is a command called custom which is meant to be used for this. Check out the example on Custom Code All Commands & Parameters (todo - update) To understand the internals, check out the source code . These are the currently available actions and their parameters: Action Name Purpose Description and Parameters new Edit Open the edit-dialog for a new content-item. * contentType Then it needs either the ID...: * entityId ...or it needs the position within the list: * useModuleList: true * sortOrder: [number] (important so it knows the position add Edit Adds a content-item to the current list of items, right below the item where it was clicked. * useModuleList: true (required to be true for it to work) * sortOrder: [number] (important so it knows the position) add-existing Edit New in 11.01. Adds a content-item to the current list of items, right below the item where it was clicked. But to do this, it shows the user a list of existing items. edit Edit Opens the edit-dialog. If the item is module-content it may also open the presentation-item as well. It needs either the ID...: * entityId ...or it needs the position within the list: * useModuleList: true * sortOrder: [number] (important so it knows the position dash-view - internal, don't use this app-import Manage Open the app-import dialog to import a new app. * [no parameters] metadata Edit todo - more documentation delete Edit delete (not just remove) a content-item. Needs: * entityId * entityGuid * entityTitle remove List Removes an item from a list of items. * useModuleList: true (required to be true for it to work) * sortOrder: [number] (important so it knows the position) moveup List Move a content-item up one position in the list * useModuleList: true (required to be true for it to work) * sortOrder: [number] (important so it knows the position) movedown List Move a content-item down one position in the list * useModuleList: true (required to be true for it to work) * sortOrder: [number] (important so it knows the position) instance-list List Open a dialog to manually re-order items in a list. (note: in older versions was called \"sort\" publish Edit Tells the system to update a content-items status to published. If there was a published and a draft before, the draft will replace the previous item. replace Edit Slot Only available on module-assigned content items. Will open the dialog to assign a different content-item in this slot. *‚Ä¶ <!-- <tr height=\"20\" style=\"height:15.0pt\"> <td height=\"20\" class=\"xl6522490\" align=\"left\" width=\"130\" style=\"height:15.0pt; width:98pt;font-size:11.0pt;color:black;font-weight:400;text-decoration:none; text-underline-style:none;text-line-through:none;font-family:Calibri\">item-history</td> <td class=\"xl6522490\" align=\"left\" width=\"84\" style=\"width:63pt;font-size:11.0pt; color:black;font-weight:400;text-decoration:none;text-underline-style:none; text-line-through:none;font-family:Calibri\">Versioning</td> <td class=\"xl6522490\" align=\"left\" width=\"436\" style=\"width:327pt;font-size:11.0pt; color:black;font-weight:400;text-decoration:none;text-underline-style:none; text-line-through:none;font-family:Calibri\">Review previous versions of this item and restore if necessary.</td> </tr> --> layout Design Opens the in-page dialog to change the layout of the current content. * [no parameters needed] template-develop Develop Opens the template-editor dialog in a new window. (note: in older versions was called \"develop\") template-query Develop Opens the pipeline/query-designer in a new window. It's invisible on content, and disabled if no pipeline is configured. template-settings Develop Change settings on the template currently used. contentitems Admin Opens the dialog to manage content-items for the current template. Will use the settings of the current template to open. * contentType (optional) - name of data-type to manage/open contenttype Develop Opens the dialog to view or change the current content-type, meaning you can change what fields it has, their types etc. app Admin Opens the app-admin dialog. app-settings Admin Opens the edit dialog for the app-settings. It's disabled if the app doesn't have setting-values to configure. app-resources Admin Opens the edit for app-resources (multi-language texts, labels etc.). It's disable if the app doesn't have resource-values to configure. zone Admin Opens the manage all apps dialog. custom Special Execute custom javascript * customCode - some JS like \"alert('hello');\" more Ui Only needed in toolbars, creates a \"‚Ä¶\" button which flips through the menu-buttons. <!--[if supportMisalignedColumns]--> <!--[endif]--> Beta Features Work in Progress: ContentItems with Filters Work in Progress: Delete Work in Progress: Code Demo App and further links You should find some code examples in this demo App JS Manage / Toolbar API Tutorial App Blog post about Calling commands from links History Used inside 2sxc since 01.00 Official API since 2sxc 08.06"
  },
  "js-code/commands/delete.html": {
    "href": "js-code/commands/delete.html",
    "title": "delete Command | 2sxc 13 / EAV 13",
    "keywords": "delete Command <!-- Data Highlights --> <!-- ADAM --> <!-- Server --> <!-- Prepare --> <!-- Data Source --> <!-- Optimzers --> <!-- Process / Awesomize --> <!-- Libraries --> <!-- data formats --> <!-- Browser --> <!-- Frameworks --> <!-- App show parts --> <!-- Interact parts --> <!-- Edit parts --> <!-- Edit UI parts --> <!-- SPA parts --> <!-- Custom highlight boxes - can be controlled by in-page CSS --> you are here (click to zoom) - discover the stack .context-box-summary .edit-custom { visibility: visible; } This button let's a user really delete a content item (since 2sxc 8.9). How to use Here's a basic example showing a 2sxc-toolbar with a custom code: @Edit.Toolbar(toolbar: new { action = \"delete\", entityId = tag.EntityId, entityGuid = tag.EntityGuid, entityTitle = tag.EntityTitle }) The previous example just renders a delete-button. Here's an example creating an entire toolbar, incl. the delete-button. @Edit.Toolbar(Content, toolbar: new { entityId = Content.EntityId, entityGuid = Content.EntityGuid, entityTitle = Content.EntityTitle }) Note that for the delete-button to appear, the following conditions must be met: It is not an module-assigned item (also knows as content-mode), because in this case the item is in use, and it cannot be quick-deleted anyhow It has an entityId - used to show to the user to help him be sure he's deleting the right item It has an entityTitle - also shown to the user to be sure he's deleting the right thing It has an entityGuid - used as the ID when deleting the data as an extra level of security. Notes and Clarifications requires id, title and guid. otherwise the button won't appear Read also commands Demo App and further links todo History Introduced in 2sxc v08.09"
  },
  "api/dot-net/ToSic.Eav.DataFormats.EavLight.EavLightEntityReference.html": {
    "href": "api/dot-net/ToSic.Eav.DataFormats.EavLight.EavLightEntityReference.html",
    "title": "Class EavLightEntityReference | 2sxc 13 / EAV 13",
    "keywords": "Class EavLightEntityReference DTO for a relationship pointer to other entities. Used in preparing Entities for Basic-JSON serialization. Inheritance System.Object EavLightEntityReference Namespace : ToSic.Eav.DataFormats.EavLight Assembly : ToSic.Eav.ImportExport.dll Syntax [InternalApi_DoNotUse_MayChangeWithoutNotice(\"DTO objects are only publicly documented but can change with time. You usually will not need them in your code. \")] public class EavLightEntityReference Fields | Improve this Doc View Source Guid Declaration [JsonProperty(NullValueHandling = NullValueHandling.Ignore)] public Guid? Guid Field Value Type Description System.Nullable < System.Guid > | Improve this Doc View Source Id Declaration [JsonProperty(NullValueHandling = NullValueHandling.Ignore)] public int? Id Field Value Type Description System.Nullable < System.Int32 > | Improve this Doc View Source Title Declaration [JsonProperty(NullValueHandling = NullValueHandling.Ignore)] public string Title Field Value Type Description System.String"
  },
  "api/dot-net/ToSic.Eav.Data.IEntitiesSource.html": {
    "href": "api/dot-net/ToSic.Eav.Data.IEntitiesSource.html",
    "title": "Interface IEntitiesSource | 2sxc 13 / EAV 13",
    "keywords": "Interface IEntitiesSource This marks something which can give a list of entities. Usually used for lazy-loading data, where the source is attached, but the data isn't loaded yet. Inherited Members ICacheExpiring.CacheChanged(Int64) ITimestamped.CacheTimestamp Namespace : ToSic.Eav.Data Assembly : ToSic.Eav.Core.dll Syntax [InternalApi_DoNotUse_MayChangeWithoutNotice(\"this is just fyi\")] public interface IEntitiesSource : ICacheExpiring, ITimestamped Properties | Improve this Doc View Source List Declaration IEnumerable<IEntity> List { get; } Property Value Type Description System.Collections.Generic.IEnumerable < IEntity >"
  },
  "api/dot-net/ToSic.Eav.Caching.ICacheKey.html": {
    "href": "api/dot-net/ToSic.Eav.Caching.ICacheKey.html",
    "title": "Interface ICacheKey | 2sxc 13 / EAV 13",
    "keywords": "Interface ICacheKey Marks objects which can identify what cache it's for. For example, when parameters change what data is cached, then the cache-key can contain this parameter, so that a different cache is used based on changing parameters. Namespace : ToSic.Eav.Caching Assembly : ToSic.Eav.Core.dll Syntax [InternalApi_DoNotUse_MayChangeWithoutNotice(\"this is just fyi\")] public interface ICacheKey Properties | Improve this Doc View Source CacheFullKey Combination of the current key and all keys of upstream cached items, to create a long unique key for this context. Declaration string CacheFullKey { get; } Property Value Type Description System.String Full key containing own partial key and upstream keys. | Improve this Doc View Source CachePartialKey Unique key-id for this specific situation - could be the same for all instances, or could vary by some parameter. Declaration string CachePartialKey { get; } Property Value Type Description System.String A string which is specific to this cache-item."
  },
  "api/dot-net/ToSic.Eav.Apps.Assets.html": {
    "href": "api/dot-net/ToSic.Eav.Apps.Assets.html",
    "title": "Namespace ToSic.Eav.Apps.Assets | 2sxc 13 / EAV 13",
    "keywords": "Namespace ToSic.Eav.Apps.Assets Everything related to assets in an EAV/2sxc App. It's the foundation for ToSic.Sxc.Adam . You will probably not use most of this. Interfaces IAsset Any asset (file/folder) of the EAV App System. This interface contains properties which both IFolder and IFile have in common IFile Describes a file asset as provided by the underlying environment (like DNN) IFolder Describes a folder as provided by the underlying environment (like DNN)"
  },
  "api/dot-net/Custom.Oqtane.html": {
    "href": "api/dot-net/Custom.Oqtane.html",
    "title": "Namespace Custom.Oqtane | 2sxc 13 / EAV 13",
    "keywords": "Namespace Custom.Oqtane Custom.Oqtane Namespace for Oqtane ü©∏ This contains all the base classes for your own solutions, which are targeted to Oqtane ü©∏. Versioned Base Classes All the base classes in this have a version number, so it will become easier to document differences between versions and also to give guidance how to upgrade in case of future breaking changes or security issues. Note: Not everything documented Because of technical issues we cannot auto-generate the docs for all the classes here, sorry. Classes (documented manually) Api12 The base class for APIs which only need to work in Oqtane. They internally inherit from Microsoft.AspNetCore.Mvc.Controller and in addition to all the DynamicCode properties also have all the features of that base class. Code12 The base class for custom code. If you inherit from this class, you'll automatically have all the properties from DynamicCode . Razor12 The base class for custom Razor. If you inherit from this class, you'll automatically have all the properties from DynamicCode . Razor12<TModel> The base class for custom Razor. If you inherit from this class, you'll automatically have all the properties from DynamicCode . Classes Razor12 The base class for Razor files in Oqtane. As of 2sxc 12.0 it's identical to Razor12 , but in future it may have some more Oqtane specific features."
  },
  "api/dot-net/ToSic.Sxc.Services.IImageService.html": {
    "href": "api/dot-net/ToSic.Sxc.Services.IImageService.html",
    "title": "Interface IImageService | 2sxc 13 / EAV 13",
    "keywords": "Interface IImageService BETA Service to help create responsive img and picture tags the best possible way. This service helps you generate advanced HTML for responsive / resized images. Warning This is Beta functionality and still work in progress. This means the APIs can still change until it's final. It's awesome, so have fun trying it out. But note that if you already use it, you may need make changes after an upgrade. Namespace : ToSic.Sxc.Services Assembly : ToSic.Sxc.dll Syntax [InternalApi_DoNotUse_MayChangeWithoutNotice(\"Still WIP\")] public interface IImageService : ICanDebug Remarks History: BETA Released ca. 2sxc 13.10 Methods | Improve this Doc View Source Img(Object, Object, String, Object, Object, String, String, Object) Get a Responsive Image object which you can then either just show, or use to construct a more customized output as you need it. The resulting object can just be added to the html, like @img or you can work with sub-properties as specified in the IResponsiveImage Declaration IResponsiveImage Img(object link = null, object settings = null, string noParamOrder = \"Rule: All params must be named (https://r.2sxc.org/named-params)\", object factor = null, object width = null, string imgAlt = null, string imgClass = null, object recipe = null) Parameters Type Name Description System.Object link What should be in this, can be: a string url, in which case it would be used if url is not specified a IDynamicField in which case it would be used if field is not specified System.Object settings A standardized Image-Settings object like Settings.Images.Content - see http://r.2sxc.org/settings The name of a settings configuration, like \"Content\" or \"Screen\" Or a dynamic object containing settings properties (this can also be a merged custom + standard settings) Or a specially prepared IResizeSettings object containing all settings. Note: If you need to construct very custom settings, use Settings(Object, String, Object, Object, Object, Object, String, String, String, Object, String, Object) to create them System.String noParamOrder see Convention: Named Parameters System.Object factor A multiplier, usually used to create urls which resize to a part of the default content-size. Eg. 0.5. System.Object width System.String imgAlt alt attribute on the created img tag for SEO etc. System.String imgClass class attribute on the created img tag System.Object recipe Optional recipe = instructions how to create the various variants of this link. Can be any one of these: string containing variants Rule object TODO: DOCS not quite ready Returns Type Description IResponsiveImage A ResponsiveImage object which can be rendered directly. See Responsive Images API in .net Remarks History: Added in 2sxc 13.03 | Improve this Doc View Source ImgOrPic(Object, Object, String, Object, Object, String, String, Object) Determine the best scenario (has multiple formats or not) and then return either an img (if it is not resizable and/or not multiple formats) or a picture The resulting object can just be added to the html, like @img or you can work with sub-properties as specified in the IResponsiveImage Declaration IResponsiveImage ImgOrPic(object link = null, object settings = null, string noParamOrder = \"Rule: All params must be named (https://r.2sxc.org/named-params)\", object factor = null, object width = null, string imgAlt = null, string imgClass = null, object recipe = null) Parameters Type Name Description System.Object link What should be in this, can be: a string url, in which case it would be used if url is not specified a IDynamicField in which case it would be used if field is not specified System.Object settings A standardized Image-Settings object like Settings.Images.Content - see http://r.2sxc.org/settings The name of a settings configuration, like \"Content\" or \"Screen\" Or a dynamic object containing settings properties (this can also be a merged custom + standard settings) Or a specially prepared IResizeSettings object containing all settings. Note: If you need to construct very custom settings, use Settings(Object, String, Object, Object, Object, Object, String, String, String, Object, String, Object) to create them System.String noParamOrder see Convention: Named Parameters System.Object factor A multiplier, usually used to create urls which resize to a part of the default content-size. Eg. 0.5. System.Object width System.String imgAlt alt attribute on the created img tag for SEO etc. System.String imgClass class attribute on the created img tag System.Object recipe Optional recipe = instructions how to create the various variants of this link. Can be any one of these: string containing variants Rule object TODO: DOCS not quite ready Returns Type Description IResponsiveImage A ResponsiveImage object which can be rendered directly. See Responsive Images API in .net Remarks History: Added in 2sxc 13.03 | Improve this Doc View Source Picture(Object, Object, String, Object, Object, String, String, Object) Get a Responsive Picture object which you can then either just show, or use to construct a more customized output as you need it. The resulting object can just be added to the html, like @pic or you can work with sub-properties as specified in the IResponsivePicture . Important: This call only allows you to set the most common parameters factor and width . For other parameters like height , aspectRatio , quality etc. create Settings Settings(Object, String, Object, Object, Object, Object, String, String, String, Object, String, Object) and pass them in. Declaration IResponsivePicture Picture(object link = null, object settings = null, string noParamOrder = \"Rule: All params must be named (https://r.2sxc.org/named-params)\", object factor = null, object width = null, string imgAlt = null, string imgClass = null, object recipe = null) Parameters Type Name Description System.Object link What should be in this, can be: a string url, in which case it would be used if url is not specified a IDynamicField in which case it would be used if field is not specified System.Object settings A standardized Image-Settings object like Settings.Images.Content - see http://r.2sxc.org/settings The name of a settings configuration, like \"Content\" or \"Screen\" Or a dynamic object containing settings properties (this can also be a merged custom + standard settings) Or a specially prepared IResizeSettings object containing all settings. Note: If you need to construct very custom settings, use Settings(Object, String, Object, Object, Object, Object, String, String, String, Object, String, Object) to create them System.String noParamOrder see Convention: Named Parameters System.Object factor A multiplier, usually used to create urls which resize to a part of the default content-size. Eg. 0.5. System.Object width System.String imgAlt alt attribute on the created img tag for SEO etc. System.String imgClass class attribute on the created img tag System.Object recipe Optional recipe = instructions how to create the various variants of this link. Can be any one of these: string containing variants Rule object TODO: DOCS not quite ready Returns Type Description IResponsivePicture A ResponsivePicture object which can be rendered directly. See Responsive Images API in .net Remarks History: Added in 2sxc 13.03 | Improve this Doc View Source Recipe(String) Declaration Recipe Recipe(string variants) Parameters Type Name Description System.String variants Returns Type Description Recipe | Improve this Doc View Source Recipe(Recipe, String, String, Int32, String, Dictionary<String, Object>, IEnumerable<Recipe>, Nullable<Boolean>, Nullable<Boolean>, String, String, String) Declaration Recipe Recipe(Recipe recipe, string noParamOrder = \"Rule: All params must be named (https://r.2sxc.org/named-params)\", string name = null, int width = 0, string variants = null, Dictionary<string, object> attributes = null, IEnumerable<Recipe> recipes = null, bool? setWidth = default(bool? ), bool? setHeight = default(bool? ), string forTag = null, string forFactor = null, string forCss = null) Parameters Type Name Description Recipe recipe System.String noParamOrder System.String name System.Int32 width System.String variants System.Collections.Generic.Dictionary < System.String , System.Object > attributes System.Collections.Generic.IEnumerable < Recipe > recipes System.Nullable < System.Boolean > setWidth System.Nullable < System.Boolean > setHeight System.String forTag System.String forFactor System.String forCss Returns Type Description Recipe | Improve this Doc View Source Settings(Object, String, Object, Object, Object, Object, String, String, String, Object, String, Object) Construct custom Resize-Settings as needed, either based on existing settings or starting from scratch Declaration IResizeSettings Settings(object settings = null, string noParamOrder = \"Rule: All params must be named (https://r.2sxc.org/named-params)\", object factor = null, object width = null, object height = null, object quality = null, string resizeMode = null, string scaleMode = null, string format = null, object aspectRatio = null, string parameters = null, object recipe = null) Parameters Type Name Description System.Object settings A standardized Image-Settings object like Settings.Images.Content used as a template - see http://r.2sxc.org/settings The string name of a template settings , like \"Content\" or \"Screen\" a bool true/false - if true, the normal \"Content\" configuration is used as a template, if false, no initial configuration is used Or a dynamic object containing settings properties (this can also be a merged custom + standard settings) Or a specially prepared IResizeSettings object containing all settings. System.String noParamOrder see Convention: Named Parameters System.Object factor A multiplier, usually used to create urls which resize to a part of the default content-size. Eg. 0.5. System.Object width Optional width parameter. Cannot be used if factor is set. Usually takes the default from the settings . System.Object height Optional height parameter. Can only be 0 if factor is set, no not specify a height. Usually takes the default from the settings . System.Object quality Optional quality parameter. Usually takes the default from the settings . System.String resizeMode Optional resize-mode, like crop or max . Usually takes the default from the settings . System.String scaleMode Optional scale-mode to allow up-scaling images like up or both . Usually takes the default from the settings . System.String format Optional file format like jpg or png System.Object aspectRatio Aspect Ratio width/height, only relevant if a factor is supplied. Usually takes default from the settings or is ignored. System.String parameters the parameters either as id=47&amp;name=daniel (Dnn also supports /id/47/name/daniel ) it can also be an IParameters System.Object recipe WIP - not ready yet Returns Type Description IResizeSettings A settings object which has all the parameters as configured Remarks History: Added in 2sxc 13.03"
  },
  "api/dot-net/ToSic.Eav.Data.Value-1.html": {
    "href": "api/dot-net/ToSic.Eav.Data.Value-1.html",
    "title": "Class Value<T> | 2sxc 13 / EAV 13",
    "keywords": "Class Value<T> Represents a typed Value object in the memory model Inheritance System.Object Value<T> Implements IValue <T> IValue Namespace : ToSic.Eav.Data Assembly : ToSic.Eav.Core.dll Syntax [InternalApi_DoNotUse_MayChangeWithoutNotice(\"this is just fyi, always work with interface IValue<T>\")] public class Value<T> : IValue<T>, IValue Type Parameters Name Description T Type of the actual Value Constructors | Improve this Doc View Source Value(T) The default constructor to create a value object. Used internally to build the memory model. Declaration public Value(T typedContents) Parameters Type Name Description T typedContents Properties | Improve this Doc View Source Languages Gets the Language ( ILanguage ) assigned to this Value. Can be one or many. Declaration public IList<ILanguage> Languages { get; set; } Property Value Type Description System.Collections.Generic.IList < ILanguage > | Improve this Doc View Source SerializableObject Returns the inner value in a form that can be serialized, for JSON serialization etc. Declaration public object SerializableObject { get; } Property Value Type Description System.Object | Improve this Doc View Source TypedContents Declaration public T TypedContents { get; } Property Value Type Description T Implements IValue<T> IValue"
  },
  "api/dot-net/ToSic.Eav.Data.IDecorator.html": {
    "href": "api/dot-net/ToSic.Eav.Data.IDecorator.html",
    "title": "Interface IDecorator | 2sxc 13 / EAV 13",
    "keywords": "Interface IDecorator This marks add-on information for things which can be decorated. This allows taking something (like an IEntity and adding additional information for later processing Namespace : ToSic.Eav.Data Assembly : ToSic.Eav.Core.dll Syntax [InternalApi_DoNotUse_MayChangeWithoutNotice(\"just fyi\")] public interface IDecorator"
  },
  "api/dot-net/ToSic.Eav.Caching.ITimestamped.html": {
    "href": "api/dot-net/ToSic.Eav.Caching.ITimestamped.html",
    "title": "Interface ITimestamped | 2sxc 13 / EAV 13",
    "keywords": "Interface ITimestamped Provides a time stamp when something was created / updated for caching. Namespace : ToSic.Eav.Caching Assembly : ToSic.Eav.Core.dll Syntax [InternalApi_DoNotUse_MayChangeWithoutNotice(\"this is just fyi\")] public interface ITimestamped Properties | Improve this Doc View Source CacheTimestamp System time-stamp of when the data in this cached thing was initialized or updated. Depending on the implementation, this may go up-stream and return an up-stream value. Declaration long CacheTimestamp { get; } Property Value Type Description System.Int64 A timestamp as a long number"
  },
  "api/dot-net/ToSic.Sxc.Data.IDynamicEntity.html": {
    "href": "api/dot-net/ToSic.Sxc.Data.IDynamicEntity.html",
    "title": "Interface IDynamicEntity | 2sxc 13 / EAV 13",
    "keywords": "Interface IDynamicEntity This is a wrapper for IEntity objects. It provides nicer access to underlying properties and automatically handles things like multi-language etc. The underlying IEntity IEntity is in the Entity property. Normally you will use it without caring about these internals. Please check @HowTo.DynamicCode.DynamicEntity Inherited Members IHasDecorators<IEntity>.Decorators Namespace : ToSic.Sxc.Data Assembly : ToSic.Sxc.dll Syntax [PublicApi_Stable_ForUseInYourCode] public interface IDynamicEntity : IDynamicEntity, IEntityWrapper, IHasDecorators<IEntity>, IMultiWrapper<IEntity>, IDynamicEntityBase, ISxcDynamicObject, ICanDebug Properties | Improve this Doc View Source AnyBooleanProperty A Dynamic Entity always contains an item of your data - a book, person, blog-post or a piece of content. Since the object is dynamic, you can just use .IsFemale or whatever other property your item has. If it's a true/false, it will just magically work and return a bool . If it doesn't exist, it will return null. Declaration bool AnyBooleanProperty { get; } Property Value Type Description System.Boolean | Improve this Doc View Source AnyChildrenProperty A Dynamic Entity always contains an item of your data - a book, person, blog-post or a piece of content. Since the object is dynamic, you can just use .Tags or whatever other property your item has. If it's contains relationships, it will just magically work and return a list of further DynamicEntity objects. If it doesn't exist, it will return null. Declaration IEnumerable<DynamicEntity> AnyChildrenProperty { get; } Property Value Type Description System.Collections.Generic.IEnumerable < DynamicEntity > Remarks Very often you'll want to use LINQ to further sort or query these items. But the Razor compiler cannot know that it got a list, so using .Any() or similar fails. To fix this, put an AsList around it - a bit like AsList(myThing.Tags) . Sometimes you'll also need to help a bit more with AsList(myThings.Tags as object) . Now you can do things like var tags = AsList(myThings.Tags as object); if (myTags.Any()) {...} Read more about this in the Dnn LINQ Tutorials | Improve this Doc View Source AnyDateTimeProperty A Dynamic Entity always contains an item of your data - a book, person, blog-post or a piece of content. Since the object is dynamic, you can just use .Birthday or whatever other property your item has. If it's a date/time, it will just magically work and return a DateTime . If it doesn't exist, it will return null. Declaration DateTime AnyDateTimeProperty { get; } Property Value Type Description System.DateTime | Improve this Doc View Source AnyJsonProperty A Dynamic Entity always contains an item of your data - a book, person, blog-post or a piece of content. Since the object is dynamic, you can just use .Gps or whatever other property your item has. If the field contains JSON, it will just magically work and return a string . If it doesn't exist, it will return null. Declaration string AnyJsonProperty { get; } Property Value Type Description System.String Remarks Very often you'll want to use the Json as a dynamic object again. Just pass the result through AsDynamic and it will work. Example: var gps = AsDynamic(myThing.Gps); var lat = gps.Lat; Read more about this in the Dnn JSON Tutorials | Improve this Doc View Source AnyLinkOrFileProperty A Dynamic Entity always contains an item of your data - a book, person, blog-post or a piece of content. Since the object is dynamic, you can just use .Image or whatever other property your item has. If it's a link, it will just magically work and return a string . If it doesn't exist, it will return null. Declaration string AnyLinkOrFileProperty { get; } Property Value Type Description System.String Remarks Note that many internal references in the CMS use file:2742 or similar. This will automatically be resolved to the real link which your output needs. | Improve this Doc View Source AnyNumberProperty A Dynamic Entity always contains an item of your data - a book, person, blog-post or a piece of content. Since the object is dynamic, you can just use .Length or whatever other property your item has. If it's a number, it will just magically work and return a double . If it doesn't exist, it will return null. Declaration double AnyNumberProperty { get; } Property Value Type Description System.Double | Improve this Doc View Source AnyStringProperty A Dynamic Entity always contains an item of your data - a book, person, blog-post or a piece of content. Since the object is dynamic, you can just use .FirstName or whatever other property your item has. If it's a string, it will just magically work. If it doesn't exist, it will return null. Declaration string AnyStringProperty { get; } Property Value Type Description System.String Remarks Remember to use @Html.Raw(...) if you want the html to be preserved and not cleaned when placed in the page. | Improve this Doc View Source AnyTitleOfAnEntityInTheList If this DynamicEntity carries a list of items (for example a BlogPost.Tags which behaves as the first Tag, but also carries all the tags in it) Then you can also use DynamicCode to directly navigate to a sub-item, like Blogs.Tags.WebDesign . Declaration IEnumerable<DynamicEntity> AnyTitleOfAnEntityInTheList { get; } Property Value Type Description System.Collections.Generic.IEnumerable < DynamicEntity > Remarks New in 12.03 | Improve this Doc View Source Entity The underlying entity which provides all the data for the DynamicEntity Declaration IEntity Entity { get; } Property Value Type Description IEntity An Entity object. | Improve this Doc View Source EntityGuid The guid of the underlying entity. Declaration Guid EntityGuid { get; } Property Value Type Description System.Guid Remarks If the entity doesn't exist, it will return an empty guid | Improve this Doc View Source EntityId The ID of the underlying entity. Use it for edit-functionality or just to have a unique number for this item. Declaration int EntityId { get; } Property Value Type Description System.Int32 Remarks If the entity doesn't exist, it will return 0 | Improve this Doc View Source EntityTitle The title of this item. This is always available no matter what the underlying field for the title is. Declaration object EntityTitle { get; } Property Value Type Description System.Object The title of the underlying entity. In rare cases where no title-field is known, it can be null. It can also be null if there is no underlying entity. | Improve this Doc View Source EntityType The type name of the current entity. This provides the nice name like \"Person\" and not the technical internal StaticName Declaration string EntityType { get; } Property Value Type Description System.String | Improve this Doc View Source IsDemoItem Many templates show demo data. If the template code must know if it's the demo item or real data, use IsDemoItem. Declaration bool IsDemoItem { get; } Property Value Type Description System.Boolean True if this is the item configured in the view-settings, false if not. Remarks New in 10.07 | Improve this Doc View Source IsPublished Tells us if this data item is published or still draft. Default is true. Declaration bool IsPublished { get; } Property Value Type Description System.Boolean | Improve this Doc View Source Metadata The type name of the current entity. This provides the nice name like \"Person\" and not the technical internal StaticName Declaration IDynamicMetadata Metadata { get; } Property Value Type Description IDynamicMetadata Remarks Added in v13 | Improve this Doc View Source Presentation Contains presentation settings for an item - if they exist. This is a functionality of the CMS, where an instance of an item can be configured to show in a specific way. Normally it's used when something like an address has various show-settings (like how the map should visualize this address). The presentation-info is therefor not-null IF the content belongs to this module instance the view-configuration of this module is configured to have presentation items there is either a default presentation configured in the view, or the user has manually edited the presentation settings Declaration dynamic Presentation { get; } Property Value Type Description System.Object An IDynamicEntity with the presentation item (or the demo-presentation), otherwise null. Methods | Improve this Doc View Source Children(String, String) A dynamic list of sub-items. Important for LINQ style querying or just working with various lists. Note that for getting child items of this item you can just use the properties, like content.Authors. But using Children(\"Authors\", typeName) gives you the ability to restrict to a type. Please check the tutorials on 2sxc.org/dnn-tutorials/ for more info. Declaration List<IDynamicEntity> Children(string field = null, string type = null) Parameters Type Name Description System.String field Optional field filter - would only return items that point to the current item in a specific field name. System.String type Optional type filter - would only return items of this type. Returns Type Description System.Collections.Generic.List < IDynamicEntity > A list of all items pointing here (filtered), converted to DynamicEntity for convenience. Remarks New in 10.21.00 - note also that the parameter-order is reversed to the Parents() | Improve this Doc View Source Field(String) BETA Get a Field-object of a property of this entity, to use with services like the IImageService which also need more information like the metadata. Declaration [WorkInProgressApi(\"WIP, to be released ca. 13.10\")] IDynamicField Field(string name) Parameters Type Name Description System.String name Returns Type Description IDynamicField | Improve this Doc View Source Get(String) Get a value of the entity. Usually you will prefer the quick access like @content.FirstName - which will give you the same things as content.Get(\"FirstName\"). There are two cases to use this: when you dynamically assemble the field name in your code, like when using App.Resources or similar use cases. to access a field which has a conflicting name with this object, like Get(\"Parents\") Declaration dynamic Get(string name) Parameters Type Name Description System.String name Returns Type Description System.Object An object which can be either a string, number, boolean or List<IDynamicEntity>, depending on the field type. Will return null if the field was not found. | Improve this Doc View Source Get(String, String, String, Boolean, Nullable<Boolean>) Get a property using the string name. Only needed in special situations, as most cases can use the object.name directly Declaration dynamic Get(string name, string noParamOrder = \"Rule: All params must be named (https://r.2sxc.org/named-params)\", string language = null, bool convertLinks = true, bool? debug = default(bool? )) Parameters Type Name Description System.String name the property name. System.String noParamOrder see Convention: Named Parameters System.String language Optional language code - like \"de-ch\" to prioritize that language System.Boolean convertLinks Optionally turn off if links like file:72 are looked up to a real link. Default is true. System.Nullable < System.Boolean > debug Set true to see more details in Insights how the value was retrieved. Returns Type Description System.Object a dynamically typed result, can be string, bool, etc. | Improve this Doc View Source GetDraft() Get the draft item of this item if this is a content-item which is published, and has a draft. Declaration dynamic GetDraft() Returns Type Description System.Object Returns a dynamic entity if there is a draft, or null if there is no draft. | Improve this Doc View Source GetPublished() Get the published item of this item if this is a content-item which is draft, and has a published. Declaration dynamic GetPublished() Returns Type Description System.Object Returns a dynamic entity if there is a draft, or null if there is no draft. | Improve this Doc View Source Parents(String, String) A dynamic list of entities which point to this item. Important for LINQ style querying or just working with various lists. Note that for getting child items of this item you can just use the properties, like content.Authors. Please check the tutorials on 2sxc.org/dnn-tutorials/ for more info. Declaration List<IDynamicEntity> Parents(string type = null, string field = null) Parameters Type Name Description System.String type Optional type filter - would only return items of this type. System.String field Optional field filter - would only return items that point to the current item in a specific field name. Returns Type Description System.Collections.Generic.List < IDynamicEntity > A list of all items pointing here (filtered), converted to DynamicEntity for convenience. Remarks New in 9.42 - note also that the parameter-order is reversed to the Children()"
  },
  "api/dot-net/ToSic.Sxc.WebApi.IDynamicWebApi.html": {
    "href": "api/dot-net/ToSic.Sxc.WebApi.IDynamicWebApi.html",
    "title": "Interface IDynamicWebApi | 2sxc 13 / EAV 13",
    "keywords": "Interface IDynamicWebApi This interface extends WebAPIs with File-Save helpers. It's important, because if 2sxc also runs on other CMS platforms, then the Dnn Context won't be available, so it's in a separate interface. Namespace : ToSic.Sxc.WebApi Assembly : ToSic.Sxc.WebApi.dll Syntax [PublicApi_Stable_ForUseInYourCode] public interface IDynamicWebApi Methods | Improve this Doc View Source File(String, Nullable<Boolean>, String, String, String, Object) Create a File-result to stream to the client Declaration dynamic File(string noParamOrder = \"Rule: All params must be named (https://r.2sxc.org/named-params)\", bool? download = default(bool? ), string virtualPath = null, string contentType = null, string fileDownloadName = null, object contents = null) Parameters Type Name Description System.String noParamOrder see Convention: Named Parameters System.Nullable < System.Boolean > download If a download should be enforced (otherwise the file may just be displayed - like an image) System.String virtualPath Path in the website to get the file from. Provide either virtualPath or contents System.String contentType Mime Content-type. Will try to auto-detect from virtualPath or fileDownloadName if not provided. System.String fileDownloadName Download name. If provided, it will try to force download/save on the browser. System.Object contents Content of the result - a string, byte[] or stream to include. Returns Type Description System.Object Remarks Added in 2sxc 12.05 | Improve this Doc View Source SaveInAdam(String, Stream, String, String, Nullable<Guid>, String, String) Save a file from a stream (usually an upload from the browser) into an adam-field of an item. Read more about this in the the WebAPI docs for SaveInAdam Declaration IFile SaveInAdam(string noParamOrder = \"Rule: All params must be named (https://r.2sxc.org/named-params)\", Stream stream = null, string fileName = null, string contentType = null, Guid? guid = default(Guid? ), string field = null, string subFolder = \"\") Parameters Type Name Description System.String noParamOrder see Convention: Named Parameters System.IO.Stream stream the stream System.String fileName file name to save to System.String contentType content-type of the target item (important for security checks) System.Nullable < System.Guid > guid System.String field System.String subFolder Returns Type Description IFile"
  },
  "api/dot-net/ToSic.Sxc.Dnn.Factory.html": {
    "href": "api/dot-net/ToSic.Sxc.Dnn.Factory.html",
    "title": "Class Factory | 2sxc 13 / EAV 13",
    "keywords": "Class Factory This is a factory to create CmsBlocks, Apps etc. and related objects from DNN. Inheritance System.Object Factory Namespace : ToSic.Sxc.Dnn Assembly : ToSic.Sxc.Dnn.Core.dll Syntax [PublicApi_Stable_ForUseInYourCode] [Obsolete(\"This is obsolete in V13 but will continue to work for now, we plan to remove in v14. Use the IDynamicCodeService or the IRenderService instead.\")] public static class Factory Methods | Improve this Doc View Source App(Int32, PortalSettings, Boolean, Boolean, ILog) Get a full app-object for accessing data of the app from outside Declaration public static IApp App(int appId, PortalSettings ownerPortalSettings, bool unusedButKeepForApiStability = false, bool showDrafts = false, ILog parentLog = null) Parameters Type Name Description System.Int32 appId The AppID of the app you need DotNetNuke.Entities.Portals.PortalSettings ownerPortalSettings The owner portal - this is important when retrieving Apps from another portal. System.Boolean unusedButKeepForApiStability Tells the App that you'll be using page-publishing. So changes will me auto-drafted for a future release as the whole page together. System.Boolean showDrafts Show draft items - usually false for visitors, true for editors/admins. ILog parentLog optional logger to attach to Returns Type Description IApp An initialized App object which you can use to access App.Data | Improve this Doc View Source App(Int32, Boolean, Boolean, ILog) Get a full app-object for accessing data of the app from outside Declaration public static IApp App(int appId, bool unusedButKeepForApiStability = false, bool showDrafts = false, ILog parentLog = null) Parameters Type Name Description System.Int32 appId The AppID of the app you need System.Boolean unusedButKeepForApiStability Tells the App that you'll be using page-publishing. So changes will me auto-drafted for a future release as the whole page together. System.Boolean showDrafts Show draft items - usually false for visitors, true for editors/admins. ILog parentLog optional logger to attach to Returns Type Description IApp An initialized App object which you can use to access App.Data | Improve this Doc View Source App(Int32, Int32, Boolean, Boolean, ILog) Get a full app-object for accessing data of the app from outside Declaration public static IApp App(int zoneId, int appId, bool unusedButKeepForApiStability = false, bool showDrafts = false, ILog parentLog = null) Parameters Type Name Description System.Int32 zoneId The zone the app is in. System.Int32 appId The AppID of the app you need System.Boolean unusedButKeepForApiStability Tells the App that you'll be using page-publishing. So changes will me auto-drafted for a future release as the whole page together. System.Boolean showDrafts Show draft items - usually false for visitors, true for editors/admins. ILog parentLog optional logger to attach to Returns Type Description IApp An initialized App object which you can use to access App.Data | Improve this Doc View Source CmsBlock(ModuleInfo) Get a Root CMS Block if you have the ModuleInfo object Declaration public static IBlockBuilder CmsBlock(ModuleInfo moduleInfo) Parameters Type Name Description DotNetNuke.Entities.Modules.ModuleInfo moduleInfo A DNN ModuleInfo object Returns Type Description ToSic.Sxc.Blocks.IBlockBuilder An initialized CMS Block, ready to use/render | Improve this Doc View Source CmsBlock(Int32, Int32) Get a Root CMS Block if you know the TabId and the ModId Declaration public static IBlockBuilder CmsBlock(int pageId, int modId) Parameters Type Name Description System.Int32 pageId The DNN tab id (page id) System.Int32 modId The DNN Module id Returns Type Description ToSic.Sxc.Blocks.IBlockBuilder An initialized CMS Block, ready to use/render | Improve this Doc View Source CmsBlock(Int32, Int32, ILog) Get a Root CMS Block if you know the TabId and the ModId Declaration public static IBlockBuilder CmsBlock(int pageId, int modId, ILog parentLog) Parameters Type Name Description System.Int32 pageId The DNN tab id (page id) System.Int32 modId The DNN Module id ILog parentLog The parent log, optional Returns Type Description ToSic.Sxc.Blocks.IBlockBuilder An initialized CMS Block, ready to use/render | Improve this Doc View Source CmsBlock(IModule, ILog) Get a Root CMS Block if you have the ModuleInfo object. Declaration public static IBlockBuilder CmsBlock(IModule module, ILog parentLog = null) Parameters Type Name Description ToSic.Sxc.Context.IModule module ILog parentLog optional logger to attach to Returns Type Description ToSic.Sxc.Blocks.IBlockBuilder An initialized CMS Block, ready to use/render | Improve this Doc View Source DynamicCode(IBlockBuilder) Retrieve a helper object which provides commands like AsDynamic, AsEntity etc. Declaration public static IDnnDynamicCode DynamicCode(IBlockBuilder blockBuilder) Parameters Type Name Description ToSic.Sxc.Blocks.IBlockBuilder blockBuilder CMS Block for which the helper is targeted. Returns Type Description IDnnDynamicCode A Code Helper based on IDnnDynamicCode"
  },
  "api/dot-net/ToSic.Sxc.Context.ICmsCulture.html": {
    "href": "api/dot-net/ToSic.Sxc.Context.ICmsCulture.html",
    "title": "Interface ICmsCulture | 2sxc 13 / EAV 13",
    "keywords": "Interface ICmsCulture Information about the cultures/languages used. Namespace : ToSic.Sxc.Context Assembly : ToSic.Sxc.dll Syntax [PublicApi] public interface ICmsCulture Properties | Improve this Doc View Source CurrentCode The current culture / language code like \"de-ch\". It's the language-code used by the translation environment. Use in Razor: CmsContext.Culture.CurrentCode Declaration string CurrentCode { get; } Property Value Type Description System.String Remarks It's always lower-case. In the case of DNN, this corresponds to PortalSettings.CurrentAlias.CultureCode | Improve this Doc View Source DefaultCode The default language code like \"en-us\" or \"\" (empty string). If the system is single-language, it will often just be an empty string \"\". Use in Razor: CmsContext.Culture.DefaultCode Declaration string DefaultCode { get; } Property Value Type Description System.String Remarks It's always lower-case. In the case of DNN, this corresponds to PortalSettings.DefaultCulture"
  },
  "api/dot-net/ToSic.Eav.Metadata.html": {
    "href": "api/dot-net/ToSic.Eav.Metadata.html",
    "title": "Namespace ToSic.Eav.Metadata | 2sxc 13 / EAV 13",
    "keywords": "Namespace ToSic.Eav.Metadata Everything related to the Metadata-system in EAV. üëâ Read about it in Metadata - (advanced ‚ö†) . Classes Target Reference to target. Usually used on IEntity to define what thing it provides additional metadata for. Basically it contains all the references necessary to identify what it belongs to. Interfaces IHasMetadata Anything with this interface has a property Metadata which can give us more information about that object. IMetadataOf A provider for metadata for something. So if an IEntity or an App has metadata, this will provide it. IMetadataSource For querying metadata from the data source. Mainly used in the Store, Cache-Systems and Apps. ITarget Reference to target. Usually used on IEntity to define what thing it provides additional metadata for. Basically it contains all the references necessary to identify what it belongs to. ITargetTypes This interface allows objects to lookup metadata-target id / name of the system. It basically translates the ToSic.Eav.Metadata.ITargetTypes.TargetTypes to name and vica versa Enums TargetTypes Metadata targets specific things, and the TargetTypes determines what kind of thing this is."
  },
  "api/dot-net/ToSic.Eav.Data.IWrapper-1.html": {
    "href": "api/dot-net/ToSic.Eav.Data.IWrapper-1.html",
    "title": "Interface IWrapper<T> | 2sxc 13 / EAV 13",
    "keywords": "Interface IWrapper<T> This is for any object which does something, but caries with it an original object which is the type of the hosting system (environment) Namespace : ToSic.Eav.Data Assembly : ToSic.Eav.Core.dll Syntax [InternalApi_DoNotUse_MayChangeWithoutNotice(\"this is just fyi\")] public interface IWrapper<out T> Type Parameters Name Description T Properties | Improve this Doc View Source UnwrappedContents The underlying, original object. Helpful for inner methods which need access to the real, underlying item. It has a lengthy name so that objects which implement the wrapper don't need to fear that another property would have the same name. Declaration T UnwrappedContents { get; } Property Value Type Description T"
  },
  "api/dot-net/ToSic.Sxc.Dnn.Web.html": {
    "href": "api/dot-net/ToSic.Sxc.Dnn.Web.html",
    "title": "Namespace ToSic.Sxc.Dnn.Web | 2sxc 13 / EAV 13",
    "keywords": "Namespace ToSic.Sxc.Dnn.Web Interfaces IDnnRazorCustomize All DNN Razor Pages inherit from this class IHtmlHelper Helper to quickly \"raw\" some html. Important : When using Oqtane, the Html object has many more features - check the .net documentation."
  },
  "api/dot-net/ToSic.Sxc.Dnn.Web.IHtmlHelper.html": {
    "href": "api/dot-net/ToSic.Sxc.Dnn.Web.IHtmlHelper.html",
    "title": "Interface IHtmlHelper | 2sxc 13 / EAV 13",
    "keywords": "Interface IHtmlHelper Helper to quickly \"raw\" some html. Important : When using Oqtane, the Html object has many more features - check the .net documentation. Namespace : ToSic.Sxc.Dnn.Web Assembly : ToSic.Sxc.Dnn.Razor.dll Syntax [PublicApi_Stable_ForUseInYourCode] public interface IHtmlHelper Methods | Improve this Doc View Source Partial(String, Object[]) Experimental support for Html.Partial to mimic API in .net Core 5 Declaration [InternalApi_DoNotUse_MayChangeWithoutNotice(\"WIP for v12\")] IHtmlString Partial(string path, params object[] data) Parameters Type Name Description System.String path System.Object [] data Returns Type Description System.Web.IHtmlString | Improve this Doc View Source Raw(Object) Returns a HtmlString which Razor will output as Raw Html. Declaration IHtmlString Raw(object stringHtml) Parameters Type Name Description System.Object stringHtml Returns Type Description System.Web.IHtmlString An HtmlString object which will be not be html-encoded when added to a page with @Html.Raw(...)"
  },
  "api/dot-net/ToSic.Sxc.Data.DynamicJacketList.html": {
    "href": "api/dot-net/ToSic.Sxc.Data.DynamicJacketList.html",
    "title": "Class DynamicJacketList | 2sxc 13 / EAV 13",
    "keywords": "Class DynamicJacketList This is a DynamicJacket for JSON arrays. You can enumerate through it. Inheritance System.Object System.Dynamic.DynamicObject DynamicJacketBase < Newtonsoft.Json.Linq.JArray > DynamicJacketList Implements System.Dynamic.IDynamicMetaObjectProvider IWrapper < Newtonsoft.Json.Linq.JArray > System.Collections.Generic.IReadOnlyList < System.Object > System.Collections.Generic.IReadOnlyCollection < System.Object > System.Collections.Generic.IEnumerable < System.Object > System.Collections.IEnumerable Inherited Members DynamicJacketBase<JArray>.GetContents() DynamicJacketBase<JArray>.IEnumerable.GetEnumerator() DynamicJacketBase<JArray>.ToString() DynamicJacketBase<JArray>.Get(String) DynamicJacketBase<JArray>.Count DynamicJacketBase<JArray>._Dump(String[], String, ILog) Namespace : ToSic.Sxc.Data Assembly : ToSic.Sxc.dll Syntax [InternalApi_DoNotUse_MayChangeWithoutNotice(\"just use the objects from AsDynamic, don't use this directly\")] public class DynamicJacketList : DynamicJacketBase<JArray>, IDynamicMetaObjectProvider, IWrapper<JArray>, IPropertyLookup, ISxcDynamicObject, ICanGetByName, IReadOnlyList<object>, IReadOnlyCollection<object>, IEnumerable<object>, IEnumerable Constructors | Improve this Doc View Source DynamicJacketList(JArray) Declaration public DynamicJacketList(JArray originalData) Parameters Type Name Description Newtonsoft.Json.Linq.JArray originalData Properties | Improve this Doc View Source IsList Declaration public override bool IsList { get; } Property Value Type Description System.Boolean Overrides ToSic.Sxc.Data.DynamicJacketBase<Newtonsoft.Json.Linq.JArray>.IsList | Improve this Doc View Source Item[Int32] Access the items in this object - but only if the underlying object is an array. Declaration public override object this[int index] { get; } Parameters Type Name Description System.Int32 index array index Property Value Type Description System.Object the item or an error if not found Overrides ToSic.Sxc.Data.DynamicJacketBase<Newtonsoft.Json.Linq.JArray>.Item[System.Int32] Methods | Improve this Doc View Source FindValueOrNull(String, StringComparison, ILog) On a dynamic Jacket List where is no reasonable convention how to find something by name since it's not clear which property would be the name-giving property. Declaration protected override object FindValueOrNull(string name, StringComparison comparison, ILog parentLogOrNull) Parameters Type Name Description System.String name System.StringComparison comparison ILog parentLogOrNull Returns Type Description System.Object Overrides ToSic.Sxc.Data.DynamicJacketBase<Newtonsoft.Json.Linq.JArray>.FindValueOrNull(System.String, System.StringComparison, ToSic.Eav.Logging.ILog) | Improve this Doc View Source GetEnumerator() Declaration public override IEnumerator<object> GetEnumerator() Returns Type Description System.Collections.Generic.IEnumerator < System.Object > Overrides ToSic.Sxc.Data.DynamicJacketBase<Newtonsoft.Json.Linq.JArray>.GetEnumerator() Implements System.Dynamic.IDynamicMetaObjectProvider IWrapper<T> System.Collections.Generic.IReadOnlyList<T> System.Collections.Generic.IReadOnlyCollection<T> System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable"
  },
  "api/dot-net/ToSic.Sxc.Data.DynamicJacketBase-1.html": {
    "href": "api/dot-net/ToSic.Sxc.Data.DynamicJacketBase-1.html",
    "title": "Class DynamicJacketBase<T> | 2sxc 13 / EAV 13",
    "keywords": "Class DynamicJacketBase<T> Base class for DynamicJackets. You won't use this, just included in the docs. To check if something is an array or an object, use \"IsArray\" Inheritance System.Object System.Dynamic.DynamicObject DynamicJacketBase<T> DynamicJacket DynamicJacketList Implements System.Dynamic.IDynamicMetaObjectProvider System.Collections.Generic.IReadOnlyList < System.Object > System.Collections.Generic.IReadOnlyCollection < System.Object > System.Collections.Generic.IEnumerable < System.Object > System.Collections.IEnumerable IWrapper <T> Namespace : ToSic.Sxc.Data Assembly : ToSic.Sxc.dll Syntax [InternalApi_DoNotUse_MayChangeWithoutNotice(\"just use the objects from AsDynamic, don't use this directly\")] public abstract class DynamicJacketBase<T> : DynamicObject, IDynamicMetaObjectProvider, IReadOnlyList<object>, IReadOnlyCollection<object>, IEnumerable<object>, IEnumerable, IWrapper<T>, IPropertyLookup, ISxcDynamicObject, ICanGetByName Type Parameters Name Description T The underlying type, either a JObject or a JToken Properties | Improve this Doc View Source Count Declaration public int Count { get; } Property Value Type Description System.Int32 | Improve this Doc View Source IsList Check if it's an array. Declaration public abstract bool IsList { get; } Property Value Type Description System.Boolean True if an array/list, false if an object. | Improve this Doc View Source Item[Int32] Not yet implemented accessor - must be implemented by the inheriting class. Declaration public abstract object this[int index] { get; } Parameters Type Name Description System.Int32 index Property Value Type Description System.Object a System.NotImplementedException Methods | Improve this Doc View Source _Dump(String[], String, ILog) Declaration public abstract List<PropertyDumpItem> _Dump(string[] languages, string path, ILog parentLogOrNull) Parameters Type Name Description System.String [] languages System.String path ILog parentLogOrNull Returns Type Description System.Collections.Generic.List < ToSic.Eav.Data.Debug.PropertyDumpItem > | Improve this Doc View Source FindValueOrNull(String, StringComparison, ILog) Declaration protected abstract object FindValueOrNull(string name, StringComparison comparison, ILog parentLogOrNull) Parameters Type Name Description System.String name System.StringComparison comparison ILog parentLogOrNull Returns Type Description System.Object | Improve this Doc View Source Get(String) Declaration public dynamic Get(string name) Parameters Type Name Description System.String name Returns Type Description System.Object | Improve this Doc View Source GetContents() Declaration public T GetContents() Returns Type Description T | Improve this Doc View Source GetEnumerator() Enable enumeration. When going through objects (properties) it will return the keys, not the values. Use the [key] accessor to get the values as DynamicJacketList or ToSic.Sxc.Data Declaration public abstract IEnumerator<object> GetEnumerator() Returns Type Description System.Collections.Generic.IEnumerator < System.Object > | Improve this Doc View Source ToString() If the object is just output, it should show the underlying json string Declaration public override string ToString() Returns Type Description System.String the inner json string Overrides System.Object.ToString() Explicit Interface Implementations | Improve this Doc View Source IEnumerable.GetEnumerator() Declaration IEnumerator IEnumerable.GetEnumerator() Returns Type Description System.Collections.IEnumerator Implements System.Dynamic.IDynamicMetaObjectProvider System.Collections.Generic.IReadOnlyList<T> System.Collections.Generic.IReadOnlyCollection<T> System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable IWrapper<T>"
  },
  "api/dot-net/ToSic.Sxc.Adam.IFolder.html": {
    "href": "api/dot-net/ToSic.Sxc.Adam.IFolder.html",
    "title": "Interface IFolder | 2sxc 13 / EAV 13",
    "keywords": "Interface IFolder An ADAM (Automatic Digital Asset Management) folder. This simple interface assumes that it uses int-IDs. Inherited Members IFolder.HasChildren IAsset.Created IAsset.Id IAsset.ParentId IAsset.Modified IAsset.Name IAsset.Path IAsset.PhysicalPath IAsset.HasMetadata IAsset.Metadata IAsset.Url IAsset.Type Namespace : ToSic.Sxc.Adam Assembly : ToSic.Sxc.dll Syntax [PublicApi_Stable_ForUseInYourCode] public interface IFolder : IFolder, IAsset, IAsset, IHasMetadata Properties | Improve this Doc View Source Files Get the files in this folder Declaration IEnumerable<IFile> Files { get; } Property Value Type Description System.Collections.Generic.IEnumerable < IFile > A list of files in this folder as IFile | Improve this Doc View Source Folders Get the sub-folders in this folder Declaration IEnumerable<IFolder> Folders { get; } Property Value Type Description System.Collections.Generic.IEnumerable < IFolder > A list of folders inside this folder - as IFolder ."
  },
  "api/dot-net/ToSic.Sxc.Adam.IFile.html": {
    "href": "api/dot-net/ToSic.Sxc.Adam.IFile.html",
    "title": "Interface IFile | 2sxc 13 / EAV 13",
    "keywords": "Interface IFile An ADAM (Automatic Digital Asset Management) file This simple interface assumes that it uses int-IDs. Inherited Members IAsset.HasMetadata IAsset.Metadata IAsset.Url IAsset.Type IFile.Extension IFile.Folder IFile.FolderId IFile.FullName IFile.Size IAsset.Created IAsset.Id IAsset.ParentId IAsset.Modified IAsset.Name IAsset.Path IAsset.PhysicalPath Namespace : ToSic.Sxc.Adam Assembly : ToSic.Sxc.dll Syntax [PublicApi_Stable_ForUseInYourCode] public interface IFile : IAsset, IHasMetadata, IFile, IAsset"
  },
  "api/dot-net/ToSic.Eav.Logging.CodeRef.html": {
    "href": "api/dot-net/ToSic.Eav.Logging.CodeRef.html",
    "title": "Class CodeRef | 2sxc 13 / EAV 13",
    "keywords": "Class CodeRef Reference to code - containing the path to the file, the method name and the line in the code. Inheritance System.Object CodeRef Namespace : ToSic.Eav.Logging Assembly : ToSic.Eav.Core.dll Syntax [InternalApi_DoNotUse_MayChangeWithoutNotice(\"this is just fyi\")] public class CodeRef Constructors | Improve this Doc View Source CodeRef(Boolean, String, String, Int32) This constructor should be called without params, so that the compiler automatically injects all values. Declaration public CodeRef(bool autoPickup = true, string cPath = null, string cName = null, int cLine = 0) Parameters Type Name Description System.Boolean autoPickup Dummy parameter just to have a different signature. System.String cPath auto pre filled by the compiler - the path to the code file System.String cName auto pre filled by the compiler - the method name System.Int32 cLine auto pre filled by the compiler - the code line | Improve this Doc View Source CodeRef(String, String, Int32) Default constructor to set the values Declaration public CodeRef(string cPath, string cName, int cLine) Parameters Type Name Description System.String cPath System.String cName System.Int32 cLine Fields | Improve this Doc View Source Line Line of code where the code was running Declaration public int Line Field Value Type Description System.Int32 | Improve this Doc View Source Name Name of the method/property accessed Declaration public string Name Field Value Type Description System.String | Improve this Doc View Source Path Path to the code file Declaration public string Path Field Value Type Description System.String"
  },
  "api/dot-net/ToSic.Eav.Factory.html": {
    "href": "api/dot-net/ToSic.Eav.Factory.html",
    "title": "Class Factory | 2sxc 13 / EAV 13",
    "keywords": "Class Factory The Eav DI Factory, used to construct various objects through Dependency Injection . If possible avoid using this, as it's a workaround for code which is outside of the normal Dependency Injection and therefor a bad pattern. Inheritance System.Object Factory Namespace : ToSic.Eav Assembly : ToSic.Sxc.Dnn.Core.dll Syntax [PublicApi(\"Careful - obsolete!\")] [Obsolete(\"Deprecated, please use Dnn 9 DI instead https://r.2sxc.org/brc-13-eav-factory\")] public class Factory Methods | Improve this Doc View Source Resolve<T>() Dependency Injection resolver with a known type as a parameter. Declaration [Obsolete(\"Please use standard Dnn 9.4+ Dnn DI instead https://r.2sxc.org/brc-13-eav-factory\")] public static T Resolve<T>() Returns Type Description T Type Parameters Name Description T The type / interface we need."
  },
  "api/dot-net/ToSic.Eav.LookUp.LookUpInEntity.html": {
    "href": "api/dot-net/ToSic.Eav.LookUp.LookUpInEntity.html",
    "title": "Class LookUpInEntity | 2sxc 13 / EAV 13",
    "keywords": "Class LookUpInEntity Get Values from an IEntity . Read more about this in LookUp System Inheritance System.Object LookUpBase LookUpIn < IEntity > LookUpInEntity LookUpInMetadata Implements ILookUp Inherited Members LookUpIn<IEntity>.Data LookUpBase.Name LookUpBase.Get(String) LookUpBase.Format(Boolean) LookUpBase.Format(DateTime) Namespace : ToSic.Eav.LookUp Assembly : ToSic.Eav.Core.dll Syntax [PublicApi_Stable_ForUseInYourCode] public class LookUpInEntity : LookUpIn<IEntity>, ILookUp Constructors | Improve this Doc View Source LookUpInEntity(String, IEntity, String[]) Constructs a new Entity LookUp Declaration public LookUpInEntity(string name, IEntity source, string[] dimensions) Parameters Type Name Description System.String name Name of the LookUp, e.g. Settings IEntity source System.String [] dimensions the languages / dimensions to use Methods | Improve this Doc View Source Get(String, String) Special lookup command with format-provider. Declaration public override string Get(string key, string format) Parameters Type Name Description System.String key System.String format Returns Type Description System.String Overrides LookUpBase.Get(String, String) Implements ILookUp"
  },
  "api/dot-net/ToSic.Eav.Data.IHasDecorators-1.html": {
    "href": "api/dot-net/ToSic.Eav.Data.IHasDecorators-1.html",
    "title": "Interface IHasDecorators<T> | 2sxc 13 / EAV 13",
    "keywords": "Interface IHasDecorators<T> This marks objects which carry additional decorator information Namespace : ToSic.Eav.Data Assembly : ToSic.Eav.Core.dll Syntax [InternalApi_DoNotUse_MayChangeWithoutNotice(\"Marks objects which have decorator information\")] public interface IHasDecorators<T> Type Parameters Name Description T Properties | Improve this Doc View Source Decorators Declaration List<IDecorator<T>> Decorators { get; } Property Value Type Description System.Collections.Generic.List < IDecorator <T>>"
  },
  "api/dot-net/ToSic.Eav.Data.EntityBasedWithLog.html": {
    "href": "api/dot-net/ToSic.Eav.Data.EntityBasedWithLog.html",
    "title": "Class EntityBasedWithLog | 2sxc 13 / EAV 13",
    "keywords": "Class EntityBasedWithLog A strongly typed object which gets its data from an entity, and also logs what it does. Inheritance System.Object EntityBasedType EntityBasedWithLog QueryDefinition QueryPartDefinition AppConfiguration Implements IEntityBasedType IEntityWrapper IHasDecorators < IEntity > IHasLog Inherited Members EntityBasedType.Entity EntityBasedType.Decorators EntityBasedType.Title EntityBasedType.Id EntityBasedType.Guid EntityBasedType.Metadata EntityBasedType.Get<T>(String, T) Namespace : ToSic.Eav.Data Assembly : ToSic.Eav.Core.dll Syntax [PublicApi_Stable_ForUseInYourCode] public abstract class EntityBasedWithLog : EntityBasedType, IEntityBasedType, IEntityWrapper, IHasDecorators<IEntity>, IMultiWrapper<IEntity>, IHasLog Constructors | Improve this Doc View Source EntityBasedWithLog(IEntity, String, ILog, String) An entity based type which also logs what it does Declaration protected EntityBasedWithLog(IEntity entity, string languageCode, ILog parentLog, string logName) Parameters Type Name Description IEntity entity entity which will be the foundation of this type System.String languageCode language to prefer in value lookups ILog parentLog parent log to chain System.String logName Name for the logger | Improve this Doc View Source EntityBasedWithLog(IEntity, String[], ILog, String) An entity based type which also logs what it does Declaration protected EntityBasedWithLog(IEntity entity, string[] languageCodes, ILog parentLog, string logName) Parameters Type Name Description IEntity entity entity which will be the foundation of this type System.String [] languageCodes languages to prefer in value lookups ILog parentLog parent log to chain System.String logName Name for the logger | Improve this Doc View Source EntityBasedWithLog(IEntity, ILog, String) An entity based type which also logs what it does Declaration protected EntityBasedWithLog(IEntity entity, ILog parentLog, string logName) Parameters Type Name Description IEntity entity entity which will be the foundation of this type ILog parentLog parent log to chain System.String logName Name for the logger Properties | Improve this Doc View Source Log The log object which contains the log and can add more logs to the list. Declaration public ILog Log { get; } Property Value Type Description ILog Implements IEntityBasedType IEntityWrapper IHasDecorators<T> IHasLog"
  },
  "api/dot-net/ToSic.Sxc.Images.html": {
    "href": "api/dot-net/ToSic.Sxc.Images.html",
    "title": "Namespace ToSic.Sxc.Images | 2sxc 13 / EAV 13",
    "keywords": "Namespace ToSic.Sxc.Images Images are super-important in websites - and we want to make sure that they are perfect by default consistently resized to the perfect size optimized for all kinds of browsers and scenarios Warning This is Beta functionality and still work in progress. This means the APIs can still change until it's final. It's awesome, so have fun trying it out. But note that if you already use it, you may need make changes after an upgrade. Classes Recipe BETA A recipe contains instructions how to generate tags etc. which can contain multiple resized images RecipeQuality This is not ready yet. Goal is that different image formats and different sizes can have other quality specs. This is so WebP can use different quality params, or very small JGPs need a higher quality than lager JPGs Interfaces IResizeSettings Stores a full configuration for resizing. This is mainly important for scenarios where you need to build complex rules for the resizer, or for internal functionality when generating images and pictures. Warning This is Beta functionality and still work in progress. This means the APIs can still change until it's final. It's awesome, so have fun trying it out. But note that if you already use it, you may need make changes after an upgrade. IResponsiveImage Will generate a responsive <img> tag which also has srcset attributes so the browser can get the best image for the current display. Warning This is Beta functionality and still work in progress. This means the APIs can still change until it's final. It's awesome, so have fun trying it out. But note that if you already use it, you may need make changes after an upgrade. IResponsivePicture Will generate a responsive <picture> tag with all the <source> and <img> tags necessary so the browser can get the best image for the current display. Warning This is Beta functionality and still work in progress. This means the APIs can still change until it's final. It's awesome, so have fun trying it out. But note that if you already use it, you may need make changes after an upgrade."
  },
  "api/dot-net/ToSic.Sxc.Images.RecipeQuality.html": {
    "href": "api/dot-net/ToSic.Sxc.Images.RecipeQuality.html",
    "title": "Class RecipeQuality | 2sxc 13 / EAV 13",
    "keywords": "Class RecipeQuality This is not ready yet. Goal is that different image formats and different sizes can have other quality specs. This is so WebP can use different quality params, or very small JGPs need a higher quality than lager JPGs Inheritance System.Object RecipeQuality Namespace : ToSic.Sxc.Images Assembly : ToSic.Sxc.dll Syntax [WorkInProgressApi(\"WIP\")] public class RecipeQuality Constructors | Improve this Doc View Source RecipeQuality(RecipeQuality, Int32, String, Int32) Declaration public RecipeQuality(RecipeQuality original, int forWidth, string forFormat, int quality) Parameters Type Name Description RecipeQuality original System.Int32 forWidth System.String forFormat System.Int32 quality Properties | Improve this Doc View Source ForFormat Declaration public string ForFormat { get; } Property Value Type Description System.String | Improve this Doc View Source ForWidth Declaration public int ForWidth { get; } Property Value Type Description System.Int32 | Improve this Doc View Source Quality Declaration public int Quality { get; } Property Value Type Description System.Int32"
  },
  "api/dot-net/ToSic.Sxc.Dnn.ApiController.html": {
    "href": "api/dot-net/ToSic.Sxc.Dnn.ApiController.html",
    "title": "Class ApiController | 2sxc 13 / EAV 13",
    "keywords": "Class ApiController This is the base class for all custom API Controllers. With this, your code receives the full context incl. the current App, DNN, Data, etc. Tip We strongly suggest you check out the tutorials and guidance for custom WebAPIs here Inheritance System.Object System.Web.Http.ApiController DotNetNuke.Web.Api.DnnApiController ToSic.Sxc.Dnn.WebApi.DnnApiControllerWithFixes < ToSic.Eav.WebApi.DummyControllerReal > ToSic.Sxc.WebApi.SxcApiControllerBase < ToSic.Eav.WebApi.DummyControllerReal > ToSic.Sxc.WebApi.DynamicApiController ApiController Implements IDnnDynamicCode IDnnDynamicCodeAdditions IDynamicCode ICreateInstance ICompatibilityLevel IHasLog IDynamicWebApi Namespace : ToSic.Sxc.Dnn Assembly : ToSic.Sxc.Dnn.WebApi.dll Syntax [PublicApi(\"This was the official base class before v12. Try to move away from it, go to the latest base class on Custom.Dnn.Api12\")] [Obsolete(\"This will continue to work, but you should use the Custom.Hybrid.Api12 or Custom.Dnn.Api12 instead.\")] public abstract class ApiController : DynamicApiController, IHttpController, IDisposable, IDnnDynamicWebApi, IDnnDynamicCode, IDnnDynamicCodeAdditions, IDynamicCode, ICreateInstance, ICompatibilityLevel, IHasLog, IDynamicWebApi, IHasDynamicCodeRoot Fields | Improve this Doc View Source ErrRecommendedNamespaces Declaration public const string ErrRecommendedNamespaces = \"To use it, use the new base class from Custom.Hybrid.Api12 or Custom.Dnn.Api12 instead.\" Field Value Type Description System.String Properties | Improve this Doc View Source App A fully prepared IApp object letting you access all the data and queries in the current app. You'll usually want to access the data, like App.Data[\"Categories\"] or the queries App.Query[\"AllPosts\"] . foreach(var cat in AsDynamic(App.Data[\"Categories\"])) { @cat.Name } Declaration public IApp App { get; } Property Value Type Description IApp The current app | Improve this Doc View Source CmsContext The CmsContext tells you about the environment, like what page and module we're running in. It's supposed to replace the Dnn object in Razor and WebAPI code. Declaration public ICmsContext CmsContext { get; } Property Value Type Description ICmsContext Remarks New in v11.11 | Improve this Doc View Source Content The content object of the current razor view - IF the current view has content. If the view is a list, it will return the first item. Will be null otherwise. To tell if it's the demo/default item, use IsDemoItem . Declaration public dynamic Content { get; } Property Value Type Description System.Object A IDynamicEntity object with the current content - or null. | Improve this Doc View Source Data The data prepared for the current Code. Usually user data which was manually added to the instance, but can also be a query. You'll usually want to access the \"Default\" stream like Data[\"Default\"] . foreach(var person in AsDynamic(Data[\"Default\"])) { @person.Name } Declaration public IBlockDataSource Data { get; } Property Value Type Description IBlockDataSource An IBlockDataSource which is as IDataSource . | Improve this Doc View Source Edit Helper commands to enable in-page editing functionality Use it to check if edit is enabled, generate context-json infos and provide toolbar buttons Declaration public IEditService Edit { get; } Property Value Type Description IEditService An IEditService object. | Improve this Doc View Source Header The header object of the current razor view, if it's a list and has a header object. If it's a list and doesn't have a header (and no default), it will return null. To tell if it's the demo/default item, use IsDemoItem . Declaration public dynamic Header { get; } Property Value Type Description System.Object A IDynamicEntity object with the current content. Remarks Introduced in 2sxc 10.10 - previously it was called ListContent, now deprecated. | Improve this Doc View Source Link Link helper object to create the correct links Declaration public ILinkService Link { get; } Property Value Type Description ILinkService A ILinkService object. Methods | Improve this Doc View Source AsAdam(IEntity, String) Provides an Adam instance for this item and field Declaration public IFolder AsAdam(IEntity entity, string fieldName) Parameters Type Name Description IEntity entity The entity, often Content or similar System.String fieldName The field name, like \"Gallery\" or \"Pics\" Returns Type Description IFolder An Adam object for navigating the assets | Improve this Doc View Source AsAdam(IDynamicEntity, String) Provides an Adam instance for this item and field Declaration public IFolder AsAdam(IDynamicEntity entity, string fieldName) Parameters Type Name Description IDynamicEntity entity The entity, often Content or similar System.String fieldName The field name, like \"Gallery\" or \"Pics\" Returns Type Description IFolder An Adam object for navigating the assets | Improve this Doc View Source AsDynamic(Object) Convert a dynamic entity and return itself again. This is so coders don't have to worry if the original object was an IEntity or a IDynamicEntity in the first place. Declaration public dynamic AsDynamic(object dynamicEntity) Parameters Type Name Description System.Object dynamicEntity the original object Returns Type Description System.Object a dynamic object for easier coding | Improve this Doc View Source AsDynamic(String, String) Take a json and provide it as a dynamic object to the code Declaration public dynamic AsDynamic(string json, string fallback = \"{}\") Parameters Type Name Description System.String json the original json string System.String fallback Alternate string to use, if the original json can't parse. Can also be null or the word \"error\" if you would prefer an error to be thrown. Returns Type Description System.Object A dynamic object representing the original json. If it can't be parsed, it will parse the fallback, which by default is an empty empty dynamic object. If you provide null for the fallback, then you will get null back. Remarks Added in 2sxc 10.22.00 | Improve this Doc View Source AsDynamic(IEntity) Wraps an entity into a IDynamicEntity Declaration public dynamic AsDynamic(IEntity entity) Parameters Type Name Description IEntity entity the original object Returns Type Description System.Object a dynamic object for easier coding | Improve this Doc View Source AsEntity(Object) Unwraps a dynamic entity back into the underlying IEntity Declaration public IEntity AsEntity(object dynamicEntity) Parameters Type Name Description System.Object dynamicEntity the wrapped IEntity Returns Type Description IEntity A normal IEntity | Improve this Doc View Source AsList(Object) Converts a list of IEntity objects into a list of IDynamicEntity objects. Declaration public IEnumerable<dynamic> AsList(object list) Parameters Type Name Description System.Object list typically a List/IEnumerable of Entities or DynamicEntities. Can also be a IDataSource in which case it uses the default stream. Returns Type Description System.Collections.Generic.IEnumerable < System.Object > a list of IDynamicEntity objects Remarks Added in 2sxc 10.21.00 | Improve this Doc View Source CreateSource<T>(IDataSource, ILookUpEngine) Create a IDataSource which will process data from the given stream. Declaration public T CreateSource<T>(IDataSource inSource = null, ILookUpEngine configurationProvider = null) where T : IDataSource Parameters Type Name Description IDataSource inSource The data source which will be the default In of the new data-source. ILookUpEngine configurationProvider An alternate configuration provider for the DataSource Returns Type Description T A typed DataSource object Type Parameters Name Description T A data-source type - must be inherited from IDataSource | Improve this Doc View Source CreateSource<T>(IDataStream) Create a IDataSource which will process data from the given stream. Declaration public T CreateSource<T>(IDataStream inStream) where T : IDataSource Parameters Type Name Description IDataStream inStream The stream which will be the default In of the new data-source. Returns Type Description T A typed DataSource object Type Parameters Name Description T A data-source type - must be inherited from IDataSource | Improve this Doc View Source File(String, Nullable<Boolean>, String, String, String, Object) Declaration public dynamic File(string noParamOrder = \"Rule: All params must be named (https://r.2sxc.org/named-params)\", bool? download = default(bool? ), string virtualPath = null, string contentType = null, string fileDownloadName = null, object contents = null) Parameters Type Name Description System.String noParamOrder System.Nullable < System.Boolean > download System.String virtualPath System.String contentType System.String fileDownloadName System.Object contents Returns Type Description System.Object Implements IDnnDynamicCode IDnnDynamicCodeAdditions IDynamicCode ICreateInstance ICompatibilityLevel IHasLog IDynamicWebApi"
  },
  "net-code/images/srcset.html": {
    "href": "net-code/images/srcset.html",
    "title": "Specify SrtSet on Responsive Images API | 2sxc 13 / EAV 13",
    "keywords": "Specify SrtSet on Responsive Images API Both <img> as well as <source> tags can have a srcset attribute. Tip If you are new to responsive images, we suggest you read the MDN Guide to get familiar with this The Responsive Images API generates these automatically for you. In many cases, the configuration for this comes from the settings - like from Settings.Images.Content . But often you may want to configure it yourself - either by reconfiguring the Settings in the Admin-UI, or by supplying in in the code. Concept The way the generator works is that you give it the rules you want based on 4 options: An exact width in pixels (usually with the w parameter in srcset s) A multiple based on the device pixel density (usually with the x parameter) A smaller size based an a multiple (like half the original if it's half the size) The fallback / default picture Examples 1000w, 800w, 600w, 400w Generate these four widths as exact pixel sizes 1x, 1.5x, 2x Generate these three sizes for screen pixel densities 1*, 0.75*, 0.5*, 0.25* Generate exact pixel sizes based on the initial size, so if the initial image was 1200px, it is the same as 1200w, 800w, 600w, 400w d Generate a default line (without any w or x specifier) A lot is auto-detected, so if you want to, you can leave away the w and x and * in almost all cases. So this is valid too (see below for auto-detection rules): 1000, 800, 600, 400 1, 1.5, 2 1*, 0.75, 0.5, 0.25 1/1, 1/2, 1/3, 1/4 (empty string) - defaults to d In addition to the standard factor you can also set what size should be used exactly - otherwise it's auto-calculated: 1x=1200, 1.5x=1800, 2x=2400, 2.5x=2400, 3x=2400 1000=1000, 1600=1200 1x=1200:600, 1.5x=1800:600, 2x=2400:600 - height can also be set SrcSet Parameter Specs It is always one or more values, separated by a comma , Each value has a number like 1 , 1.5 , 1200 or a fraction like 1/2 or 1:2 - or empty for d (default) Each value can have a specifier like w , x , * or d - or it's auto detected It can be followed by an = to specify exact resizing rules After the = it can have a width After that it can have a : followed by the resize height Auto Detected Types w , x , * and d These are the rules if the type is not specified: If the number is smaller than 1 it must be a multiplier of the original size, so * is assumed If the number is written as a fraction like 2/3 or 4:3 it is assumed to be a multiplier * If the number is greater than 1 and less than 10 a pixel density is assumed x If the number is 10 or greater than width is assumed w If nothing (not even a number) is specified, default d is assumed History Introduced in 2sxc 13.01"
  },
  "net-code/images/index.html": {
    "href": "net-code/images/index.html",
    "title": "Responsive Images API in .net | 2sxc 13 / EAV 13",
    "keywords": "Responsive Images API in .net Creating perfect responsive images can be really hard. Aspects which are covered Creating img tags with perfect srcset s Creating picture tags with perfect source tags for each appropriate format and size Automatically using [Settings] to create the predefined sizes... ...or manually specify other sizes Example @using ToSic.Sxc.Services; @{ var imgService = GetService<IImageService>(); var blogPic = imgService.Picture(blogPost.Image); } @blogPic TODO: LINK TO EXAMPLES How This Works Internally this is what will happen: The format of the file is checked, to detect if other formats could be converted to (like jpg cound also be webp) If no settings are provided, the default settings for content-images are used (see below) If no srcSet is provided, the default from the settings are used (see below) It will then generate a ResponsivePicture object which you can just show, or do more things with (see below) Guide Basic 1. Prepare Always start by getting the IImageService - you will usually just get this once per Razor template: var imgService = GetService<ToSic.Sxc.Services.IImageService>(); If needed, prepare resize settings using the ResizeSettings(...) . This is probably only needed in ca. 10% of all cases, because the defaults are usually what you want to use. If you want to do this, see further explanations further down. 2. Get the Responsive Object Get the responsive Image or Picture using the Img(...) or Picture(...) . // Example for a file in the App folder var appIconImg = imgService.Img(App.Path + \"/app-icon.png\"); var appIconPicture = imgService.Picture(App.Path + \"/app-icon.png\"); // Example for an image on a dynamic-data object var blogPicImg = imgService.Img(blogPost.Image); 3. Output When creating the HTML you have many options. The most basic is just to show the result: @appIconImg @appIconPicture Guide Advanced Resize Settings If no settings are provided, the Settings.Images.Content see settings will be used automatically. The most common scenario is that you have a razor template which shows images that are typically half or a third the size of the normal content. In such a case you would also supply a factor in various possible formats. Here some examples: var blogPicImgHalf = imgService.Img(blogPost.Image, factor: 0.5); var blogPicImgThird = imgService.Img(blogPost.Image, factor: \"1/3\"); var blogPicImg2Thirds = imgService.Img(blogPost.Image, factor: \"2:3\"); You can also use other settings, like Settings.Images.Screen for larger settings. This can also be combined with factor - here's an example: var background = imgService.Img(blogPost.Image, settings: Settings.Images.Screen); var backgroundSmaller = imgService.Img(blogPost.Image, settings: Settings.Images.Screen, factor: 0.9); You can also use custom settings like this: var resizeSettings = imgService.ResizeSettings(width: 1000, quality: 75, aspectRatio: \"16/9\"); var img = imgService.Img(blogPost.Image, settings: resizeSettings); And you can merge standard settings with your custom settings like this: var resizeSettings = imgService.ResizeSettings(settings: Settings.Images.Custom, width: 1000, quality: 75, aspectRatio: \"16/9\"); var img = imgService.Img(blogPost.Image, settings: resizeSettings); Image alt Description or class Attribute These are the most common things you may want to specify, so the Img(...) and Picture(...) tag support this in the initial call: var img = imgService.Img(blogPost.Image, imgAlt: blogPost.Title, imgClass: \"some-class-names\"); Other attributes can be set as well, but it's more complicated. See custom Output below. Custom Output In most cases you'll just want to show the image or picture, like this: @{ var img = imgService.Img(blogPost.Image); var picture = imgService.Picture(blogPost.Image); } @* Now just show them *@ @img @picture But you may need to customize more what the output shows. Let's assume you want to give the <img> and <picture> tag a special id here's what you would do: @{ var img = imgService.Img(blogPost.Image); img.ImgTag.Id(\"mainImg\"); var picture = imgService.Picture(blogPost.Image); picture.ImgTag.Id(\"mainImg\"); picture.PictureTag.Id(\"mainPic\"); } @* Now just show them *@ @img @picture The img and picture variables are IResponsiveImage and IResponsivePicture objects. The ImgTag and PictureTag properties are RazorBlade objects and can be customized using the RazorBlade fluid Tag API. In case you want even more control over your output, you can also piece it together yourself: @{ var img = imgService.Img(blogPost.Image); var picture = imgService.Picture(blogPost.Image); } @* Show the Image with some custom changes *@ @img.Id(\"imgId\").Style(\"width: 33%\") @* Show your own Image tag *@ <img src=\"@img.Url\" srcset=\"@img.SrcSet\" alt=\"some alt text\"> @* Show the picture with some custom changes on the <picture> *@ @picture.PictureTag.Id(\"picId\") @* Show the picture with some custom changes on the <picture> and <img> *@ @{ picture.PictureTag.Id(\"picId\"); picture.ImgTag.Style(\"width: 30%\"); } @picture @* Piece together your own responsive picture tag simple option *@ <picture> @picture.SourceTags @picture.ImgTag.Style(\"width: 30%\") </picture> @* Piece together your own responsive picture tag simple option *@ <picture> @picture.SourceTags <img src=\"@picture.Url\" style=\"width: 30%\"> </picture> @* Piece together your own responsive picture tag simple option *@ <picture> @foreach(var source in picSet.SourceTags){ @source.Sizes(\"some-sizes\") } <img src=\"@picture.Url\" style=\"width: 30%\"> </picture> TODO: document recipe system <!-- ## SrcSet Parameters The `srcSet` will default to the ones given in the settings, or you can specify your own. üëâ Read more about [](xref:NetCode.Images.SrcSet) In cases where you are generating other custom code and need properly created SrcSet values, you can also use: üëâ [](xref:ToSic.Sxc.Services.IImageService.SrcSet*) --> What you Need To Know The (new) API lies in the namespace ToSic.Sxc.Services - see ToSic.Sxc.Services The IImageService will do all the magic - see IImageService History Introduced in 2sxc 13.01"
  },
  "basics/server/web-api.html": {
    "href": "basics/server/web-api.html",
    "title": "WebApi and Headless APIs on the Server | 2sxc 13 / EAV 13",
    "keywords": "WebApi and Headless APIs on the Server <!-- Data Highlights --> <!-- ADAM --> <!-- Server --> <!-- Prepare --> <!-- Data Source --> <!-- Optimzers --> <!-- Process / Awesomize --> <!-- Libraries --> <!-- data formats --> <!-- Browser --> <!-- Frameworks --> <!-- App show parts --> <!-- Interact parts --> <!-- Edit parts --> <!-- Edit UI parts --> <!-- SPA parts --> <!-- Custom highlight boxes - can be controlled by in-page CSS --> you are here (click to zoom) - discover the stack .context-box-summary .process-apis { visibility: visible; } Every App has built-in WebAPIs for Headless use and you can create your own custom C# Controllers as well. Learn more about WebApi in general Headless WebAPIs in 2sxc 2sxc Custom C# Web APIs"
  },
  "net-code/dynamic-data/entity-vs-dynamic-entity.html": {
    "href": "net-code/dynamic-data/entity-vs-dynamic-entity.html",
    "title": "Entity vs. Dynamic Entity Content-Items | 2sxc 13 / EAV 13",
    "keywords": "<!-- Data Highlights --> <!-- ADAM --> <!-- Server --> <!-- Prepare --> <!-- Data Source --> <!-- Optimzers --> <!-- Process / Awesomize --> <!-- Libraries --> <!-- data formats --> <!-- Browser --> <!-- Frameworks --> <!-- App show parts --> <!-- Interact parts --> <!-- Edit parts --> <!-- Edit UI parts --> <!-- SPA parts --> <!-- Custom highlight boxes - can be controlled by in-page CSS --> you are here (click to zoom) - discover the stack .context-box-summary .data-all { visibility: visible; } Entity vs. Dynamic Entity Content-Items When coding with 2sxc data, there are two data object types: DynamicEntity and Entity : Dynamic Entities are simple, dynamic objects that allow you to write template with any property you believe the data should have, like @person.FirstName etc. They will automatically pick the right language and do a lot of magic üßô‚Äç‚ôÇÔ∏è in the background. Entities are strongly typed objects for complex work, but getting values is much more difficult. You usually don't need this, but it's important that you know this exists. This piece of code shows why you usually don't want to use the IEntity and will prefer the IDynamicEntity instead. // The easy way, using the content-item as a DynamicEntity var titleSimple = Content.Title; // The hard way, what actually happens internally var languagePreference = [\"de\", \"en\"]; var autoResolveLinks = true; var titleMedium = AsEntity(Content).GetBestValue(\"Title\", languagePreference, autoResolveLinks); As you can see, the internals provide a lot of information about the underlying data - things you usually don't care about, but in rare cases may be important. Conversion Each type can be converted to the other type using helpers like AsDynamic(...) , AsList(...) and AsEntity(...) . The APIs are explained here Dynamic Code API . Tip In most cases you'll always use Dynamic Entities and if you're not sure whan an object is, just run it through AsDynamic(...) . Conversion Examples This is just a bit of code so you can see how to convert back and forth. You usually won't care too much about this and not do this. Note that this is a very advanced topic, and you'll need Visual Studio Intellisense to get this done reasonably. Since you'll figure it out fairly quickly, we won't document it in detail here. // assume that you have a DynamicEntity like Content var entity = AsEntity(Content); // assume that you have a DataStream with Entities... @foreach(var postEntity in Data[\"Default\"]) { var postDyn = AsDynamic(postEntity); // postEntity is a IEntity // postDyn is a DynamicEntity } // but this is easier - convert the whole list @foreach(var post in AsDynamic(Data[\"Default\"])) { var postEnt = AsEntity(post); // do something with the @post here, it's a DynamicEntity // ...or with postEnt, it's an IEntity } Read also Discover More in the Razor Tutorials We have an rich series of Razor tutorials . You should really check them out üëç. Dynamic Entity Objects Entity Objects History Introduced in 2sxc 01.00 Multi-Language since 2sxc 02.00 Added Value and Value<T> as well as Parents() and Children(...) in 09.42. Note that Value does not do the same thing as GetBestValue."
  },
  "net-code/dynamic-data/dynamic-stack.html": {
    "href": "net-code/dynamic-data/dynamic-stack.html",
    "title": "Dynamic Stack Objects | 2sxc 13 / EAV 13",
    "keywords": "<!-- Data Highlights --> <!-- ADAM --> <!-- Server --> <!-- Prepare --> <!-- Data Source --> <!-- Optimzers --> <!-- Process / Awesomize --> <!-- Libraries --> <!-- data formats --> <!-- Browser --> <!-- Frameworks --> <!-- App show parts --> <!-- Interact parts --> <!-- Edit parts --> <!-- Edit UI parts --> <!-- SPA parts --> <!-- Custom highlight boxes - can be controlled by in-page CSS --> you are here (click to zoom) - discover the stack .context-box-summary .data-all { visibility: visible; } Dynamic Stack Objects Important: this is new in 2sxc 12.02 and may still have minor issues In some scenarios you want to ask multiple Entities if they have an Value. For example you may need i18n Resources (like the label of a button). This could be in the View Resources or in the App Resources . It would be cumbersome to write code to check all this, which is there the DynamicStack comes in. The DynamicStack will hold a stack of Entities or DynamicEntities . It will ask them in sequence if they have the value you need, and return the first match. The order of the stack is important, as the first entity to provide an answer will be used. Dynamic Stacks behave as if they were Dynamic Entities . Examples of Dynamic Stacks In Razor and WebApi you will find these objects are Dynamic Stacks: Settings Resources Why Use Dynamic Stacks? Our core goal is the consolidation of spread out Settings and Resources. We're not yet sure if developers will find other uses for this, but we're pretty sure there are some cool reasons to do this. Some Ideas we have are: Make your code simpler by merging 2-3 objects which describe the same thing, like a Person and Profile Merge Presentation settings with Defaults from another Entity How to Create a Dynamic Stack In 2sxc 12.02 there is an experimental overload of AsDynamic(...) to create your own stacks. Here's how it works: // the personEntity and profileEntity are Entity objects var person = AsDynamic(personEntity); var name = person.Name; var profile = AsDynamic(profileEntity); var favoriteColor = profile.FavoriteColor; var stack = AsDynamic(personEntity, profileEntity); var nameFromStack = stack.Name; var colorFromStack = stack.FavoriteColor; Possible Gotchas with Dynamic Stacks Proritized by Source, not Language As of now, the stack always checks each entity one by one to see if it can supply an answer. This means that if one source has an answer from the fallback language it will supply it, even if a later source might have the perfect answer in the primary language. We're not sure how relevant this is, but it's something you will want to keep in mind. Empty Values are Treated as No Value To detect if a value should be used the code checks for emptyness. This means an empty string or an empty list of relationships will be treated as no-hit and the search will continue through the stack. This also means that it may be difficult to \"nullify\" a value in a higher-level source, as that will be ignored. Read Also üëâ API docs for IDynamicStack History Introduced in 2sxc 12.02"
  },
  "js-code/2sxc-api/2sxc/obsolete/2sxc.cms-v9.html": {
    "href": "js-code/2sxc-api/2sxc/obsolete/2sxc.cms-v9.html",
    "title": "The OLD $2sxc.cms.run(...) API v9.30 | 2sxc 13 / EAV 13",
    "keywords": "The OLD $2sxc.cms.run(...) API v9.30 Warning This is documentation for an old feature. You should use the new one instead How to use (v9.30) Before you start, ensure you have the necessary JS scripts loaded: in edit-mode this happens automatically if you want to provide this to low-priviledge users, use @Edit.Enable(...) in razor Simple example: @* enable the editing *@ @Edit.Enable(api: true, forms: true, context: true, autoToolbar: false) <script> // simple function to run the command and handle the returned promise function addProject(tag) { $2sxc.cms.run(tag, \"new\", { contentType: \"Project\"}) .then(function () { alert(\"Thanks - we'll review your entry and publish it.\") }); } </script> <span onclick='window.addProject(this)'> add your project </span> the first parameter is an HTML tag in the DOM, which is used to look up the context automatically (see edit-context ) the second parameter is the verb for the cms-command to run the third parameter is additional parameters for that command Demo App and further links Tutorial app for Public Forms Blog Recipe for using Public Forms with 2sxc History Introduced in 2sxc 09.30 Made obsolete with new RunParams in 2sxc 12.10 to support registering workflows - see The $2sxc.cms API"
  },
  "js-code/2sxc-api/2sxc/index.html": {
    "href": "js-code/2sxc-api/2sxc/index.html",
    "title": "The $2sxc Global Object | 2sxc 13 / EAV 13",
    "keywords": "The $2sxc Global Object <!-- Data Highlights --> <!-- ADAM --> <!-- Server --> <!-- Prepare --> <!-- Data Source --> <!-- Optimzers --> <!-- Process / Awesomize --> <!-- Libraries --> <!-- data formats --> <!-- Browser --> <!-- Frameworks --> <!-- App show parts --> <!-- Interact parts --> <!-- Edit parts --> <!-- Edit UI parts --> <!-- SPA parts --> <!-- Custom highlight boxes - can be controlled by in-page CSS --> you are here (click to zoom) - discover the stack .context-box-summary .interact-2sxc { visibility: visible; } The $2sxc is a global JavaScript object helping you to access data of your view or WebAPIs of your 2sxc-App. You need this if you wish to do JavaScript stuff in 2sxc, like retrieve data from a WebApi. Cases where you need $2sxc: When you want to use view-data as an asyc-JS call if you wish to work with WebAPI REST calls if you want more control over the edit-experience with custom buttons etc. How to use add a script-tag to include the 2sxc.api.min.js note 1: in edit-mode this happens automatically note 2: always use lower-case paths and the minified version call the $2sxc(...) constructor to get a sxc-controller for your module (as each module on the page will have an own $2sxc controller) work with the API of the sxc-controller Here's a simple example of a template-file: @inherits Custom.Hybrid.Razor12 @using ToSic.Sxc.Services; @{ // Tell the page that we need the 2sxc Js APIs GetService<IPageService>().Activate(\"2sxc.JsCore\"); } <script> $(function () { var modId = @CmsContext.Module.Id; // Get the ModuleId from Razor var sxc = $2sxc(modId); // Get the Module Service in JS from the Global object alert(\"edit mode: \" + sxc.isEditMode()); // Check if we are in Edit mode }); </script> The code above shows how to include the api-file in the best way using GetService<IPageService>().Activate(\"2sxc.JsCore\") how go get the ModuleId into JS using @CmsContext.Module.Id from Razor (there is another way - read below) how to ask if we're in edit-mode The moduleId is usually dynamic, so you can't hardwire it with var modId = 17 into your JS code. This is explained in the next section Initialization . Get the Sxc-Module-Service using $2sxc We have four initializers: $2sxc(HTMLElement) - recommended $2sxc(moduleId) - oldest way, very common $2sxc(moduleId, contentBlockId) - a special version for internal use only $2sxc(ContextIdentifier) - new in v11.11 The HTMLElement Method We recommend the HTMLElement syntax , because in that mode $2sxc will go up through the DOM-tree and find the module it's in (or the content-block), and auto-configure itself. What's nice about this is that this method works without any server-side support (which you need for the other methods). Here's a simple example: <a onclick='$2sxc(this).manage.run(\"layout\")'>layout</a> In the above example, the HTMLElement is given by the current click, which puts the current <a> node in the this object. Here's a JS example: var x = $(\".myApp\"); // get ANY dom element inside this 2sxc app var sxc1 = $2sxc(x); // use it // the same thing in 1 line var sxc2 = $2sxc($(\"#SomeNodeInThePage\")); Note that the simple example above assumes that there is only one item on the page, but there can often be more. So you'll usually need to do something like this // note that we cannot work before the page-onready. // so our code is in a $(our-code); $(function(){ $(\"some-jquery-selector\").each(function(index, element){ var sxc = $2sxc(element); // now do something... }); }); The ModuleId Method In this method, you need to get the ModuleId from somewhere, usually provided by the server-side template. In a Token-Template you would use [Module:ModuleId] and in a Razor-Template it's @Dnn.Module.ModuleID (large \"ID\"). The same code in Razor for Dnn and Oqtane would be: $(function () { var sxc = $2sxc(@CmsContext.Module.Id); alert(\"edit mode: \" + sxc.isEditMode()); }) The same code in Tokens would be: $(function () { var sxc = $2sxc([Module:ModuleId]); alert(\"edit mode: \" + sxc.isEditMode()); }) You can also find an example of finding all of our nodes and initializing them in the TimeLineJS App . If you're interested, here's the js-initializer . The ContextIdentifier Method (new v11.11) When you use the ContextIdentifier , you are bypassing various automations which pick up the context by default. The ContextIdentifier has this setup: export class ContextIdentifier { /** ZoneId of this Context */ zoneId: number; /** AppId of this Context */ appId: number; /** PageId of this Context (optional) */ pageId?: number; /** ModuleId of this Context (optional) */ moduleId?: number; } This mode is mainly used when integrating 2sxc into other systems which don't provide the full CMS functionality when creating edit-functionality which is outside the default context, like in the context of a Module where you must edit data of a different App Additional properties of the $2sxc Controller: cms In 2sxc 9.30 a new object $2sxc.cms was added - read about it in $2sxc.cms Everything about the Module-Level Sxc Instance In the module level Sxc Instance you'll read about: The API of a module-level controller Calling commands, creating toolbars and buttons Working with JSON data of the current module Working with REST / HTTP Async Stuff Working with WebAPI calls, especially to your backend WebAPI in your api-folder Calling Queries (from the VisualQuery designer) Technical Features Explained Including the $2sxc API JavaScript File Each template that needs the $2sxc-file when not logged in must include it, to be sure it's always there when needed. Note that we've included various features to prevent duplicate execution. if the file is included multiple times, it will only execute once if the file is included minified and unminified, it too will only be executed once if you need to debug the JS for whatever reason with F12 in the browser a sourcemap is included for more advanced debuging, just include the unminified version Note that the entire code is packed in an IIFE, so the only global variable created is the $2sxc . Everything is Cached We optimized for just about every thinkable situation, so the $2sxc will build a controller-object for a module, but following calls to it will use the cached information. Example: var sxc = $2sxc(42); // initial call, will build controller for Module 42 var sxc2 = $2sxc(42); // second call, will use cached controller var sxc3 = $2sxc(domNodeInsideTheModule42); // another call, will also used cached controller Environment and Context Data Needed by $2sxc to Work The $2sxc object needs a few pieces of information to work properly, which are usually stored in two locations: In a page-header Meta tag with the Id _jsApi In JSON in the HTML where the Module start So the Module-DIV-Tag is actually enhanced with additional pieces of information. This structure is open and easy to read, but the structure can change from time to time, so don't read/rely on that JSON, use the $2sxc to access any information. There are even situations where additional context data in inserted into the HTML rendered by your template. This has to do with inner-content (see next section) and the same \"don't rely on the JSON\" applies. Module-Instances and Content-Blocks This is a very advanced topic, so if you're new - just skip this. Also if you use content-blocks you don't need to understand this, it's just included for completeness. A 2sxc-module can contain many 2sxc-content-blocks since version 8.4 because an item could have independent, inner content-blocks. Because of this, the controller may need an additional parameter, so instead of $2sxc(moduleId) it can also use $2sxc(moduleId, contentBlockId) . As mentioned above, you never need to work with this, it's included for completeness. Since the now recommended method to initialized $2sxc is not with the moduleId but with a DOM-node, that call will automatically resolve everything correctly. Background: How $2sxc works This is just some info for you to better understand what happens behind the scenes: How Module-Level Information is found When you use $2sxc(moduleId) it scans the DOM for the <div> tag that contains the module with that ID When you use $2sxc(htmlNode) it starts from that node and scans all parents till it finds the <div> which is the module wrapper Once it finds that, it knows what module it's for and configures itself How Page and Portal Information is Found This is for information the $2sxc needs for WebApi calls. This here applies to 2sxc 10.25+ It first checks the html-head section for a meta tag with the name _jsApi . If this exists, it contains a JSON with everything it needs. If that doesn't exist it will retry 3x times (in case the head wasn't ready yet) and otherwise falls back to the old mechanism. The old mechanism is to ask Dnn and the ServicesFramework for this information. This is always available when you're logged on as an editor, but it's only on the page for anonymous users IF ...you are either using the old mechanisms ...or your Razor code asked for with @Edit.Enable(js:true) Demo App and further links You should find some code examples in this demo App TimeLineJS all the JS-apps including AngularJS in the app-catalog More links: Description of the feature on 2sxc docs History Introduced in 2sxc 04.00 Enhanced with cms (see cms ) in 9.30 Enhanced the $2sxc(...) constructor with the ContextIdentifier in v11.11 Replaced Edit.Enable(js:true) with the new IPageService.Activate(\"2sxc.JsCore\") in v13.0"
  },
  "abyss/parts/look-up/lookup-app.html": {
    "href": "abyss/parts/look-up/lookup-app.html",
    "title": "App LookUps | 2sxc 13 / EAV 13",
    "keywords": "App LookUps <!-- Data Highlights --> <!-- ADAM --> <!-- Server --> <!-- Prepare --> <!-- Data Source --> <!-- Optimzers --> <!-- Process / Awesomize --> <!-- Libraries --> <!-- data formats --> <!-- Browser --> <!-- Frameworks --> <!-- App show parts --> <!-- Interact parts --> <!-- Edit parts --> <!-- Edit UI parts --> <!-- SPA parts --> <!-- Custom highlight boxes - can be controlled by in-page CSS --> you are here (click to zoom) - discover the stack .context-box-summary .lookup-sources { visibility: visible; } The App has three Sources which can be used in LookUps App - for app properties App:Settings - for settings of the App App:Resources - for i18n resources in the App App Tokens The following tokens are related to App-Information and Resources. Dnn/DotNetNuke does have these, you can only access them when in a 2sxc-App. Token Description Result [App:Path] /App-Demos/2sxc/Tutorial Tokens [App:PhysicalPath] \\nasw2\\P\\2sxc 2019b\\Web\\App-Demos\\2sxc\\Tutorial Tokens <!-- Internal note: these properties are not surfaced in the tokens ATM {\"DisplayName\", String.IsNullOrEmpty(appName) ? eavAppName : appName }, {\"Folder\", String.IsNullOrEmpty(appName) ? eavAppName : RemoveIllegalCharsFromPath(appName) }, {\"AllowTokenTemplates\", \"False\"}, {\"AllowRazorTemplates\", \"False\"}, {\"Version\", \"00.00.01\"}, {\"OriginalId\", \"\"} --> App:Settings Tokens Token Description Result [App:Settings:<Property>] App Settings which the App-designer defined. - [App:Settings:UseLightbox] All the information (multi-lingual) true App:Resources Tokens Token Description Result [App:Resources:<Property>] All the information (multi-lingual) - [App:Resources:GreetingText] All the information (multi-lingual) Hello there Token-Learner History Params added in 2sxc ca. v2 Enhanced with Settings/Resources ca. v4"
  },
  "abyss/data-formats/xml/table/index.html": {
    "href": "abyss/data-formats/xml/table/index.html",
    "title": "Table Data Format in 2sxc (technical) | 2sxc 13 / EAV 13",
    "keywords": "Table Data Format in 2sxc (technical) <!-- Data Highlights --> <!-- ADAM --> <!-- Server --> <!-- Prepare --> <!-- Data Source --> <!-- Optimzers --> <!-- Process / Awesomize --> <!-- Libraries --> <!-- data formats --> <!-- Browser --> <!-- Frameworks --> <!-- App show parts --> <!-- Interact parts --> <!-- Edit parts --> <!-- Edit UI parts --> <!-- SPA parts --> <!-- Custom highlight boxes - can be controlled by in-page CSS --> you are here (click to zoom) - discover the stack .context-box-summary .data-all { visibility: visible; } You can export/import lists of data for mass-editing in Excel. Read about üëâ Data Export / Import üëâ App Export / Import Example <SexyContentData> <Entity Type=\"Categories\"> <Guid>9e751a94-4335-48fa-b1f8-44ca97a06ab8</Guid> <Language>en-US</Language> <Name>AHV de</Name> <SortOrder>30</SortOrder> <SharepointId>5543</SharepointId> <CategoryLanguage>de</CategoryLanguage> <GroupName>AHV</GroupName> </Entity> <Entity Type=\"Categories\"> <Guid>9e751a94-4335-48fa-b1f8-44ca97a06ab8</Guid> <Language>fr-FR</Language> <Name>AVS de</Name> <SortOrder>[]</SortOrder> <SharepointId>[]</SharepointId> <CategoryLanguage>[]</CategoryLanguage> <GroupName>AVS</GroupName> </Entity> <Entity Type=\"Categories\"> <Guid>9e751a94-4335-48fa-b1f8-44ca97a06ab8</Guid> <Language>it-IT</Language> <Name>AVS de</Name> <SortOrder>[]</SortOrder> <SharepointId>[]</SharepointId> <CategoryLanguage>[]</CategoryLanguage> <GroupName>AVS</GroupName> </Entity> <SexyContentData> This format works well to open in Excel and save again. Special notes Each language will have an own row - but each with the same GUID as the other languages of the same item Special translation scenarios have special placeholders so a re-import will preserve that state Known Issues If you have a field called <Body> Excel seems to cause trouble. In that case we recommend you temporarily change all the XML nodes in a text-editor with Search-Replace, then edit in Excel and replace back when done."
  },
  "abyss/data-formats/json-v01/value.html": {
    "href": "abyss/data-formats/json-v01/value.html",
    "title": "JSON Value (Multilanguage) V1 | 2sxc 13 / EAV 13",
    "keywords": "JSON Value (Multilanguage) V1 JSON based entities are items which are stored as JSON. This is used in the history, in dynamic-entities in the DB and more. Attributes/Properties have one or move values depending on how they are translated, so the Value is always an Dictionary (object of keys/values). Example This example is showing part of a JSON. Most of it has been removed to just focus on the values: { \"_\": { \"V\": 1 }, \"Entity\": { \"//1\": \"Stuff skipped in this example\", \"Attributes\": { \"String\": { \"Description\": { \"*\": \"Retrieve full list of all zones\" }, \"Name\": { \"en-US\": \"Zones\", \"de-DE\": \"Zonen\" }, }, \"//2\": \"More stuff skipped for this example\" } } Value Format Explained _ (header) mainly storing the version, in case we have to introduce a breaking change - see also format v1 Entity - this marks an entity - at the moment a json package should only have 1, but later it could contain more Attributes - the values of this entity String - all the string values; optional, only exists if there are string values [the field name] [the languages this value applies to] [the value] [more languages / values] [more fields / languages / values] [next type] - all the boolean values; optional, only exists if there are boelean values Language Codes The keys of the dictionary determine what language is used and how. if the key is * then this value applies to all languages if the key is a culture code like en-us (always lower case) it applies to that language if the value is shared with multiple languages you'll see keys like en-us,de-de if the value is shared but read-only in some languages the read-only-languages are prefixed with a ~ so you'll see en-us,~de-de This can of course extend over many languages, so keys like en-us,de-de,de-ch,~ar-ae are valid. Entity Relationship Fields Note that entity-relationship fields cannot be multi-language, so it's always mapped to * and contains an array of references: { \"_\": { \"V\": 1 }, \"Entity\": { \"//1\": \"Stuff skipped in this example\", \"Attributes\": { \"String\": { \"Name\": { \"en-us\": \"Street\" } }, \"Entity\": { \"Calculations\": { \"*\": [] }, \"Errors\": { \"*\": [] }, \"Warnings\": { \"*\": [] } } }, \"//2\": \"More stuff skipped for this example\" } } Read also JSON Format V1 Blog post about the entity json format History Added in 2sxc 9.4"
  },
  "basics/data/fields/number-default.html": {
    "href": "basics/data/fields/number-default.html",
    "title": "Field Input-Type number-default | 2sxc 13 / EAV 13",
    "keywords": "Field Input-Type number-default Use this field type for configuring simple number UI elements, storing number . It's an extension of the basic number field type . Features Input field of type \"number\". Can be used for numbers like: Simple numbers Numbers with decimal digits GPS-Coordinates Configuring a Number-Default This shows the configuration dialog: Number of Decimals is for setting the number of decimals. If a value is 0 then only integers ergo whole numbers allowed. Minimum minimum value (for example, if a number should never be smaller than 1970) Maximum maximum value (eg. 2013) History Introduced in EAV 1.0 2sxc 1.0"
  },
  "basics/data/metadata/for.html": {
    "href": "basics/data/metadata/for.html",
    "title": "| 2sxc 13 / EAV 13",
    "keywords": "Moved to Metadata For Something - (advanced ‚ö†)"
  },
  "basics/data/metadata/create.html": {
    "href": "basics/data/metadata/create.html",
    "title": "| 2sxc 13 / EAV 13",
    "keywords": "Moved to [](xref:Basics.Metadata.Create"
  },
  "net-code/data-sources/custom/data-builder.html": {
    "href": "net-code/data-sources/custom/data-builder.html",
    "title": "DataSource API: DataBuilder.Entity(...) | 2sxc 13 / EAV 13",
    "keywords": "DataSource API: DataBuilder.Entity(...) Many data sources generate new content items - either because they deliver some kind of information, or because they convert data from another source into standardized entities. This is where DataBuilder.Entity(...) helps. Just fyi: Here are the API docs . There is also an Entities for multiple Entities. How the DataBuilder is added The DataBuilder is a IDataBuilder which is automatically given as a property DataBuilder . The DataSource-Factory creates it. How to use DataBuilder.Entity(...) Here's a simple example of the tutorial DateTime DataSource : const string DateFieldName = \"Date\"; var date = DateTime.Now; var values = new Dictionary<string, object> { {DateFieldName, date}, {\"Weekday\", date.DayOfWeek}, {\"DayOfWeek\", (int) date.DayOfWeek} }; // Construct the IEntity and return as ImmutableArray var entity = DataBuilder.Entity(values, titleField: DateFieldName); return new [] {entity}.ToImmutableArray(); This example shows how an entity-object is build using DataBuilder.Entity(values) on the ToSic.Eav.Data namespace. Concept Behind DataBuilder.Entity(...) Internally it will generate a simplified IEntity object. It's also missing some advanced features like multi-language and repository identity (which would be important in edit-scenarios). The simplest way is to just use DataBuilder.Entity(someDictionary) , more advanced uses also tell the system which field is the title, some numeric or Guid IDs and more. Building Lists of Entities You can loop through your data and call DataBuilder.Entity(someDictionary) many times. You can also use the overload DataBuilder.Entities(IEnumerable<someDictionary>) . Best read the API docs . More Parameters on DataBuilder.Entity(...) All paramaters are optional, except the first one containing the values. Here's what each one does: string titleField is the title field name, so the entity then also knows which one is the title and can support .EntityTitle property string typeName is a nice name for the type, allowing for type-filtering later in other data sources int id gives a number identity, so .EntityId is useful and filtering by EntityId (like when having details-pages needing this id) works Guid guidId is a UUID identity, so .EntityGuid is useful DateTime modified would allow to filter / sort by the .Modified property int appId could be used to pretend it's part of another app. This only affects the AppId property, and ATM there is no important reason to do this. Read also DataSource API - DataSource API overview DataSource API: Provide(...) Entity Demo Code and further links Tutorial DataSource History Introduced in EAV 4.x, 2sxc 09.13"
  },
  "api/dot-net/ToSic.Sxc.WebApi.html": {
    "href": "api/dot-net/ToSic.Sxc.WebApi.html",
    "title": "Namespace ToSic.Sxc.WebApi | 2sxc 13 / EAV 13",
    "keywords": "Namespace ToSic.Sxc.WebApi Interfaces IDynamicWebApi This interface extends WebAPIs with File-Save helpers. It's important, because if 2sxc also runs on other CMS platforms, then the Dnn Context won't be available, so it's in a separate interface."
  },
  "js-code/2sxc-api/sxc.webapi-bare-metal.html": {
    "href": "js-code/2sxc-api/sxc.webapi-bare-metal.html",
    "title": "| 2sxc 13 / EAV 13",
    "keywords": "Moved to The WebApi Helpers on the Sxc Controller - Bare Metal"
  },
  "js-code/2sxc-api/sxc.query.html": {
    "href": "js-code/2sxc-api/sxc.query.html",
    "title": "| 2sxc 13 / EAV 13",
    "keywords": "Moved to Query Services of the Sxc Instance"
  },
  "basics/browser/edit-ux/toolbars/index.html": {
    "href": "basics/browser/edit-ux/toolbars/index.html",
    "title": "| 2sxc 13 / EAV 13",
    "keywords": "moved to In-Page Edit-Item Toolbars and Buttons"
  },
  "basics/browser/edit-ux/toolbars/customize.html": {
    "href": "basics/browser/edit-ux/toolbars/customize.html",
    "title": "| 2sxc 13 / EAV 13",
    "keywords": "moved to Custom Toolbars"
  },
  "basics/browser/edit-ux/quick-edit.html": {
    "href": "basics/browser/edit-ux/quick-edit.html",
    "title": "| 2sxc 13 / EAV 13",
    "keywords": "moved to QuickE (Quick Edit)"
  },
  "basics/licenses-features/index.html": {
    "href": "basics/licenses-features/index.html",
    "title": "Licenses and Features | 2sxc 13 / EAV 13",
    "keywords": "Licenses and Features <!-- Data Highlights --> <!-- ADAM --> <!-- Server --> <!-- Prepare --> <!-- Data Source --> <!-- Optimzers --> <!-- Process / Awesomize --> <!-- Libraries --> <!-- data formats --> <!-- Browser --> <!-- Frameworks --> <!-- App show parts --> <!-- Interact parts --> <!-- Edit parts --> <!-- Edit UI parts --> <!-- SPA parts --> <!-- Custom highlight boxes - can be controlled by in-page CSS --> you are here (click to zoom) - discover the stack .context-box-summary .data-configuration { visibility: visible; } 2sxc 13 introduces licenses and features. Licenses are keys which allow the use of advanced features in 2sxc. Features are settings which activate certain features in 2sxc. Some features require a license to be activated. The other features are simply configurable to improve your security. Licenses in 2sxc 13 Core Free License This is the default license which is auto-enabled for everybody, and covers 99.9% of all features. Tip 99.9% of 2sxc is free for everybody to use. Only some really advanced features require a license. Patron / Supporter License This is the most basic license and we hope everybody will apply for this license üòâ. Basically if you become a supporter of 2sxc, you will get some goodies as a special thanks. Goodies include: Ability to paste images from clipboard into file-fields and wysiwyg. (note: this works with all kinds of bitmap, but will not work if the image has transparent parts, because transparency in the clipboard isn't standardized) Hide \"sponsored with üíñ by 2sic\" on ADAM Enhance automatic <picture> tag generation to include newer formats like WebP automatically Enterprise CMS License This is a special license which activates Enterprise CMS functionality which only very sophisticated sites need. As of now, they are: Ability to inherit Apps across sites - useful for installations with many sites using the identical apps Ability to specify edit permissions for each language WebFarmCache Licenses This is used to synchronise web server caches across multiple websites in Farm Scenarios. How to Get and Install a License As of now (February 2022) licenses cannot be purchased yet. We're still working on this - should become available Q1 2022. Licenses currently require manual installation . This too should be improved by the end of Q1 2022. History Feature system introduced in 2sxc 9.30 License system introduced in 2sxc 13.01"
  },
  "web-api/query-rest-web-api.html": {
    "href": "web-api/query-rest-web-api.html",
    "title": "| 2sxc 13 / EAV 13",
    "keywords": "Moved to Query REST Web API"
  },
  "web-api/index.html": {
    "href": "web-api/index.html",
    "title": "2sxc Web API | 2sxc 13 / EAV 13",
    "keywords": "<!-- Data Highlights --> <!-- ADAM --> <!-- Server --> <!-- Prepare --> <!-- Data Source --> <!-- Optimzers --> <!-- Process / Awesomize --> <!-- Libraries --> <!-- data formats --> <!-- Browser --> <!-- Frameworks --> <!-- App show parts --> <!-- Interact parts --> <!-- Edit parts --> <!-- Edit UI parts --> <!-- SPA parts --> <!-- Custom highlight boxes - can be controlled by in-page CSS --> you are here (click to zoom) - discover the stack .context-box-summary .browser-interact, .context-box-summary .process-apis { visibility: visible; } 2sxc Web API 2sxc has a fully featured WebApi for use in JavaScript or as Headless CMS. So you can call HTTP GET to an endpoint like app/News/data/NewsItems/ and get a list of news items. You can also create / modify data using REST, access Queries and work with your custom Web-APIs - across all 2sxc platforms (Dnn / Oqtane / Custom) and with the security you need. Simple Example Here's an example JavaScript which would run in a 2sxc News-App on a Dnn page: // Get news as a promise var allNewsPromise = sxc.webApi.get('app/auto/data/News/'); // now log to console allNewsPromise.then(data => console.log(data)); This example has some magic happening in the background. Specifically 3 important things happen on the client before sending: The real URL which is requested is a bit longer, but the webApi takes care of that. The server needs to know what App and Module the script is calling from. This Context information is also added by the webApi . To add security, a crypto-token is added which will prove that the JavaScript requesting this is running on the page. This is also added by webApi . When the server receives the request, it too does important stuff. First it will use the URL and Context information to figure out what Site , Language and App should be accessed. The server will do some security checks to see if this request should be answered. Then it returns the data in a simple JSON format Get Started Step 1: Decide which Endpoint you need This checklist should help you decide: Getting Started Your 1-2-3 steps for using data endpoints are: Decide which endpoint you need Create / Publish the endpoint For standard endpoints, set the permissions as you need them For custom endpoints, write the C# code Write the code to read the data (typically in JavaScript) Conventions Used REST means that there is a url convention to access data like .../blogposts/25 REST also specifies that an HTTP GET is for reading, HTTP POST is for writing, etc. All the APIs use JSON for sending/receiving data. This is the default schema . Demo App and further links You should find some code examples in this demo App REST and WebApi Tutorial Razor Web API tutorials Recommended Reading Data CRUD API DotNet WebApi Concepts: Polymorphisms History Introduced Content-REST API in 2sxc 5.x Query added in 2sxc 8.10 Enhanced with Polymorph Editions in 2sxc 9.35 (allowing subfolder/api)"
  },
  "web-api/help-admin-ui-content-rest.html": {
    "href": "web-api/help-admin-ui-content-rest.html",
    "title": "Built-in WebApi Help in the Admin-Dialogs (new in v11.10) | 2sxc 13 / EAV 13",
    "keywords": "Built-in WebApi Help in the Admin-Dialogs (new in v11.10) In 2sxc 11.10 we added dialogs in the Admin-UI so it's easier to figure out the endpoints. These UIs also show sample code and everything. Tip In 2sxc 11.10 this dialog was introduced for the Data section, and we'll add similar sections for Query and WebApi . History Introduced in 2sxc 11.10"
  },
  "web-api/data-rest-web-api.html": {
    "href": "web-api/data-rest-web-api.html",
    "title": "| 2sxc 13 / EAV 13",
    "keywords": "Moved to Data REST and CRUD Web API"
  },
  "web-api/custom.html": {
    "href": "web-api/custom.html",
    "title": "2sxc Custom C# Web APIs | 2sxc 13 / EAV 13",
    "keywords": "2sxc Custom C# Web APIs You can create fully custom C# Web APIs in an App. Since this is C# focused, it's documented here: 2sxc Custom C# Web APIs"
  },
  "net-code/razor/services/page-service.html": {
    "href": "net-code/razor/services/page-service.html",
    "title": "Page Service to set Title, Headers and Activate Features | 2sxc 13 / EAV 13",
    "keywords": "Page Service to set Title, Headers and Activate Features In 2sxc 12.02 we introduced the IPageService which helps you to do things like Set the page Title, Keywords, Description or Base-Tag Add Meta-headers Add Icons or Icon-Sets Create JsonLD headers Activate page features like turnOn Discover More in the Razor Tutorials We have an rich series of Razor tutorials . You should really check them out üëç. Concept A Razor template is standalone - the page requests that it's rendered, but there is no official way to also tell the page that the title should change or that certain headers must be set. We approached it in a futuristic way because we wanted to make sure that the code you write works in Dnn and Oqtane. So here's how it works Your code will get a IPageService object using `GetService<IPageService>() Your code can then tell it what you need - like SetTitle(...) or AddJsonLd(...) Once the Razor is done, the engine will forward these requests to the page and ensure it happens üëâ Read about Dependency Injection üëâ Read about the IPageService in the API docs Set Page Properties You can set these page properties SetTitle(newToPrefix) SetTitle(newTitle, placeholder) see docs SetDescription(newDescription) SetDescription(newDescription, placeholder) see docs SetKeywords(additionalKeywords) SetKeywords(additionalKeywords, placeholder) see docs SetBase(url) - see docs Note that SetTitle, SetDescription and SetKeywords will prepend or append whatever you give them to the existing value, unless you specify a placeholder - in which case that placeholder will be replaced. Set Http Response Codes In some cases an App may need to set the page to 404 - so that google doesn't index it. Do this using SetHttpStatus(statusCode, optionalmessage) - see docs Note: ATM this is Dnn ‚ò¢Ô∏è only, as Oqtane doesn't render each page at a time - so a status code wouldn't work there (yet). Add Icons and Icon-Sets like FavIcon Icons / FavIcons are minor enhancements to a page, but they serve more than just the icon in the browser tab. In many cases they may also have larger images used for tiles and more. Use these two commands to get them working: AddIcon - see docs to add a single icon AddIconSet - see docs to add a bundle of icons for various use cases in one step Add Custom Headers Custom headers may be important for JavaScripts running on your page or other special purposes. Set them using these methods: AddToHead(string) - see docs AddToHead(tag) - see docs AddMeta(name, content) - see docs Add JsonLD Headers (Schema.org) JsonLD is a powerful way to describe your page to other systems, especially web crawlers like Google. It uses conventions from schema.org . Use this to add custom JsonLD headers: AddJsonLd(jsonString) - see docs AddJsonLd(jsonObject) - see docs Add OpenGraph Headers OpenGraph is a standard to describe your page for Facebook, Twitter and other more social-style systems. It adds meta headers using og: prefixes. Use these commands to add such headers: AddOpenGraph(propertyName, content) - see docs Activate Page Features üëâ See Page Service to Activate Features & WebResources (JS, CSS, etc.) Discover More in the Razor Tutorials We have an rich series of Razor tutorials . You should really check them out üëç. History Introduced in 2sxc 12.02 to replace the previous static implementation using RazorBlade Enhanced in 12.05"
  },
  "net-code/razor/services/page-service-activate.html": {
    "href": "net-code/razor/services/page-service-activate.html",
    "title": "Page Service to Activate Features & WebResources (JS, CSS, etc.) | 2sxc 13 / EAV 13",
    "keywords": "Page Service to Activate Features & WebResources (JS, CSS, etc.) The PageService helps Razor templates to activate features and load predefined JS/CSS (WebResources). An important aspect of Razor solutions is ensuring that the page has helper materials like jQuery etc. This gets especially complex in scenarios like Oqtane, where the page doesn't really reload and therefor may already have some scripts / styles loaded, but it's hard to guess. For this we have developed a helper called turnOn and the PageService is able to activate this feature (and more in future). Tip Using the IPageService.Activate(...) ensures that all apps use the same resources, and that these are only loaded once per page. Discover More in the Razor Tutorials We have an rich series of Razor tutorials . You should really check them out üëç. Difference between features and WebResources** Features are some system-specific JS/CSS (like jQuery or turnOn) WebResources are JS/CSS which are configured in Settings, so you can use the preset WebResources or define your own at the App, Site or Installation. Examples are fancybox4 , Bootstrap5 etc. Activate Page Features A simple example: var page = GetService<ToSic.Sxc.Services.IPageService>(); page.Activate(\"jQuery\"); // Activate jQuery page.Activate(\"turnOn\"); // Activate turnOn page.Activate(\"jQuery\", \"turnOn\", \"2sxc.JsCore\"); // Activate many This will ensure that jQuery and turnOn are available on the page. Note that it will only be activated once, even if the code would accidentally activate it multiple times. Features you can activate as of v12.02 jQuery - activate jQuery if you need it - recommended for Dnn, required for Oqtane 2.2+ turnOn - the JavaScript turnOn Activation system 2sxc.JsCore - the 2sxc standard JS APIs. Replaces @Edit.Enable(js: true) new in v13 2sxc.JsCms - 2sxc JS APIs to run commands for edit, etc. Replaces @Edit.Enable(api: true) new in v13 2sxc.Toolbars - edit-toolbars on the page. Replaces @Edit.Enable(styles: true, autoToolbar: true) new in v13 Note: The system will auto-cascade features - so if you activate a feature which needs other features, these are automatically activated as well. Features that are explicitly not implemented jQueryUI is often used in ASP.net but it's really old and hasn't had updates since 2016 knockoutJS is often used in ASP.net but it's also barely alive, so it's not meant to be activatable in modern systems like the ones usually built with 2sxc Activate WebResources Any WebResources registered in the settings can be activated. Here's an example: var page = GetService<ToSic.Sxc.Services.IPageService>(); page.Activate(\"Bootstrap5\"); // Activate Bootstrap5 from a CDN page.Activate(\"fancybox4\"); // Activate fancybox4 from a CDN page.Activate(\"fancybox3\", \"FontAwesome5\"); // Activate the older fancybox + FontAwesome5 You can define your own WebResources in the Settings, or check out the list of pre-defined WebResources . History Introduced in 2sxc 12.02 to replace the previous static implementation using RazorBlade Activating WebResources added in 2sxc 12.04"
  },
  "basics/style-guide/index.html": {
    "href": "basics/style-guide/index.html",
    "title": "Style Guide for Dnn / 2sxc Solutions | 2sxc 13 / EAV 13",
    "keywords": "Style Guide for Dnn / 2sxc Solutions Provide a clear, common guideline for Dnn and 2sxc development. The current version is the Style Guide 2020 - beta Style Vocabulary Each guideline describes either a good or bad practice, and all have a consistent presentation. The wording of each guideline indicates how strong the recommendation is. + Do is one that should always be followed. Always might be a bit too strong of a word. Guidelines that literally should always be followed are extremely rare. On the other hand, you need a really unusual case for breaking a Do guideline. testing + Consider Consider guidelines should generally be followed. If you fully understand the meaning behind the guideline and have a good reason to deviate, then do so. Please strive to be consistent. - Avoid indicates something you should almost never do. Code examples to avoid have an unmistakeable red header ? Why explains why this is recommended"
  },
  "basics/server/render/tokens/index.html": {
    "href": "basics/server/render/tokens/index.html",
    "title": "Token Templates | 2sxc 13 / EAV 13",
    "keywords": "Token Templates <!-- Data Highlights --> <!-- ADAM --> <!-- Server --> <!-- Prepare --> <!-- Data Source --> <!-- Optimzers --> <!-- Process / Awesomize --> <!-- Libraries --> <!-- data formats --> <!-- Browser --> <!-- Frameworks --> <!-- App show parts --> <!-- Interact parts --> <!-- Edit parts --> <!-- Edit UI parts --> <!-- SPA parts --> <!-- Custom highlight boxes - can be controlled by in-page CSS --> you are here (click to zoom) - discover the stack .context-box-summary .process-razor { visibility: visible; } Token Templates will generate HTML - often based on the data a editor entered, and/or which was provided from the App. Note The View determines which template file is being loaded. Tip Token templates are by far not as powerful as Razor Templates . We always recommend Razor. Example Template <h1>[Header:Title]</h1> <ul> <repeat> <li><a href=\"[Content:Link]\">[Content:Title]</a> [Content:Toolbar]</li> </repeat> </ul> How it Works Token templates use a Token Engine to generate Html. The convention uses placeholders like [Scope:Property] to put data into the Html. The template files usually reside inside app root folder or sub folder. These end with .html . Placeholders and code usually is marked with [...] like [Content:Name] . Internally the Token-Engine uses LookUps to find what can be shown. Tip Tokens are very limited, we strongly recommend to use Razor Templates templates instead. Read more about it in the Token Basics Content, Presentation and Toolbar Tokens [Content:PropertyName] like [Content:FirstName] [Content:Presentation:PropertyName] like [Content:Presentation:UseLightbox] [Content:Toolbar] to get a Toolbar for the Content-object with it's Presentation Token Toolbars only support the basic toolbar, not the newer TagToolbar . Read more about Toolbars . Header Tokens Note that in Token-templates the Header is called the ListContent for historical reasons, not Header like in Razor. [ListContent:PropertyName] like [ListContent:Title] [ListContent:Toolbar] for the toolbar [ListContent:Presentation:PropertyName] like [ListContent:Presentation:UseLightbox] Common LookUp Sources App Sources App - the current App, which can give you folders (to link JS files) ‚ò¢Ô∏èü©∏ App:Settings - app settings ‚ò¢Ô∏èü©∏ App:Resources - app resources, translated labels etc. ‚ò¢Ô∏èü©∏ Web Server and System Sources Hybrid These work both on Dnn and Oqtane (2sxc 12+) [Query] ‚ò¢Ô∏èü©∏ Web Server and System Sources QueryString - url parameters ‚ò¢Ô∏è Form - form post parameters ‚ò¢Ô∏è DateTime - current date/time information ‚ò¢Ô∏èü©∏ CMS / Dnn Sources [Site] [Page] [Module] Portal - the current Dnn portal Tab - the current Dnn page Module - the current Dnn module User Information Sources User Membership User Profile Read more about LookUp Sources Repeaters / Lists Token templates have a trivial mechanism to loop through lists. Note that we strongly recommend you use Razor Templates instead. Here's how it works: <ol> <repeat repeat=\"Item in Data:Default\"> <li> [Item:Title] [Item:Toolbar] <br> <a href=\"?details=[Item:UrlKey]\">Details...</a> </li> </repeat> </ol> In a repeater the Toolbar can be added using [repeater-name:Toolbar] . Read also Views Templates Razor Templates Razor Tutorial History Introduced in 2sxc 1.0"
  },
  "basics/server/asset-optimization/index.html": {
    "href": "basics/server/asset-optimization/index.html",
    "title": "Optimizing Template Assets / Client Dependencies (JS & CSS) | 2sxc 13 / EAV 13",
    "keywords": "Optimizing Template Assets / Client Dependencies (JS & CSS) <!-- Data Highlights --> <!-- ADAM --> <!-- Server --> <!-- Prepare --> <!-- Data Source --> <!-- Optimzers --> <!-- Process / Awesomize --> <!-- Libraries --> <!-- data formats --> <!-- Browser --> <!-- Frameworks --> <!-- App show parts --> <!-- Interact parts --> <!-- Edit parts --> <!-- Edit UI parts --> <!-- SPA parts --> <!-- Custom highlight boxes - can be controlled by in-page CSS --> you are here (click to zoom) - discover the stack .context-box-summary .asset-optimizer { visibility: visible; } Learn about using the Dnn Client-Resource-Management aka Dnn Client-Depedency-Management in 2sxc templates. Whenever a template needs additional files, specifically JavaScripts CSS Styles Image Resources Fonts These should be included in an optimized form to enhance performance dramatically. This is all about reducing the amount of server requests (very important for end-user performance) and delivering them in the order / places in the HTML-file, optimal for their purpose. So far 2sxc will take care of your JS/CSS files by bundling and minifying them, at the position and order you need. How to use Here's a trivial example for optimizing a CSS with default settings: <link rel=\"stylesheet\" href=\"/style.css\" data-enableoptimizations=\"true\" /> Here's a more typical example, showing an optimization for a style & js which are inside the app-folder. This example uses Razor, so we use @App.Path to ensure it's picking up the right folder (use [App:Path] in token-templates): <link rel=\"stylesheet\" href=\"@App.Path/assets/style.css\" data-enableoptimizations=\"150\" /> <link rel=\"stylesheet\" href=\"@App.Path/assets/lazy.css\" data-enableoptimizations=\"bottom\" /> <script type=\"text/javascript\" src=\"@App.Path/assets/scripts.js\" data-enableoptimizations=\"200:bottom\" /> </script> This shows: a CSS with lower priority (150 instead of the default 100) a css with which will be placed at the page bottom (so it will load later) a script-tag and specifies priority and placement inside the HTML document How it works Basically all <script> tags and all <link rel=\"stylesheet\"> tags can have a data-enableoptimizations attribute, which the system will parse according to the environments capabilities. In Dnn 7/8/9 this means it can can assign priorities (to ensure load-order) can assign placement in the html-document (head, body, bottom) Understanding Priorities There is a fairly complicated article in the dnn wiki about client resource management which explains most of it. In general you can say that all Dnn scripts load with priorities below 100, the default for all standard scripts is 100, and from there you can order things as you need them. We usually prioritize libraries like 2sxc or angular.min.js with 100 or larger, and then place our own script (like an app-blog.min.js) at numbers like 200. Understanding Placement Placement information can only be supplied in 2sxc 8.9 or higher. The three positions are: head meaning that the resulting data is requested in the HTML header. So it will be loaded before the page is rendered, meaning it's available right from the start but also delays page-build. This is often detrimental in terms of page-load times. this is the default location for CSS files body meaning it will be loaded in the beginning of the HTML body tag. Again this means it's there very early, but will slow down page buildup. this is the default location for JS files bottom meaning it will be loaded at the end of the html document. This is actually great for page-loading performance to improve above-the-fold loading. But it takes a bit of work to perfect its application. Read also Dnn API Documentation Blog about problems with the Dnn resource management in case you run into problems Demo App and further links You should find some code examples in this demo App basically this is used in every app in the app-catalog History Introduced in Version 04.00 with true/false Enhanced in Version 06.00 with priority numbers Enhanced in 08.09 with position head/body/bottom"
  },
  "net-code/data-sources/custom/api.html": {
    "href": "net-code/data-sources/custom/api.html",
    "title": "DataSource API | 2sxc 13 / EAV 13",
    "keywords": "DataSource API <!-- Data Highlights --> <!-- ADAM --> <!-- Server --> <!-- Prepare --> <!-- Data Source --> <!-- Optimzers --> <!-- Process / Awesomize --> <!-- Libraries --> <!-- data formats --> <!-- Browser --> <!-- Frameworks --> <!-- App show parts --> <!-- Interact parts --> <!-- Edit parts --> <!-- Edit UI parts --> <!-- SPA parts --> <!-- Custom highlight boxes - can be controlled by in-page CSS --> you are here (click to zoom) - discover the stack .context-box-summary .datasource-custom { visibility: visible; } DataSources are a magic, generic system which can generate new data-items or filter / modify other data. This section explains how they work and the API you need to create your own. Basics DataSources have a few important concepts you must first understand: Data going in and out of DataSources Each data-item is an IEntity containing data about a person, product, file-information etc. A list of items is is a List<IEntity> which contains zero, one or many items A Stream is an object which has list of items and a name A correctly built Stream will Provide this list, but only run the code if it's requested Each DataSource has one or more named Out streams Each DataSource can have one or more named In streams coming from other DataSources Configuration of a DataSource Each DataSource has a ConfigurationProvider , which gives the DataSource information about the environment (like Portal or Tab information), App-Settings and more Each DataSource can have custom Settings , which the user entered in a dialog. Internally this is also an IEntity object Caching DataSources also have cache-identity mechanism, to inform any up-stream cache what parameters actually caused this result, so that the data could be cached if needed Providing Data To offer data on the Out you will usually use the Provide method. If you're generating new items, you'll usually use the DataBuilder.Entity(...) method. Docs for these: DataSource API: Provide(...) DataSource API: DataBuilder.Entity(...) DataSource API: Out Streams DataSource API: In Streams Receiving Data from In for further processing if your DataSource performs filtering or similar actions on existing data, then this data comes in on the In streams. In such scenarios, you would simply iterate over the In[streamname].List and provide the result in your out-stream again. You can find many examples in the EAV DataSources code. Get Configuration A DataSource gets the configuration from a configuration provider. To better understand this, you should read: LookUp System about tokens DataSource Configuration ConfigMask(...) . Configure the UI There is a special attribute called VisualQuery to tell the UI how to show your DataSource and provide help etc. See DataSource API: VisualQuery Attribute . History Introduced in 2sxc 4 or 5 enhanced / simplified in 2sxc 9.13"
  },
  "basics/data/fields/number-dropdown.html": {
    "href": "basics/data/fields/number-dropdown.html",
    "title": "Field Input-Type number-dropdown | 2sxc 13 / EAV 13",
    "keywords": "Field Input-Type number-dropdown Use this field type for configuring simple dropdown UI elements, storing number data . It's an extension of the number field type . Features provide values to select provide visible labels which are different from the stored value optionally allow users to type in something different choose between value-label and label-value ordering allow the use of : in values (just escape as \\: ) Special Behavior When the drop-down UI element finds data stored, which doesn't match any of the values it has available, it will leave that data intact unless the users selects something manually Configuring a Number-Dropdown This shows the configuration dialog: Using the Dropdown with the optional free-text-entry (2sxc 9.10) This is what the UI looks like, if Enable Free Text is enabled If the user then clicks on the I -bar icon ( TT in v11+), the input will change to text so you could type something different - like a numeric value which wasn't suggested. History Introduced in EAV / 2sxc 12.04"
  },
  "abyss/architecture/controllers.html": {
    "href": "abyss/architecture/controllers.html",
    "title": "EAV / 2sxc Controllers (System Endpoints) | 2sxc 13 / EAV 13",
    "keywords": "EAV / 2sxc Controllers (System Endpoints) This is a reference of all Controllers (System WebApi Endpoints) in 2sxc/eav. Warning This in not meant for public use, it's here so you understand how things work. It's also here to help people integrating 2sxc/eav with their solution List of System WebApi Controllers All controllers are implemented using the proxy/real system , except those were specifically noted. Part Route In Controller Purpose & Notes Adam app/[name]/data note1 Sxc Adam REST for ADAM Assets Adam Oqt AppAssets Oqtane only, without proxy/real concept Admin Sxc ApiExplorer Analyse App-Level WebApi Controllers Admin Sxc App Admin the App itself Admin Sxc AppFiles Get files for Code Editor Admin Eav AppParts Export/Import of parts of the App Admin Sxc Dialog Get settings of dialogs Admin Sxc Entity Admin of Entities Admin Eav Features Features to the Features-Management dialogs Admin Sxc Field Admin of Fields - like get all, create new etc. Admin Eav Metadata Admin: Metadata - like get all for a specific target Admin Sxc Query Admin: Query - like create new, import/export etc. Admin Sxc Type Admin: Content Types Admin Sxc View Admin: Views Admin Eav Zone Admin: Zone - information about the current Zone (site) App Oqt AppAssets Oqtane only, without proxy/real concept App app/[name]/data note1 Sxc AppData REST for App Data/Entities App app/[name]/query note1 Sxc AppQuery REST for App Queries Cms Sxc Block Manage Modules on a page Cms Sxc ContentGroup Manage Content-Blocks on a page Cms cms/edit Sxc Edit Edit: Edit data / entities (load/save) Cms cms/history Sxc History Edit: History of an item incl. restore of a previous version Cms cms/list Sxc List In-Page editing of lists Sys sys/insights Eav Insights Insights debugging Sys sys/install Sxc Install Installation of 2sxc on the current system Sys sys/license Eav License License / extensions information Sys sys/log Eav Log Special logging settings Note App Data Some things have a virtual REST route. This includes Adam files Data / Entities The route is basically made of multiple parts [api-root]/app/[app-identifier]/[topic]/[optional-details] We'll document this more in future. History Documented for v13.03 (March 2022)"
  },
  "net-code/razor/hybrid/index.html": {
    "href": "net-code/razor/hybrid/index.html",
    "title": "Hybrid Razor running on Dnn ‚ò¢Ô∏è and Oqtane ü©∏ | 2sxc 13 / EAV 13",
    "keywords": "Hybrid Razor running on Dnn ‚ò¢Ô∏è and Oqtane ü©∏ Dnn and Oqtane have a few differences because of these important factors: Different underlying C# and .net frameworks and Razor-Engines Different platforms (Dnn is different from Oqtane) Important This is very advanced stuff and only relevant if you want to create Apps which run on both Dnn and Oqtane. For most of your apps this is not relevant 2sxc Philosophy - Stay out of the Way Our philosophy is to not reinvent the wheel so it's important that we let you use the .net APIs as they are designed. Se we don't plan on creating another API which to hide the differences, but let you understand them and easily handle everything as needed. Core Strategies for Hybrid Razor Templates If you follow these three rules you should be good to go: Inherit from Custom.Hybrid.Razor12 Use very common C# features and syntaxes which existed since C# 7.2 (so anything that runs in Dnn will also run in Oqtane) Use .net standard 2.0 APIs and avoid using System.Web Where necessary, use preprocessor directives as explained below Avoid old Razor Features The old razor had a few features which won't work in .net Core 5 / Oqtane: @helper directive Switch between Code variations in Razor In Oqtane 2 we recommended using #if NETCOREAPP switches in your Razor code. In Oqtane 3, this only works in .cs files. So the only way to switch between code variations in the latest Razor is to use normal @if(...) statements and place your platform specific code in sub-files. @if(CmsContext.Platform.Name == \"Oqtane) { // OqtaneStuff which doesn't trigger compile errors can be inline someVar = \"Oqtane\"; // Code which would trigger compile errors must be in a separate file @Html.Partial(\"OqtaneCode.cshtml\"); } else { // DnnStuff - same principles } The Preprocessor Directives in .cs files C# has special #if preprocessor statements which are evaluated during compilation. Using this you can define which code should be used in Dnn and Oqtane. #if NETCOREAPP // OqtaneStuff #else // DnnStuff #endif The following symbols are set when Api Controllers are compiled: Key True for Dnn True for Oqtane Comments NETCOREAPP ‚õî ‚úÖ Only works in WebAPIs and code (.cs) OQTANE ‚õî ‚úÖ Only works in WebAPIs and code (.cs) Important: These don't work in Razor on Oqtane 3+ because we cannot activate these in the compiler - so they only work in .cs files Different C# and .net Frameworks Part Dnn 7 Dnn 9 Oqtane C# Language ca. 7 ca. 7 C# 9 .net Framework 4.5.1 4.7.2 .net core 5 .net Standard 1.6 2.0 2.0 Any hybrid controller must limit itself to features in .net standard 1.6 or 2.0, depending on the platforms you want to support. Note that any 2sxc standard apps are meant to still run in Dnn 4.7.2, so we'll restrict our work to support .net standard 1.6 . This means our examples are more limited than what you will be doing. Differences in the Platforms If you are creating hybrid controllers, we'll assume that you usually don't need to access properties of Dnn or Oqtane. If you do, you'll have to use the standard mechanisms provided by these. In Dnn - use global objects like PortalSettings.Current In Oqtane use Dependency Injection To avoid the code from causing trouble during compilation, wrap the necessary differences in #if NETCOREAPP ... #endif and #if !NETCOREAPP ... #endif blocks in C# To avoid the Razor from causing trouble during compilation, wrap the necessary differences in @if(CmsContext.Platform.Name == \"Oqtane\") { ... } blocks in Razor Limitations for @using Statements The Razor Compiler in Dnn & Oqtane behave a bit differently regarding preprocessor statements. So you cannot use them for @using ... statements. This WILL NOT WORK: @{#if unknown} @using DotNetNuke.Framework.JavaScriptLibraries; @{#endif} In Dnn it will work, but in Oqtane / .net 5 it will not result in an error, because the @using statements are handled in a way which doesn't result in them being skipped. If you only need the namespace on a single command, just use the full namespace in your command, like this: if(fancybox || scripts) { #if(CmsContext.Platform.Name == \"Dnn\") { // Put this line in a separate file to call from here // DotNetNuke.Framework.JavaScriptLibraries.JavaScript.RequestRegistration(DotNetNuke.Framework.JavaScriptLibraries.CommonJs.jQuery); } } If you have complex code, a simple trick is to place it in a separate file (so the Razor compiler won't complain) and then use CreateInstance(...) or Html.Partial(...) to call that if you are in the correct system. Set Page Properties and Headers for Hybrid Apps In Dnn you were able to use RazorBlade to set Title or add Headers. Since RazorBlade has a static implementation, this cannot work in Oqtane. To solve this we created the IPageService . Set Http Status Codes for Hybrid Apps In Dnn you could simply get the HttpContext and change the Response object. This uses a static implementation which dosen't work in Oqtane. To solve this we created the IPageService . Search Integration Previously in Dnn you could write some CustomizeSearch code in the Razor-file which we decided to deprecate in future. From now on please use the the feature described here . Note that as of now, Oqtane doesn't have a search indexer, so there it will simply have no effect, but your code will run on both platforms. History Introduced in 2sxc 12.00"
  },
  "net-code/razor/purpose.html": {
    "href": "net-code/razor/purpose.html",
    "title": "Property Purpose on a Razor page | 2sxc 13 / EAV 13",
    "keywords": "Property Purpose on a Razor page Warning This is an older way to customize the Dnn search index. It is deprecated. Use the new mechanisms explained in Search Customizations To let your code know, if it's running to produce HTML or if it's running to fill the search-index. Discover More in the Razor Tutorials We have an rich series of Razor tutorials . You should really check them out üëç. How to use in most cases you'll use this within the CustomizeData event, in case you want to provide different data to the template than to the search. In most cases you'll also want to override CustomizeSearch . Note that it's of the type Purposes which is an enum containing WebView, IndexingForSearch, PublishData @using ToSic.Sxc.Blocks; @if(Purpose == Purposes.IndexingForSearch){ // code which should only run when indexing } Not run code, which can't run while indexing Sometimes you also have code which requires a user to be visiting a page - like a permission check. Since the indexer doesn't have an HTTP session or a user, this will fail. So you could do something like: @using ToSic.Sxc.Blocks; @if(Purpose != Purposes.IndexingForSearch){ // code which should only run when really viewing // like something if(userIsLoggedIn) { ... } } Demo App or further links Docs on 2sxc.org History 2sxc 10.20 - changed to Purpose from InstancePurpose - old code still works"
  },
  "net-code/razor/organize-code.html": {
    "href": "net-code/razor/organize-code.html",
    "title": "How To Organize your Code in Razor | 2sxc 13 / EAV 13",
    "keywords": "How To Organize your Code in Razor In simple scenarios you have some Razor files containing a bit of HTML and some code. As your solution grows, you'll want to organize your work better to ensure that you can maintain it. 2sxc offers various ways to do this: Use the @helper syntax in Razor Reuse a Partial-View Razor file with @RenderPage() You can have a shared razor file which is used as a library (v9) You can have a shared .cs file as a library (v10) You can split a Razor file into a Template and Code-Behind Discover More in the Razor Tutorials We have an rich series of Razor tutorials . You should really check them out üëç. Reuse Snippets with @helper in Razor Razor has a @helper syntax which allows you to create fragments and re-use them. Discover this in the tutorials . Reuse a Partial View with @RenderPage() Razor templates can include other razor files with more Razor code inside them, using RenderPage(...) . This is a standard asp.net function to render another Razor file where you need it. You usually use it to make small component Razor files which might just show a button or something, and then call that file. You can find examples in the tutorials Share a .cshtml File as Library of Sub-Templates When you have a lot of components it may be easier to create a library of @helper commands. This library is just a normal .cshtml file - usually in a folder called shared or something, and you can then call these snippets and helpers from all your template files. To use it, you need something like: @{ var helper = CreateInstance(\"_Helper.cshtml\"); } See examples in the tutorials Share a .cs File as Library Sometimes you want to share C# code which isn't meant for HTML-output. For example, a security check. You can do this using CreateInstance(...) . If you: need to share code with razor and Webapi don't need razor specific features like @helper You can create a .cs class file and share this across razor files AND WebAPI files. To use it, you need something like: @{ var helper = CreateInstance(\"_Helper.cs\"); } Tip The helper file should ideally inherit from ToSic.Sxc.Dnn.DynamicCode , in which case it will have have the same full APIs incl. the App and Content object just like the main file. See examples in the tutorials Razor Code-Behind If your Razor file is getting kind of large because of C# functions, best place it in a Razor Code-Behind . History RenderPage has always been part of Razor so part of 2sxc v2 CreateInstance for .cshtml was introduced ca. v6 CreateInstance for .cs was introduced in 2sxc v10.01 Code-Behind Introduced in 2sxc 11.0"
  },
  "net-code/razor/migrate-to-v10.html": {
    "href": "net-code/razor/migrate-to-v10.html",
    "title": "Migrating from the old Razor (before 10.20) to the new RazorComponent | 2sxc 13 / EAV 13",
    "keywords": "Migrating from the old Razor (before 10.20) to the new RazorComponent The RazorComponent was created in v10.20 to provide a newer, cleaner API. To not break existing code, old templates still work, but you must migrate a template to RazorComponent if you wish to use the new features. Here what you need to do:"
  },
  "net-code/razor/index.html": {
    "href": "net-code/razor/index.html",
    "title": "Razor Components / Templates | 2sxc 13 / EAV 13",
    "keywords": "Razor Components / Templates Razor Templates will generate HTML - often based on the data a editor entered, and/or which was provided from the App. <!-- Data Highlights --> <!-- ADAM --> <!-- Server --> <!-- Prepare --> <!-- Data Source --> <!-- Optimzers --> <!-- Process / Awesomize --> <!-- Libraries --> <!-- data formats --> <!-- Browser --> <!-- Frameworks --> <!-- App show parts --> <!-- Interact parts --> <!-- Edit parts --> <!-- Edit UI parts --> <!-- SPA parts --> <!-- Custom highlight boxes - can be controlled by in-page CSS --> you are here (click to zoom) - discover the stack .context-box-process .process-razor { visibility: visible; } Here's an example: @inherits Custom.Hybrid.Razor12 <ul> @foreach(var person in AsList(App.Data[\"Persons\"])) { <li>@person.Name</li> } </ul> Razor Components/Templates are the most powerful templates in 2sxc since you can program anything you want using C#. They use the Asp.Net Razor engine and contain normal HTML intermixed with Razor placeholders like @Content.FirstName or longer code blocks usually marked with @{ ...} . The template files usually reside inside App root folder or sub folder. These always begin with an _ and end with .cshtml . Note The View Configuration determines which razor file is being loaded. If you are using Polymorphism then you may have multiple razor files with the same name in various folders, and Polymorph will decide which one will be shown. Get Started with Razor Templates Discover More in the Razor Tutorials We have an rich series of Razor tutorials . You should really check them out üëç. Install some Apps from the App Catalog - almost all apps use Razor Learn the APIs using The Razor Tutorials using these docs The technical RazorComponent API We also suggest you look into the RazorBlade library which has a lot of neat helpers Read also Views Templates Token Templates Razor Tutorial Tips Tip To use the latest features of 2sxc 12+, make sure your razor file begins with the line @inherits Custom.Hybrid.Razor12 Otherwise your Razor templates is based on the default, older component code. History Introduced in 2sxc 1.0"
  },
  "net-code/razor/edit.enable.html": {
    "href": "net-code/razor/edit.enable.html",
    "title": "Method in C# Razor | 2sxc 13 / EAV 13",
    "keywords": "@Edit.Enable Method in C# Razor Editing or adding data to a 2sxc app requires the UI to have some JS, CSS and context information. This is only loaded/included for editors/admin/super-users, and not available for users with limited permissions. If you want to enable this for more restricted users - for example when you want to use the 2sxc-form to let users add data - this must be enabled. That's what Edit.Enable(...) is for. Discover More in the Razor Tutorials We have an rich series of Razor tutorials . You should really check them out üëç. How to use This example shows how you enable the UI using Razor, which will allow public users to create data: <div> @Edit.Enable(api: true, forms: true, context: true, autoToolbar: false) </div> This example ensures that api : basic JS for editing are loaded, allowing you to then run javascript commands like $2sxc(...).run(...) forms : additional JS is loaded, enabling the standard form dialogs to open context : the html contains context-information about the app, so that the dialogs actually work - see also edit context the auto-toolbars are disabled (this would generate a default toolbar if no toolbar was specified) Usage Notes This command simply enables editing - but doesn't provide any permissions or show any buttons yet. Here are a few things you must know to get this to work: remember to set permissions to allow what you want to do (like create new draft items for public users) Edit.Enable uses named parameters , so you always have to use the api: true syntax the Edit.Enable won't output anything in the position it's added, because it controls the main wrapper you must also create a link or toolbar in your code for the public users, as they won't have a button to press otherwise Read also Tutorial app for Public Forms Blog Recipe for using Public Forms with 2sxc History Introduced in 2sxc 9.30"
  },
  "net-code/razor/customizesearch.html": {
    "href": "net-code/razor/customizesearch.html",
    "title": "Event CustomizeSearch() on the Razor Page (Dnn ‚ò¢Ô∏è only) | 2sxc 13 / EAV 13",
    "keywords": "Event CustomizeSearch() on the Razor Page (Dnn ‚ò¢Ô∏è only) Warning This is an older way to customize the Dnn search index. It is deprecated. Use the new mechanisms explained in Search Customizations This event is called by the view-engine after calling CustomizeData and before passing the Data object to the Dnn Search Indexer. You can override this event to change how data is presented to the search, for example by bundling items together, or by giving items different URLs so that search knows that they are to appear on a sub-page. Tip 2sxc 11 introduces Code-Behind. You can now place the CustomizeSearch(...) method in the code-behind file. Discover More in the Razor Tutorials We have an rich series of Razor tutorials . You should really check them out üëç. How to use In your razor page (.cshtml file) you can add a script block implementing this, as follows: @using ToSic.Eav.Run; @using ToSic.Sxc.Dnn.Run; @using ToSic.Sxc.Search; @functions { // this method is optional - your code wouldn't need it, but it's in here to show how it would work together // the CustomizeData would be called first, and potentially modify what is in the Data-object public override void CustomizeData() { // Don't customize anything, nothing to customize in this case } /// <summary> /// Populate the search - ensure that each entity has an own url/page /// </summary> /// <param name=\"searchInfos\"></param> /// <param name=\"moduleInfo\"></param> /// <param name=\"startDate\"></param> public override void CustomizeSearch(Dictionary<string, List<ISearchItem>> searchInfos, IContainer moduleInfo, DateTime beginDate) { foreach (var si in searchInfos[\"Default\"]) { // tell the search system what url it should use in the result si.QueryString = \"mid=\"+ (moduleInfo as DnnContainer).Id + \"&feature=\" + si.Entity.EntityId; } } } The code above will skip customizing any data (but often you would want that too), then CustomizeSearch modifies the list of search-items before they are indexed. How it works In general everything will work automatically. This is what happens: 2sxc will retrieve the data added to this module 2sxc will call the CustomizeData() event if the template has such an event. In this event, your code can add more data to the module as needed. Note that during the search index, no Request-variables exist. So your method will cause an error if it does something like var x = Request[\"Category\"]. In case of an error, the index will still continue to work, but your changes to the data will fail To help you with this, a new property called Purpose was added. It tells you if this view/template was created for displaying or for indexing. 2sxc will then use the data and create SearchItems, ready to index. Each entity will be turned into a SearchItem Each Content-Type will have an own list (so you can differentiate between all the SearchItems for the Categories and the SearchItems for the Questions) Multi-Language is handled correctly, so the English index will contain the English content, etc. 2sxc will then call a CustomizeSearch() event, so your code could provide changes. A common scenario is to say that each entity (say each question) has a different URL (say a details-page). So even though all entities belong to the module (and Dnn only knows of this one module), the module can say that each entity has an own details page. One this is done, the SearchItems are converted to official SearchDocument-objects and handed over to Dnn Read also Purpose - which tells you why the current code is running so you could change the data added CustomizeData Demo App and further links You should find some code examples in this demo App FAQ with Categories More links: Description of the feature on 2sxc docs History Introduced in 2sxc 6.2 Added support for newer Dnn versions at a later time - not sure when"
  },
  "net-code/razor/customizedata.html": {
    "href": "net-code/razor/customizedata.html",
    "title": "Event CustomizeData() on the Razor Page (Dnn ‚ò¢Ô∏è only) | 2sxc 13 / EAV 13",
    "keywords": "Event CustomizeData() on the Razor Page (Dnn ‚ò¢Ô∏è only) Warning This is an older way to customize the Dnn search index. It is deprecated. Use the new mechanisms explained in Search Customizations This event is called by the view-engine before the rest of the script is parsed - and it's usually empty. It can be overriden to change/configure what data is delivered to the template or search-index. Tip 2sxc 11 introduces Code-Behind. You can now place the CustomizeData() method in the code-behind file. Discover More in the Razor Tutorials We have an rich series of Razor tutorials . You should really check them out üëç. How to use In your razor page (.cshtml file) you can add a script block implementing this, as follows: @functions{ // Prepare the data - get all categories through the pipeline public override void CustomizeData() { // new features in 6.1 - the App DataSource CreateSource<App> and also the RelationshipFilter // Just add the items which have the relationship to the category in the URL var qsOfCat = CreateSource<RelationshipFilter>(App.Data[\"QandA\"]); qsOfCat.Relationship = \"Categories\"; qsOfCat.Filter = \"[QueryString:Category]\"; Data.In.Add(\"QandA\", qsOfCat[\"Default\"]); } } Since the code above is run before the rest of the template is executed, the Data object now has a stream called QandA which the rest of the template can access using Data[\"QandA\"] . Notes and Clarifications In general, you can override this event to prepare data. It has a few benefits like It's always called, even if the data is not templated - for example when it's streamed as JSON or when it's prepared for search indexing In the future, most data-preparations will be possible through a visual designer, but for now, this is the best way to go. Connection to Search index The CustomizeData event runs both when rendering the template as well as when the search is running. For further details you may want to read about InstancePurpose - which tells you why the current code is running so you could change the data added CustomizeSearch - which let's you write code to alter how the data is processed in the search-index Demo App and further links You should find some code examples in this demo App FAQ with Categories More links: Description of the feature on 2sxc docs History Introduced in 2sxc 6.1"
  },
  "net-code/razor/code-behind.html": {
    "href": "net-code/razor/code-behind.html",
    "title": "Razor Templates - Code-Behind | 2sxc 13 / EAV 13",
    "keywords": "Razor Templates - Code-Behind 2sxc 11 introduces a new way to split out most of the C# code from the main template Razor file. We call this code-behind. Best watch the video to get the idea. You can also see a live demo in the Dnn Tutorials . Discover More in the Razor Tutorials We have an rich series of Razor tutorials . You should really check them out üëç. How Code Behind Works Just create another file with the identical name as your main Razor file, but with .code.cshtml as the extension. So you'll then have something like: _My Message.cshtml (the Razor file) Inherits ToSic.Sxc.Dnn.RazorComponent _My Message.code.cshtml (the new code ) The code file looks just like a normal razor file. Must inherit from ToSic.Sxc.Dnn.RazorComponentCode . Here's an example of such a _My Message.code.cshtml : @inherits ToSic.Sxc.Dnn.RazorComponentCode @functions { public string Hello() { return \"Hello from inner code\"; } } @helper ShowDiv(string message) { <div>@message</div> } @helper AppName() { <div>App Name is: @App.Name</div> } This is automatically compiled for you and provided to the _My Message.cshtml on the object Code so you can write this code: @inherits ToSic.Sxc.Dnn.RazorComponent <h1>Demo Code Use</h1> <div @Edit.TagToolbar(Content)> Something in it: @Code.Hello() </div> @Code.ShowDiv(\"test helper!\") That's all there is to it üòâ Tip Why would you do this? The main reason is to keep template-html separate from most of the code. This is common when designers like to modify the html but don't like all that programming stuff. Events on Code Behind Files The code-behind also has same methods/events which are automatically called. These methods can be overriden CustomizeData() This has the same effect as overriding CustomizeData in the template file CustomizeSearch(Dictionary<string, List<ISearchItem>> searchInfos, IContainer moduleInfo, DateTime beginDate) This has the same effect as overriding CustomizeSearch in the template file Tip Why would you use this? These methods could always be created in the main Razor file, but it looks daunting to have so much code there. A typical CustomizeSearch is very technical and feels scary to people who just want to change the look and feel. Important: Passing Around Anonymous Objects One of the advanced things you may want to do is have helper functions looking up multiple things, and returning a complex object like this example in the code-behind: @inherits ToSic.Sxc.Dnn.RazorComponentCode @functions { public dynamic Hello() { return new { Title = \"title\", Message = \"msg\"}; } } Which is used like this @inherits ToSic.Sxc.Dnn.RazorComponent <h1>Demo Code Use</h1> <div @Edit.TagToolbar(Content)> @{ var hello = Code.Hello(); } Something in it: @hello.Title <br> </div> This works and is no big deal, but there are known cases where this breaks, usually with a message like somehing not found on object . The reason is bugs in the .net caching of compiled code, specifically if methods exists in various places with the same name. You can resolve this in 3 ways Restart iis (uncool) Rename the method (ok, bun not sexy) Return a typed object instead of untyped (recommended). In the above example, change to this: @inherits ToSic.Sxc.Dnn.RazorComponentCode @functions { public class TitleAndMessage { public string Title; public string Message; } public dynamic Hello() { return new TitleAndMessage { Title = \"title\", Message = \"msg\"}; } } History Introduced in 2sxc 11.0"
  },
  "net-code/razor/base-classes.html": {
    "href": "net-code/razor/base-classes.html",
    "title": "@inherits Base Classes #todoc / WIP | 2sxc 13 / EAV 13",
    "keywords": "@inherits Base Classes #todoc / WIP Every Razor template inherits from a base class - and depending on that the features in the template will change. These are the base classes you can inherit from as of v12 (we'll explain ich in more detail below) Custom.Hybrid.Razor12 - new in v12 ToSic.Sxc.Dnn.RazorComponent - new in v12 The old one #todoc Default in Oqtane Important: If you don't specify an @inherits in your code, the system will automatically apply a default base class to your code. This is different in Dnn and Oqtane: In Dnn the default base class is #todoc as it's specified in a web.config somewhere. This is the oldest base class and should not be used any more. In Oqtane the default base is #todoc which is the default for .net 5 Discover More in the Razor Tutorials We have an rich series of Razor tutorials . You should really check them out üëç. Details about each Base Class Custom.Hybrid.Razor12 This is the newest base class and was introduced in 2sxc 12. It contains the features which will work cross-platform on both Dnn and Oqtane. You should use this base class to create solutions / Apps which work on Dnn and Oqtane. Limitations of Custom.Hybrid.Razor12 Since this base class is meant to work on both Dnn and Oqtane, it only supports features which both of these platforms support. The property Dnn doesn't exist on this base class, as it would lead to code which can't run cross-platform As of now the properties / methods CustomizeData(...) , CustomizeSearch(...) and Purpose do not work, because Oqtane doesn't have a search indexer. We plan on introducing something like this once Oqtane provides search, but as of now it's not yet clear how this would work. The code-behing Code object doesn't work, as we probably cannot implement this in .net 5 The CreateInstance(...) works only on C# files .cs but not with CSHTML files .cshtml as this probably won't work in .net 5 Koi works differently than before. Previously you just used a global object Connect.Koi.Koi to use Koi, but because .net 5 should really use dependency injection, you should now get Koi using GetService<Connect.Koi.ICss>() . The old mechanism will still work in Dnn but would not work in Oqtane. Platform Differences Internally Custom.Hybrid.Razor12 is built on the Razor base classes of the .net frameworks, so in Dnn it builds on #todoc while in Oqtane it builds on #todoc . Because of this, certain features will work in Dnn which don't work in Oqtane and vice versa. If you only want to create Oqtane stuff only, you can just go ahead and use all the new features of the Razor in .net 5 If you plan on creating real hybrid stuff, you will have to do some testing to ensure you didn't use features that don't exist on the other side If you need to code something which is different in each platform, use the #if preprocessor statements Some core feature differences Feature Dnn Oqtane Comments @inherits ‚úÖ ‚úÖ @helper ‚úÖ ‚õî Doesn't exist in .net 5 @model ‚õî ‚úÖ Doesn't exist in old .net #todoc ToSic.Sxc.Dnn.RazorComponent todo #todoc The old one... todo: #todoc History 2sxc 10.20 - changed to Purpose from InstancePurpose - old code still works"
  },
  "web-api/query/index.html": {
    "href": "web-api/query/index.html",
    "title": "Query REST Web API | 2sxc 13 / EAV 13",
    "keywords": "Query REST Web API <!-- Data Highlights --> <!-- ADAM --> <!-- Server --> <!-- Prepare --> <!-- Data Source --> <!-- Optimzers --> <!-- Process / Awesomize --> <!-- Libraries --> <!-- data formats --> <!-- Browser --> <!-- Frameworks --> <!-- App show parts --> <!-- Interact parts --> <!-- Edit parts --> <!-- Edit UI parts --> <!-- SPA parts --> <!-- Custom highlight boxes - can be controlled by in-page CSS --> you are here (click to zoom) - discover the stack .context-box-summary .browser-interact, .context-box-summary .process-headless { visibility: visible; } Every VisualQuery you create has a REST URL. If you set the permissions, you can then read from the Query through REST. You can also pass query-parameters in the URL. Queries are Read APIs. Standard Query Calls The Query endpoint can be accessed on .../app/auto/query/[your-query-name] when you're accessing a query of the current App (from a dnn-page with this module), as then 2sxc uses auto-detect .../app/[app-folder]/query/[your-query-name] using this endpoint from external (other module, other page, other website) as then auto-detect can't work. üëâ read more about different URLs depending on how you access it Read Only Certain Streams A query may have many streams that your client may not necessarily need. To limit the results to only specific streams, add the stream name to the url, like this: .../app/auto/query/[your-query-name]/Default HTTP GET only Note that Query endpoints only support the http-verb GET. Naming Recommendations As the query-name is used in the path it's best-practice to use query-names without spaces and special characters. You can get it to work even with such specials, but we recommend you don't do that for simplicity. POST with GUID filter (WIP) In 2sxc 11.20 we're experimenting with a post-access to the query which will allow you to also specify GUIDs to filter. This is not final yet. Setting Security Querying a query requires read-permissions on that query. History Introduced Content-REST API in 2sxc 5.x Queries introduced ca. 2sxc 6 Query-API enhanced with Polymorph Editions in 2sxc 9.35 (allowing subfolder/api) Option to provide GUIDs to limit what is returned 2sxc 11.20 WIP"
  },
  "web-api/headless/index.html": {
    "href": "web-api/headless/index.html",
    "title": "Headless WebAPIs in 2sxc | 2sxc 13 / EAV 13",
    "keywords": "Headless WebAPIs in 2sxc <!-- Data Highlights --> <!-- ADAM --> <!-- Server --> <!-- Prepare --> <!-- Data Source --> <!-- Optimzers --> <!-- Process / Awesomize --> <!-- Libraries --> <!-- data formats --> <!-- Browser --> <!-- Frameworks --> <!-- App show parts --> <!-- Interact parts --> <!-- Edit parts --> <!-- Edit UI parts --> <!-- SPA parts --> <!-- Custom highlight boxes - can be controlled by in-page CSS --> you are here (click to zoom) - discover the stack .context-box-summary .process-headless { visibility: visible; } Using a CMS like 2sxc as Headless means that the data can be used elsewhere both for showing and editing as needed. 2sxc provides 3 different WebAPIs for this: Built-in Content WebAPIs which are REST endpoints for CRUD (Create, Read, Update, Delete) operations Built-in Query WebAPIs which are read-only APIs to query data using VisualQuery Custom C# WebAPI controllers which you create to do anything you want We always recommend that you first experiment with the tutorials before you do anything else: Discover More in the Web API Tutorials We have an rich series of Web API tutorials . You should really check them out üëç. Fine-Tune Serialization of Headless Data If you use Queries you can now fine-tune how the data will be serialized. Read more about this . Read Also 2sxc Web API Various blogs posted on this topic (just google it) History Introduced Content-REST API in 2sxc 5.x More added in v7.1 Added in-admin help to access it in 11.10"
  },
  "web-api/data/index.html": {
    "href": "web-api/data/index.html",
    "title": "Data REST and CRUD Web API | 2sxc 13 / EAV 13",
    "keywords": "Data REST and CRUD Web API <!-- Data Highlights --> <!-- ADAM --> <!-- Server --> <!-- Prepare --> <!-- Data Source --> <!-- Optimzers --> <!-- Process / Awesomize --> <!-- Libraries --> <!-- data formats --> <!-- Browser --> <!-- Frameworks --> <!-- App show parts --> <!-- Interact parts --> <!-- Edit parts --> <!-- Edit UI parts --> <!-- SPA parts --> <!-- Custom highlight boxes - can be controlled by in-page CSS --> you are here (click to zoom) - discover the stack .context-box-summary .browser-interact, .context-box-summary .process-headless { visibility: visible; } 2sxc provides a full set of REST endpoints for CRUD (Create, Read, Update, Delete) operations like: Read a list of all items/entities Read a single item/entity Create an item/entity Create an item/entity which is metadata for something Update an item/entity Delete an item/entity Tip Starting in 2sxc 11.10+ the admin-UI has built-in help to get started. These UIs also show sample code and everything. So you probably don't need to read the stuff here and just go ahead with that. Tip Starting with 2sxc v13, the data-api is .../app/.../data/TYPENAME . In previous versions, it's .../app/.../content/TYPENAME . JSON Data Format Read JSON Data Format used in WebAPI calls (technical) to understand the data format. Read Data-Items/Entities Assume you have the blog-app installed and your JS would request a JSON from this endpoint (logged in as SystemAdmin, so security is not an issue): [root-path]/app/auto/data/BlogPost ...then your JS would receive a JSON with all BlogPost items. Reading [root-path]/app/auto/data/BlogPost/1050 would give you exactly one BlogPost item (with the id 1050) Tip To figure out the exact path and the [root-path] part, best read about it in the admin-ui or work your way into the URLs for 2sxc WebAPI and REST APIs Create Data-Items/Entities Doing an http POST to this [root-path]/app/auto/data/BlogPost with a POST body of { \"Title\": \"changed title\"} would let you create the item. You will get a return message containing ID, GUID etc. of the new item. If your POST package also contains a EntityGuid then this will be used as the GUID for the new item. Update Data-Items/Entities Doing an http POST to this [root-path]/app/auto/data/BlogPost/1050 with a POST body of { \"Title\": \"changed title\"} would let you update the item 1050. Delete Data-Items/Entities Doing an http DELETE to this [root-path]/app/auto/data/BlogPost/1050 would delete the item 1050. JavaScript Helpers The $2sxc and the sxc Controller make it really easy to use this. Best to get familiar with them. About Security / Permissions Warning You are usually developing as a super-user, in which case these endpoints automatically work. If you want normal users to do certain things like create items, you need to configure the permissions . To use these endpoints for normal users, you would need to enable the permissions and then you can access them using the REST URLs. reading data requires read-permissions on that content-type writing data requires write-permissions or a content-type or on a specific item (owner-permissions) Use this Checklist to get started: Recommended Reading General WebApi Specs URL Schema History Introduced Data-REST API in 2sxc 5.x but on a .../content... endpoint Added in-admin help to access it in 11.10 Improved url to data to be .../data/... instead of the previous .../content/... in v13"
  },
  "web-api/custom/issue-http-response-message.html": {
    "href": "web-api/custom/issue-http-response-message.html",
    "title": "Common Issue: Missing HttpResponseMessage | 2sxc 13 / EAV 13",
    "keywords": "Common Issue: Missing HttpResponseMessage Moved to Common Issue: Missing HttpResponseMessage"
  },
  "basics/metadata/decorators/index.html": {
    "href": "basics/metadata/decorators/index.html",
    "title": "Metadata Decorators - (advanced ‚ö†) | 2sxc 13 / EAV 13",
    "keywords": "Metadata Decorators - (advanced ‚ö†) <!-- Data Highlights --> <!-- ADAM --> <!-- Server --> <!-- Prepare --> <!-- Data Source --> <!-- Optimzers --> <!-- Process / Awesomize --> <!-- Libraries --> <!-- data formats --> <!-- Browser --> <!-- Frameworks --> <!-- App show parts --> <!-- Interact parts --> <!-- Edit parts --> <!-- Edit UI parts --> <!-- SPA parts --> <!-- Custom highlight boxes - can be controlled by in-page CSS --> you are here (click to zoom) - discover the stack .context-box-summary .data-all { visibility: visible; } Metadata Decorators are system Metadata which enhance the configuration of something. Examples the IsDefault Decorator can be used to set a view to being the default, even if it's not the first one in alphabetical order the IsShared marks Apps so they can be inherited in other sites the Requirement marks the IsShared so it's only available if feature & license are enabled List of Current Decorators Decorator Added Description Remarks IsDefault 13.00 Marks an item as default Primarily used for views IsObsolete 13.00 Marks an item as obsolete Used for InputTypes IsRecommended 13.00 Marks an item as recommended Used for InputTypes IsShared 13.02 Marks an App as being shared/global Only for Apps Languages 13.02 Special language configuration Only for ContentTypes MetadataExpected 13.02 MetadataFor 13.02 Marks a type as being recommend for a specific target Only for ContentTypes Note WIP Requirement 13.02 Marks a requirement to use something, like a minimum license Only for ContentTypes SaveEmpty 13.00 Marks a ContentType to enable saving even if it has no fields Only for ContentTypes Special Notes Some decorators have no field, as adding the decorator already contains all the information necessary. By default, 2sxc would not save empty data, so to enable this, these Decorators must themselves have a SaveEmpty Decorator. Discover More Metadata - (advanced ‚ö†) History Introduced in 2sxc v13"
  },
  "basics/app/configuration.html": {
    "href": "basics/app/configuration.html",
    "title": "App Configuration | 2sxc 13 / EAV 13",
    "keywords": "App Configuration <!-- Data Highlights --> <!-- ADAM --> <!-- Server --> <!-- Prepare --> <!-- Data Source --> <!-- Optimzers --> <!-- Process / Awesomize --> <!-- Libraries --> <!-- data formats --> <!-- Browser --> <!-- Frameworks --> <!-- App show parts --> <!-- Interact parts --> <!-- Edit parts --> <!-- Edit UI parts --> <!-- SPA parts --> <!-- Custom highlight boxes - can be controlled by in-page CSS --> you are here (click to zoom) - discover the stack .context-box-summary .data-configuration { visibility: visible; } Every App has a Configuration Entity which describes things like App Name App Version Folder (within the 2sxc-folder) Minimum version of Dnn needed for the App to work Minimum version of 2sxc needed for the App to work etc. Edit App Configuration This is where you can find the App Configuration On 2 you can configure the permissions you need: Display Name The name shown in the app-picker for the content-editor. It is also used to name the ZIP-package if you ever export the app. Description Just an informative description Version A version number, will also be used in the package-name when exporting Folder The folder within the [portal]/2sxc/ where all the templates, javascripts and other assets are stored. If you touch this, remember to rename the folder as well. Allow Token Templates Just a yes/no if these are allowed in this package. At the moment it has no effect, just for your own information. At a later time it may prevent certain templates from working if disabled. Allow Razor Templates Same as Allow Token Templates. Original Id A (optional) guid of the original App which was used to generate this current App. This is only important, if you reset the App-Guid when exporting it; it will help show the correct Getting-Started in the App even if the App-Guid was reset. Required Version (added in 08.03.03) Is used to check if the app can run, or otherwise warn the user. It will use the .net version compare. Example value: \"08.03.00\" Required DNN Version (added in 08.03.03) Is used to check if the app can run, or otherwise warn the user. It will use the .net version compare. Example value: \"07.02.00\" Difference App Configuration / App Settings The App Configuration is a system Entity and 2sxc needs it for the App to work properly. The App Settings can contain any information you configure it to have, and the values are only used in the App itself. Use in C# Code (Razor / WebAPI) Most of this information is available on the App object, like App.Path . Read about the C# API here ."
  },
  "index.html": {
    "href": "index.html",
    "title": "2sxc / EAV Docs v13.04 | 2sxc 13 / EAV 13",
    "keywords": "2sxc / EAV Docs v13.04 This is the technical documentation for EAV and 2sxc. If you're new to 2sxc, start with 2sxc.org . Turn Dnn ‚ò¢Ô∏è and Oqtane ü©∏ into a CMS 2sxc is a CMS-Plugin for Dnn/DotNetNuke and Oqtane . It makes content editing easier than Wordpress. It's also a CMF like Drupal. And a very cool EAV data-management system. And an online REST JSON database. And a lot more. 2sxc is basically used to provide web-site-builder functionality. It has a simple Content mode (where users just add images, designed text/image blocks, links etc.). Then there's the sophisticated App mode, where user add standalone functional apps like blogs, galleries and more. Most apps are on github and can be downloaded from the app-catalog . Where to Start 2sxc is an easy to use dynamic content system for .net Platforms like Dnn. If you are just getting started, then this is probably not where you should be looking. Focus first on: The Basics which tells you about Architecture, Data Models and more Content on 2sxc.org like the learn section Apps on 2sxc Catalog which contains many ready-to-use apps like blogs and news, as well as tutorials The Dnn Tutorials on 2sxc.org üëâ With this knowledge, you can already create amazing stuff. 2sxc is very flexible and can be used for almost any kind of content-management needs or app development needs. Because of this, different documentations help you work with different things. Here's the overview: A list of features , concepts and examples can be found in the Docs section of 2sxc.org, including things not specifically code related Many solutions and recommendations are found in the Blog on 2sxc.org Many demo, template and tutorial Apps are found in the App Catalog on 2sxc.org 2sxc / EAV Roadmap Pending Documentation Work Next to document Document JS APIs better Finish metadata documentation Create in the APIs (simplify APIs first) Create good sample of Page-Metadata App These topics are insufficiently documented... URL and REST API for changing data Future topics, lower priority React and 2sxc (todo) jQuery with 2sxc (todo) etc."
  },
  "net-code/dynamic-data/index.html": {
    "href": "net-code/dynamic-data/index.html",
    "title": "Dynamic Data | 2sxc 13 / EAV 13",
    "keywords": "Dynamic Data 2sxc does a lot for you it making sure your templates get the right data. Once you've gotten the basics to work, it's important that you understand what's really happening in the background. This section should give you that overview. <!-- Data Highlights --> <!-- ADAM --> <!-- Server --> <!-- Prepare --> <!-- Data Source --> <!-- Optimzers --> <!-- Process / Awesomize --> <!-- Libraries --> <!-- data formats --> <!-- Browser --> <!-- Frameworks --> <!-- App show parts --> <!-- Interact parts --> <!-- Edit parts --> <!-- Edit UI parts --> <!-- SPA parts --> <!-- Custom highlight boxes - can be controlled by in-page CSS --> you are here (click to zoom) - discover the stack .context-box-process .process-cs { visibility: visible; } Best Start with Tutorials Discover More in the Razor Tutorials We have an rich series of Razor tutorials . You should really check them out üëç. Where Data Comes From Data for your Code can come from various sources. Read about Where Data Comes From . DynamicEntity and Entity Objects It helps to understand the difference between Dynamic Entities and Entities . APIs and Conversion Commands Read about it in Dynamic Code API"
  },
  "api/dot-net/ToSic.Sxc.Images.IResponsiveImage.html": {
    "href": "api/dot-net/ToSic.Sxc.Images.IResponsiveImage.html",
    "title": "Interface IResponsiveImage | 2sxc 13 / EAV 13",
    "keywords": "Interface IResponsiveImage Will generate a responsive <img> tag which also has srcset attributes so the browser can get the best image for the current display. Warning This is Beta functionality and still work in progress. This means the APIs can still change until it's final. It's awesome, so have fun trying it out. But note that if you already use it, you may need make changes after an upgrade. Namespace : ToSic.Sxc.Images Assembly : ToSic.Sxc.dll Syntax [InternalApi_DoNotUse_MayChangeWithoutNotice(\"Still WIP\")] public interface IResponsiveImage : IHybridHtmlString, IHtmlString Remarks History: BETA Released ca. 2sxc 13.10 Properties | Improve this Doc View Source Alt An Alt-description information either from the creator of this object, or from image metadata. Declaration string Alt { get; } Property Value Type Description System.String | Improve this Doc View Source Class The Class of the image. Usually created from these sources (WIP) The initial call creating this image tag Resize-Settings which may add classes Rule which determines if the image should crop or not, which may add a class Declaration string Class { get; } Property Value Type Description System.String | Improve this Doc View Source Height The image height, if it should be set at all. Will be null otherwise. Declaration string Height { get; } Property Value Type Description System.String | Improve this Doc View Source Img The img tag which would normally be added to the page automatically. You can also use the normal RazorBlade API and do things like .Alt(&quot;description&quot;) etc. See also the RazorBlade Img docs Declaration Img Img { get; } Property Value Type Description ToSic.Razor.Html5.Img | Improve this Doc View Source ShowAll Determines if the image should be shown entirely. This usually means that the image is a logo or something, so cropping was not an option. This also usually means that the aspect ratio / height may be different than expected Declaration bool ShowAll { get; } Property Value Type Description System.Boolean | Improve this Doc View Source Sizes The sizes in case you need it in your custom img-tag. It will only be used for normal img tags, but not for img tags inside picture tags. Declaration string Sizes { get; } Property Value Type Description System.String | Improve this Doc View Source SrcSet The SrcSet in case you need to use it in your own custom img-tag. Note that it will be null if the image has no reason to have a srcset. It will only be used for normal img tags, but not for img tags inside picture tags. Declaration string SrcSet { get; } Property Value Type Description System.String | Improve this Doc View Source Url The main url, used for main src property Declaration string Url { get; } Property Value Type Description System.String | Improve this Doc View Source Width The image width, if it should be set at all. Will be null otherwise. Declaration string Width { get; } Property Value Type Description System.String"
  },
  "api/dot-net/ToSic.Sxc.Images.IResizeSettings.html": {
    "href": "api/dot-net/ToSic.Sxc.Images.IResizeSettings.html",
    "title": "Interface IResizeSettings | 2sxc 13 / EAV 13",
    "keywords": "Interface IResizeSettings Stores a full configuration for resizing. This is mainly important for scenarios where you need to build complex rules for the resizer, or for internal functionality when generating images and pictures. Warning This is Beta functionality and still work in progress. This means the APIs can still change until it's final. It's awesome, so have fun trying it out. But note that if you already use it, you may need make changes after an upgrade. Namespace : ToSic.Sxc.Images Assembly : ToSic.Sxc.dll Syntax [InternalApi_DoNotUse_MayChangeWithoutNotice(\"Still WIP\")] public interface IResizeSettings Remarks History: BETA To be released ca. 2sxc 13.10 Properties | Improve this Doc View Source Advanced Settings which are used when img/picture tags are generated with multiple resizes Declaration [InternalApi_DoNotUse_MayChangeWithoutNotice(\"Still WIP\")] AdvancedSettings Advanced { get; } Property Value Type Description ToSic.Sxc.Images.AdvancedSettings | Improve this Doc View Source AspectRatio The aspect ratio to determine the height, in case no height was specified. Declaration double AspectRatio { get; } Property Value Type Description System.Double | Improve this Doc View Source Factor The resize factor by which the original value (width/height) is scaled Declaration double Factor { get; } Property Value Type Description System.Double | Improve this Doc View Source Format Target format like 'jpg' or 'png'. If empty will not be used. Declaration string Format { get; } Property Value Type Description System.String | Improve this Doc View Source Height Height to resize to. If 0, height will not be changed Declaration int Height { get; } Property Value Type Description System.Int32 | Improve this Doc View Source Parameters Additional url parameters in case the final link would need this. Rarely used, but can be used for resize parameters which are not standard. Declaration NameValueCollection Parameters { get; } Property Value Type Description System.Collections.Specialized.NameValueCollection | Improve this Doc View Source Quality Quality factor for image formats which support quality. Usually a value between 0 and 100. If 0, quality will not be changed. Declaration int Quality { get; } Property Value Type Description System.Int32 | Improve this Doc View Source ResizeMode Resize mode. If empty or \"(none)\" will not be used. Declaration string ResizeMode { get; } Property Value Type Description System.String | Improve this Doc View Source ScaleMode Scale Mode. If empty or \"(none)\" will not be used. Declaration string ScaleMode { get; } Property Value Type Description System.String | Improve this Doc View Source Width Width to resize to. If 0, width will not be changed Declaration int Width { get; } Property Value Type Description System.Int32"
  },
  "api/dot-net/ToSic.Sxc.Data.IDynamicStack.html": {
    "href": "api/dot-net/ToSic.Sxc.Data.IDynamicStack.html",
    "title": "Interface IDynamicStack | 2sxc 13 / EAV 13",
    "keywords": "Interface IDynamicStack This is a dynamic object which contains multiple dynamic objects (Sources). It will try to find a value inside each source in the order the Sources are managed. Namespace : ToSic.Sxc.Data Assembly : ToSic.Sxc.dll Syntax [PublicApi] public interface IDynamicStack : ISxcDynamicObject, ICanDebug Remarks New in 12.02 Properties | Improve this Doc View Source AnyBooleanProperty A Dynamic Entity always contains an item of your data - a book, person, blog-post or a piece of content. Since the object is dynamic, you can just use .IsFemale or whatever other property your item has. If it's a true/false, it will just magically work and return a bool . If it doesn't exist, it will return null. Declaration bool AnyBooleanProperty { get; } Property Value Type Description System.Boolean | Improve this Doc View Source AnyChildrenProperty A Dynamic Entity always contains an item of your data - a book, person, blog-post or a piece of content. Since the object is dynamic, you can just use .Tags or whatever other property your item has. If it's contains relationships, it will just magically work and return a list of further DynamicEntity objects. If it doesn't exist, it will return null. Declaration IEnumerable<DynamicEntity> AnyChildrenProperty { get; } Property Value Type Description System.Collections.Generic.IEnumerable < DynamicEntity > Remarks Very often you'll want to use LINQ to further sort or query these items. But the Razor compiler cannot know that it got a list, so using .Any() or similar fails. To fix this, put an AsList around it - a bit like AsList(myThing.Tags) . Sometimes you'll also need to help a bit more with AsList(myThings.Tags as object) . Now you can do things like var tags = AsList(myThings.Tags as object); if (myTags.Any()) {...} Read more about this in the Dnn LINQ Tutorials | Improve this Doc View Source AnyDateTimeProperty A Dynamic Entity always contains an item of your data - a book, person, blog-post or a piece of content. Since the object is dynamic, you can just use .Birthday or whatever other property your item has. If it's a date/time, it will just magically work and return a DateTime . If it doesn't exist, it will return null. Declaration DateTime AnyDateTimeProperty { get; } Property Value Type Description System.DateTime | Improve this Doc View Source AnyJsonProperty A Dynamic Entity always contains an item of your data - a book, person, blog-post or a piece of content. Since the object is dynamic, you can just use .Gps or whatever other property your item has. If the field contains JSON, it will just magically work and return a string . If it doesn't exist, it will return null. Declaration string AnyJsonProperty { get; } Property Value Type Description System.String Remarks Very often you'll want to use the Json as a dynamic object again. Just pass the result through AsDynamic and it will work. Example: var gps = AsDynamic(myThing.Gps); var lat = gps.Lat; Read more about this in the Dnn JSON Tutorials | Improve this Doc View Source AnyLinkOrFileProperty A Dynamic Entity always contains an item of your data - a book, person, blog-post or a piece of content. Since the object is dynamic, you can just use .Image or whatever other property your item has. If it's a link, it will just magically work and return a string . If it doesn't exist, it will return null. Declaration string AnyLinkOrFileProperty { get; } Property Value Type Description System.String Remarks Note that many internal references in the CMS use file:2742 or similar. This will automatically be resolved to the real link which your output needs. | Improve this Doc View Source AnyNumberProperty A Dynamic Entity always contains an item of your data - a book, person, blog-post or a piece of content. Since the object is dynamic, you can just use .Length or whatever other property your item has. If it's a number, it will just magically work and return a double . If it doesn't exist, it will return null. Declaration double AnyNumberProperty { get; } Property Value Type Description System.Double | Improve this Doc View Source AnyStringProperty A Dynamic Entity always contains an item of your data - a book, person, blog-post or a piece of content. Since the object is dynamic, you can just use .FirstName or whatever other property your item has. If it's a string, it will just magically work. If it doesn't exist, it will return null. Declaration string AnyStringProperty { get; } Property Value Type Description System.String Remarks Remember to use @Html.Raw(...) if you want the html to be preserved and not cleaned when placed in the page. | Improve this Doc View Source AnyTitleOfAnEntityInTheList If this DynamicEntity carries a list of items (for example a BlogPost.Tags which behaves as the first Tag, but also carries all the tags in it) Then you can also use DynamicCode to directly navigate to a sub-item, like Blogs.Tags.WebDesign . Declaration IEnumerable<DynamicEntity> AnyTitleOfAnEntityInTheList { get; } Property Value Type Description System.Collections.Generic.IEnumerable < DynamicEntity > Remarks New in 12.03 Methods | Improve this Doc View Source Get(String) Get a value of the entity. Usually you will prefer the quick access like @content.FirstName - which will give you the same things as content.Get(\"FirstName\"). There are two cases to use this: when you dynamically assemble the field name in your code, like when using App.Resources or similar use cases. to access a field which has a conflicting name with this object, like Get(\"Parents\") Declaration dynamic Get(string name) Parameters Type Name Description System.String name Returns Type Description System.Object An object which can be either a string, number, boolean or List<IDynamicEntity>, depending on the field type. Will return null if the field was not found. | Improve this Doc View Source Get(String, String, String, Boolean, Nullable<Boolean>) Get a property using the string name. Only needed in special situations, as most cases can use the object.name directly Declaration dynamic Get(string name, string noParamOrder = \"Rule: All params must be named (https://r.2sxc.org/named-params)\", string language = null, bool convertLinks = true, bool? debug = default(bool? )) Parameters Type Name Description System.String name the property name. System.String noParamOrder see Convention: Named Parameters System.String language Optional language code - like \"de-ch\" to prioritize that language System.Boolean convertLinks Optionally turn off if links like file:72 are looked up to a real link. Default is true. System.Nullable < System.Boolean > debug Set true to see more details in Insights how the value was retrieved. Returns Type Description System.Object a dynamically typed result, can be string, bool, etc. | Improve this Doc View Source GetSource(String) Get a source object which is used in the stack. Returned as a dynamic object. Declaration dynamic GetSource(string name) Parameters Type Name Description System.String name Returns Type Description System.Object A dynamic object like a IDynamicEntity or similar. If not found, it will return a source which just-works, but doesn't have data. Remarks Added in 2sxc 12.03"
  },
  "api/dot-net/ToSic.Sxc.Data.IDynamicMetadata.html": {
    "href": "api/dot-net/ToSic.Sxc.Data.IDynamicMetadata.html",
    "title": "Interface IDynamicMetadata | 2sxc 13 / EAV 13",
    "keywords": "Interface IDynamicMetadata Metadata on Dynamic Objects - like IDynamicEntity or IAsset (files/folders). Behaves like a normal DynamicEntity, but has additional commands to detect if specific Metadata exists Inherited Members IDynamicEntity.Entity IDynamicEntity.EntityId IDynamicEntity.EntityGuid IDynamicEntity.EntityTitle IDynamicEntity.Field(String) IDynamicEntity.EntityType IDynamicEntity.Metadata IDynamicEntity.Get(String) IDynamicEntity.Get(String, String, String, Boolean, Nullable<Boolean>) IDynamicEntity.GetDraft() IDynamicEntity.GetPublished() IDynamicEntity.IsPublished IDynamicEntity.IsDemoItem IDynamicEntity.Parents(String, String) IDynamicEntity.Children(String, String) IDynamicEntity.Presentation IDynamicEntity.AnyBooleanProperty IDynamicEntity.AnyDateTimeProperty IDynamicEntity.AnyChildrenProperty IDynamicEntity.AnyJsonProperty IDynamicEntity.AnyLinkOrFileProperty IDynamicEntity.AnyNumberProperty IDynamicEntity.AnyStringProperty IDynamicEntity.AnyTitleOfAnEntityInTheList IHasDecorators<IEntity>.Decorators Namespace : ToSic.Sxc.Data Assembly : ToSic.Sxc.dll Syntax [PublicApi] public interface IDynamicMetadata : IDynamicEntity, IDynamicEntity, IEntityWrapper, IHasDecorators<IEntity>, IMultiWrapper<IEntity>, IDynamicEntityBase, ISxcDynamicObject, ICanDebug, IHasMetadata Remarks Added in v13 Methods | Improve this Doc View Source HasType(String) Declaration bool HasType(string typeName) Parameters Type Name Description System.String typeName Returns Type Description System.Boolean | Improve this Doc View Source OfType(String) Declaration IEnumerable<IEntity> OfType(string typeName) Parameters Type Name Description System.String typeName Returns Type Description System.Collections.Generic.IEnumerable < IEntity >"
  },
  "api/dot-net/Custom.Dnn.Razor12.html": {
    "href": "api/dot-net/Custom.Dnn.Razor12.html",
    "title": "Class Razor12 | 2sxc 13 / EAV 13",
    "keywords": "Class Razor12 Base Class for Dynamic CSharp Classes in Dnn Class Custom.Dnn.Razor12 for Dnn ‚ò¢Ô∏è This is the Dnn specific base class. It's the very same as Custom.Hybrid.Razor12 except for the additional Dnn and Code Property. Because of this, the documentation here only shows Dnn - for all other properties go to Custom.Hybrid.Razor12 Tip If you don't need these special properties, we strongly suggest to move to the Hybrid implementation. Inheritance System.Object System.Web.WebPages.WebPageExecutingBase System.Web.WebPages.WebPageRenderingBase System.Web.WebPages.WebPageBase ToSic.Sxc.Web.RazorComponentBase Razor12 Razor12 Implements IDnnDynamicCodeAdditions IDynamicCode12 IDynamicCode ICreateInstance ICompatibilityLevel IHasLog Inherited Members Razor12.DynamicModel Razor12.Link Razor12.Edit Razor12.GetService<TService>() Razor12.App Razor12.Data Razor12.AsDynamic(String, String) Razor12.AsDynamic(IEntity) Razor12.AsDynamic(Object) Razor12.AsDynamic(Object[]) Razor12.AsEntity(Object) Razor12.AsList(Object) Razor12.Convert Razor12.CreateSource<T>(IDataSource, ILookUpEngine) Razor12.CreateSource<T>(IDataStream) Razor12.Content Razor12.Header Razor12.AsAdam(IDynamicEntity, String) Razor12.AsAdam(IEntity, String) Razor12.CmsContext Razor12.Resources Razor12.Settings Razor12.DevTools Razor12.Path Namespace : Custom.Dnn Assembly : ToSic.Sxc.Dnn.Razor.dll Syntax [PublicApi_Stable_ForUseInYourCode] public abstract class Razor12 : Razor12, ITemplateFile, IDnnDynamicCodeAdditions, IRazor12, IRazor, IHasDynamicCodeRoot, INeedsDynamicCodeRoot, IDynamicCode12, IDynamicCode, ICreateInstance, ICompatibilityLevel, IHasLog, IDnnRazor Properties | Improve this Doc View Source Dnn The DNN context. Declaration public IDnnContext Dnn { get; } Property Value Type Description IDnnContext The DNN context. Implements IDnnDynamicCodeAdditions IDynamicCode12 IDynamicCode ICreateInstance ICompatibilityLevel IHasLog"
  },
  "api/dot-net/ToSic.Sxc.Services.IConvertService.html": {
    "href": "api/dot-net/ToSic.Sxc.Services.IConvertService.html",
    "title": "Interface IConvertService | 2sxc 13 / EAV 13",
    "keywords": "Interface IConvertService Conversion helper for things which are very common in web-code like Razor and WebAPIs. It's mainly a safe conversion from anything to a target-type. Some special things it does: Strings like \"4.2\" reliably get converted to int 4 which would otherwise return 0 Numbers like 42 reliably converts to bool true which would otherwise return false Numbers like 42.5 reliably convert to strings \"42.5\" instead of \"42,5\" in certain cultures Namespace : ToSic.Sxc.Services Assembly : ToSic.Sxc.dll Syntax [PublicApi] public interface IConvertService Remarks New in v12.05 Properties | Improve this Doc View Source Json Sub-Service to convert JSON Declaration IJsonService Json { get; } Property Value Type Description IJsonService | Improve this Doc View Source OptimizeBoolean If set to true, will treat a number like 2 or -1 and strings like \"2\" as true. If set to false, only 1 will be true, other numbers will be false. Declaration bool OptimizeBoolean { get; } Property Value Type Description System.Boolean | Improve this Doc View Source OptimizeNumbers If set to true (default) will optimize converting numbers. For example, a string like \"4.2\" will properly convert to an int of 2. If set to false, this optimization doesn't happen and a string \"4.2\" would result in a 0 int Declaration bool OptimizeNumbers { get; } Property Value Type Description System.Boolean Methods | Improve this Doc View Source ForCode(Object) Convert any object safely to string to put into source code like HTML-attributes, inline-JavaScript or similar. This is usually used to ensure numbers, booleans and dates are in a format which works. Especially useful when giving data to a JavaScript, Json-Fragment or an Html Attribute. booleans will be true or false (not True or False ) numbers will have a . notation and never a comma (like in de-DE cultures) dates will convert to ISO format without time zone Declaration string ForCode(object value) Parameters Type Name Description System.Object value Returns Type Description System.String | Improve this Doc View Source ForCode(Object, String) Same as ForCode(Object) , but with fallback, in case the conversion fails. Declaration string ForCode(object value, string fallback = null) Parameters Type Name Description System.Object value System.String fallback Returns Type Description System.String | Improve this Doc View Source To<T>(Object) Convert any object safely to the desired type T. If conversion fails, it will return default(T) , which is 0 for most numbers, false for boolean or null for strings or objects. Declaration T To<T>(object value) Parameters Type Name Description System.Object value Returns Type Description T Type Parameters Name Description T | Improve this Doc View Source To<T>(Object, String, T) Convert any object safely to the desired type T. If conversion fails, it will return the fallback parameter as given. Since the fallback is typed, you can usually call this method without specifying T explicitly, so this should work: var c1 = Convert.To(&quot;5&quot;, 100); // will return 5 var c2 = Convert.To(&quot;&quot;, 100); // will return 100 Declaration T To<T>(object value, string paramsMustBeNamed = \"Rule: All params must be named (https://r.2sxc.org/named-params)\", T fallback = null) Parameters Type Name Description System.Object value System.String paramsMustBeNamed requires that all params must be named, like fallback: 27 T fallback The value used if conversion fails. Returns Type Description T Type Parameters Name Description T | Improve this Doc View Source ToBool(Object) Convert any object safely to bool. This does the same as To<T>(Object) but this is easier to type in Razor. Note that it's called ToBool, not ToBoolean, because the core type is also called bool, not boolean. This is different from System.Convert.ToBoolean(...) Declaration bool ToBool(object value) Parameters Type Name Description System.Object value Returns Type Description System.Boolean | Improve this Doc View Source ToBool(Object, Boolean) Convert any object safely to bool, or if that fails, return the fallback value. Note that it's called ToBool, not ToBoolean, because the core type is also called bool, not boolean. This is different from System.Convert.ToBoolean(...) Declaration bool ToBool(object value, bool fallback = false) Parameters Type Name Description System.Object value System.Boolean fallback Returns Type Description System.Boolean | Improve this Doc View Source ToDecimal(Object) Convert any object safely to decimal. This does the same as To<T>(Object) but this is easier to type in Razor. Declaration decimal ToDecimal(object value) Parameters Type Name Description System.Object value Returns Type Description System.Decimal | Improve this Doc View Source ToDecimal(Object, Decimal) Convert any object safely to decimal, or if that fails, return the fallback value. This does the same as To<T>(Object) but this is easier to type in Razor. Declaration decimal ToDecimal(object value, decimal fallback = 0M) Parameters Type Name Description System.Object value System.Decimal fallback Returns Type Description System.Decimal | Improve this Doc View Source ToDouble(Object) Convert any object safely to double. This does the same as To<T>(Object) but this is easier to type in Razor. Declaration double ToDouble(object value) Parameters Type Name Description System.Object value Returns Type Description System.Double | Improve this Doc View Source ToDouble(Object, Double) Convert any object safely to double, or if that fails, return the fallback value. This does the same as To<T>(Object) but this is easier to type in Razor. Declaration double ToDouble(object value, double fallback = 0) Parameters Type Name Description System.Object value System.Double fallback Returns Type Description System.Double | Improve this Doc View Source ToFloat(Object) Convert any object safely to float. This does the same as To<T>(Object) but this is easier to type in Razor. Note that it's called ToFloat, not ToSingle, because the core type is also called float, not single. This is different from System.Convert.ToSingle(...) Declaration float ToFloat(object value) Parameters Type Name Description System.Object value Returns Type Description System.Single | Improve this Doc View Source ToFloat(Object, Single) Convert any object safely to float, or if that fails, return the fallback value. This does the same as To<T>(Object) but this is easier to type in Razor. Note that it's called ToFloat, not ToSingle, because the core type is also called float, not single. This is different from System.Convert.ToSingle(...) Declaration float ToFloat(object value, float fallback = 0F) Parameters Type Name Description System.Object value System.Single fallback Returns Type Description System.Single | Improve this Doc View Source ToGuid(Object) Convert any object safely to a Guid This does the same as To<T>(Object) but this is easier to type in Razor. Declaration Guid ToGuid(object value) Parameters Type Name Description System.Object value Returns Type Description System.Guid | Improve this Doc View Source ToGuid(Object, Guid) Convert any object safely to standard guid, or if that fails, return the fallback value. This does the same as To<T>(Object) but this is easier to type in Razor. Declaration Guid ToGuid(object value, Guid fallback = default(Guid)) Parameters Type Name Description System.Object value System.Guid fallback Returns Type Description System.Guid | Improve this Doc View Source ToInt(Object) Convert any object safely to standard int. This does the same as To<T>(Object) but this is easier to type in Razor. Declaration int ToInt(object value) Parameters Type Name Description System.Object value Returns Type Description System.Int32 | Improve this Doc View Source ToInt(Object, Int32) Convert any object safely to standard int, or if that fails, return the fallback value. This does the same as To<T>(Object) but this is easier to type in Razor. Declaration int ToInt(object value, int fallback = 0) Parameters Type Name Description System.Object value System.Int32 fallback Returns Type Description System.Int32 | Improve this Doc View Source ToString(Object) Convert any object safely to string. This does the same as To<T>(Object) but this is easier to type in Razor. Declaration string ToString(object value) Parameters Type Name Description System.Object value Returns Type Description System.String | Improve this Doc View Source ToString(Object, String, String, Boolean) Convert any object safely to string - or if that fails, return the fallback value. This does NOT do the same as To<T>(Object, String, T) . In the standard implementation would only give you the fallback, if conversion failed. But this ToString will also give you the fallback, if the result is null. Declaration string ToString(object value, string fallback = null, string paramsMustBeNamed = \"Rule: All params must be named (https://r.2sxc.org/named-params)\", bool fallbackOnNull = true) Parameters Type Name Description System.Object value System.String fallback System.String paramsMustBeNamed System.Boolean fallbackOnNull Returns Type Description System.String"
  },
  "api/dot-net/ToSic.Sxc.Search.html": {
    "href": "api/dot-net/ToSic.Sxc.Search.html",
    "title": "Namespace ToSic.Sxc.Search | 2sxc 13 / EAV 13",
    "keywords": "Namespace ToSic.Sxc.Search The things here enable searching. They basically ensure that the CMS can ask for data to then index however the CMS wants to. Classes SearchIndexException Special search exception, so these exceptions can be handled in a special way if necessary. SearchItem A search item which is passed around before handed over to the indexing system Interfaces ICustomizeSearch This interface marks custom code which views use to customize how search treats data of that view. It's meant for customizing the internal indexer of the platform, not for Google Search. To use it, create a custom code (.cs) file which implements this interface. You can also inherit from a DynamicCode base class (like Code12) if you need more functionality. ISearchItem Defines an item in the search system - which is prepared by Sxc, and can be customized as needed"
  },
  "api/dot-net/ToSic.Sxc.Dnn.LookUp.LookUpInDnnPropertyAccess.html": {
    "href": "api/dot-net/ToSic.Sxc.Dnn.LookUp.LookUpInDnnPropertyAccess.html",
    "title": "Class LookUpInDnnPropertyAccess | 2sxc 13 / EAV 13",
    "keywords": "Class LookUpInDnnPropertyAccess Translator component which creates a LookUp object and internally accesses DNN PropertyAccess objects (which DNN uses for the same concept as LookUp) Inheritance System.Object LookUpBase LookUpInDnnPropertyAccess Implements ILookUp Inherited Members LookUpBase.Name LookUpBase.Get(String) LookUpBase.Format(Boolean) LookUpBase.Format(DateTime) Namespace : ToSic.Sxc.Dnn.LookUp Assembly : ToSic.Sxc.Dnn.Core.dll Syntax [InternalApi_DoNotUse_MayChangeWithoutNotice(\"this is just fyi\")] public class LookUpInDnnPropertyAccess : LookUpBase, ILookUp Constructors | Improve this Doc View Source LookUpInDnnPropertyAccess(String, IPropertyAccess, UserInfo, CultureInfo) Declaration public LookUpInDnnPropertyAccess(string name, IPropertyAccess source, UserInfo user, CultureInfo localization) Parameters Type Name Description System.String name DotNetNuke.Services.Tokens.IPropertyAccess source DotNetNuke.Entities.Users.UserInfo user System.Globalization.CultureInfo localization Methods | Improve this Doc View Source Get(String, String) Declaration public override string Get(string key, string format) Parameters Type Name Description System.String key System.String format Returns Type Description System.String Overrides LookUpBase.Get(String, String) Implements ILookUp"
  },
  "api/dot-net/ToSic.Sxc.Context.ICmsPlatform.html": {
    "href": "api/dot-net/ToSic.Sxc.Context.ICmsPlatform.html",
    "title": "Interface ICmsPlatform | 2sxc 13 / EAV 13",
    "keywords": "Interface ICmsPlatform General platform information Namespace : ToSic.Sxc.Context Assembly : ToSic.Sxc.dll Syntax [PublicApi] public interface ICmsPlatform Properties | Improve this Doc View Source Name A nice name ID, like \"Dnn\" or \"Oqtane\" ü™í Use in Razor: CmsContext.Platform.Name Declaration string Name { get; } Property Value Type Description System.String Remarks Please be aware that platform names may change with time - like Dnn was once DotNetNuke So to safely ensure you are detecting the right platform you should focus on the Type attribute. | Improve this Doc View Source Type The platform type Id from the enumerator - so stored as an int. ü™í Use in Razor: CmsContext.Platform.Type Declaration PlatformType Type { get; } Property Value Type Description PlatformType | Improve this Doc View Source Version The platform version Declaration Version Version { get; } Property Value Type Description System.Version Remarks Added in v13"
  },
  "api/dot-net/ToSic.Sxc.Context.ICmsPage.html": {
    "href": "api/dot-net/ToSic.Sxc.Context.ICmsPage.html",
    "title": "Interface ICmsPage | 2sxc 13 / EAV 13",
    "keywords": "Interface ICmsPage Information about the page which is the context for the currently running code. Inherited Members IHasMetadata.Metadata Namespace : ToSic.Sxc.Context Assembly : ToSic.Sxc.dll Syntax [PublicApi] public interface ICmsPage : IHasMetadata Remarks Note that the module context is the module for which the code is currently running. In some scenarios (like Web-API scenarios) the code is running for this page but not on this page, as it would then be running on a WebApi. Properties | Improve this Doc View Source Id The Id of the page. ü™í Use in Razor: CmsContext.Page.Type Declaration int Id { get; } Property Value Type Description System.Int32 Remarks Corresponds to the Dnn TabId or the Oqtane Page.PageId | Improve this Doc View Source Parameters The page parameters, cross-platform. Use this for easy access to url parameters like ?id=xyz with CmsContext.Page.Parameters[&quot;id&quot;] as a replacement for Request.QueryString[&quot;id&quot;] ü™í Use in Razor: CmsContext.Page.Parameters[&quot;id&quot;] Declaration IParameters Parameters { get; } Property Value Type Description IParameters"
  },
  "api/dot-net/ToSic.Sxc.Data.IDynamicField.html": {
    "href": "api/dot-net/ToSic.Sxc.Data.IDynamicField.html",
    "title": "Interface IDynamicField | 2sxc 13 / EAV 13",
    "keywords": "Interface IDynamicField BETA Work in progress. This is an interface which should describe a field. It's important for APIs which can need to know more about the field holding an item, like: The field name Any metadata of the field Namespace : ToSic.Sxc.Data Assembly : ToSic.Sxc.dll Syntax [WorkInProgressApi(\"Work in progress, to be finalized ca. v13.10\")] public interface IDynamicField : IHasLink Properties | Improve this Doc View Source Name The field name Declaration string Name { get; } Property Value Type Description System.String | Improve this Doc View Source Parent The parent object holding this field Declaration IDynamicEntity Parent { get; } Property Value Type Description IDynamicEntity | Improve this Doc View Source Raw The raw value of the field, without any modifications Declaration dynamic Raw { get; } Property Value Type Description System.Object | Improve this Doc View Source Value The value of the field with modifications - for example, file:22 would be converted to the real link Declaration dynamic Value { get; } Property Value Type Description System.Object"
  },
  "abyss/releases/history/v10/_all10.html": {
    "href": "abyss/releases/history/v10/_all10.html",
    "title": "Version 10 | 2sxc 13 / EAV 13",
    "keywords": "Version 10 Changes Version 10.01 - 10.09 LTS Develop and fine-tuning of the new Edit-UI based on Angular 8 Changes Version 10.20-00 to 10.20-05 Enhanced ListCache so it will prevent parallel buildup - important for long-loading DataSources like SharePoint DataSources Updating to RazorBlade 3.1 which doesn't need extension methods Changes Version 10.20-06 Created AsDynamic(string) Created AsDynamic(DataSource) to enable AsDynamic(Data) instead of AsDynamic(Data[\"Default\"]) Changes Version 10.21 New AsList() for better code New AsDynamic(string) to work with json /dist/ is now cleaned up on every update, to better distribute changing JS file structures Changes Version 10.22 Query Params added for VisualQuery Created QueryRun DataSource Insights now includes the code file and line numbers Insights now also measures time needed to execute some code Various performance enhancements Improved SoC for AppsCache and AppRoot DataSource Changes Version 10.23 Lots of logging enhancements Changes Version 10.24 LTS New stable LTS Improved/fixed QueryRun DataSource Improved Insights Enhancements to use 2sxc with Redis Cache WYSIWYG enhancements for better H1-Hx, P and Blockquote Performance enhancements Intenal refactoring for APIs Introduced an internal Compatibility-Level to disable very old features when using new RazorComponents Changes Version 10.25 LTS Changed how the $2sxc client JavaScripts are loaded for much better performance and better Google PageSpeed Enabled various features for the Content area which previously were hidden, like Resources and Settings Released brand new Content-Templates App with best-practices for 10.25 Fixed bugs with Evoq Page Publishing Enhanced the ValueFilter DataSource to handle dates which were null Changes Version 10.26 TinyMCE Updated to 5.1 Enhanced CreateInstance API to also work when compiling Razor files from a WebApi New DataSource StreamPick New automatic Param called [Params:ShowDrafts] to be used in VisualQuery - returns True or False New tokens [App:AppId] and [App:ZoneId] to use in VisualQuery calles (dropdown from query) Changed List-Caching bbehavior to create more reliable cache-keys for complex queries (previously it only went through Default streams to generate the cache-key) Changes Version 10.27 Possibly breaking changes Because the dynamic entity list now has a type which is dynamic, it cannot be cast to List<dynamic> any more. IList<dynamic> works, but in case you have any code casting it to List<dynamic> you'll need to change that to either IList<dynamic> or IEnumerable<dynamic> . New Features / Major Improvements Changed DynamicEntity so that accessing a property which contains many other entities it will return a DynamicEntityWithList . This allows Razor files to access the properties like .EntityId or .FirstName of the main entity in a sub-list easily without requiring AsList(...) #1993 Updated Quick-Dialog to use Angular 9, Ivy and the latest Dnn-Sxc-Angular #1992 New DataSource AttributeRename #2004 Completely refactored internal list management API #1995 Complete refactoring of the inpage code to make it typesafe (no more any types) Created brand-new, simpler way to create custom Toolbars and specs Introduces JS/API 2sxc-Insights for debugging In-Page code Enhancements Performance-Enhance App DataSource to delay building objects until needed #1991 Performance-Enhance internal Token Lookup #1998 Enhanced Dnn Search Index logging #1997 Corrected help-links on all data sources #1994 Bugfixes Cache-All-Streams only used the Default-Streams for Cache-Key identification #1988 QueryRun DataSource doesn't show statitics on all streams #1989 Modified date and Owner information were missing on json stored entities #2005 / #2006 Fixed bug in JS API for non-2sxc endpoint resolution #2000 Queries didn't resolve Dnn tokens when accessed in the Search Index #1999"
  },
  "basics/server/data-flow.html": {
    "href": "basics/server/data-flow.html",
    "title": "How Data Flows in the Server | 2sxc 13 / EAV 13",
    "keywords": "How Data Flows in the Server <!-- Data Highlights --> <!-- ADAM --> <!-- Server --> <!-- Prepare --> <!-- Data Source --> <!-- Optimzers --> <!-- Process / Awesomize --> <!-- Libraries --> <!-- data formats --> <!-- Browser --> <!-- Frameworks --> <!-- App show parts --> <!-- Interact parts --> <!-- Edit parts --> <!-- Edit UI parts --> <!-- SPA parts --> <!-- Custom highlight boxes - can be controlled by in-page CSS --> you are here (click to zoom) - discover the stack .context-box-summary .process-all { visibility: visible; } 2sxc is simple to use, but to enable that, it's pretty sophisticated on the inside. Let's take a look at how data is accessed, cached, queried, maybe cached again, and provided to the output. Note All the data handling systems come from the EAV . This is then enhanced and customized by Sxc and Sxc.Dnn. Core Paradigms Rule #1: Data is Reactive As you'll soon see, the EAV performs a lot of automatic lookup and caching, but as a first rule, this happens Reactively , only when data is actually accessed. This is similar to how ReactiveX or NgRx work, just much simpler. Rule #2: Data is Read-Only Any data the code receives as IEntity objects is read-only. This allows for a much more robust data model and API which in a CMS environment is usually 99% read, 1% write. Rule #3: Data Always Comes from DataSources Inside the system everything is loosely coupled (think Depedency Injection). So anything requesting data will always use a DataSource provided by some magic, and then use what was given. Rule #4: Data is Managed and Cached per App Once data from an App was requested, the entire app is loaded and cached. Within an app a lot of data can be linked together using Content-Types, Relationships, Sub-Lists, Metadata and more. If we would lazy-load this on-demand from the storage system (SQL), it would result in a ping-pong of requests, which would be very inefficient. This unit of cache is called an AppState . Overall Flow When Creating Html Imagine that your custom Razor template in a Dnn module is initialized. Here's what happens: 1. Preparation 2sxc starts with the ModuleId as it's inside a Dnn Module. It will then create a Block for this InstanceId (which is the ModuleId). The Block internally will create a CmsBlock DataSource , pass in the InstanceId and then wait for data to pour in. The CmsBlock knows about Dnn, and will use the InstanceId to get the ModuleSettings in Dnn. This contains only 2 pieces of information: the AppId which it is visualizing, and a ContentBlockId which is the full configuration of the Content-Block which will be shown. The CmsBlock also knows if the user is an editor (which would result in draft-items being included). The CmsBlock DataSource will then ask the underlying EAV for this block configuration (stored as an Entity) which is then loaded from the Cache. When the configuration is found, the CmsBlock then knows what View will be used. The CmsBlock itself is a DataSource and is now configured to deliver the data which the view expects. Note The CmsBlock doesn't know about the internals of the cache, it just asks for it. The cache will auto-initialize the AppState if it hasn't been accessed before. Note The CmsBlock will also not load any data yet. It just knows what would be loaded, should it ever be accessed. Tip When you use views which don't have a content-type configured, then properties like Data , Content or Header will be null. But App.Data will still work. 2. Execution The Block is now ready. 2sxc now consults the View to find out which Engine to use (Razor or Token). It will now load this engine, give it the Block and wait for the resulting Html to be created. The engine loads the template and lets it do what it should. If the template has code accessing Data then the underlying source will retrieve the necessary data. If it's a normal content-view, then the items provided will be the ones which an editor has manually added, since they were referenced in the ContentBlock. If the view relies on a Query, then this query is built and will be waiting to execute if the data is accessed. If the code accesses App . Data then this data source will build up everything necessary so it just works. If the code accesses App . Query then the underlying system will prepare the Query as needed. Note All the data retrieving features like Data do not actually retrieve any data unless accessed. This also means that Content or Header won't use any CPU cycles unless accessed. The same goes for App.Data - nothing is processed unless it's accessed. Note The queries are only provided by the App for immediate use. They won't be built or executed unless they are actually read. Overall Flow when Creating WebAPIs This works just like the Html creation, except that we don't need an engine. The code which inherits from ApiController now works with the data as needed. The same lazy-execution rules apply: neither Data , Content , App.Data or App.Query use any CPU cycles, unless the data is actually pulled by reading it. Read Also Templates Rendering Engines like Token/Razor Content-Blocks Custom WebApi (which is also kind of a dynamic rendering engine)"
  },
  "api/dot-net/index.html": {
    "href": "api/dot-net/index.html",
    "title": "This is the 2sxc API Documentation | 2sxc 13 / EAV 13",
    "keywords": "This is the 2sxc API Documentation Background: Architecture of Eav, Sxc, Dnn Tip Before you start, please get familiar with the architecture - otherwise you probably won't understand what you see here. Note also that the real code of EAV/2sxc/Dnn has way more stuff, but that's inofficial. Please don't use objects that are not documented here. That allows us to improve the architecture without worrying about breaking your code. Once we're really sure that certain parts are very final, we'll publish the API docs for those parts. Tip We've color and icon coded all the things you might care about. Internal stuff in subdued marks things usually used in Razor/WebApi development marks things related to data processing, usually data sources marks ADAM things (automatic Digital Asset Management) marks things related to metadata What You're Probably Looking for APIs in Razor Templates and WebApi To create a Razor template and want to know what APIs are available, start with Razor12 or Razor12 . This is because new Razor Components inherits from that, so you'll see all the commannds you get there. To create a WebApi and need to know everything in it, you also want to check the Api12 / Api12 , because all new WebApi classes inherit that. To create Shared C# Code Files we suggest you use the Code12 . Note: Previous versions of 2sxc recommended other base classes, but for the current v12 you should begin using the Hybrid versions, as it will also run on Oqtane in future. Working with Entities and ADAM Assets If you're working with DynamicEntity objects and want to know more about them, check out IDynamicEntity . In very rare cases you also want to know more about the underlying IEntity . If you're working with ADAM Assets, like from the AsAdam(...) command on IDynamicEntity objects, you'll want to read about IFolder and IFile Programming with DataSources and VisualQuery All the DataSources are based on IDataSource and most of them are also IDataTarget s . You can find most of them in ToSic.Eav.DataSources ."
  },
  "basics/metadata/read.html": {
    "href": "basics/metadata/read.html",
    "title": "Read / Access Metadata - (advanced ‚ö†) | 2sxc 13 / EAV 13",
    "keywords": "Read / Access Metadata - (advanced ‚ö†) <!-- Data Highlights --> <!-- ADAM --> <!-- Server --> <!-- Prepare --> <!-- Data Source --> <!-- Optimzers --> <!-- Process / Awesomize --> <!-- Libraries --> <!-- data formats --> <!-- Browser --> <!-- Frameworks --> <!-- App show parts --> <!-- Interact parts --> <!-- Edit parts --> <!-- Edit UI parts --> <!-- SPA parts --> <!-- Custom highlight boxes - can be controlled by in-page CSS --> you are here (click to zoom) - discover the stack .context-box-summary .data-all { visibility: visible; } There are two ways to read / access Metadata On most 2sxc Data-objects there is a property called Metadata which contains everything you need To get Metadata for other Data there is a simple API to retrieve it Get Metadata on 2sxc Data Objects #todoc Many standard 2sxc object have a property Metadata to quickly access all Metadata of that object. You can find the docs in IMetadataOf . This applies to all kinds of objects like Entities Content-Types Apps ADAM files and folders Get Metadata for ADAM Files and Folders #todoc All ADAM Assets also have the .Metadata property to read the metadata as well as a .HasMetadata to quickly see if Metadata has been set. Edge cases of the .Metadata Property Since .Metadata is often used in dynamic code it's optimized to just work. This means it has the following effects It will always return a valid object, even if there is no metadata attached If no metadata exists, the EntityId will always equal zero 0 If it has one or more metadata items attached, the EntityId will be that of the first Metadata-Entities found todoc - this should probably be moved to the C# API infos Get Metadata for Data outside of 2sxc #todoc To read Metadata for non-2sxc objects you must request it from the App.Data.Metadata or from the AppState .MetadataSource object. Both are a a IMetadataSource . Use commands like GetMetadata<T>(...) to access the metadata you need. Read also #todoc Demo App and further links #todoc Fancybox Gallery App History Introduced in 2sxc v2"
  },
  "api/dot-net/ToSic.Eav.Apps.AppState.html": {
    "href": "api/dot-net/ToSic.Eav.Apps.AppState.html",
    "title": "Class AppState | 2sxc 13 / EAV 13",
    "keywords": "Class AppState A complete App state - usually cached in memory. Has many internal features for partial updates etc. But the primary purpose is to make sure the whole app is always available with everything. It also manages and caches relationships between entities of the same app. Inheritance System.Object HasLog AppBase AppState Implements IHasLog IAppIdentity IZoneIdentity IAppIdentityLight IEntitiesSource IMetadataSource ICacheExpiring ITimestamped IHasMetadata Inherited Members AppBase.ZoneId AppBase.AppId AppBase.Init(IAppIdentity, CodeRef, ILog) HasLog.Log HasLog.InitLog(String, ILog, String) HasLog.InitLog(String, ILog, String, CodeRef) Namespace : ToSic.Eav.Apps Assembly : ToSic.Eav.Core.dll Syntax [InternalApi_DoNotUse_MayChangeWithoutNotice(\"this is just fyi\")] public class AppState : AppBase, IHasLog, IAppIdentity, IZoneIdentity, IAppIdentityLight, IHasPiggyBack, IEntitiesSource, IHasMetadataSource, IMetadataSource, ICacheExpiring, ITimestamped, IHasMetadata Fields | Improve this Doc View Source DynamicUpdatesCount Show how many times the app has been Dynamically updated - in case we run into cache rebuild problems. Declaration public int DynamicUpdatesCount Field Value Type Description System.Int32 | Improve this Doc View Source FirstLoadCompleted Shows that the initial load has completed Declaration protected bool FirstLoadCompleted Field Value Type Description System.Boolean | Improve this Doc View Source Loading Shows that the app is loading / building up the data. Declaration protected bool Loading Field Value Type Description System.Boolean Properties | Improve this Doc View Source CacheTimestamp System time-stamp of when the data in this cached thing was initialized or updated. Depending on the implementation, this may go up-stream and return an up-stream value. Declaration public long CacheTimestamp { get; } Property Value Type Description System.Int64 A timestamp as a long number | Improve this Doc View Source ContentTypes All ContentTypes in this App Declaration public IEnumerable<IContentType> ContentTypes { get; } Property Value Type Description System.Collections.Generic.IEnumerable < IContentType > | Improve this Doc View Source Folder The app-folder, which is pre-initialized very early on. Needed to pre-load file based content-types Declaration public string Folder { get; set; } Property Value Type Description System.String | Improve this Doc View Source List The simple list of all entities, used everywhere Declaration public IImmutableList<IEntity> List { get; } Property Value Type Description System.Collections.Immutable.IImmutableList < IEntity > | Improve this Doc View Source Metadata Metadata describing this App Declaration public IMetadataOf Metadata { get; } Property Value Type Description IMetadataOf | Improve this Doc View Source Name The app-folder, which is pre-initialized very early on. Needed to pre-load file based content-types Declaration public string Name { get; set; } Property Value Type Description System.String | Improve this Doc View Source Relationships Manages all relationships between Entities Declaration public AppRelationshipManager Relationships { get; } Property Value Type Description ToSic.Eav.Apps.AppRelationshipManager Methods | Improve this Doc View Source CacheChanged(Int64) Detect if the cache has old data, by comparing it to a timestamp which may be newer. This is implemented in each object, because sometimes it compares its own timestamp, sometimes that of another underlying object. Declaration public bool CacheChanged(long newCacheTimeStamp) Parameters Type Name Description System.Int64 newCacheTimeStamp New time stamp to compare with Returns Type Description System.Boolean True if the timestamps differ, false if it's the same | Improve this Doc View Source DoInLock(ILog, Action) Experiment to try to ensure the same entity cannot be created twice Declaration public void DoInLock(ILog parentLog, Action transaction) Parameters Type Name Description ILog parentLog System.Action transaction | Improve this Doc View Source GetContentType(Int32) Get a content-type by number / id. Will also check global types if needed. Declaration public IContentType GetContentType(int contentTypeId) Parameters Type Name Description System.Int32 contentTypeId id of the type as stored in the repository Returns Type Description IContentType a type object or null if not found | Improve this Doc View Source GetContentType(String) Get a content-type by name. Will also check global types if needed. Declaration public IContentType GetContentType(string name) Parameters Type Name Description System.String name name of the type Returns Type Description IContentType a type object or null if not found | Improve this Doc View Source GetMetadata<TMetadataKey>(Int32, TMetadataKey, String) Declaration public IEnumerable<IEntity> GetMetadata<TMetadataKey>(int targetType, TMetadataKey key, string contentTypeName = null) Parameters Type Name Description System.Int32 targetType TMetadataKey key System.String contentTypeName Returns Type Description System.Collections.Generic.IEnumerable < IEntity > Type Parameters Name Description TMetadataKey | Improve this Doc View Source GetMetadata<TKey>(TargetTypes, TKey, String) Declaration public IEnumerable<IEntity> GetMetadata<TKey>(TargetTypes targetType, TKey key, string contentTypeName = null) Parameters Type Name Description TargetTypes targetType TKey key System.String contentTypeName Returns Type Description System.Collections.Generic.IEnumerable < IEntity > Type Parameters Name Description TKey Explicit Interface Implementations | Improve this Doc View Source IEntitiesSource.List Declaration IEnumerable<IEntity> IEntitiesSource.List { get; } Returns Type Description System.Collections.Generic.IEnumerable < IEntity > Implements IHasLog IAppIdentity IZoneIdentity IAppIdentityLight IEntitiesSource IMetadataSource ICacheExpiring ITimestamped IHasMetadata"
  },
  "api/dot-net/ToSic.Eav.Logging.HasLog.html": {
    "href": "api/dot-net/ToSic.Eav.Logging.HasLog.html",
    "title": "Class HasLog | 2sxc 13 / EAV 13",
    "keywords": "Class HasLog Base class for most objects which simply want to implement log and log-chaining. Inheritance System.Object HasLog AppBase ListCache DataSourceBase LookUpEngine DynamicCode DynamicCodeRoot EngineBase Implements IHasLog Namespace : ToSic.Eav.Logging Assembly : ToSic.Eav.Core.dll Syntax [InternalApi_DoNotUse_MayChangeWithoutNotice(\"this is just fyi\")] public abstract class HasLog : IHasLog Constructors | Improve this Doc View Source HasLog(String, CodeRef, ILog, String) Declaration protected HasLog(string logName, CodeRef code, ILog parentLog = null, string initialMessage = null) Parameters Type Name Description System.String logName CodeRef code ILog parentLog System.String initialMessage | Improve this Doc View Source HasLog(String, ILog, String, String, String, Int32) Constructor which ensures Log-chaining and optionally adds initial messages Declaration protected HasLog(string logName, ILog parentLog = null, string initialMessage = null, string cPath = null, string cName = null, int cLine = 0) Parameters Type Name Description System.String logName Name to use in the Log-ID ILog parentLog Parent log (if available) for log-chaining System.String initialMessage First message to be added System.String cPath auto pre filled by the compiler - the path to the code file System.String cName auto pre filled by the compiler - the method name System.Int32 cLine auto pre filled by the compiler - the code line Properties | Improve this Doc View Source Log The log object which contains the log and can add more logs to the list. Declaration [IgnoreDataMember] public ILog Log { get; } Property Value Type Description ILog Methods | Improve this Doc View Source InitLog(String, ILog, String) This is the real initializer - implemented as a virtual method, because some long-living objects must actively prevent logs from being attached. Declaration public virtual void InitLog(string name, ILog parentLog = null, string initialMessage = null) Parameters Type Name Description System.String name ILog parentLog System.String initialMessage Remarks this one can be overridden by outside sources, like the cache which should never allow attaching logs at runtime | Improve this Doc View Source InitLog(String, ILog, String, CodeRef) Declaration protected void InitLog(string name, ILog parentLog, string initialMessage, CodeRef code) Parameters Type Name Description System.String name ILog parentLog System.String initialMessage CodeRef code Implements IHasLog"
  },
  "api/dot-net/ToSic.Eav.DataSources.ValueFilter.html": {
    "href": "api/dot-net/ToSic.Eav.DataSources.ValueFilter.html",
    "title": "Class ValueFilter | 2sxc 13 / EAV 13",
    "keywords": "Class ValueFilter Return only Entities having a specific value in an Attribute/Property The ValueFilter DataSource is part of the Standard EAV Data Sources . It will filter items based on the values - and if none are found, will optionally return a fallback-list. How to use with the VisualQuery When using the VisualQuery you can just drag it into your query. This is what it usually looks like: The above example shows that 2 of the 5 items fulfilled the filters requirements. Using Url Parameter for Filtering You can also filter using values from the URL, like this: Using Multiple URL Parameters ...and of course you can also use url parameters to specify field-names and value: ... or field, value and operator: Comparison Operators There are many operators possible - see the in-UI help bubble for that. Using Fallback Streams The filter will return the items which match the requirement, but sometimes none will match. This is common when you have a parameter from the Url, which may not match anything. In the simple version this looks like this: ...this previous example used a filter criteria which didn't match any items, so it resulted in delivering all. This is very useful when you want to cascade optional filters, like this: ...this example shows two filters - the first didn't match anything (it was blank), so it delivered all items, the second one then worked, and reduced the remaining items to 2. Programming With The ValueFilter DataSource We recommend to use the VisualQuery where possible, as it's easier to understand and is identical for C# and JavaScript. It's also better because it separates data-retrieval from visualization. // A source which can filter by Content-Type (EntityType) var allAuthors = CreateSource<EntityTypeFilter>(); allAuthors.TypeName = \"Author\"; // filter by FullName var someAuthors = CreateSource<ValueFilter>(allAuthors); someAuthors.Attribute = \"FullName\"; someAuthors.Value = \"Daniel Mettler\"; Read also DataSource / DataStream List of all EAV Data Sources Query / VisualQuery Demo App and further links You should find some examples in this demo App Demo App with examples for most DataSources History Introduced in EAV 3.x, 2sxc ? Enhanced in 2sxc 8.12 with fallback <!-- note: this must be an H1 because of the automatic TOC in the code pages --> API Documentation Inheritance System.Object HasLog DataSourceBase ValueFilter Implements IDataSource IAppIdentity IZoneIdentity IAppIdentityLight ICacheKey ICacheExpiring ITimestamped ICanPurgeListCache IHasLog IDataTarget IDataPartShared Inherited Members DataSourceBase.ErrorStream DataSourceBase.SetError(String, String, Exception) DataSourceBase.GetRequiredInList(IImmutableList<IEntity>) DataSourceBase.GetRequiredInList(String, IImmutableList<IEntity>) DataSourceBase.Name DataSourceBase.AppId DataSourceBase.ZoneId DataSourceBase.Guid DataSourceBase.Configuration DataSourceBase.DataBuilder DataSourceBase.CacheRelevantConfigurations DataSourceBase.ConfigMask(String, String, Boolean) DataSourceBase.CachePartialKey DataSourceBase.CacheFullKey DataSourceBase.CacheTimestamp DataSourceBase.CacheChanged(Int64) DataSourceBase.PurgeList(Boolean) DataSourceBase.In DataSourceBase.Out DataSourceBase.Item[String] DataSourceBase.GetStream(String, String, Boolean, Boolean) DataSourceBase.List DataSourceBase.Attach(IDataSource) DataSourceBase.Attach(String, IDataSource, String) DataSourceBase.Attach(String, IDataStream) HasLog.Log HasLog.InitLog(String, ILog, String) HasLog.InitLog(String, ILog, String, CodeRef) Namespace : ToSic.Eav.DataSources Assembly : ToSic.Eav.DataSources.dll Syntax [PublicApi_Stable_ForUseInYourCode] [VisualQuery(NiceName = \"Value Filter\", UiHint = \"Keep items which have a property with the expected value\", Icon = \"filter_list\", Type = DataSourceType.Filter, GlobalName = \"ToSic.Eav.DataSources.ValueFilter, ToSic.Eav.DataSources\", In = new string[]{\"Default*\", \"Fallback\"}, DynamicOut = false, ExpectsDataOfType = \"|Config ToSic.Eav.DataSources.ValueFilter\", HelpLink = \"https://r.2sxc.org/DsValueFilter\")] public sealed class ValueFilter : DataSourceBase, IDataSource, IAppIdentity, IZoneIdentity, IAppIdentityLight, ICacheInfo, ICacheKey, ICacheExpiring, ITimestamped, ICanPurgeListCache, IHasLog, IDataTarget, IDataPartShared Remarks Technically many things could just identify the app they belong to, and let the system look up the zone. But this would be inefficient, so for optimization, many items identify themselves with both the app and zone Ids Properties | Improve this Doc View Source Attribute The attribute whose value will be scanned / filtered. Declaration public string Attribute { get; set; } Property Value Type Description System.String | Improve this Doc View Source Languages Language to filter for. At the moment it is not used, or it is trying to find \"any\" Declaration public string Languages { get; set; } Property Value Type Description System.String | Improve this Doc View Source Operator The comparison operator, == by default, many possibilities exist depending on the original types we're comparing Declaration public string Operator { get; set; } Property Value Type Description System.String | Improve this Doc View Source Take Amount of items to take - then stop filtering. For performance optimization. Declaration public string Take { get; set; } Property Value Type Description System.String | Improve this Doc View Source Value The filter that will be used - for example \"Daniel\" when looking for an entity w/the value Daniel Declaration public string Value { get; set; } Property Value Type Description System.String Implements IDataSource IAppIdentity IZoneIdentity IAppIdentityLight ICacheKey ICacheExpiring ITimestamped ICanPurgeListCache IHasLog IDataTarget IDataPartShared"
  },
  "net-code/data-sources/custom/type-modify.html": {
    "href": "net-code/data-sources/custom/type-modify.html",
    "title": "DataSource API: Modify Data DataSources | 2sxc 13 / EAV 13",
    "keywords": "DataSource API: Modify Data DataSources <!-- Data Highlights --> <!-- ADAM --> <!-- Server --> <!-- Prepare --> <!-- Data Source --> <!-- Optimzers --> <!-- Process / Awesomize --> <!-- Libraries --> <!-- data formats --> <!-- Browser --> <!-- Frameworks --> <!-- App show parts --> <!-- Interact parts --> <!-- Edit parts --> <!-- Edit UI parts --> <!-- SPA parts --> <!-- Custom highlight boxes - can be controlled by in-page CSS --> you are here (click to zoom) - discover the stack .context-box-summary .datasource-custom { visibility: visible; } If your DataSource takes an In stream and changes the properties of the items forwarded it's called a Modify DataSource . You can find some simple examples in our DataSources like the AttributeRename or AttributeFilter . Also make sure you mark your sources in the VisualQuery Attribute as DataSourceType.Modify . Read Also Custom DataSources - Basic Tutorial History Introduced ca. EAV / 2sxc v6"
  },
  "net-code/data-sources/custom/configmask.html": {
    "href": "net-code/data-sources/custom/configmask.html",
    "title": "DataSource Configuration: ConfigMask(...) | 2sxc 13 / EAV 13",
    "keywords": "DataSource Configuration: ConfigMask(...) <!-- Data Highlights --> <!-- ADAM --> <!-- Server --> <!-- Prepare --> <!-- Data Source --> <!-- Optimzers --> <!-- Process / Awesomize --> <!-- Libraries --> <!-- data formats --> <!-- Browser --> <!-- Frameworks --> <!-- App show parts --> <!-- Interact parts --> <!-- Edit parts --> <!-- Edit UI parts --> <!-- SPA parts --> <!-- Custom highlight boxes - can be controlled by in-page CSS --> you are here (click to zoom) - discover the stack .context-box-summary .datasource-custom, .context-box-summary .query-params, .context-box-summary .data-configuration { visibility: visible; } DataSources often need settings which come from the App or from a settings dialog. The ConfigMask is part of the Configuration System and initializes a configuration value. This value will later be used for Parsing Tokens to find the correct parameter to use Use as part of the Cache-Key for high-performance caching. This ensures that DataSources which have different data based on dynamic configuration (like using a URL parameter) will have separate caches for each value used. How to use ConfigMask Here's a example of the constructor of our SharePoint 2019 DataSource, which expects lots of settings: public SharePoint2019() { // Specify what out-streams this data-source provides. Usually just one: \"Default\" Provide(GetList); // Register the configurations as tokens; values will be injected later on ConfigMask(ListNameConfigKey, $\"[Settings:ListName]\"); ConfigMask(SiteUrlConfigKey, $\"[Settings:SiteUrl]\"); ConfigMask(UserNameConfigKey, $\"[Settings:UserName]\"); ConfigMask(PasswordConfigKey, $\"[Settings:Password]\", false); ConfigMask(FieldsConfigKey, $\"[Settings:Fields]\"); ConfigMask(TitleFieldConfigKey, $\"[Settings:TitleField||Title]\"); ConfigMask(ViewConfigKey, $\"[Settings:View]\"); ConfigMask(MaxItemsConfigKey, $\"[Settings:MaxItems]\"); } This example adds 8 configuration masks - let's find out what exactly happens. Most of them just add a simple [Settings:SOMEKEY] so they will just take the value which the developer will configure in the UI The password has a special parameter false to ensure that it won't be used in the cache key (which would show it in certain debug scenarios) The title field has a fallback - so if it's not supplied, it will use Title by default Read also Configuration using Tokens ConfigMask in the API DataSource Configuration Ensuring configuration is parsed Demo App and further links #todoc History Introduced in 2sxc 9.13 to aid custom data sources"
  },
  "basics/query/sub-query/index.html": {
    "href": "basics/query/sub-query/index.html",
    "title": "Sub-Queries: Re-Use Queries in Other Queries | 2sxc 13 / EAV 13",
    "keywords": "Sub-Queries: Re-Use Queries in Other Queries <!-- Data Highlights --> <!-- ADAM --> <!-- Server --> <!-- Prepare --> <!-- Data Source --> <!-- Optimzers --> <!-- Process / Awesomize --> <!-- Libraries --> <!-- data formats --> <!-- Browser --> <!-- Frameworks --> <!-- App show parts --> <!-- Interact parts --> <!-- Edit parts --> <!-- Edit UI parts --> <!-- SPA parts --> <!-- Custom highlight boxes - can be controlled by in-page CSS --> you are here (click to zoom) - discover the stack .context-box-summary .query-app { visibility: visible; } You can re-use a Query inside another one, just like calling functions in your code. This feature uses the QueryRun DataSource . Example in VisualQuery As you'll see in the image below, the QueryRun DataSource actually runs another query and re-uses it. Walkthrough Video Watch this video for a walkthrough to learn how to use it yourself. Checklist to Use Sub-Queries Best Practices In many cases you'll have sub-queries which expect parameters. You could assume that they come from the URL like [QueryString:Id] but when re-using the query it's better to pass it through the parameters because it will give the caller more control over what parameters are used. In the above example, it's better to do this: The sub-query would use [Params:Id] to use the Params-ID The caller would then set Params:Id=[QueryString:Id] or anything else as needed History Introduced in 2sxc 10.24"
  },
  "abyss/parts/look-up/index.html": {
    "href": "abyss/parts/look-up/index.html",
    "title": "LookUp System | 2sxc 13 / EAV 13",
    "keywords": "LookUp System <!-- Data Highlights --> <!-- ADAM --> <!-- Server --> <!-- Prepare --> <!-- Data Source --> <!-- Optimzers --> <!-- Process / Awesomize --> <!-- Libraries --> <!-- data formats --> <!-- Browser --> <!-- Frameworks --> <!-- App show parts --> <!-- Interact parts --> <!-- Edit parts --> <!-- Edit UI parts --> <!-- SPA parts --> <!-- Custom highlight boxes - can be controlled by in-page CSS --> you are here (click to zoom) - discover the stack .context-box-summary .lookup { visibility: visible; } Many things in the EAV and 2sxc require it to look up parameters. Examples could be: The current Page ID to then find metadata for this page The current Date to filter out news items which should be published in future An Id from the URL Parameters to show details about this id This is done using Tokens which look like [QueryString:Id] . To achieve this 2sxc has three parts: Tokens which parses the placeholders The LookUpEngine which will get the values... ...using LookUp Sources to really resolve the values. Tip The LookUp System is used in Queries and Token Templates . But since Token-Templates are fairly trivial, we recommand that you only use Tokens for Queries and instead create your Templates using Razor . Example Without LookUp Imagine a Query which has an EntityId Filter which expects an ID. This could be hardwired like this: What happens now is as follows: The EntityId-Filter will pass all the settings to be parsed by the LookUp-Engine The LookUp-Engine will detect that it's a simple value (not a Token) and just return the 38654 The EntityId-Filter will then do it's job and retrieve this item Example With LookUp But it would make more sense if the ID were to be dynamic, maybe from the URL like this: What happens now is as follows: The EntityId-Filter will pass all the settings to be parsed by the LookUp-Engine The LookUp-Engine will detect the Token and parse it Since the first part in the token says QueryString the LookUp-Engine will check if it has a LookUp-Source by that name Since it has a LookUp which answers to QueryString , it will ask this source if it can resolve id Assuming that the page has ?id=38654 then the LookUp will say yes! it's 38654 The EntityId-Filter will then do it's job and retrieve this item Discover More The Token Syntax and all the features LookUp Engine LookUp Sources Query LookUps Token Template LookUps For example, when a Query is created, it may need to know the current PortalId or the current time, to properly filter/sort something. This is achieved through 2 special object types, the ToSic.Eav.LookUp .ILookUp and ToSic.Eav.LookUp .ILookUpEngine, both in the ToSic.Eav.LookUp namespace. Also Read LookUp Tokens Explained DataSource Configuration: Configuration.Parse() ToSic.Eav.LookUp ToSic.Sxc.LookUp ToSic.Sxc.Dnn.LookUp History General Tokens introduced in 2sxc 1.0 Most enhancements were in 2sxc 07.00"
  },
  "abyss/parts/look-up/tokens.html": {
    "href": "abyss/parts/look-up/tokens.html",
    "title": "LookUp Tokens Explained | 2sxc 13 / EAV 13",
    "keywords": "LookUp Tokens Explained <!-- Data Highlights --> <!-- ADAM --> <!-- Server --> <!-- Prepare --> <!-- Data Source --> <!-- Optimzers --> <!-- Process / Awesomize --> <!-- Libraries --> <!-- data formats --> <!-- Browser --> <!-- Frameworks --> <!-- App show parts --> <!-- Interact parts --> <!-- Edit parts --> <!-- Edit UI parts --> <!-- SPA parts --> <!-- Custom highlight boxes - can be controlled by in-page CSS --> you are here (click to zoom) - discover the stack .context-box-summary .query-params, .context-box-summary .lookup { visibility: visible; } Often you need a placeholder which should be resolved at runtime with a real value from elsewhere. In Dnn / 2sxc this is called a Token , and they usually look like [Source:Property] . Simple Example As example could be [DateTime:Now] which would be resolved to the current date/time at runtime. You would use this in a Query to filter out news which should be published in future, so PublicationDate < [DateTime:Now] . Note There is also a TokenEngine which uses the same Token mechanism to generate HTML. What you see here also applies to that, but it's actually a separate topic. Some Token Examples [Portal:PortalId] would return the current portal Id [App:Settings:PageSize] would return the page size as configured in app-settings [QueryString:Id] would retrieve the id-parameter from the url [Settings:ProductId] would retrieve the id as configured in the UI by the user [Settings:productId||27] would also try to get the id, but return 27 if not found Token Basics A token is a piece of text that looks like [Source:Property] , which will be replaced by an engine so that it will then be a value. For example, [QueryString:Page] is replaced with 2 if the current url has ?page=2 in it. You can research more about tokens in older docs here and in the full list of standard tokens , it's a standard Dnn concept. Internally it uses a LookUp-Engine which itself uses LookUp-Sources - see [](Abyss.Parts.LookUp.Index. Special Token Features in 2sxc/EAV The EAV and 2sxc have enhanced Tokens to a new level with these features: 1. Sub-Tokens A token like [App:Settings:PageSize] will go through a tree of info-objects to find an inner property if it exists. This only works on special object types that are specifically meant to provide sub-data. 2. Fallback A token like [QueryString:page||1] will deliver the url-param, and if that is empty, will deliver 1 . Note that you need 2 pipe symbols | because the convention is that after the first pipe you can have a format specifier like #.## . 3. Stacking Stacking with more Tokens: a token like [QueryString:PageSize||[App:Settings:PageSize]] will try the first token, and if it doesn't resolve, try the next one 4. Recursion A token can resolve into a token, which would then be looked up again. So if a token [Settings:Page||1] is used, and the setting Page is not a number but again a token like [QueryString:Page] , then it will... resolve Settings:Page and find Querystring:Page resolve QueryString:Page and maybe find something if that is empty, return the fallback 1 Advanced Token Sources in Special Scenarios Some situations will have token sources beyond the default. For example, when configuring data sources they always have 2 more sources In - used like [In:Default:PageSize] Settings - used like [Settings:PageSize] There is another special override-token system which is used for testing Also Read LookUp System IDataStream DataSource API DataSource Configuration: Configuration.Parse() History General Tokens introduced in 2sxc 1.0 Most enhancements were in 2sxc 07.00"
  },
  "net-code/data-sources/custom/streams-in.html": {
    "href": "net-code/data-sources/custom/streams-in.html",
    "title": "DataSource API: In Streams | 2sxc 13 / EAV 13",
    "keywords": "DataSource API: In Streams <!-- Data Highlights --> <!-- ADAM --> <!-- Server --> <!-- Prepare --> <!-- Data Source --> <!-- Optimzers --> <!-- Process / Awesomize --> <!-- Libraries --> <!-- data formats --> <!-- Browser --> <!-- Frameworks --> <!-- App show parts --> <!-- Interact parts --> <!-- Edit parts --> <!-- Edit UI parts --> <!-- SPA parts --> <!-- Custom highlight boxes - can be controlled by in-page CSS --> you are here (click to zoom) - discover the stack .context-box-summary .datasource-custom { visibility: visible; } All DataSources can have In Streams, even Root DataSources. This is because an In is often used to provide the DataSource with configuration information. In addition to that, many DataSources expect Data which will be processed. For example, the Shuffle needs one In-Stream containing data to shuffle, while the ValueFilter expects two streams: a Default to filter on and an optional Fallback stream to return in case the filter didn't return anything. Important Here we only explain aspects which are relevant to your code. Make sure you are familiar with the general concept of In-Streams . To help the UI explicitly show these predefined In-Streams, we must list them in the VisualQuery decorator attribute in the In property. Example from the ValueFilter DataSource [VisualQuery(GlobalName = \"...\", Type = DataSourceType.Filter, In = new[] { Constants.DefaultStreamName, Constants.FallbackStreamName }, DynamicIn = false, DynamicOut = false, ExpectsDataOfType = \"...\", HelpLink = \"...\")] Nice to Know If the In is not specified in the VisualQuery Attribute , then the UI will show no special In-markers By convention, the default In-stream is called Default To mark an In-Stream as required, add a * at the end, like Default* (this is still WIP in 2sxc 11.13) In-Streams have data which can be used, but they are not accessed until you really need them If your code really needs an In (like you require the Default stream) best use the best-practice for error-handling The property DynamicIn would mark DataSources which can work with a variable amount of In-Streams, like StreamMerge History Introduced ca. in 2sxc 6"
  },
  "net-code/data-sources/custom/streams-out.html": {
    "href": "net-code/data-sources/custom/streams-out.html",
    "title": "DataSource API: Out Streams | 2sxc 13 / EAV 13",
    "keywords": "DataSource API: Out Streams <!-- Data Highlights --> <!-- ADAM --> <!-- Server --> <!-- Prepare --> <!-- Data Source --> <!-- Optimzers --> <!-- Process / Awesomize --> <!-- Libraries --> <!-- data formats --> <!-- Browser --> <!-- Frameworks --> <!-- App show parts --> <!-- Interact parts --> <!-- Edit parts --> <!-- Edit UI parts --> <!-- SPA parts --> <!-- Custom highlight boxes - can be controlled by in-page CSS --> you are here (click to zoom) - discover the stack .context-box-summary .datasource-custom { visibility: visible; } All DataSources must have Out Streams. By convention, the primary Out is called Default and the VisualQuery Designer assumes that it exists by default. But there are two important things you can change You can determine one or more predefined Out streams You can tell the UI that your Stream can have many, dynamically named Out-Streams just like the App DataSource Important Here we only explain aspects which are relevant to your code. Make sure you are familiar with the general concept of Out-Streams . Pre-Named Out-Streams For an example, we'll use the Paging DataSource . It's job is to take a list of items and only forward a chunk on the Default , like \"Page 3 containing items 61-90\". In addition it should also provide information as to what page we're on and how many pages exist. This is defined in the constructor, where the DataSource determines what it Provides #todoc. public Paging() { Provide(GetList); Provide(\"Paging\", GetPaging); ConfigMask(PageSizeKey, \"[Settings:\" + PageSizeKey + \"||\" + DefPageSize + \"]\"); ConfigMask(PageNumberKey, \"[Settings:\" + PageNumberKey + \"||\" + DefPageNum + \"]\"); } The two lines of Provide are the important bits: Provide(GetList) will provide data on the Default Out-Stream Provide(\"Paging\", GetPaging) will provide data on the Paging Out-Stream Dynamic Out Streams Some DataSources like the App DataSource can have many Out-streams which are not known till Runtime. To allow the UI to provide these, we must specify this in the VisualQuery attribute . Here's an example of the App DataSource: [VisualQuery(GlobalName = \"...\", Type = DataSourceType.Source, Icon = \"app\", DynamicOut = true, NiceName = \"App\", UiHint = \"...\", ExpectsDataOfType = \"...\", HelpLink = \"...\")] The important part here is the DynamicOut = true . Strategies for Providing Dynamic Out Providing dynamic-out in your code can be tricky, and there are 2 strategies you can use: Create all Out-Streams on first Use of Out This would create the Out-Accessors when Out is first accessed. You can see examples of this on the App DataSource Re-Implement the Out of the type IDictionary<string, IDataStream> to do some kind of Lazy-Loading There is no example to do this, but it could be done. Note that this is fairly sophisticated so do spend some time to familiarize yourself with the EAV code before you attempt this. History Introduced ca. in 2sxc 6 Extended with Dynamic Out ca. 2sxc 8"
  },
  "net-code/data-sources/custom/type-filter.html": {
    "href": "net-code/data-sources/custom/type-filter.html",
    "title": "DataSource API: Filter DataSources | 2sxc 13 / EAV 13",
    "keywords": "DataSource API: Filter DataSources <!-- Data Highlights --> <!-- ADAM --> <!-- Server --> <!-- Prepare --> <!-- Data Source --> <!-- Optimzers --> <!-- Process / Awesomize --> <!-- Libraries --> <!-- data formats --> <!-- Browser --> <!-- Frameworks --> <!-- App show parts --> <!-- Interact parts --> <!-- Edit parts --> <!-- Edit UI parts --> <!-- SPA parts --> <!-- Custom highlight boxes - can be controlled by in-page CSS --> you are here (click to zoom) - discover the stack .context-box-summary .datasource-custom { visibility: visible; } If your DataSource takes an In stream and limits what is forwarded it's called a Filter DataSource . You can find some simple examples in our DataSources like the EntityId or ValueFilter . Also make sure you mark your sources in the VisualQuery Attribute as DataSourceType.Filter . Read Also Custom DataSources - Basic Tutorial History Introduced ca. EAV / 2sxc v6"
  },
  "net-code/data-sources/custom/configuration.html": {
    "href": "net-code/data-sources/custom/configuration.html",
    "title": "DataSource Configuration | 2sxc 13 / EAV 13",
    "keywords": "DataSource Configuration <!-- Data Highlights --> <!-- ADAM --> <!-- Server --> <!-- Prepare --> <!-- Data Source --> <!-- Optimzers --> <!-- Process / Awesomize --> <!-- Libraries --> <!-- data formats --> <!-- Browser --> <!-- Frameworks --> <!-- App show parts --> <!-- Interact parts --> <!-- Edit parts --> <!-- Edit UI parts --> <!-- SPA parts --> <!-- Custom highlight boxes - can be controlled by in-page CSS --> you are here (click to zoom) - discover the stack .context-box-summary .datasource-custom, .context-box-summary .query-params, .context-box-summary .data-configuration { visibility: visible; } Most Custom DataSources will want to provide a configuration UI to the editor. This happens through these parts: A Content-Type which describes what fields can be edited The VisualQuery Attribute on your DataSource which references that Content-Type The Configuration manager on the DataSource which helps you get the configuration The LookUp Engine which resolves any Tokens in the configuration Examples of Configurations Needed a Paging needs to know what page size it should use and what page it's on A CSV Data Source needs to know what file it should load a CmsBlock needs to know the module ID an Owner-Filter DataSource needs to know who the current user is, to find his items Some of this information depends on the current context (ModuleId, UserId), others on configured settings (page size) and some on Url-parameters (Page number). In addition, we sometimes want to say \"use the page-size configured in the App-Settings\" or even more complex \"use from url, but if not specified, try app-settings, and if that isn't defined, use 10\" . How to Build a Configurable DataSource üëâ DataSource Configuration Data üëâ Configurable DataSource Configuration Basics Each configuration value of a DataSource must be a value (string, int etc.). But to allow greater flexibility in configuration, it usually starts as a string Token like [Settings:PageNumber] . This token is parsed before any data is queried using Configuration.Parse() to convert the Token to the expected value type. Best read more about Tokens and how fallbacks, defaults and recursion work. The Tokens allow quite some fancy features: Your DataSource will use [Settings:...] tokens and will automatically get the settings as they were added in the UI Since tokens also allow for default/fallback values, your code will often have [Settings:Id||0] As tokens are recursive, the admin can specify things like [QueryString:Id||752] in the UI and your code (asking for [Settings:Id] ) will get the ID from the URL or the default 752 as the Admin specified it. Thanks to Token Stacking a lot more is possible üòâ When a DataSource is configured, it has many parameter LookUp Sources like Module , QueryString , App etc. These are shared and are identical for all objects. Read more about the LookUp Sources . In your code you will usually not use these sources, but only use the Settings source . This source only exists in C# and contains all the values the Admin/Editor entered in the Configuration-UI . So the token [Settings:PageNumber] will deliver the number or text in the input-field pagenumber . How Tokens are Defined, Settings Edited and Resolved When you're using the VisualQuery designer, the configuration created is saved as an Entity (aka Content-Item) which must be injected into the DataSource configuration automatically. But when you use the object is your code, your code must be able to provide other values. But how does this work? Each DataSource object has a property called Configuration which is a dictionary containing all configuration properties the data source will care about. For example, the EntityIdFilter has a Configuration with only one property which is called EntityIds . The each property is first initialized with a Token-Template. For example, the CsvDataSource has a ConfigMask(DelimiterKey, \"[Settings:Delimiter||\\t]\"); This says that the delimiter should come from the Settings-Entity field Delimiter and if not provided, fall back to \\t (which is a tab character) read about ConfigMask here For the programmer who wants to set a number or whatever, this would be fairly unreliable to access from outside, so the DataSource should also have a real property which internally also modifies the dictionary. For example, the CsvDataSource has a string-property Delimiter which internally will get/set the in the Configuration dictionary. When the DataSource is first sucked from, which happens when something tries to access the Out-Property, it will automatically run a token-engine to resolve the values, then run whatever action the data-source wants. read about ensuring configuration is parsed here So how does each scenario work out? If the programmer overwrote the Delimiter property, then internally the Configuration[\"Delimiter\"] is now not a token any more, but instead just a character like , . So the token-engine won't change anything. If the programmer didn't do anything but the VisualQuery engine gave a settings-entity to the system, then the token is resolved and whatever the user entered is used. if the neither the programmer nor the user provided settings, then the token-engine will resolve to the fallback and use the \\t as was defined. Also Read LookUp System LookUp Tokens Explained DataSource API DataSource Configuration: Configuration.Parse() IDataStream History General Tokens introduced in 2sxc 1.0 Most enhancements were in 2sxc 07.00"
  },
  "net-code/data-sources/custom/errors.html": {
    "href": "net-code/data-sources/custom/errors.html",
    "title": "DataSource API: Error Handling üÜï | 2sxc 13 / EAV 13",
    "keywords": "DataSource API: Error Handling üÜï <!-- Data Highlights --> <!-- ADAM --> <!-- Server --> <!-- Prepare --> <!-- Data Source --> <!-- Optimzers --> <!-- Process / Awesomize --> <!-- Libraries --> <!-- data formats --> <!-- Browser --> <!-- Frameworks --> <!-- App show parts --> <!-- Interact parts --> <!-- Edit parts --> <!-- Edit UI parts --> <!-- SPA parts --> <!-- Custom highlight boxes - can be controlled by in-page CSS --> you are here (click to zoom) - discover the stack .context-box-summary .datasource-custom { visibility: visible; } Custom DataSources sometimes need to throw an error, for example if a SQL isn't found, a remote WebAPI fails or the configuration is faulty. Since 2sxc 11.13 we changed the bbehavior so that DataSource Errors will not break code execution but just make the stream contain just one Error entity. This helps a lot in debugging. You Don't Have to Do Anything... If your code just raises a .net Exception, the execution engine will catch this and wrap it in an error. The Exception will also be logged to Insights for the admin/developer to see. ...but You can do Better Instead of raising the normal exception, your DataSource can also return an ErrorStream which contains more specific information about the problem. This greatly helps the developer (and that could be you üòâ) figure out what to fix. There are three tools at your disposal: The SetError helper to create an ErrorStream which you can return The GetRequiredInList helper to get an In stream which must be available The ErrorStream property to pass errors around from deeper functions Read the API docs above or check out examples in the 2sxc EAV code base for more guidance. Example using GetRequiredStream GetRequiredStream ensures that we get a stream we really need, or that we'll get a stream containing a good error message. private IImmutableList<IEntity> GetEntities() { // This will resolve the tokens before starting Configuration.Parse(); if (!GetRequiredInList(out var originals)) return originals; var results = ...; return results.ToImmutableArray(); } Example using SetError and ErrorStream The following example is from the DataSource Tutorial . You'll see that if we read the Hours property something can go wrong, but this property can't just return the error object. So it sets in on the DataSource and later on it will be picked up and returned instead of the expected data. public class ConfigurableDateTime: ExternalData { // ... private const string HoursKey = \"Hours\"; // ... /// <summary> /// A number-demo config. Note that we do error-checking and place the Error with SetError /// </summary> public int Hours { get { if (decimal.TryParse(Configuration[HoursKey], out var hour)) { // check that it's a valid hour-range if(hour >= 0 && hour <= 23) return (int)hour; // If not, set the error, so that the code can later pick up the error-stream SetError(\"Hour value out of range\", $\"The hour was '{hour}' which is not valid\"); return 0; } // Apparently not a decimal, so set the error, so that the code can later pick up the error-stream SetError(\"Hour value invalid\", $\"Tried to parse the hour, but couldn't. Value was '{Configuration[HoursKey]}'\"); return 0; } set => Configuration[HoursKey] = value.ToString(); } /// <summary> /// Constructs a new EntityIdFilter /// </summary> public ConfigurableDateTime() { Provide(GetEntities); ConfigMask(HoursKey, \"[Settings:Hours||17]\"); // ... } private IImmutableList<IEntity> GetEntities() { // This will resolve the tokens before starting Configuration.Parse(); // ... // Get the hours - and if something is wrong, the ErrorStream will be pre-filled var hours = Hours; if (!ErrorStream.IsDefaultOrEmpty) return ErrorStream; // ... return new List<IEntity> { ent }.ToImmutableArray(); } } Read also DataSource API - DataSource API overview Ensuring configuration is parsed Demo App and further links todo History Introduced in EAV / 2sxc 11.13"
  },
  "api/dot-net/ToSic.Eav.DataSources.Queries.Query.html": {
    "href": "api/dot-net/ToSic.Eav.DataSources.Queries.Query.html",
    "title": "Class Query | 2sxc 13 / EAV 13",
    "keywords": "Class Query Provides a data-source to a query, but won't assemble/compile the query unless accessed (lazy). Inheritance System.Object HasLog DataSourceBase Query Implements IDataTarget IQuery IDataSource IDataPartShared IAppIdentity IZoneIdentity IAppIdentityLight ICacheKey ICacheExpiring ITimestamped ICanPurgeListCache IHasLog Inherited Members DataSourceBase.ErrorStream DataSourceBase.SetError(String, String, Exception) DataSourceBase.GetRequiredInList(IImmutableList<IEntity>) DataSourceBase.GetRequiredInList(String, IImmutableList<IEntity>) DataSourceBase.Name DataSourceBase.AppId DataSourceBase.ZoneId DataSourceBase.Guid DataSourceBase.Configuration DataSourceBase.DataBuilder DataSourceBase.CacheRelevantConfigurations DataSourceBase.ConfigMask(String, String, Boolean) DataSourceBase.CachePartialKey DataSourceBase.CacheFullKey DataSourceBase.CacheTimestamp DataSourceBase.CacheChanged(Int64) DataSourceBase.In DataSourceBase.Item[String] DataSourceBase.GetStream(String, String, Boolean, Boolean) DataSourceBase.List DataSourceBase.Attach(IDataSource) DataSourceBase.Attach(String, IDataSource, String) DataSourceBase.Attach(String, IDataStream) HasLog.Log HasLog.InitLog(String, ILog, String) HasLog.InitLog(String, ILog, String, CodeRef) Namespace : ToSic.Eav.DataSources.Queries Assembly : ToSic.Eav.DataSources.dll Syntax [PublicApi_Stable_ForUseInYourCode] public sealed class Query : DataSourceBase, IDataTarget, IQuery, IDataSource, IDataPartShared, IAppIdentity, IZoneIdentity, IAppIdentityLight, ICacheInfo, ICacheKey, ICacheExpiring, ITimestamped, ICanPurgeListCache, IHasLog Properties | Improve this Doc View Source Definition The underlying definition for the current query so you can check what's inside. Declaration public QueryDefinition Definition { get; } Property Value Type Description QueryDefinition | Improve this Doc View Source Out Standard out. Note that the Out is not prepared until accessed the first time, when it will auto-assembles the query Declaration public override IDictionary<string, IDataStream> Out { get; } Property Value Type Description System.Collections.Generic.IDictionary < System.String , IDataStream > Overrides DataSourceBase.Out Methods | Improve this Doc View Source Params() Get the current list of params. Declaration public IDictionary<string, string> Params() Returns Type Description System.Collections.Generic.IDictionary < System.String , System.String > The list of params as they are configured in this moment. | Improve this Doc View Source Params(IDictionary<String, String>) Add/Set a parameter for the query, which will be used by the [Params:Xxx] tokens. Declaration public void Params(IDictionary<string, string> values) Parameters Type Name Description System.Collections.Generic.IDictionary < System.String , System.String > values dictionary with values Remarks If you set a param after accessing the query, an exception will occur unless you call Reset() first. | Improve this Doc View Source Params(String) Add/Set a parameter for the query, which will be used by the [Params:Xxx] tokens. Declaration public void Params(string list) Parameters Type Name Description System.String list list of key=value on many lines Remarks If you set a param after accessing the query, an exception will occur unless you call Reset() first. | Improve this Doc View Source Params(String, String) Add/Set a parameter for the query, which will be used by the [Params:Xxx] tokens. Declaration public void Params(string key, string value) Parameters Type Name Description System.String key Key - the part used in [Params:key] System.String value The value it will resolve to. Can also be another token. Remarks If you set a param after accessing the query, an exception will occur unless you call Reset() first. | Improve this Doc View Source PurgeList(Boolean) Override PurgeList, because we don't really have In streams, unless we use parameters. Declaration public override void PurgeList(bool cascade = false) Parameters Type Name Description System.Boolean cascade Overrides DataSourceBase.PurgeList(Boolean) | Improve this Doc View Source Reset() Reset the query, so it can be run again. Requires all params to be set again. Declaration public void Reset() Implements IDataTarget IQuery IDataSource IDataPartShared IAppIdentity IZoneIdentity IAppIdentityLight ICacheKey ICacheExpiring ITimestamped ICanPurgeListCache IHasLog"
  },
  "api/dot-net/ToSic.Eav.DataSources.AppRoot.html": {
    "href": "api/dot-net/ToSic.Eav.DataSources.AppRoot.html",
    "title": "Class AppRoot | 2sxc 13 / EAV 13",
    "keywords": "Class AppRoot The App Root is the entry point for all data. It takes it's data from a hidden AppState Cache. It's implemented as a DataSource so that other DataSources can easily attach to it. This is also the object returned as the root in any query. Inheritance System.Object HasLog DataSourceBase AppRoot Implements IDataTarget IAppRoot IDataSource IDataPartShared IAppIdentity IZoneIdentity IAppIdentityLight ICacheKey ICacheExpiring ITimestamped ICanPurgeListCache IHasLog Inherited Members DataSourceBase.ErrorStream DataSourceBase.SetError(String, String, Exception) DataSourceBase.GetRequiredInList(IImmutableList<IEntity>) DataSourceBase.GetRequiredInList(String, IImmutableList<IEntity>) DataSourceBase.Name DataSourceBase.AppId DataSourceBase.ZoneId DataSourceBase.Guid DataSourceBase.Configuration DataSourceBase.DataBuilder DataSourceBase.CacheRelevantConfigurations DataSourceBase.ConfigMask(String, String, Boolean) DataSourceBase.CachePartialKey DataSourceBase.PurgeList(Boolean) DataSourceBase.In DataSourceBase.Out DataSourceBase.Item[String] DataSourceBase.GetStream(String, String, Boolean, Boolean) DataSourceBase.List DataSourceBase.Attach(IDataSource) DataSourceBase.Attach(String, IDataSource, String) DataSourceBase.Attach(String, IDataStream) HasLog.Log HasLog.InitLog(String, ILog, String) HasLog.InitLog(String, ILog, String, CodeRef) Namespace : ToSic.Eav.DataSources Assembly : ToSic.Eav.DataSources.dll Syntax [InternalApi_DoNotUse_MayChangeWithoutNotice(\"this is just fyi\")] public class AppRoot : DataSourceBase, IDataTarget, IAppRoot, IDataSource, IDataPartShared, IAppIdentity, IZoneIdentity, IAppIdentityLight, ICacheInfo, ICacheKey, ICacheExpiring, ITimestamped, ICanPurgeListCache, IHasLog Properties | Improve this Doc View Source CacheFullKey Combination of the current key and all keys of upstream cached items, to create a long unique key for this context. Declaration public override string CacheFullKey { get; } Property Value Type Description System.String Full key containing own partial key and upstream keys. Overrides DataSourceBase.CacheFullKey | Improve this Doc View Source CacheTimestamp System time-stamp of when the data in this cached thing was initialized or updated. Depending on the implementation, this may go up-stream and return an up-stream value. Declaration public override long CacheTimestamp { get; } Property Value Type Description System.Int64 A timestamp as a long number Overrides DataSourceBase.CacheTimestamp Methods | Improve this Doc View Source CacheChanged(Int64) Detect if the cache has old data, by comparing it to a timestamp which may be newer. This is implemented in each object, because sometimes it compares its own timestamp, sometimes that of another underlying object. Declaration public override bool CacheChanged(long newCacheTimeStamp) Parameters Type Name Description System.Int64 newCacheTimeStamp New time stamp to compare with Returns Type Description System.Boolean True if the timestamps differ, false if it's the same Overrides DataSourceBase.CacheChanged(Int64) Implements IDataTarget IAppRoot IDataSource IDataPartShared IAppIdentity IZoneIdentity IAppIdentityLight ICacheKey ICacheExpiring ITimestamped ICanPurgeListCache IHasLog"
  },
  "api/dot-net/ToSic.Eav.DataSources.DataTable.html": {
    "href": "api/dot-net/ToSic.Eav.DataSources.DataTable.html",
    "title": "Class DataTable | 2sxc 13 / EAV 13",
    "keywords": "Class DataTable Provide Entities from a System.Data.DataTable. This is not meant for VisualQuery, but for code which pre-processes data in a DataTable and then wants to provide it as entities. Inheritance System.Object HasLog DataSourceBase ExternalData DataTable Implements IDataSource IAppIdentity IZoneIdentity IAppIdentityLight ICacheKey ICacheExpiring ITimestamped ICanPurgeListCache IHasLog IDataTarget IDataPartShared Inherited Members ExternalData.CacheTimestamp DataSourceBase.ErrorStream DataSourceBase.SetError(String, String, Exception) DataSourceBase.GetRequiredInList(IImmutableList<IEntity>) DataSourceBase.GetRequiredInList(String, IImmutableList<IEntity>) DataSourceBase.Name DataSourceBase.AppId DataSourceBase.ZoneId DataSourceBase.Guid DataSourceBase.Configuration DataSourceBase.DataBuilder DataSourceBase.CacheRelevantConfigurations DataSourceBase.ConfigMask(String, String, Boolean) DataSourceBase.CachePartialKey DataSourceBase.CacheFullKey DataSourceBase.CacheChanged(Int64) DataSourceBase.PurgeList(Boolean) DataSourceBase.In DataSourceBase.Out DataSourceBase.Item[String] DataSourceBase.GetStream(String, String, Boolean, Boolean) DataSourceBase.List DataSourceBase.Attach(IDataSource) DataSourceBase.Attach(String, IDataSource, String) DataSourceBase.Attach(String, IDataStream) HasLog.Log HasLog.InitLog(String, ILog, String) HasLog.InitLog(String, ILog, String, CodeRef) Namespace : ToSic.Eav.DataSources Assembly : ToSic.Eav.DataSources.dll Syntax [PublicApi_Stable_ForUseInYourCode] public class DataTable : ExternalData, IDataSource, IAppIdentity, IZoneIdentity, IAppIdentityLight, ICacheInfo, ICacheKey, ICacheExpiring, ITimestamped, ICanPurgeListCache, IHasLog, IDataTarget, IDataPartShared Remarks Technically many things could just identify the app they belong to, and let the system look up the zone. But this would be inefficient, so for optimization, many items identify themselves with both the app and zone Ids Properties | Improve this Doc View Source ContentType Name of the ContentType Declaration public string ContentType { get; set; } Property Value Type Description System.String | Improve this Doc View Source EntityIdField Name of the Column used as EntityId Declaration public string EntityIdField { get; set; } Property Value Type Description System.String | Improve this Doc View Source ModifiedField Name of the field which would contain a modified timestamp (date/time) Declaration public string ModifiedField { get; set; } Property Value Type Description System.String | Improve this Doc View Source Source Source DataTable Declaration public DataTable Source { get; set; } Property Value Type Description System.Data.DataTable | Improve this Doc View Source TitleField Name of the Title Attribute of the Source DataTable Declaration public string TitleField { get; set; } Property Value Type Description System.String Implements IDataSource IAppIdentity IZoneIdentity IAppIdentityLight ICacheKey ICacheExpiring ITimestamped ICanPurgeListCache IHasLog IDataTarget IDataPartShared"
  },
  "api/dot-net/ToSic.Eav.DataSources.EntityTypeFilter.html": {
    "href": "api/dot-net/ToSic.Eav.DataSources.EntityTypeFilter.html",
    "title": "Class EntityTypeFilter | 2sxc 13 / EAV 13",
    "keywords": "Class EntityTypeFilter Keep only entities of a specific content-type Data Source: ContentType EntityType Filter Note this data source used to be called EntityTypeFilter, we renamed it in 2sxc 9.8 for consistency The ContentTypeFilter DataSource is part of the Standard EAV Data Sources . It will only let items pass through, which are of a specific type. How to use with the VisualQuery When using the VisualQuery you can just drag it into your query. In the settings you'll specify the type-name. The resulting query will usually be a bit like this: The above example shows: a two content-type filters, each filtering a different type Programming With The ContentTypeFilter DataSource We recommend to use the VisualQuery where possible, as it's easier to understand and is identical for C# and JavaScript. It's also better because it separates data-retrieval from visualization. // A source which can filter by Content-Type (EntityType) var allAuthors = CreateSource<EntityTypeFilter>(); allAuthors.TypeName = \"Author\"; Read also DataSource / DataStream List of all EAV Data Sources Query / VisualQuery Demo App and further links You should find some examples in this demo App Demo App with examples for most DataSources History Introduced in EAV 3.x, 2sxc ? <!-- note: this must be an H1 because of the automatic TOC in the code pages --> API Documentation Inheritance System.Object HasLog DataSourceBase EntityTypeFilter Implements IDataSource IAppIdentity IZoneIdentity IAppIdentityLight ICacheKey ICacheExpiring ITimestamped ICanPurgeListCache IHasLog IDataTarget IDataPartShared Inherited Members DataSourceBase.ErrorStream DataSourceBase.SetError(String, String, Exception) DataSourceBase.GetRequiredInList(IImmutableList<IEntity>) DataSourceBase.GetRequiredInList(String, IImmutableList<IEntity>) DataSourceBase.Name DataSourceBase.AppId DataSourceBase.ZoneId DataSourceBase.Guid DataSourceBase.Configuration DataSourceBase.DataBuilder DataSourceBase.CacheRelevantConfigurations DataSourceBase.ConfigMask(String, String, Boolean) DataSourceBase.CachePartialKey DataSourceBase.CacheFullKey DataSourceBase.CacheTimestamp DataSourceBase.CacheChanged(Int64) DataSourceBase.PurgeList(Boolean) DataSourceBase.In DataSourceBase.Out DataSourceBase.Item[String] DataSourceBase.GetStream(String, String, Boolean, Boolean) DataSourceBase.List DataSourceBase.Attach(IDataSource) DataSourceBase.Attach(String, IDataSource, String) DataSourceBase.Attach(String, IDataStream) HasLog.Log HasLog.InitLog(String, ILog, String) HasLog.InitLog(String, ILog, String, CodeRef) Namespace : ToSic.Eav.DataSources Assembly : ToSic.Eav.DataSources.dll Syntax [PublicApi_Stable_ForUseInYourCode] [VisualQuery(NiceName = \"Type-Filter\", UiHint = \"Only keep items of the specified type\", Icon = \"alt_route\", Type = DataSourceType.Filter, GlobalName = \"ToSic.Eav.DataSources.EntityTypeFilter, ToSic.Eav.DataSources\", DynamicOut = false, In = new string[]{\"Default*\"}, ExpectsDataOfType = \"|Config ToSic.Eav.DataSources.EntityTypeFilter\", HelpLink = \"https://r.2sxc.org/DsTypeFilter\")] public class EntityTypeFilter : DataSourceBase, IDataSource, IAppIdentity, IZoneIdentity, IAppIdentityLight, ICacheInfo, ICacheKey, ICacheExpiring, ITimestamped, ICanPurgeListCache, IHasLog, IDataTarget, IDataPartShared Remarks Technically many things could just identify the app they belong to, and let the system look up the zone. But this would be inefficient, so for optimization, many items identify themselves with both the app and zone Ids Properties | Improve this Doc View Source TypeName The name of the type to filter for. Either the normal name or the 'StaticName' which is usually a GUID. Declaration public string TypeName { get; set; } Property Value Type Description System.String Implements IDataSource IAppIdentity IZoneIdentity IAppIdentityLight ICacheKey ICacheExpiring ITimestamped ICanPurgeListCache IHasLog IDataTarget IDataPartShared"
  },
  "api/dot-net/ToSic.Eav.DataSources.CsvDataSource.html": {
    "href": "api/dot-net/ToSic.Eav.DataSources.CsvDataSource.html",
    "title": "Class CsvDataSource | 2sxc 13 / EAV 13",
    "keywords": "Class CsvDataSource DataSource for importing/reading CSV files. The CSV DataSource is part of the Standard EAV Data Sources . It will load data from a CSV file which is usually located in the App folder (but can also be in ADAM). These docs are not complete, check out the feature description for now. History Introduced in 2sxc 7.2 <!-- note: this must be an H1 because of the automatic TOC in the code pages --> API Documentation Inheritance System.Object HasLog DataSourceBase ExternalData CsvDataSource Implements IDataSource IAppIdentity IZoneIdentity IAppIdentityLight ICacheKey ICacheExpiring ITimestamped ICanPurgeListCache IHasLog IDataTarget IDataPartShared Inherited Members ExternalData.CacheTimestamp DataSourceBase.ErrorStream DataSourceBase.SetError(String, String, Exception) DataSourceBase.GetRequiredInList(IImmutableList<IEntity>) DataSourceBase.GetRequiredInList(String, IImmutableList<IEntity>) DataSourceBase.Name DataSourceBase.AppId DataSourceBase.ZoneId DataSourceBase.Guid DataSourceBase.Configuration DataSourceBase.DataBuilder DataSourceBase.CacheRelevantConfigurations DataSourceBase.ConfigMask(String, String, Boolean) DataSourceBase.CachePartialKey DataSourceBase.CacheFullKey DataSourceBase.CacheChanged(Int64) DataSourceBase.PurgeList(Boolean) DataSourceBase.In DataSourceBase.Out DataSourceBase.Item[String] DataSourceBase.GetStream(String, String, Boolean, Boolean) DataSourceBase.List DataSourceBase.Attach(IDataSource) DataSourceBase.Attach(String, IDataSource, String) DataSourceBase.Attach(String, IDataStream) HasLog.Log HasLog.InitLog(String, ILog, String) HasLog.InitLog(String, ILog, String, CodeRef) Namespace : ToSic.Eav.DataSources Assembly : ToSic.Eav.DataSources.dll Syntax [PublicApi_Stable_ForUseInYourCode] [VisualQuery(NiceName = \"CSV Data\", UiHint = \"Load data from a CSV file\", Icon = \"description\", Type = DataSourceType.Source, GlobalName = \"ToSic.Eav.DataSources.CsvDataSource, ToSic.Eav.DataSources\", DynamicOut = false, ExpectsDataOfType = \"|Config ToSic.Eav.DataSources.CsvDataSource\", HelpLink = \"https://r.2sxc.org/DsCsv\")] public class CsvDataSource : ExternalData, IDataSource, IAppIdentity, IZoneIdentity, IAppIdentityLight, ICacheInfo, ICacheKey, ICacheExpiring, ITimestamped, ICanPurgeListCache, IHasLog, IDataTarget, IDataPartShared Properties | Improve this Doc View Source ContentType Name of the content type which the imported entities have. This is fake, but may be necessary for later filtering of the types. Defaults to \"Anonymous\" Declaration public string ContentType { get; set; } Property Value Type Description System.String | Improve this Doc View Source Delimiter Delimiter character in the CSV, usually a ',' or ';' but could also be a tab or something. Default is tab. Declaration public string Delimiter { get; set; } Property Value Type Description System.String | Improve this Doc View Source FilePath Path to the CSV file, relative to the website root Declaration public string FilePath { get; set; } Property Value Type Description System.String | Improve this Doc View Source IdColumnName Column in the CSV which contains the ID. Declaration public string IdColumnName { get; set; } Property Value Type Description System.String | Improve this Doc View Source TitleColumnName The CSV column containing the title of the item - for dropdowns etc. and the EntityTitle property. Declaration public string TitleColumnName { get; set; } Property Value Type Description System.String Implements IDataSource IAppIdentity IZoneIdentity IAppIdentityLight ICacheKey ICacheExpiring ITimestamped ICanPurgeListCache IHasLog IDataTarget IDataPartShared"
  },
  "api/dot-net/ToSic.Eav.DataSources.Sys.Apps.html": {
    "href": "api/dot-net/ToSic.Eav.DataSources.Sys.Apps.html",
    "title": "Class Apps | 2sxc 13 / EAV 13",
    "keywords": "Class Apps A DataSource that gets all Apps of a zone. Inheritance System.Object HasLog DataSourceBase Apps Implements IDataSource IAppIdentity IZoneIdentity IAppIdentityLight ICacheKey ICacheExpiring ITimestamped ICanPurgeListCache IHasLog IDataTarget IDataPartShared Inherited Members DataSourceBase.ErrorStream DataSourceBase.SetError(String, String, Exception) DataSourceBase.GetRequiredInList(IImmutableList<IEntity>) DataSourceBase.GetRequiredInList(String, IImmutableList<IEntity>) DataSourceBase.Name DataSourceBase.AppId DataSourceBase.ZoneId DataSourceBase.Guid DataSourceBase.Configuration DataSourceBase.DataBuilder DataSourceBase.CacheRelevantConfigurations DataSourceBase.ConfigMask(String, String, Boolean) DataSourceBase.CachePartialKey DataSourceBase.CacheFullKey DataSourceBase.CacheTimestamp DataSourceBase.CacheChanged(Int64) DataSourceBase.PurgeList(Boolean) DataSourceBase.In DataSourceBase.Out DataSourceBase.Item[String] DataSourceBase.GetStream(String, String, Boolean, Boolean) DataSourceBase.List DataSourceBase.Attach(IDataSource) DataSourceBase.Attach(String, IDataSource, String) DataSourceBase.Attach(String, IDataStream) HasLog.Log HasLog.InitLog(String, ILog, String) HasLog.InitLog(String, ILog, String, CodeRef) Namespace : ToSic.Eav.DataSources.Sys Assembly : ToSic.Eav.Apps.dll Syntax [InternalApi_DoNotUse_MayChangeWithoutNotice] [VisualQuery(NiceName = \"Apps\", UiHint = \"Apps of a Zone\", Icon = \"apps\", Type = DataSourceType.System, GlobalName = \"ToSic.Eav.DataSources.System.Apps, ToSic.Eav.Apps\", DynamicOut = false, Difficulty = DifficultyBeta.Advanced, ExpectsDataOfType = \"fabc849e-b426-42ea-8e1c-c04e69facd9b\", PreviousNames = new string[]{\"ToSic.Eav.DataSources.System.Apps, ToSic.Eav.Apps\", \"ToSic.Eav.DataSources.Apps, ToSic.Eav.Apps\"}, HelpLink = \"https://github.com/2sic/2sxc/wiki/DotNet-DataSource-Apps\")] public sealed class Apps : DataSourceBase, IDataSource, IAppIdentity, IZoneIdentity, IAppIdentityLight, ICacheInfo, ICacheKey, ICacheExpiring, ITimestamped, ICanPurgeListCache, IHasLog, IDataTarget, IDataPartShared Remarks Technically many things could just identify the app they belong to, and let the system look up the zone. But this would be inefficient, so for optimization, many items identify themselves with both the app and zone Ids Properties | Improve this Doc View Source LogId Declaration public override string LogId { get; } Property Value Type Description System.String Overrides ToSic.Eav.DataSources.DataSourceBase.LogId | Improve this Doc View Source OfZoneId The attribute whose value will be filtered Declaration public int OfZoneId { get; set; } Property Value Type Description System.Int32 Implements IDataSource IAppIdentity IZoneIdentity IAppIdentityLight ICacheKey ICacheExpiring ITimestamped ICanPurgeListCache IHasLog IDataTarget IDataPartShared"
  },
  "api/dot-net/ToSic.Eav.DataSources.RelationshipFilter.html": {
    "href": "api/dot-net/ToSic.Eav.DataSources.RelationshipFilter.html",
    "title": "Class RelationshipFilter | 2sxc 13 / EAV 13",
    "keywords": "Class RelationshipFilter Filter Entities by Value in a Related Entity. For example: Find all Books (desired Entity), whose Authors (related Entity) have a Country (Attribute) with 'Switzerland' (Value). The RelationshipFilter DataSource is part of the Standard EAV Data Sources . It will return only the items which have a relationship to another item - like books having an author, or blog-posts with the tag grunt . How to use with the VisualQuery When using the VisualQuery you can just drag it into your query. This is what it usually looks like: Using Url Parameters You can of course also use URL parameters for both the value as well as the field: Using the Fallback In case none of the items match the reqiurement, then either no items are returned, or those in the fallback stream: You can find more fallback examples like chaining them in the ValueFilter DataSource Separators for Multiple Criterias (2sxc 9.9+) Until 2sxc 9.8 you could only check for 1 related item, so you could only say \"give me all items which have this one author\". In 2sxc 9.9 we are now able to specify multiple authors, allowing queries like \"give me all items which have all these authors\" or \"give me all items which have any of these authors\". This works using the separation-character, which is usually a comma , but could be something different (in case your items have commas in the texts you're comparing). If you don't specify a separator, none will be used and the whole Filter criteria is treated as one value. Here's where you set it: All Operators (2sxc 9.9+) Untill 2sxc 9.8, you could not specify an operator, and contains was the assumed operator. In 9.9 we added a lot more. To explain what each does, assume that our main stream contains items of BlogPost and we only want to keep the posts having certain Tags . Here's the list, each is explained more below: contains - will return all items (BlogPosts), having all the children (tags) specified containsany - will return all items (BlogPosts) having any of the children (tags) specified not-contains will return all items (BlogPosts) not-having-all of the children (tags). So it will also return those items, having some of the children. not-containsany will return all items (BlogPosts) having none of the children (tags) specified. any will return all items (BlogPosts) having any children at all (tags). So the filter is ignored. This is the same as count=0. not-any will return all items (BlogPosts) having no children (tags). first will return all items (BlogPosts) where the first child (tag) is one of the filter-options. This is for scenarios where you say the first tag is a primary-category or similar. not-first will return all items (BlogPosts) where the first children (tags) is not one of the filter values. count will return all items (BlogPosts) having a specific amount of children (tags) not-count will return all items (BlogPosts) not having a specific amount of children (tags) Filtering On Fields other than Title and ID (9.9+) In 2sxc 9.9 we added the ability to specify which field you want to compare (before it was always Id or Title). Here's an example: Filtering by Relationship-Count (9.9+) In 2sxc 9.9 we added the ability to filter by amount of relationships - so you could say \"give me all blog-posts with exactly 2 tags\": Note: you can also reverse this, so instead of count you can use not-count to get all the items that don't match this requirement. Filtering by Has-Any (9.9+) In 2sxc 9.9 we added the ability to filter by Limitations of the RelationshipFilter Note that as of now (2sxc 9.9) the RelationshipFilter: can only seek child-items Programming With The RelationshipFilter DataSource We recommend to use the VisualQuery where possible, as it's easier to understand and is identical for C# and JavaScript. It's also better because it separates data-retrieval from visualization. Read also DataSource / DataStream List of all EAV Data Sources Query / VisualQuery Demo App and further links You should find some examples in this demo App Demo App with examples for most DataSources History Introduced in EAV 4.x, 2sxc ? Added AttributeOnRelationship (to compare other fields that title/id) in 2sxc 9.9 Added separator to enable multi-filter in 2sxc 9.9 Added various operators like count , first , containsany , any , not-* in 2sxc 9.9 <!-- note: this must be an H1 because of the automatic TOC in the code pages --> API Documentation Inheritance System.Object HasLog DataSourceBase RelationshipFilter Implements IDataSource IAppIdentity IZoneIdentity IAppIdentityLight ICacheKey ICacheExpiring ITimestamped ICanPurgeListCache IHasLog IDataTarget IDataPartShared Inherited Members DataSourceBase.ErrorStream DataSourceBase.SetError(String, String, Exception) DataSourceBase.GetRequiredInList(IImmutableList<IEntity>) DataSourceBase.GetRequiredInList(String, IImmutableList<IEntity>) DataSourceBase.Name DataSourceBase.AppId DataSourceBase.ZoneId DataSourceBase.Guid DataSourceBase.Configuration DataSourceBase.DataBuilder DataSourceBase.CacheRelevantConfigurations DataSourceBase.ConfigMask(String, String, Boolean) DataSourceBase.CachePartialKey DataSourceBase.CacheFullKey DataSourceBase.CacheTimestamp DataSourceBase.CacheChanged(Int64) DataSourceBase.PurgeList(Boolean) DataSourceBase.In DataSourceBase.Out DataSourceBase.Item[String] DataSourceBase.GetStream(String, String, Boolean, Boolean) DataSourceBase.List DataSourceBase.Attach(IDataSource) DataSourceBase.Attach(String, IDataSource, String) DataSourceBase.Attach(String, IDataStream) HasLog.Log HasLog.InitLog(String, ILog, String) HasLog.InitLog(String, ILog, String, CodeRef) Namespace : ToSic.Eav.DataSources Assembly : ToSic.Eav.DataSources.dll Syntax [PublicApi_Stable_ForUseInYourCode] [VisualQuery(NiceName = \"Relationship Filter\", UiHint = \"Keep items having a relationship matching a criteria\", Icon = \"share\", Type = DataSourceType.Filter, GlobalName = \"ToSic.Eav.DataSources.RelationshipFilter, ToSic.Eav.DataSources\", In = new string[]{\"Default*\", \"Fallback\"}, DynamicOut = false, ExpectsDataOfType = \"|Config ToSic.Eav.DataSources.RelationshipFilter\", HelpLink = \"https://r.2sxc.org/DsRelationshipFilter\")] public sealed class RelationshipFilter : DataSourceBase, IDataSource, IAppIdentity, IZoneIdentity, IAppIdentityLight, ICacheInfo, ICacheKey, ICacheExpiring, ITimestamped, ICanPurgeListCache, IHasLog, IDataTarget, IDataPartShared Remarks Technically many things could just identify the app they belong to, and let the system look up the zone. But this would be inefficient, so for optimization, many items identify themselves with both the app and zone Ids Properties | Improve this Doc View Source ChildOrParent Determines if the relationship we're looking into is a 'child'-relationship (default) or 'parent' relationship. Declaration public string ChildOrParent { get; set; } Property Value Type Description System.String | Improve this Doc View Source CompareAttribute The attribute we're looking into, in this case it would be 'Country' because we're checking what Authors are from Switzerland. Declaration public string CompareAttribute { get; set; } Property Value Type Description System.String | Improve this Doc View Source CompareMode Comparison mode. \"default\" and \"contains\" will check if such a relationship is available other modes like \"equals\" or \"exclude\" not implemented Declaration public string CompareMode { get; set; } Property Value Type Description System.String | Improve this Doc View Source Filter The filter-value that will be used - for example \"Switzerland\" when looking for authors from there Declaration public string Filter { get; set; } Property Value Type Description System.String | Improve this Doc View Source Relationship Relationship-attribute - in the example this would be 'Author' as we're checking values in related Author items. Declaration public string Relationship { get; set; } Property Value Type Description System.String | Improve this Doc View Source Separator Separator value where we have multiple values / IDs to compare. Default is 'ignore' = no separator Declaration public string Separator { get; set; } Property Value Type Description System.String Implements IDataSource IAppIdentity IZoneIdentity IAppIdentityLight ICacheKey ICacheExpiring ITimestamped ICanPurgeListCache IHasLog IDataTarget IDataPartShared"
  },
  "api/dot-net/ToSic.Eav.DataSources.Sys.Attributes.html": {
    "href": "api/dot-net/ToSic.Eav.DataSources.Sys.Attributes.html",
    "title": "Class Attributes | 2sxc 13 / EAV 13",
    "keywords": "Class Attributes A DataSource that returns the attributes of a content-type Inheritance System.Object HasLog DataSourceBase Attributes Implements IDataSource IAppIdentity IZoneIdentity IAppIdentityLight ICacheKey ICacheExpiring ITimestamped ICanPurgeListCache IHasLog IDataTarget IDataPartShared Inherited Members DataSourceBase.ErrorStream DataSourceBase.SetError(String, String, Exception) DataSourceBase.GetRequiredInList(IImmutableList<IEntity>) DataSourceBase.GetRequiredInList(String, IImmutableList<IEntity>) DataSourceBase.Name DataSourceBase.AppId DataSourceBase.ZoneId DataSourceBase.Guid DataSourceBase.Configuration DataSourceBase.DataBuilder DataSourceBase.CacheRelevantConfigurations DataSourceBase.ConfigMask(String, String, Boolean) DataSourceBase.CachePartialKey DataSourceBase.CacheFullKey DataSourceBase.CacheTimestamp DataSourceBase.CacheChanged(Int64) DataSourceBase.PurgeList(Boolean) DataSourceBase.In DataSourceBase.Out DataSourceBase.Item[String] DataSourceBase.GetStream(String, String, Boolean, Boolean) DataSourceBase.List DataSourceBase.Attach(IDataSource) DataSourceBase.Attach(String, IDataSource, String) DataSourceBase.Attach(String, IDataStream) HasLog.Log HasLog.InitLog(String, ILog, String) HasLog.InitLog(String, ILog, String, CodeRef) Namespace : ToSic.Eav.DataSources.Sys Assembly : ToSic.Eav.DataSources.dll Syntax [InternalApi_DoNotUse_MayChangeWithoutNotice] [VisualQuery(NiceName = \"Attributes of Type\", UiHint = \"Attributes/fields of a Content-Type\", Icon = \"dns\", Type = DataSourceType.System, GlobalName = \"ToSic.Eav.DataSources.System.Attributes, ToSic.Eav.DataSources\", Difficulty = DifficultyBeta.Advanced, DynamicOut = false, ExpectsDataOfType = \"5461d34d-7dc6-4d38-9250-a0729cc8ead3\", HelpLink = \"https://github.com/2sic/2sxc/wiki/DotNet-DataSource-Attributes\")] public sealed class Attributes : DataSourceBase, IDataSource, IAppIdentity, IZoneIdentity, IAppIdentityLight, ICacheInfo, ICacheKey, ICacheExpiring, ITimestamped, ICanPurgeListCache, IHasLog, IDataTarget, IDataPartShared Remarks Technically many things could just identify the app they belong to, and let the system look up the zone. But this would be inefficient, so for optimization, many items identify themselves with both the app and zone Ids Constructors | Improve this Doc View Source Attributes(IAppStates) Constructs a new Attributes DS Declaration public Attributes(IAppStates appStates) Parameters Type Name Description ToSic.Eav.Apps.IAppStates appStates Properties | Improve this Doc View Source ContentTypeName The content-type name Declaration public string ContentTypeName { get; set; } Property Value Type Description System.String | Improve this Doc View Source LogId Declaration public override string LogId { get; } Property Value Type Description System.String Overrides ToSic.Eav.DataSources.DataSourceBase.LogId Implements IDataSource IAppIdentity IZoneIdentity IAppIdentityLight ICacheKey ICacheExpiring ITimestamped ICanPurgeListCache IHasLog IDataTarget IDataPartShared"
  },
  "api/dot-net/ToSic.Eav.DataSources.Parents.html": {
    "href": "api/dot-net/ToSic.Eav.DataSources.Parents.html",
    "title": "Class Parents | 2sxc 13 / EAV 13",
    "keywords": "Class Parents Get Parent Entities (parent-relationships) of the Entities coming into this DataSource Inheritance System.Object HasLog DataSourceBase ToSic.Eav.DataSources.RelationshipDataSourceBase Parents Implements IDataSource IAppIdentity IZoneIdentity IAppIdentityLight ICacheKey ICacheExpiring ITimestamped ICanPurgeListCache IHasLog IDataTarget IDataPartShared Inherited Members DataSourceBase.ErrorStream DataSourceBase.SetError(String, String, Exception) DataSourceBase.GetRequiredInList(IImmutableList<IEntity>) DataSourceBase.GetRequiredInList(String, IImmutableList<IEntity>) DataSourceBase.Name DataSourceBase.AppId DataSourceBase.ZoneId DataSourceBase.Guid DataSourceBase.Configuration DataSourceBase.DataBuilder DataSourceBase.CacheRelevantConfigurations DataSourceBase.ConfigMask(String, String, Boolean) DataSourceBase.CachePartialKey DataSourceBase.CacheFullKey DataSourceBase.CacheTimestamp DataSourceBase.CacheChanged(Int64) DataSourceBase.PurgeList(Boolean) DataSourceBase.In DataSourceBase.Out DataSourceBase.Item[String] DataSourceBase.GetStream(String, String, Boolean, Boolean) DataSourceBase.List DataSourceBase.Attach(IDataSource) DataSourceBase.Attach(String, IDataSource, String) DataSourceBase.Attach(String, IDataStream) HasLog.Log HasLog.InitLog(String, ILog, String) HasLog.InitLog(String, ILog, String, CodeRef) Namespace : ToSic.Eav.DataSources Assembly : ToSic.Eav.DataSources.dll Syntax [VisualQuery(NiceName = \"Parents\", UiHint = \"Get the item's parents\", Icon = \"family_restroom\", Type = DataSourceType.Lookup, GlobalName = \"915217e5-7957-4303-a19c-a15505f2ad1d\", In = new string[]{\"Default*\"}, DynamicOut = false, ExpectsDataOfType = \"a72cb2f4-52bb-41e6-9281-10e69aeb0310\", HelpLink = \"https://r.2sxc.org/DsParents\")] [InternalApi_DoNotUse_MayChangeWithoutNotice(\"WIP\")] public class Parents : RelationshipDataSourceBase, IDataSource, IAppIdentity, IZoneIdentity, IAppIdentityLight, ICacheInfo, ICacheKey, ICacheExpiring, ITimestamped, ICanPurgeListCache, IHasLog, IDataTarget, IDataPartShared Remarks Added in v12.10 Properties | Improve this Doc View Source ContentTypeName Name of the content-type to get. Will only get parents of the specified type. Example: If a person is referenced by books (as author) as by companies) as employee, then you may want to only find companies referencing this book. Declaration public override string ContentTypeName { get; set; } Property Value Type Description System.String Overrides ToSic.Eav.DataSources.RelationshipDataSourceBase.ContentTypeName | Improve this Doc View Source FieldName Name of the field (in the parent) pointing to the child. If left blank, will use get all children. Example: If a person is referenced by books as both Author and Illustrator then leaving this empty will get both relationships, but specifying Author will only get this person if it's the author. Declaration public override string FieldName { get; set; } Property Value Type Description System.String Overrides ToSic.Eav.DataSources.RelationshipDataSourceBase.FieldName Implements IDataSource IAppIdentity IZoneIdentity IAppIdentityLight ICacheKey ICacheExpiring ITimestamped ICanPurgeListCache IHasLog IDataTarget IDataPartShared"
  },
  "api/dot-net/ToSic.Eav.DataSources.ExternalData.html": {
    "href": "api/dot-net/ToSic.Eav.DataSources.ExternalData.html",
    "title": "Class ExternalData | 2sxc 13 / EAV 13",
    "keywords": "Class ExternalData Base DataSource class for providing data from external systems Inheritance System.Object HasLog DataSourceBase ExternalData CsvDataSource DataTable Sql DnnUserProfile Implements IDataSource IAppIdentity IZoneIdentity IAppIdentityLight ICacheKey ICacheExpiring ITimestamped ICanPurgeListCache IHasLog IDataTarget IDataPartShared Inherited Members DataSourceBase.ErrorStream DataSourceBase.SetError(String, String, Exception) DataSourceBase.GetRequiredInList(IImmutableList<IEntity>) DataSourceBase.GetRequiredInList(String, IImmutableList<IEntity>) DataSourceBase.Name DataSourceBase.AppId DataSourceBase.ZoneId DataSourceBase.Guid DataSourceBase.Configuration DataSourceBase.DataBuilder DataSourceBase.CacheRelevantConfigurations DataSourceBase.ConfigMask(String, String, Boolean) DataSourceBase.CachePartialKey DataSourceBase.CacheFullKey DataSourceBase.CacheChanged(Int64) DataSourceBase.PurgeList(Boolean) DataSourceBase.In DataSourceBase.Out DataSourceBase.Item[String] DataSourceBase.GetStream(String, String, Boolean, Boolean) DataSourceBase.List DataSourceBase.Attach(IDataSource) DataSourceBase.Attach(String, IDataSource, String) DataSourceBase.Attach(String, IDataStream) HasLog.Log HasLog.InitLog(String, ILog, String) HasLog.InitLog(String, ILog, String, CodeRef) Namespace : ToSic.Eav.DataSources Assembly : ToSic.Eav.DataSources.dll Syntax [PublicApi_Stable_ForUseInYourCode] public abstract class ExternalData : DataSourceBase, IDataSource, IAppIdentity, IZoneIdentity, IAppIdentityLight, ICacheInfo, ICacheKey, ICacheExpiring, ITimestamped, ICanPurgeListCache, IHasLog, IDataTarget, IDataPartShared Remarks Technically many things could just identify the app they belong to, and let the system look up the zone. But this would be inefficient, so for optimization, many items identify themselves with both the app and zone Ids Properties | Improve this Doc View Source CacheTimestamp System time-stamp of when the data in this cached thing was initialized or updated. Depending on the implementation, this may go up-stream and return an up-stream value. Declaration public override long CacheTimestamp { get; } Property Value Type Description System.Int64 A timestamp as a long number Overrides DataSourceBase.CacheTimestamp Implements IDataSource IAppIdentity IZoneIdentity IAppIdentityLight ICacheKey ICacheExpiring ITimestamped ICanPurgeListCache IHasLog IDataTarget IDataPartShared"
  },
  "api/dot-net/ToSic.Eav.DataSources.AttributeFilter.html": {
    "href": "api/dot-net/ToSic.Eav.DataSources.AttributeFilter.html",
    "title": "Class AttributeFilter | 2sxc 13 / EAV 13",
    "keywords": "Class AttributeFilter DataSource to only pass through configured AttributeNames - other attributes/properties are removed from the entities. The AttributeFilter DataSource is part of the Standard EAV Data Sources . It removes values from items so that the result is smaller, and doesn't publish confidential data. It's primarily used when providing data as JSON, so that not all values are published. How to use with the VisualQuery When using the VisualQuery you can just drag it into your query. Now you can configure what properties you want and not. The following shows a demo which delivers both the data as-is, and also filtered to only deliver Name and Country : This is what you get on the default-case (unfiltered): \"Default\": [ { \"Name\": \"2sic\", \"Country\": \"Switzerland\", \"Notes\": \"<p>Secret notes</p>\", \"Categories\": [ { \"Id\": 38646, \"Title\": \"Second\" } ], \"Id\": 38653, \"Guid\": \"46a46d9e-f572-413c-a42e-a82ac40d929d\", \"Title\": \"2sic\", \"Modified\": \"2017-11-06T22:38:00.15Z\" }, ... ] This is what you get on the filtered stream: \"Cleaned\": [ { \"Name\": \"2sic\", \"Country\": \"Switzerland\", \"Id\": 38653, \"Guid\": \"46a46d9e-f572-413c-a42e-a82ac40d929d\", \"Title\": \"2sic\", \"Modified\": \"2017-11-06T22:38:00.15Z\" }, ... ] As you can see, the secret Notes and the Categories are not in the Cleaned stream any more. There are three common use cases: Programming With The Attribute Filter We recommend to use the VisualQuery where possible, as it's easier to understand and is identical for C# and JavaScript. It's also better because it separates data-retrieval from visualization. Read also DataSource / DataStream List of all EAV Data Sources Query / VisualQuery Demo App and further links You should find some examples in this demo App Demo App with examples for most DataSources History Introduced in EAV 3.x, 2sxc ca. v6 <!-- note: this must be an H1 because of the automatic TOC in the code pages --> API Documentation Inheritance System.Object HasLog DataSourceBase AttributeFilter Implements IDataSource IAppIdentity IZoneIdentity IAppIdentityLight ICacheKey ICacheExpiring ITimestamped ICanPurgeListCache IHasLog IDataTarget IDataPartShared Inherited Members DataSourceBase.ErrorStream DataSourceBase.SetError(String, String, Exception) DataSourceBase.GetRequiredInList(IImmutableList<IEntity>) DataSourceBase.GetRequiredInList(String, IImmutableList<IEntity>) DataSourceBase.Name DataSourceBase.AppId DataSourceBase.ZoneId DataSourceBase.Guid DataSourceBase.Configuration DataSourceBase.DataBuilder DataSourceBase.CacheRelevantConfigurations DataSourceBase.ConfigMask(String, String, Boolean) DataSourceBase.CachePartialKey DataSourceBase.CacheFullKey DataSourceBase.CacheTimestamp DataSourceBase.CacheChanged(Int64) DataSourceBase.PurgeList(Boolean) DataSourceBase.In DataSourceBase.Out DataSourceBase.Item[String] DataSourceBase.GetStream(String, String, Boolean, Boolean) DataSourceBase.List DataSourceBase.Attach(IDataSource) DataSourceBase.Attach(String, IDataSource, String) DataSourceBase.Attach(String, IDataStream) HasLog.Log HasLog.InitLog(String, ILog, String) HasLog.InitLog(String, ILog, String, CodeRef) Namespace : ToSic.Eav.DataSources Assembly : ToSic.Eav.DataSources.dll Syntax [PublicApi_Stable_ForUseInYourCode] [VisualQuery(NiceName = \"Remove Attribute/Property\", UiHint = \"Remove attributes/properties to limit what is available\", Icon = \"delete_sweep\", Type = DataSourceType.Modify, GlobalName = \"ToSic.Eav.DataSources.AttributeFilter, ToSic.Eav.DataSources\", DynamicOut = false, In = new string[]{\"Default*\"}, ExpectsDataOfType = \"|Config ToSic.Eav.DataSources.AttributeFilter\", HelpLink = \"https://r.2sxc.org/DsAttributeFilter\")] public class AttributeFilter : DataSourceBase, IDataSource, IAppIdentity, IZoneIdentity, IAppIdentityLight, ICacheInfo, ICacheKey, ICacheExpiring, ITimestamped, ICanPurgeListCache, IHasLog, IDataTarget, IDataPartShared Remarks Technically many things could just identify the app they belong to, and let the system look up the zone. But this would be inefficient, so for optimization, many items identify themselves with both the app and zone Ids Fields | Improve this Doc View Source ModeKeep Declaration public static string ModeKeep Field Value Type Description System.String | Improve this Doc View Source ModeRemove Declaration public static string ModeRemove Field Value Type Description System.String Properties | Improve this Doc View Source AttributeNames A string containing one or more attribute names. like \"FirstName\" or \"FirstName,LastName,Birthday\" Declaration public string AttributeNames { get; set; } Property Value Type Description System.String | Improve this Doc View Source Mode A string containing one or more attribute names. like \"FirstName\" or \"FirstName,LastName,Birthday\" Declaration public string Mode { get; set; } Property Value Type Description System.String Implements IDataSource IAppIdentity IZoneIdentity IAppIdentityLight ICacheKey ICacheExpiring ITimestamped ICanPurgeListCache IHasLog IDataTarget IDataPartShared"
  },
  "api/dot-net/ToSic.Eav.DataSources.Sys.Zones.html": {
    "href": "api/dot-net/ToSic.Eav.DataSources.Sys.Zones.html",
    "title": "Class Zones | 2sxc 13 / EAV 13",
    "keywords": "Class Zones A DataSource that gets all zones in the system. Inheritance System.Object HasLog DataSourceBase Zones Implements IDataSource IAppIdentity IZoneIdentity IAppIdentityLight ICacheKey ICacheExpiring ITimestamped ICanPurgeListCache IHasLog IDataTarget IDataPartShared Inherited Members DataSourceBase.ErrorStream DataSourceBase.SetError(String, String, Exception) DataSourceBase.GetRequiredInList(IImmutableList<IEntity>) DataSourceBase.GetRequiredInList(String, IImmutableList<IEntity>) DataSourceBase.Name DataSourceBase.AppId DataSourceBase.ZoneId DataSourceBase.Guid DataSourceBase.Configuration DataSourceBase.DataBuilder DataSourceBase.CacheRelevantConfigurations DataSourceBase.ConfigMask(String, String, Boolean) DataSourceBase.CachePartialKey DataSourceBase.CacheFullKey DataSourceBase.CacheTimestamp DataSourceBase.CacheChanged(Int64) DataSourceBase.PurgeList(Boolean) DataSourceBase.In DataSourceBase.Out DataSourceBase.Item[String] DataSourceBase.GetStream(String, String, Boolean, Boolean) DataSourceBase.List DataSourceBase.Attach(IDataSource) DataSourceBase.Attach(String, IDataSource, String) DataSourceBase.Attach(String, IDataStream) HasLog.Log HasLog.InitLog(String, ILog, String) HasLog.InitLog(String, ILog, String, CodeRef) Namespace : ToSic.Eav.DataSources.Sys Assembly : ToSic.Eav.Apps.dll Syntax [InternalApi_DoNotUse_MayChangeWithoutNotice] [VisualQuery(NiceName = \"Zones\", UiHint = \"Zones of an installation\", Icon = \"border_outer\", Type = DataSourceType.System, GlobalName = \"ToSic.Eav.DataSources.System.Zones, ToSic.Eav.Apps\", Difficulty = DifficultyBeta.Advanced, DynamicOut = false, PreviousNames = new string[]{\"ToSic.Eav.DataSources.System.Zones, ToSic.Eav.Apps\", \"ToSic.Eav.DataSources.Zones, ToSic.Eav.Apps\"}, HelpLink = \"https://github.com/2sic/2sxc/wiki/DotNet-DataSource-Zones\")] public sealed class Zones : DataSourceBase, IDataSource, IAppIdentity, IZoneIdentity, IAppIdentityLight, ICacheInfo, ICacheKey, ICacheExpiring, ITimestamped, ICanPurgeListCache, IHasLog, IDataTarget, IDataPartShared Remarks Technically many things could just identify the app they belong to, and let the system look up the zone. But this would be inefficient, so for optimization, many items identify themselves with both the app and zone Ids Properties | Improve this Doc View Source LogId Declaration public override string LogId { get; } Property Value Type Description System.String Overrides ToSic.Eav.DataSources.DataSourceBase.LogId Implements IDataSource IAppIdentity IZoneIdentity IAppIdentityLight ICacheKey ICacheExpiring ITimestamped ICanPurgeListCache IHasLog IDataTarget IDataPartShared"
  },
  "api/dot-net/ToSic.Eav.DataSources.EntityIdFilter.html": {
    "href": "api/dot-net/ToSic.Eav.DataSources.EntityIdFilter.html",
    "title": "Class EntityIdFilter | 2sxc 13 / EAV 13",
    "keywords": "Class EntityIdFilter A DataSource that filters Entities by Ids. Can handle multiple IDs if comma-separated. The ItemIdFilter DataSource is part of the Standard EAV Data Sources . It will only return the items with the id specified. Warning: You should always use it in combination with a Content-Type filter , as you want to be sure nobody can just crawl any entity you have in your system! How to use with the VisualQuery When using the VisualQuery you can just drag it into your query. This is what it usually looks like: You can also use multiple values: Or URL-parameters: Programming With The ItemIdFilter DataSource We recommend to use the VisualQuery where possible, as it's easier to understand and is identical for C# and JavaScript. It's also better because it separates data-retrieval from visualization. Read also DataSource / DataStream List of all EAV Data Sources Query / VisualQuery Demo App and further links You should find some examples in this demo App Demo App with examples for most DataSources History Introduced in EAV 4.x, 2sxc ? <!-- note: this must be an H1 because of the automatic TOC in the code pages --> API Documentation Inheritance System.Object HasLog DataSourceBase EntityIdFilter Implements IDataSource IAppIdentity IZoneIdentity IAppIdentityLight ICacheKey ICacheExpiring ITimestamped ICanPurgeListCache IHasLog IDataTarget IDataPartShared Inherited Members DataSourceBase.ErrorStream DataSourceBase.SetError(String, String, Exception) DataSourceBase.GetRequiredInList(IImmutableList<IEntity>) DataSourceBase.GetRequiredInList(String, IImmutableList<IEntity>) DataSourceBase.Name DataSourceBase.AppId DataSourceBase.ZoneId DataSourceBase.Guid DataSourceBase.Configuration DataSourceBase.DataBuilder DataSourceBase.CacheRelevantConfigurations DataSourceBase.ConfigMask(String, String, Boolean) DataSourceBase.CachePartialKey DataSourceBase.CacheFullKey DataSourceBase.CacheTimestamp DataSourceBase.CacheChanged(Int64) DataSourceBase.PurgeList(Boolean) DataSourceBase.In DataSourceBase.Out DataSourceBase.Item[String] DataSourceBase.GetStream(String, String, Boolean, Boolean) DataSourceBase.List DataSourceBase.Attach(IDataSource) DataSourceBase.Attach(String, IDataSource, String) DataSourceBase.Attach(String, IDataStream) HasLog.Log HasLog.InitLog(String, ILog, String) HasLog.InitLog(String, ILog, String, CodeRef) Namespace : ToSic.Eav.DataSources Assembly : ToSic.Eav.DataSources.dll Syntax [PublicApi_Stable_ForUseInYourCode] [VisualQuery(NiceName = \"Item Id Filter\", UiHint = \"Find items based on one or more IDs\", Icon = \"fingerprint\", Type = DataSourceType.Filter, GlobalName = \"ToSic.Eav.DataSources.EntityIdFilter, ToSic.Eav.DataSources\", DynamicOut = false, In = new string[]{\"Default*\"}, ExpectsDataOfType = \"|Config ToSic.Eav.DataSources.EntityIdFilter\", HelpLink = \"https://r.2sxc.org/DsIdFilter\")] public class EntityIdFilter : DataSourceBase, IDataSource, IAppIdentity, IZoneIdentity, IAppIdentityLight, ICacheInfo, ICacheKey, ICacheExpiring, ITimestamped, ICanPurgeListCache, IHasLog, IDataTarget, IDataPartShared Remarks Technically many things could just identify the app they belong to, and let the system look up the zone. But this would be inefficient, so for optimization, many items identify themselves with both the app and zone Ids Properties | Improve this Doc View Source EntityIds A string containing one or more entity-ids. like \"27\" or \"27,40,3063,30306\" Declaration public string EntityIds { get; set; } Property Value Type Description System.String Implements IDataSource IAppIdentity IZoneIdentity IAppIdentityLight ICacheKey ICacheExpiring ITimestamped ICanPurgeListCache IHasLog IDataTarget IDataPartShared"
  },
  "api/dot-net/ToSic.Eav.DataSources.ValueSort.html": {
    "href": "api/dot-net/ToSic.Eav.DataSources.ValueSort.html",
    "title": "Class ValueSort | 2sxc 13 / EAV 13",
    "keywords": "Class ValueSort Sort Entity by values in specified Attributes / Properties The ValueSort DataSource is part of the Standard EAV Data Sources . It will reorder items passing through A-Z or Z-A based on a value of each item. How to use with the VisualQuery When using the VisualQuery you can just drag it into your query. This is what it usually looks like: The above example shows the same items being sorted in two different ways and delivered to the target. Example Using Multi-Sort You can also sort multiple fields, so \"first sort by xyz, then by xyz\" and use different sort-orders.: Example Using URL Parameters ...and of course you can also use url parameters to specify field-names or sort order: Sorting Direction For sorting direction you can use either words or numbers asc/desc 1/0 Programming With The ValueSort DataSource We recommend to use the VisualQuery where possible, as it's easier to understand and is identical for C# and JavaScript. It's also better because it separates data-retrieval from visualization. // A source which can filter by Content-Type (EntityType) var allAuthors = CreateSource<EntityTypeFilter>(); allAuthors.TypeName = \"Author\"; // Sort by FullName var sortedAuthors = CreateSource<ValueSort>(allAuthors); sortedAuthors.Attributes = \"FullName\"; Read also DataSource / DataStream List of all EAV Data Sources Query / VisualQuery Demo App and further links You should find some examples in this demo App Demo App with examples for most DataSources History Introduced in EAV 3.x, 2sxc ? <!-- note: this must be an H1 because of the automatic TOC in the code pages --> API Documentation Inheritance System.Object HasLog DataSourceBase ValueSort Implements IDataSource IAppIdentity IZoneIdentity IAppIdentityLight ICacheKey ICacheExpiring ITimestamped ICanPurgeListCache IHasLog IDataTarget IDataPartShared Inherited Members DataSourceBase.ErrorStream DataSourceBase.SetError(String, String, Exception) DataSourceBase.GetRequiredInList(IImmutableList<IEntity>) DataSourceBase.GetRequiredInList(String, IImmutableList<IEntity>) DataSourceBase.Name DataSourceBase.AppId DataSourceBase.ZoneId DataSourceBase.Guid DataSourceBase.Configuration DataSourceBase.DataBuilder DataSourceBase.CacheRelevantConfigurations DataSourceBase.ConfigMask(String, String, Boolean) DataSourceBase.CachePartialKey DataSourceBase.CacheFullKey DataSourceBase.CacheTimestamp DataSourceBase.CacheChanged(Int64) DataSourceBase.PurgeList(Boolean) DataSourceBase.In DataSourceBase.Out DataSourceBase.Item[String] DataSourceBase.GetStream(String, String, Boolean, Boolean) DataSourceBase.List DataSourceBase.Attach(IDataSource) DataSourceBase.Attach(String, IDataSource, String) DataSourceBase.Attach(String, IDataStream) HasLog.Log HasLog.InitLog(String, ILog, String) HasLog.InitLog(String, ILog, String, CodeRef) Namespace : ToSic.Eav.DataSources Assembly : ToSic.Eav.DataSources.dll Syntax [PublicApi_Stable_ForUseInYourCode] [VisualQuery(NiceName = \"Value Sort\", UiHint = \"Sort items by a property\", Icon = \"sort\", Type = DataSourceType.Sort, GlobalName = \"ToSic.Eav.DataSources.ValueSort, ToSic.Eav.DataSources\", DynamicOut = false, In = new string[]{\"Default*\"}, ExpectsDataOfType = \"|Config ToSic.Eav.DataSources.ValueSort\", HelpLink = \"https://r.2sxc.org/DsValueSort\")] public sealed class ValueSort : DataSourceBase, IDataSource, IAppIdentity, IZoneIdentity, IAppIdentityLight, ICacheInfo, ICacheKey, ICacheExpiring, ITimestamped, ICanPurgeListCache, IHasLog, IDataTarget, IDataPartShared Remarks Technically many things could just identify the app they belong to, and let the system look up the zone. But this would be inefficient, so for optimization, many items identify themselves with both the app and zone Ids Properties | Improve this Doc View Source Attributes The attribute whose value will be sorted by. Declaration public string Attributes { get; set; } Property Value Type Description System.String | Improve this Doc View Source Directions The sorting direction like 'asc' or 'desc', can also be 0, 1 Declaration public string Directions { get; set; } Property Value Type Description System.String | Improve this Doc View Source Languages Language to filter for. At the moment it is not used, or it is trying to find \"any\" Declaration public string Languages { get; set; } Property Value Type Description System.String Implements IDataSource IAppIdentity IZoneIdentity IAppIdentityLight ICacheKey ICacheExpiring ITimestamped ICanPurgeListCache IHasLog IDataTarget IDataPartShared"
  },
  "api/dot-net/ToSic.Eav.DataSources.ItemFilterDuplicates.html": {
    "href": "api/dot-net/ToSic.Eav.DataSources.ItemFilterDuplicates.html",
    "title": "Class ItemFilterDuplicates | 2sxc 13 / EAV 13",
    "keywords": "Class ItemFilterDuplicates A DataSource that removes duplicate items in a Stream. Often used after a StreamMerge. The ItemFilterDuplicates DataSource is part of the Standard EAV Data Sources . It will provide two streams, one with all the items (but without the duplicates) and one with all the duplicates, in case you need these. How to use with the VisualQuery When using the VisualQuery you can just drag it into your query. This is what it usually looks like: The above example shows two filters finding items and delivering them on the same stream. Because 1 item would have been delivered 2x (2sic is in Switzerland), the default-stream now only contains each item once, and the duplicates can also be retrieved from the Duplicates stream if needed. Example Using StreamMerge A common scenario will also combine this using the StreamMerge . It's demonstrated there. No Settings The ItemFilterDuplicates DataSource has no settings to configure. Note that it will automatically merge the streams in A-Z order of the In-Stream names. Programming With The ItemFilterDuplicates DataSource We recommend to use the VisualQuery where possible, as it's easier to understand and is identical for C# and JavaScript. It's also better because it separates data-retrieval from visualization. Read also DataSource / DataStream List of all EAV Data Sources Query / VisualQuery Demo App and further links You should find some examples in this demo App Demo App with examples for most DataSources History Introduced in EAV 4.x, 2sxc 9.10 <!-- note: this must be an H1 because of the automatic TOC in the code pages --> API Documentation Inheritance System.Object HasLog DataSourceBase ItemFilterDuplicates Implements IDataSource IAppIdentity IZoneIdentity IAppIdentityLight ICacheKey ICacheExpiring ITimestamped ICanPurgeListCache IHasLog IDataTarget IDataPartShared Inherited Members DataSourceBase.ErrorStream DataSourceBase.SetError(String, String, Exception) DataSourceBase.GetRequiredInList(IImmutableList<IEntity>) DataSourceBase.GetRequiredInList(String, IImmutableList<IEntity>) DataSourceBase.Name DataSourceBase.AppId DataSourceBase.ZoneId DataSourceBase.Guid DataSourceBase.Configuration DataSourceBase.DataBuilder DataSourceBase.CacheRelevantConfigurations DataSourceBase.ConfigMask(String, String, Boolean) DataSourceBase.CachePartialKey DataSourceBase.CacheFullKey DataSourceBase.CacheTimestamp DataSourceBase.CacheChanged(Int64) DataSourceBase.PurgeList(Boolean) DataSourceBase.In DataSourceBase.Out DataSourceBase.Item[String] DataSourceBase.GetStream(String, String, Boolean, Boolean) DataSourceBase.List DataSourceBase.Attach(IDataSource) DataSourceBase.Attach(String, IDataSource, String) DataSourceBase.Attach(String, IDataStream) HasLog.Log HasLog.InitLog(String, ILog, String) HasLog.InitLog(String, ILog, String, CodeRef) Namespace : ToSic.Eav.DataSources Assembly : ToSic.Eav.DataSources.dll Syntax [PublicApi_Stable_ForUseInYourCode] [VisualQuery(NiceName = \"Filter duplicates\", UiHint = \"Remove items which occur multiple times\", Icon = \"filter_1\", Type = DataSourceType.Logic, GlobalName = \"ToSic.Eav.DataSources.ItemFilterDuplicates, ToSic.Eav.DataSources\", DynamicOut = false, In = new string[]{\"Default\"}, HelpLink = \"https://r.2sxc.org/DsFilterDuplicates\")] public sealed class ItemFilterDuplicates : DataSourceBase, IDataSource, IAppIdentity, IZoneIdentity, IAppIdentityLight, ICacheInfo, ICacheKey, ICacheExpiring, ITimestamped, ICanPurgeListCache, IHasLog, IDataTarget, IDataPartShared Remarks Technically many things could just identify the app they belong to, and let the system look up the zone. But this would be inefficient, so for optimization, many items identify themselves with both the app and zone Ids Implements IDataSource IAppIdentity IZoneIdentity IAppIdentityLight ICacheKey ICacheExpiring ITimestamped ICanPurgeListCache IHasLog IDataTarget IDataPartShared"
  },
  "api/dot-net/ToSic.Eav.DataSources.Children.html": {
    "href": "api/dot-net/ToSic.Eav.DataSources.Children.html",
    "title": "Class Children | 2sxc 13 / EAV 13",
    "keywords": "Class Children Get Children Entities (child-relationships) of the Entities coming into this DataSource Inheritance System.Object HasLog DataSourceBase ToSic.Eav.DataSources.RelationshipDataSourceBase Children Implements IDataSource IAppIdentity IZoneIdentity IAppIdentityLight ICacheKey ICacheExpiring ITimestamped ICanPurgeListCache IHasLog IDataTarget IDataPartShared Inherited Members DataSourceBase.ErrorStream DataSourceBase.SetError(String, String, Exception) DataSourceBase.GetRequiredInList(IImmutableList<IEntity>) DataSourceBase.GetRequiredInList(String, IImmutableList<IEntity>) DataSourceBase.Name DataSourceBase.AppId DataSourceBase.ZoneId DataSourceBase.Guid DataSourceBase.Configuration DataSourceBase.DataBuilder DataSourceBase.CacheRelevantConfigurations DataSourceBase.ConfigMask(String, String, Boolean) DataSourceBase.CachePartialKey DataSourceBase.CacheFullKey DataSourceBase.CacheTimestamp DataSourceBase.CacheChanged(Int64) DataSourceBase.PurgeList(Boolean) DataSourceBase.In DataSourceBase.Out DataSourceBase.Item[String] DataSourceBase.GetStream(String, String, Boolean, Boolean) DataSourceBase.List DataSourceBase.Attach(IDataSource) DataSourceBase.Attach(String, IDataSource, String) DataSourceBase.Attach(String, IDataStream) HasLog.Log HasLog.InitLog(String, ILog, String) HasLog.InitLog(String, ILog, String, CodeRef) Namespace : ToSic.Eav.DataSources Assembly : ToSic.Eav.DataSources.dll Syntax [VisualQuery(NiceName = \"Children\", UiHint = \"Get the item's children\", Icon = \"escalator_warning\", Type = DataSourceType.Lookup, GlobalName = \"9f8de7ee-d1aa-4055-9bf9-8f183259cb05\", In = new string[]{\"Default*\"}, DynamicOut = false, ExpectsDataOfType = \"832cd470-49f2-4909-a08a-77644457713e\", HelpLink = \"https://r.2sxc.org/DsChildren\")] [InternalApi_DoNotUse_MayChangeWithoutNotice(\"WIP\")] public class Children : RelationshipDataSourceBase, IDataSource, IAppIdentity, IZoneIdentity, IAppIdentityLight, ICacheInfo, ICacheKey, ICacheExpiring, ITimestamped, ICanPurgeListCache, IHasLog, IDataTarget, IDataPartShared Remarks Added in v12.10 Properties | Improve this Doc View Source ContentTypeName Name of the content-type to get. If specified, would only keep the children of this content-type. Can usually be left empty (recommended). Declaration public override string ContentTypeName { get; set; } Property Value Type Description System.String Overrides ToSic.Eav.DataSources.RelationshipDataSourceBase.ContentTypeName | Improve this Doc View Source FieldName Name of the field pointing to the children. If left blank, will use get all children. Declaration public override string FieldName { get; set; } Property Value Type Description System.String Overrides ToSic.Eav.DataSources.RelationshipDataSourceBase.FieldName Implements IDataSource IAppIdentity IZoneIdentity IAppIdentityLight ICacheKey ICacheExpiring ITimestamped ICanPurgeListCache IHasLog IDataTarget IDataPartShared"
  },
  "net-code/data-sources/custom/external-data.html": {
    "href": "net-code/data-sources/custom/external-data.html",
    "title": "DataSource API: Inherit from ExternalData | 2sxc 13 / EAV 13",
    "keywords": "DataSource API: Inherit from ExternalData <!-- Data Highlights --> <!-- ADAM --> <!-- Server --> <!-- Prepare --> <!-- Data Source --> <!-- Optimzers --> <!-- Process / Awesomize --> <!-- Libraries --> <!-- data formats --> <!-- Browser --> <!-- Frameworks --> <!-- App show parts --> <!-- Interact parts --> <!-- Edit parts --> <!-- Edit UI parts --> <!-- SPA parts --> <!-- Custom highlight boxes - can be controlled by in-page CSS --> you are here (click to zoom) - discover the stack .context-box-summary .datasource-custom { visibility: visible; } If your DataSource gets data from elsewhere, please always inherit from ExternalData . It doesn't do much, but in case future optimizations happen, this will help us detect that you have a source getting external data. Demo App and further links Custom DataSources - Basic Tutorial History Introduced ca. EAV / 2sxc v9"
  },
  "net-code/data-sources/custom/visual-query-attribute.html": {
    "href": "net-code/data-sources/custom/visual-query-attribute.html",
    "title": "DataSource API: VisualQuery Attribute | 2sxc 13 / EAV 13",
    "keywords": "DataSource API: VisualQuery Attribute <!-- Data Highlights --> <!-- ADAM --> <!-- Server --> <!-- Prepare --> <!-- Data Source --> <!-- Optimzers --> <!-- Process / Awesomize --> <!-- Libraries --> <!-- data formats --> <!-- Browser --> <!-- Frameworks --> <!-- App show parts --> <!-- Interact parts --> <!-- Edit parts --> <!-- Edit UI parts --> <!-- SPA parts --> <!-- Custom highlight boxes - can be controlled by in-page CSS --> you are here (click to zoom) - discover the stack .context-box-summary .datasource-custom { visibility: visible; } DataSources themselves are useful in the 2sxc/EAV data processing - but they really become great when used in the VisualQuery Designer. To help the VisualQuery Designer give queues to the developer what can / can't be done, there is a VisualQuery decorator attribute which gives the class some more information. Example This example is taken from our internally used SharePoint DataSource : [VisualQuery( GlobalName = \"fd5288d2-5a13-4f58-90a0-e9d207f00121\", NiceName = \"SharePoint 2016\", PreviousNames = new[] { \"1b7cc60d-9fac-4473-a89a-c19017995307\" }, Type = DataSourceType.Source, ExpectsDataOfType = \"e5ee51da-1859-4e2b-9f4c-0ead39bbf4a6\", HelpLink = \"\")] Use It To best apply it, you should Check out the VisualQueryAttribute API docs Look at each property and make sure you understand it Look at some DataSources and see what they have defined Properties Streams Information DynamicIn Determines if this DataSource expects to have a lot of In-Streams, like the StreamMerge DataSource. Default is false . If true the UI will indicate this with a yellow In-marker. DynamicOut Determines if this DataSource can have a lot of Out-Streams like the App DataSource. Default is false . If true the UI will indicate this with a yellot Out-marker. In Array of In-Streams which the UI will show as prepared landing markers to connect streams to. Name and Identity GlobalName - the Unique Identity The global name should be super-unique because it will be stored as the ID in Queries . We recommend you get a new random Guid here . NiceName This will be shown in the VisualQuery UI. Make sure it's reasonable. PreviousNames This is a for historical reasons. In rare cases we had to rename a DataSource and the old GlobalName values are listed here. Avoid using this. UI Enhancements Icon An icon name from the Material Icons . Type A value which tells the VisualQuery in what group to place this source for the Query developer. Must be a valid value from DataSourceType . HelpLink A url to a website containing help to this DataSource. UiHint Additional text to be shown in the UI. Configuration ExpectsDataOfType This is the GUID (aka StaticName ) of the Content-Type which should be used for configuring the DataSource. The UI will open a edit dialog for this Content-Type when the Query creator hits Settings on this DataSource. History Introduced ca. in 2sxc 6"
  },
  "net-code/data-sources/use/data-source-parameters.html": {
    "href": "net-code/data-sources/use/data-source-parameters.html",
    "title": "Set Parameters for DataSource Objects in C# | 2sxc 13 / EAV 13",
    "keywords": "Set Parameters for DataSource Objects in C# <!-- Data Highlights --> <!-- ADAM --> <!-- Server --> <!-- Prepare --> <!-- Data Source --> <!-- Optimzers --> <!-- Process / Awesomize --> <!-- Libraries --> <!-- data formats --> <!-- Browser --> <!-- Frameworks --> <!-- App show parts --> <!-- Interact parts --> <!-- Edit parts --> <!-- Edit UI parts --> <!-- SPA parts --> <!-- Custom highlight boxes - can be controlled by in-page CSS --> you are here (click to zoom) - discover the stack .context-box-summary .datasource, .context-box-summary .process-razor-app, .context-box-summary .process-web-api-app { visibility: visible; } Most DataSource Objects will do something that you can parameterize / configure. There are two ways to do this Set Property values on the DataSource objects Put Tokens in the Property Values of the objects Important DataSource Objects are Single-Use , so any configuration you set must happen before data is accessed. Once Data has been retrieved (by accessing the List of a DataSource) the inner engine will cache the result and not re-run the code, so changing parameters afterwards will have no effect. Set Property Values Each DataSource object has unique properties you can set. Example: // A source which can filter by Content-Type (EntityType) var allAuthors = CreateSource<ToSic.Eav.DataSources.EntityTypeFilter>(); allAuthors.TypeName = \"Authors\"; // access the data and automatically apply the filter/config var authors = allAuthors[\"Default\"]; This demonstrates the EntityTypeFilter DataSource which has only a single property TypeName to configure. The CsvDataSource on the other hand has 5 Properties you can set like the file name to use, the delimiter etc. Tip Setting properties is the most common way to configure DataSources in C#. Set Property Tokens Tokens are usually used in VisualQuery but mentioned here for completeness. This is what you could do: // A source which can filter by Content-Type (EntityType) var allAuthors = CreateSource<ToSic.Eav.DataSources.EntityTypeFilter>(); allAuthors.TypeName = \"[QueryString:TypeName]\"; // access the data and automatically apply the filter/config var authors = allAuthors[\"Default\"]; In this case we specified a Token which will be processed by the system and replaced before the DataSource does it's internal work. Tokens use a [LookUp System](Abyss.Parts.LookUp.Index to identify a source (in this case QueryString ) and then ask that source for the value (in this case the url parameter TypeName ). Tokens have additional features like fallbacks (so [QueryString:Typename||BlogPost] would use BlogPost if the URL didn't have a parameter). Since you will usually prefer to do this kind of value-resolution in your C# code, tokens are rarely used here. History Introduced in 2sxc 04.00"
  },
  "abyss/releases/history/v11/_all11.html": {
    "href": "abyss/releases/history/v11/_all11.html",
    "title": "Version 11 | 2sxc 13 / EAV 13",
    "keywords": "Version 11 Changes Version 11.00 Breaking Changes The following changes are all super-low-profile, but we want to document them just to be through: DataStream and IDataStream loses a very old property called .LightList - we're pretty sure it's not in use anywhere, if you have it, just use .List instead. Enhancements Brand new Admin UI based on Angular 9 and Ivy with new Code-Editor, new VisualQuery and much more Razor CodeBehind Automatic Polymorphism Updated Razor Blades to 3.02 with the new Tags.SafeUrl(...) command Field: Boolean-Tristate which saves true/false/null App.Data.Create(...) now returns entities it just created Changes Version 11.01 Enhancements In-Page Toolbar now recognises sub-item lists and provides sorting and editing buttons #2009 Item-lists now have a button to add existing items to them #1278 New system to create extensions in an app, in the system folder Ability to create custom Input Fields just by placing them in the system folder #2070 Minor Improve Equality Check for DynamicEntities and EntitiesInList #2075 Data-table in admin UI now shows Title field no matter if there is another field which is the title #1639 Button to flush app-cache in admin-ui #2073 2sxc Insights now available from the super-user toolbar #2069 PT translations are added again #2064 Loads of enhancements and minor issues in the UI Changes Version 11.02 Enhancements App-Extensions system in the folder system Custom WebComponent based input fields #2082 API to reconfigure the wysiwyg input control #2090 Show view use with links to pages and more #2077 UI - fields can now be set to not-translate #2086 UI - boolean can now show different labels based on the value it has #2085 Minor Add HR language pack for editor #2087 show app-name in admin ui show app-icon in apps-management #2078 Changes Version 11.03 - todo Changes Version 11.04 - todo Changes Version 11.05 Old Edit UI be removed Old Admin-UI be removed APIs which only the old UIs used be removed Old helper JS for AngularJS apps (located in /js/angularjs ) will be removed from the distribution. They had not been updated for over 3 years and we believe they were not widely used. Anybody upgrading will still preserve the files that are there. If you really need them, download an old release of 2sxc and get them manually. Changes Version 11.06 - 11.11 - todo üëâ See the Project Issues Changes Version 11.13 VisualQuery 3 with a lot of new features Click on a stream shows what's in that stream Much better error handling to avoid queries from crashing if a stream has an error All internal DataSources were updated to use this new Error-Handling Output of Query is now tabbed which is much nicer to use Visual-Query only returns top 25 results by default to help with creating queries with large amounts of data UI was enhanced to show more user-friendly names/infos DynamicIn was introduced so DataSources can indicate that they expect a lot of In-streams UI enhanced with better/larger buttons/icons In Streams are now managed better so they can connect before it's known if the source Out actually has that stream New DataSource Error to provoke an error in a Query for testing New DataSource SerializationConfiguration lets you determine how things are serialized DataSource AttributeFilter enhanced to have keep-all or remove-all and multi-line configuration (easier) New DataSource Tutorial with updated sample code Insights-Logging was enhanced to log Exceptions (used in the VisualQuery Error handling) Bugfixes Toolbar had issue when color code was numbers only Changes Version 11.14 - 11.22 LTS TODO"
  },
  "net-code/data-sources/datasource.html": {
    "href": "net-code/data-sources/datasource.html",
    "title": "Data Sources (IDataSource) | 2sxc 13 / EAV 13",
    "keywords": "Data Sources (IDataSource) <!-- Data Highlights --> <!-- ADAM --> <!-- Server --> <!-- Prepare --> <!-- Data Source --> <!-- Optimzers --> <!-- Process / Awesomize --> <!-- Libraries --> <!-- data formats --> <!-- Browser --> <!-- Frameworks --> <!-- App show parts --> <!-- Interact parts --> <!-- Edit parts --> <!-- Edit UI parts --> <!-- SPA parts --> <!-- Custom highlight boxes - can be controlled by in-page CSS --> you are here (click to zoom) - discover the stack .context-box-summary .datasource, .context-box-summary .query-datasource { visibility: visible; } Root DataSources are IDataSource objects which deliver one or many DataStreams , which contain a bunch of content-items. Two Core Types 1. Root DataSources This kind of DataSource generates or retrieves data from somewhere external like SQL, CSV, REST or the EAV-cache. This is a Root IDataSource . An example is the CsvDataSource . Note that even this DataSource can have use Data on the In -Stream. But in this case the In provides configuration data, not raw data to process. 2. Processing DataSources Processing DataSources receive data from another DataSource, then process/filter this and provide the result for further use, in which case it's both an IDataSource as well as an IDataTarget An example of this is the Shuffle DataSource . It receives items on the In[\"Default\"] , randomly reorganizes them and provides them on the Out[\"Default] . DataSource Out can be another DataSources In Datasources can be chained so that processing steps happen in a sequence. Here's a very simple example: The root DataSource would be the App.Data which has all the data in the App It can then be connected to a EntityTypeFilter DataSource which will limit the data to all BlogPost items We can then connect it to a Shuffle DataSource to keep 3 random posts This can be done both in code as well as in a prepared VisualQuery . Queries: Reusable DataSource Wirings As described above, DataSources can be joined together and the configuration can be saved as a Query . Here's another example: a Root CsvDataSource can read a CSV-file and provide the data as a stream on Entities on csvDs[\"Default\"] ... ...and pipe the result it to a CacheAllStreams which caches the data for 60 minutes this would ensure that the slow reading process only happens every hour ...then pipe it to a ValueFilter , which only shows the items where the Country matches the Url-parameters country ...then pipe it to a ValueSort , ordering it by LastName and then FirstName ...then pipe it to another CacheAllStreams so that this common filter/sort combination will be kept for 5 minutes The result can be used in a Template or streamed as JSON to a JavaScript SPA using the Headless API . Understanding Data-Flow between DataSource Objects Each DataSource has a list of out-streams available on the .Out[\"StreamName\"] property, but usually access directly just with the DataSourceName[\"StreamName\"] . This is what also happens when you use the Data object and write foreach(var item in Data[\"Default\"]) . Aside from consuming data in your your template, most data-sources will simply offer the Out-Stream to other DataSources for further processing. Technically it's mapped like this: Cache.Out[\"Default\"] > ContentTypeFilter.In[\"Default\"] ... then some magic happens inside the ContentTypeFilter ... then the ContentTypeFilter.Out[\"Default\"] has the resulting items, which can again be used as an In on another DataSource, or simply used in your template Most DataSources will only have one In-stream and one Out-stream, but this is very variable depending on your need. How to use üëâ Use DataSources in your C# Code Create your own Custom DataSource üëâ Create Custom DataSources Configuration of Each DataSource The configuration uses a sophisticated token system to provide all necessary information. It is explained here . Read also about Data Streams Dynamic Code CreateSource(...) .net API Demo-App showing some coding of DataSources Blog about creating your own data-source History Introduced in 2sxc 04.00"
  },
  "basics/query/parameters/index.html": {
    "href": "basics/query/parameters/index.html",
    "title": "Parameters for the DataSources and the Query | 2sxc 13 / EAV 13",
    "keywords": "Parameters for the DataSources and the Query <!-- Data Highlights --> <!-- ADAM --> <!-- Server --> <!-- Prepare --> <!-- Data Source --> <!-- Optimzers --> <!-- Process / Awesomize --> <!-- Libraries --> <!-- data formats --> <!-- Browser --> <!-- Frameworks --> <!-- App show parts --> <!-- Interact parts --> <!-- Edit parts --> <!-- Edit UI parts --> <!-- SPA parts --> <!-- Custom highlight boxes - can be controlled by in-page CSS --> you are here (click to zoom) - discover the stack .context-box-summary .query-params, .context-box-summary .lookup { visibility: visible; } DataSources are parts of a query, and each performs certain functions. To do this, it needs parameters which it can get from many sources The Configuration-UI of this specific Data The general Query-Parameters Various Look-Up Sources (Tokens) Other DataSources which give the configuration value on an In-Stream Configuration UI of a Part = Settings Each part is a DataSource. If it's configurable you'll see a button appear when you mouse over it like this: The dialog which appears will be different for each type of DataSource. In the C# code of the DataSource, these parameters are available as Settings . Configuration can be Values or Tokens Almost all configuration values are strings, even if the DataSource expects a number. This allows you to write either 27 or [QueryString:Id] dependending on your needs. Here's an example: Queries can be parameterized with token placeholders like [QueryString:Id] [App:Settings:PageSize] [Params:Sort] To understand these placeholder tokens, best read up on LookUp Tokens Explained . There you'll read about how tokens work, where they come from, how to use default/fallback values and more. Aside from the normal LookUps like QueryString , User etc. there are two special LookUps which you should know about: Params and In . Global Query Parameters with Params-Token Each Query can have a list of Parameters which all parts can access through the Params LookUp . This has some great benefits: A developer can always see what parameters affect the Query If you use the same parameter in various places, you can be sure that it's always the same value. These Parameters can also be set from another query calling it This is what it looks like in VisualQuery: You will find a full explanation of this here: Params LookUp in Query Parameters . Tip You can write the tokens you need like [QueryString:Id] directly into any DataSource configuration. But we highly recommend that you create a param for it and use that instead. It just makes it easier for people looking at your query to see what will affect its results. Get Configuration from Another DataSource Often some stored data will be used to change what a DataSource does. Here's an example which will retrieve a Category either pre-defined or from the URL, then use that category to apply a filter: Here's how the settings of that are configured: Read more about the In LookUp . Settings from the Current Module (CmsBlock) Another common use case is when a normal Module-Content provides more settings. This uses the CmsBlock DataSource : This shows how the In will look in the Mod stream to find the PortalId . Read more about this In LookUp CmsBlock Test your Query with Test Parameters üëâ Query Development - Test Parameters Read Also VisualQuery Designer Set Query Parameters in your Code APIs Query QueryDefinition QueryPartDefinition Blog Posts about VisualQuery Designer History Introduced in 2sxc 07.00 In added in 2sxc 07.00 Params added in 2sxc 10.22"
  },
  "basics/query/parameters/test-parameters.html": {
    "href": "basics/query/parameters/test-parameters.html",
    "title": "Query Development - Test Parameters | 2sxc 13 / EAV 13",
    "keywords": "Query Development - Test Parameters <!-- Data Highlights --> <!-- ADAM --> <!-- Server --> <!-- Prepare --> <!-- Data Source --> <!-- Optimzers --> <!-- Process / Awesomize --> <!-- Libraries --> <!-- data formats --> <!-- Browser --> <!-- Frameworks --> <!-- App show parts --> <!-- Interact parts --> <!-- Edit parts --> <!-- Edit UI parts --> <!-- SPA parts --> <!-- Custom highlight boxes - can be controlled by in-page CSS --> you are here (click to zoom) - discover the stack .context-box-summary .query-params, .context-box-summary .lookup { visibility: visible; } This is how to test your Query with Test Parameters : The VisualQuery Designer also allows you to set test-values for testing the query. The test-values should define all the full tokens to replace. Example: [QueryString:Id]=27 [QueryString:SortOrder]=Desc [Params:FilterLastName]=Mettler [Params:FilterNameSort]=[QueryString:SortOrder||Asc] Here's an example: You will find a full explanation of this here: Params LookUp in Query Parameters . Tip As you can see in the example, even test params can contain more tokens if you need them. In the above example, Params:FilterNameSort would resolve to Desc because it will first check the QueryString:SortOrder which also has a test-value of Desc . Read also VisualQuery Designer APIs Query QueryDefinition QueryPartDefinition Blog Posts about VisualQuery Designer History Introduced in 2sxc 07.00 Query Params added in 2sxc 10.22"
  },
  "basics/query/serialization/index.html": {
    "href": "basics/query/serialization/index.html",
    "title": "Fine-Tune Serialization in Queries (new v11.13) | 2sxc 13 / EAV 13",
    "keywords": "Fine-Tune Serialization in Queries (new v11.13) <!-- Data Highlights --> <!-- ADAM --> <!-- Server --> <!-- Prepare --> <!-- Data Source --> <!-- Optimzers --> <!-- Process / Awesomize --> <!-- Libraries --> <!-- data formats --> <!-- Browser --> <!-- Frameworks --> <!-- App show parts --> <!-- Interact parts --> <!-- Edit parts --> <!-- Edit UI parts --> <!-- SPA parts --> <!-- Custom highlight boxes - can be controlled by in-page CSS --> you are here (click to zoom) - discover the stack .context-box-summary .query-app, .context-box-summary .process-headless, .context-box-summary .format-json-headless { visibility: visible; } You can now customize a lot how Query data is made available in the Headless API. You can control things like If Id, Guid and Titles are included If Metadata-For is included If Metadata is included and which identifiers If Relationships are included and which identifiers This is made possible through the new SerializationConfiguration DataSource. Just try it out. Todo: #todoc screenshots etc. History Introduced in 2sxc 11.13"
  },
  "basics/query/streams/in.html": {
    "href": "basics/query/streams/in.html",
    "title": "VisualQuery: In Streams | 2sxc 13 / EAV 13",
    "keywords": "VisualQuery: In Streams <!-- Data Highlights --> <!-- ADAM --> <!-- Server --> <!-- Prepare --> <!-- Data Source --> <!-- Optimzers --> <!-- Process / Awesomize --> <!-- Libraries --> <!-- data formats --> <!-- Browser --> <!-- Frameworks --> <!-- App show parts --> <!-- Interact parts --> <!-- Edit parts --> <!-- Edit UI parts --> <!-- SPA parts --> <!-- Custom highlight boxes - can be controlled by in-page CSS --> you are here (click to zoom) - discover the stack .context-box-summary .query-app { visibility: visible; } DataSources often have In Streams . Some are required and some are optional. There are three common cases: No In-Streams because the DataSource generates data (eg. the Sql DataSource ) In-Streams which supply data for processing In-Streams which simply supply configuration The counterpart of In-Streams are Out-Streams . This is what In-Streams look like in VisualQuery: The Three Common Cases Case 1: DataSources without In-Streams Root DataSources generate or get data, and don't need an In-Stream. Here's an example from a CSV DataSource . Case 2: In-Streams for Data Processing This is a most common case, where a datasource gets one or more streams, and filter or modify the content. Here's an example of the StreamPick DataSource which has 3 inbound streams, and picks the one called Default to pass on: Case 3: In-Streams for Configuration In addition to data providing In-Streams, a DataSource may also use the data from an In to get a setting. <!-- #todoc - add image - explain a bit --> In these cases the first item in the stream can be used as a parameter in the Settings using In-Lookups like [In:Module:Category] . Read more about In-LookUps . In-Stream Names The names on an In-Stream are important since they affect how the stream is used. Note that the names must be unique. This is case-insensitive, so Default and default are regarded as the same name and wouldn't be valid. Pre-Named In-Streams If the DataSource has special In-Streams which have a pre-defined purpose they are pre-named. This example of the ValueFilter DataSource can run a filter on Default , and if it ends up empty, can deliver a Fallback stream: The Country filter - it didn't find anything in the Default for the filter, so it receives 11 items and forwards 11 items from the Fallback Test data for Country is blank The Industry filter - it did find something, so it only forwards the 2 matching items Test data for the Industry expects Web Dynamic In-Streams Some DataSources can handle an infine amount of In -Streams like the StreamPick DataSource. This is indicated by the orange üî∫ on mouse-over: This means you can connect as many In-Streams as you want. Just make sure the names are unique. Rename In-Streams You can always rename a connection by clicking on the name and typing in a new name. Required vs. Optional In-Streams Some streams are optional, some are required. In the example of the ValueFilter above, the Default is required, and the Fallback is optional. In-Streams Cannot be Re-Used An Out-Stream can be connected to multiple In-Streams but the opposite is not possible. So an In can only have one source, but an Out can give it's data to multiple In sources. Nice to Know By convention, the default In-stream is called Default In-Streams have data which can be used, but they are not accessed until you really need them History Introduced ca. in 2sxc 6 Dynamic-In has existed since 2sxc 6 but the visual queue was added in 2sxc 11.13"
  },
  "api/dot-net/ToSic.Sxc.Dnn.html": {
    "href": "api/dot-net/ToSic.Sxc.Dnn.html",
    "title": "Namespace ToSic.Sxc.Dnn | 2sxc 13 / EAV 13",
    "keywords": "Namespace ToSic.Sxc.Dnn This contains interfaces that are specific to 2sxc in Dnn. The purpose is that both the EAV and 2sxc are meant to be platform agnostic, but Razor and WebApi developers in Dnn still need access to some helpers. Classes ApiController This is the base class for all custom API Controllers. With this, your code receives the full context incl. the current App, DNN, Data, etc. DynamicCode This is a base class for custom code files with context. If you create a class file for dynamic use and inherit from this, then the compiler will automatically add objects like Link, Dnn, etc. The class then also has AsDynamic(...) and AsList(...) commands like a normal razor page. Factory This is a factory to create CmsBlocks, Apps etc. and related objects from DNN. RazorComponent The base class for Razor-Components in 2sxc 10+ Provides context infos like the Dnn object, helpers like Edit and much more. RazorComponentCode This is the type used by code-behind classes of razor components. Use it to move logic / functions etc. into a kind of code-behind razor instead of as part of your view-template."
  },
  "api/dot-net/ToSic.Eav.DataSources.Sys.html": {
    "href": "api/dot-net/ToSic.Eav.DataSources.Sys.html",
    "title": "Namespace ToSic.Eav.DataSources.Sys | 2sxc 13 / EAV 13",
    "keywords": "Namespace ToSic.Eav.DataSources.Sys Classes Apps A DataSource that gets all Apps of a zone. Attributes A DataSource that returns the attributes of a content-type ContentTypes A DataSource that all content-types of an app. QueryInfo A DataSource that returns infos about a query. For example, it says how many out-streams are available and what fields can be used on each stream. This is used in fields which let you pick a query, stream and field from that stream. Zones A DataSource that gets all zones in the system."
  },
  "api/dot-net/ToSic.Sxc.Code.DynamicCodeRoot.html": {
    "href": "api/dot-net/ToSic.Sxc.Code.DynamicCodeRoot.html",
    "title": "Class DynamicCodeRoot | 2sxc 13 / EAV 13",
    "keywords": "Class DynamicCodeRoot Base class for any dynamic code root objects. Root objects are the ones compiled by 2sxc - like the RazorComponent or ApiController. If you create code for dynamic compilation, you'll always inherit from ToSic.Sxc.Dnn.DynamicCode. Note that other DynamicCode objects like RazorComponent or ApiController reference this object for all the interface methods of IDynamicCode . Inheritance System.Object HasLog DynamicCodeRoot Implements IDynamicCode12 IDynamicCode ICreateInstance ICompatibilityLevel IHasLog Inherited Members HasLog.Log HasLog.InitLog(String, ILog, String) HasLog.InitLog(String, ILog, String, CodeRef) Namespace : ToSic.Sxc.Code Assembly : ToSic.Sxc.dll Syntax [PublicApi_Stable_ForUseInYourCode] public abstract class DynamicCodeRoot : HasLog, IDynamicCodeRoot, IDynamicCode12, IDynamicCode, ICreateInstance, ICompatibilityLevel, IHasLog Properties | Improve this Doc View Source App A fully prepared IApp object letting you access all the data and queries in the current app. Declaration public IApp App { get; } Property Value Type Description IApp The current app | Improve this Doc View Source Content The content object of the current razor view - IF the current view has content. If the view is a list, it will return the first item. Will be null otherwise. To tell if it's the demo/default item, use IsDemoItem . Declaration public dynamic Content { get; } Property Value Type Description System.Object A IDynamicEntity object with the current content - or null. | Improve this Doc View Source Convert Conversion helper for common data conversions in Razor and WebAPIs Declaration public IConvertService Convert { get; } Property Value Type Description IConvertService Remarks Added in 2sxc 12.05 | Improve this Doc View Source CreateInstancePath Location of the current code. This is important when trying to create instances for other code in relative folders - as this is usually not known. Declaration public string CreateInstancePath { get; set; } Property Value Type Description System.String The real path to the currently executed code - important for dynamically compiled code like WebApis | Improve this Doc View Source Data The data prepared for the current Code. Usually user data which was manually added to the instance, but can also be a query. Declaration public IBlockDataSource Data { get; } Property Value Type Description IBlockDataSource An IBlockDataSource which is as IDataSource . | Improve this Doc View Source DevTools Declaration public IDevTools DevTools { get; } Property Value Type Description ToSic.Sxc.Code.DevTools.IDevTools | Improve this Doc View Source Edit Helper commands to enable in-page editing functionality Use it to check if edit is enabled, generate context-json infos and provide toolbar buttons Declaration public IEditService Edit { get; } Property Value Type Description IEditService An IEditService object. | Improve this Doc View Source Header The header object of the current razor view, if it's a list and has a header object. If it's a list and doesn't have a header (and no default), it will return null. To tell if it's the demo/default item, use IsDemoItem . Declaration public dynamic Header { get; } Property Value Type Description System.Object A IDynamicEntity object with the current content. Remarks Introduced in 2sxc 10.10 - previously it was called ListContent, now deprecated. | Improve this Doc View Source Link Link helper object to create the correct links Declaration public ILinkService Link { get; } Property Value Type Description ILinkService A ILinkService object. | Improve this Doc View Source Resources Resources for this Scenario. This is a dynamic object based on the IDynamicStack . It will combine both the Resources of the View and the App. The View-Resources will have priority. In future it may also include some global Resources. ü™í Use in Razor: @Resources.CtaButtonLabel Declaration [PublicApi] public dynamic Resources { get; } Property Value Type Description System.Object Remarks New in 12.03 | Improve this Doc View Source Settings Settings for this Scenario. This is a dynamic object based on the IDynamicStack . It will combine both the Settings of the View and the App. The View-Settings will have priority. In future it may also include some global Settings. ü™í Use in Razor: @Settings.ItemsPerRow Declaration [PublicApi] public dynamic Settings { get; } Property Value Type Description System.Object Remarks New in 12.03 Methods | Improve this Doc View Source AsAdam(IEntity, String) Provides an Adam instance for this item and field Declaration public IFolder AsAdam(IEntity entity, string fieldName) Parameters Type Name Description IEntity entity The entity, often Content or similar System.String fieldName The field name, like \"Gallery\" or \"Pics\" Returns Type Description IFolder An Adam object for navigating the assets | Improve this Doc View Source AsAdam(IDynamicEntity, String) Provides an Adam instance for this item and field Declaration public IFolder AsAdam(IDynamicEntity entity, string fieldName) Parameters Type Name Description IDynamicEntity entity The entity, often Content or similar System.String fieldName The field name, like \"Gallery\" or \"Pics\" Returns Type Description IFolder An Adam object for navigating the assets | Improve this Doc View Source AsDynamic(Object) Convert a dynamic entity and return itself again. This is so coders don't have to worry if the original object was an IEntity or a IDynamicEntity in the first place. Declaration public dynamic AsDynamic(object dynamicEntity) Parameters Type Name Description System.Object dynamicEntity the original object Returns Type Description System.Object a dynamic object for easier coding | Improve this Doc View Source AsDynamic(Object[]) Convert one or many Entities and Dynamic entities into an IDynamicStack Declaration [PublicApi(\"Careful - still Experimental in 12.02\")] public dynamic AsDynamic(params object[] entities) Parameters Type Name Description System.Object [] entities one or more source object Returns Type Description System.Object a dynamic object for easier coding Remarks New in 12.05 | Improve this Doc View Source AsDynamic(String, String) Take a json and provide it as a dynamic object to the code Declaration public dynamic AsDynamic(string json, string fallback = \"{}\") Parameters Type Name Description System.String json the original json string System.String fallback Alternate string to use, if the original json can't parse. Can also be null or the word \"error\" if you would prefer an error to be thrown. Returns Type Description System.Object A dynamic object representing the original json. If it can't be parsed, it will parse the fallback, which by default is an empty empty dynamic object. If you provide null for the fallback, then you will get null back. Remarks Added in 2sxc 10.22.00 | Improve this Doc View Source AsDynamic(IEntity) Wraps an entity into a IDynamicEntity Declaration public dynamic AsDynamic(IEntity entity) Parameters Type Name Description IEntity entity the original object Returns Type Description System.Object a dynamic object for easier coding | Improve this Doc View Source AsEntity(Object) Unwraps a dynamic entity back into the underlying IEntity Declaration public IEntity AsEntity(object dynamicEntity) Parameters Type Name Description System.Object dynamicEntity the wrapped IEntity Returns Type Description IEntity A normal IEntity | Improve this Doc View Source AsList(Object) Converts a list of IEntity objects into a list of IDynamicEntity objects. Declaration public IEnumerable<dynamic> AsList(object list) Parameters Type Name Description System.Object list typically a List/IEnumerable of Entities or DynamicEntities. Can also be a IDataSource in which case it uses the default stream. Returns Type Description System.Collections.Generic.IEnumerable < System.Object > a list of IDynamicEntity objects Remarks Added in 2sxc 10.21.00 | Improve this Doc View Source CreateInstance(String, String, String, String, Boolean) Create an instance of code lying in a file near this Declaration public virtual dynamic CreateInstance(string virtualPath, string noParamOrder = \"Rule: All params must be named (https://r.2sxc.org/named-params)\", string name = null, string relativePath = null, bool throwOnError = true) Parameters Type Name Description System.String virtualPath path to the other code file to compile System.String noParamOrder see Convention: Named Parameters System.String name Override the class name to compile - usually not required as it should match the file name System.String relativePath optional relative path, will usually use the CreateInstancePath System.Boolean throwOnError throw errors if compiling fails, recommended Returns Type Description System.Object An object of the class in the file Remarks Note that the C# code which we are creating an instance of inherits from DynamicCode then it will automatically be initialized to support App, AsDynamic etc. | Improve this Doc View Source CreateSource<T>(IDataSource, ILookUpEngine) Create a IDataSource which will process data from the given stream. Declaration public T CreateSource<T>(IDataSource inSource = null, ILookUpEngine configurationProvider = null) where T : IDataSource Parameters Type Name Description IDataSource inSource The data source which will be the default In of the new data-source. ILookUpEngine configurationProvider An alternate configuration provider for the DataSource Returns Type Description T A typed DataSource object Type Parameters Name Description T A data-source type - must be inherited from IDataSource | Improve this Doc View Source CreateSource<T>(IDataStream) Create a IDataSource which will process data from the given stream. Declaration public T CreateSource<T>(IDataStream inStream) where T : IDataSource Parameters Type Name Description IDataStream inStream The stream which will be the default In of the new data-source. Returns Type Description T A typed DataSource object Type Parameters Name Description T A data-source type - must be inherited from IDataSource | Improve this Doc View Source GetService<TService>() Get a service from the EAV / 2sxc Dependency Injection. Declaration public TService GetService<TService>() Returns Type Description TService An object of the type or interface requested Type Parameters Name Description TService Interface (preferred) or Class which is needed Remarks Added in 2sxc 11.11 Implements IDynamicCode12 IDynamicCode ICreateInstance ICompatibilityLevel IHasLog"
  },
  "api/dot-net/ToSic.Sxc.DataSources.html": {
    "href": "api/dot-net/ToSic.Sxc.DataSources.html",
    "title": "Namespace ToSic.Sxc.DataSources | 2sxc 13 / EAV 13",
    "keywords": "Namespace ToSic.Sxc.DataSources This contains new DataSources for EAV, which only 2sxc can provide. It extends the standard EAV Data-Sources . Classes Block The main data source for Blocks. Internally often uses CmsBlock to find what it should provide. It's based on the PassThrough data source, because it's just a coordination-wrapper. CmsBlock This data-source delivers the core data for a CMS Block. It will look up the configuration in the CMS (like the Module-Settings in DNN) to determine what data is needed for the block. Usually it will then find a reference to a ContentBlock, from which it determines what content-items are assigned. It could also find that the template specifies a query, in which case it would retrieve that. Was previously called ModuleDataSource Pages Deliver a list of pages from the current platform (Dnn or Oqtane) Interfaces IBlockDataSource This marks data sources which are meant for Blocks (Modules, Content-Block Instances). They have some internal functionality which isn't published as of now."
  },
  "api/dot-net/Custom.Dnn.Api12.html": {
    "href": "api/dot-net/Custom.Dnn.Api12.html",
    "title": "Class Api12 | 2sxc 13 / EAV 13",
    "keywords": "Class Api12 Base Class for modern Api Controllers in Dnn Class Custom.Dnn.Api12 for Dnn ‚ò¢Ô∏è This is the Dnn specific base class. It's the very same as Custom.Hybrid.Api12 except for the additional Dnn Property. Because of this, the documentation here only shows Dnn - for all other properties go to Custom.Hybrid.Api12 Tip If you don't need these special properties, we strongly suggest to move to the Hybrid implementation. Inheritance System.Object System.Web.Http.ApiController DotNetNuke.Web.Api.DnnApiController ToSic.Sxc.Dnn.WebApi.DnnApiControllerWithFixes < ToSic.Eav.WebApi.DummyControllerReal > ToSic.Sxc.WebApi.SxcApiControllerBase < ToSic.Eav.WebApi.DummyControllerReal > ToSic.Sxc.WebApi.DynamicApiController Api12 Api12 Implements IDynamicCode12 IDynamicWebApi IDnnDynamicCode IDynamicCode ICreateInstance ICompatibilityLevel IHasLog IDnnDynamicCodeAdditions Inherited Members Api12.App Api12.Data Api12.AsDynamic(String, String) Api12.AsDynamic(IEntity) Api12.AsDynamic(Object) Api12.AsDynamic(Object[]) Api12.AsEntity(Object) Api12.AsList(Object) Api12.Convert Api12.CreateSource<T>(IDataSource, ILookUpEngine) Api12.CreateSource<T>(IDataStream) Api12.Content Api12.Header Api12.AsAdam(IDynamicEntity, String) Api12.AsAdam(IEntity, String) Api12.SaveInAdam(String, Stream, String, String, Nullable<Guid>, String, String) Api12.Link Api12.Edit Api12.CmsContext Api12.Resources Api12.Settings Api12.DevTools Api12.File(String, Nullable<Boolean>, String, String, String, Object) Api12.Ok() Api12.Ok(Object) Api12.NoContent() Api12.Redirect(String) Api12.RedirectPermanent(String) Api12.StatusCode(Int32) Api12.StatusCode(Int32, Object) Api12.Unauthorized() Api12.Unauthorized(Object) Api12.NotFound() Api12.NotFound(Object) Api12.BadRequest() Api12.Conflict() Api12.Conflict(Object) Api12.Accepted() Api12.Forbid() Namespace : Custom.Dnn Assembly : ToSic.Sxc.Dnn.WebApi.dll Syntax [PublicApi_Stable_ForUseInYourCode(\"This is the official base class for v12+\")] public abstract class Api12 : Api12, IHttpController, IDisposable, IDynamicCode12, IHasDynamicCodeRoot, IDynamicCodeBeforeV10, IDnnDynamicWebApi, IDynamicWebApi, IDnnDynamicCode, IDynamicCode, ICreateInstance, ICompatibilityLevel, IHasLog, IDnnDynamicCodeAdditions Constructors | Improve this Doc View Source Api12() Declaration protected Api12() | Improve this Doc View Source Api12(String) Declaration protected Api12(string logSuffix) Parameters Type Name Description System.String logSuffix Properties | Improve this Doc View Source Dnn The DNN context. Declaration public IDnnContext Dnn { get; } Property Value Type Description IDnnContext The DNN context. Implements IDynamicCode12 IDynamicWebApi IDnnDynamicCode IDynamicCode ICreateInstance ICompatibilityLevel IHasLog IDnnDynamicCodeAdditions"
  },
  "api/dot-net/ToSic.Eav.LookUp.LookUpEngine.html": {
    "href": "api/dot-net/ToSic.Eav.LookUp.LookUpEngine.html",
    "title": "Class LookUpEngine | 2sxc 13 / EAV 13",
    "keywords": "Class LookUpEngine Takes a list of configuration masks (list of tokens) and resolves them with a bunch of LookUps. Read more about this in LookUp System Inheritance System.Object HasLog LookUpEngine Implements ILookUpEngine IHasLog Inherited Members HasLog.Log HasLog.InitLog(String, ILog, String) HasLog.InitLog(String, ILog, String, CodeRef) Namespace : ToSic.Eav.LookUp Assembly : ToSic.Eav.Core.dll Syntax [InternalApi_DoNotUse_MayChangeWithoutNotice(\"this is just fyi, use Interface in your code ILookupEngine\")] public class LookUpEngine : HasLog, ILookUpEngine, IHasLog Constructors | Improve this Doc View Source LookUpEngine(ILog) Declaration public LookUpEngine(ILog parentLog) Parameters Type Name Description ILog parentLog | Improve this Doc View Source LookUpEngine(ILookUpEngine, ILog, Boolean) Cloning another LookUpEngine and keep the sources. Declaration public LookUpEngine(ILookUpEngine original, ILog parentLog, bool makeOwnCopyOfSources = false) Parameters Type Name Description ILookUpEngine original ILog parentLog System.Boolean makeOwnCopyOfSources Methods | Improve this Doc View Source Add(ILookUp) Add (or replace) a value provider in the source list Declaration public void Add(ILookUp lookUp) Parameters Type Name Description ILookUp lookUp An source to add to this configuration provider. The name will be taken from this object. | Improve this Doc View Source AddOverride(IEnumerable<ILookUp>) Add many overriding sources. This is used when the underlying configuration provider is shared, and this instance needs a few custom configurations. Declaration public void AddOverride(IEnumerable<ILookUp> lookUps) Parameters Type Name Description System.Collections.Generic.IEnumerable < ILookUp > lookUps list of ILookUp which should override the original configuration | Improve this Doc View Source AddOverride(ILookUp) Add an overriding source. This is used when the underlying configuration provider is shared, and this instance needs a few custom configurations. Declaration public void AddOverride(ILookUp lookUp) Parameters Type Name Description ILookUp lookUp a ILookUp which should override the original configuration | Improve this Doc View Source Link(ILookUpEngine) Declaration public void Link(ILookUpEngine downstream) Parameters Type Name Description ILookUpEngine downstream | Improve this Doc View Source LookUp(IDictionary<String, String>, IDictionary<String, ILookUp>, Int32) Declaration public IDictionary<string, string> LookUp(IDictionary<string, string> values, IDictionary<string, ILookUp> overrides, int depth = 4) Parameters Type Name Description System.Collections.Generic.IDictionary < System.String , System.String > values System.Collections.Generic.IDictionary < System.String , ILookUp > overrides System.Int32 depth Returns Type Description System.Collections.Generic.IDictionary < System.String , System.String > | Improve this Doc View Source LookUp(IDictionary<String, String>, Int32) Declaration public IDictionary<string, string> LookUp(IDictionary<string, string> values, int depth = 4) Parameters Type Name Description System.Collections.Generic.IDictionary < System.String , System.String > values System.Int32 depth Returns Type Description System.Collections.Generic.IDictionary < System.String , System.String > Implements ILookUpEngine IHasLog"
  },
  "api/dot-net/ToSic.Sxc.Apps.App.html": {
    "href": "api/dot-net/ToSic.Sxc.Apps.App.html",
    "title": "Class App | 2sxc 13 / EAV 13",
    "keywords": "Class App A single-use app-object providing quick simple api to access name, folder, data, metadata etc. Inheritance System.Object HasLog AppBase App App Implements IHasLog IHasPermissions IApp IApp IAppIdentity IZoneIdentity IAppIdentityLight IHasMetadata Inherited Members App.Name App.Folder App.Hidden App.NameId App.ShowDrafts App.Init(IAppIdentity, Func<App, IAppDataConfiguration>, ILog) App.Data App.Metadata App.Permissions App.AppConfiguration App.AppSettings App.AppResources App.InitializeResourcesSettingsAndMetadata() App.Query App.GetQuery(String) AppBase.ZoneId AppBase.AppId AppBase.Init(IAppIdentity, CodeRef, ILog) HasLog.Log HasLog.InitLog(String, ILog, String) HasLog.InitLog(String, ILog, String, CodeRef) Namespace : ToSic.Sxc.Apps Assembly : ToSic.Sxc.dll Syntax [PublicApi_Stable_ForUseInYourCode] public class App : App, IHasLog, IHasPermissions, IApp, IAppPaths, IApp, IApp, IAppIdentityWithPublishingState, IAppIdentity, IZoneIdentity, IAppIdentityLight, IHasMetadata Properties | Improve this Doc View Source Configuration Configuration object as a DynamicEntity. This contains things like app version, path etc. Declaration public AppConfiguration Configuration { get; } Property Value Type Description AppConfiguration An IDynamicEntity object | Improve this Doc View Source Path The path to the current app, for linking JS/CSS files and images in the app folder. Declaration public string Path { get; } Property Value Type Description System.String Path usually starting with /portals/... | Improve this Doc View Source PathShared The path to the current apps shared/global folder, for linking JS/CSS files and images in the app folder. Declaration public string PathShared { get; } Property Value Type Description System.String Path usually starting with /portals/_default/... Remarks Added v13.01 | Improve this Doc View Source PhysicalPathShared The path on the server hard disk for the current apps shared/global folder. Declaration public string PhysicalPathShared { get; } Property Value Type Description System.String Path usually starting with c:... Remarks Added v13.01 | Improve this Doc View Source Resources All the app resources (usually used for multi-language labels etc.) Declaration public dynamic Resources { get; } Property Value Type Description System.Object An IDynamicEntity object | Improve this Doc View Source Settings All the app settings which are custom for each app. Declaration public dynamic Settings { get; } Property Value Type Description System.Object An IDynamicEntity object | Improve this Doc View Source Thumbnail The thumbnail path for the current app. Declaration public string Thumbnail { get; } Property Value Type Description System.String path + app-icon.png if there is an icon there. Methods | Improve this Doc View Source Init(Int32, ILog, IBlock, Boolean) Declaration public IApp Init(int appId, ILog log, IBlock optionalBlock = null, bool showDrafts = false) Parameters Type Name Description System.Int32 appId ILog log IBlock optionalBlock System.Boolean showDrafts Returns Type Description IApp Implements IHasLog IHasPermissions IApp IApp IAppIdentity IZoneIdentity IAppIdentityLight IHasMetadata"
  },
  "api/dot-net/ToSic.Eav.DataSources.IAppRoot.html": {
    "href": "api/dot-net/ToSic.Eav.DataSources.IAppRoot.html",
    "title": "Interface IAppRoot | 2sxc 13 / EAV 13",
    "keywords": "Interface IAppRoot Interface for the App Root - usually the very first node in any data-delivery or query. It's just like a normal IDataSource but will internally access the AppState from the IAppsCache . Inherited Members IDataSource.Out IDataSource.Item[String] IDataSource.GetStream(String, String, Boolean, Boolean) IDataSource.List IDataSource.Configuration IDataSource.LogId IDataSource.CacheRelevantConfigurations IDataSource.CacheKey IDataPartShared.Guid IDataPartShared.Name IZoneIdentity.ZoneId IAppIdentityLight.AppId ICacheKey.CachePartialKey ICacheKey.CacheFullKey ICacheExpiring.CacheChanged(Int64) ITimestamped.CacheTimestamp ICanPurgeListCache.PurgeList(Boolean) IHasLog.Log Namespace : ToSic.Eav.DataSources Assembly : ToSic.Eav.DataSources.dll Syntax [VisualQuery(NiceName = \"App Root Cache\", UiHint = \"All App data from the Cache\", Icon = \"table_chart\", Type = DataSourceType.Source, GlobalName = \"ToSic.Eav.DataSources.IAppRoot, ToSic.Eav.DataSources\", PreviousNames = new string[]{\"ToSic.Eav.DataSources.Caches.ICache, ToSic.Eav.DataSources\", \"ToSic.Eav.DataSources.Caching.IRootCache, ToSic.Eav.DataSources\"}, HelpLink = \"https://r.2sxc.org/DsAppRoot\")] [InternalApi_DoNotUse_MayChangeWithoutNotice(\"this is just fyi\")] public interface IAppRoot : IDataSource, IDataPartShared, IAppIdentity, IZoneIdentity, IAppIdentityLight, ICacheInfo, ICacheKey, ICacheExpiring, ITimestamped, ICanPurgeListCache, IHasLog"
  },
  "api/dot-net/ToSic.Sxc.Code.DynamicCode.html": {
    "href": "api/dot-net/ToSic.Sxc.Code.DynamicCode.html",
    "title": "Class DynamicCode | 2sxc 13 / EAV 13",
    "keywords": "Class DynamicCode This is a base class for dynamic code which is compiled at runtime. It delegates all properties like App and methods like AsDynamic() to the parent item which initially caused it to be compiled. Inheritance System.Object HasLog DynamicCode DynamicCode12 DynamicCode Implements IDynamicCode ICreateInstance ICompatibilityLevel IHasLog IWrapper < IDynamicCode > Inherited Members HasLog.Log HasLog.InitLog(String, ILog, String) HasLog.InitLog(String, ILog, String, CodeRef) Namespace : ToSic.Sxc.Code Assembly : ToSic.Sxc.dll Syntax [PublicApi_Stable_ForUseInYourCode] public abstract class DynamicCode : HasLog, IDynamicCode, ICreateInstance, ICompatibilityLevel, IHasLog, IWrapper<IDynamicCode>, IHasDynamicCodeRoot, INeedsDynamicCodeRoot Constructors | Improve this Doc View Source DynamicCode() Main constructor, may never have parameters, otherwise inheriting code will run into problems. Declaration protected DynamicCode() Properties | Improve this Doc View Source App A fully prepared IApp object letting you access all the data and queries in the current app. Declaration public IApp App { get; } Property Value Type Description IApp The current app | Improve this Doc View Source CmsContext The CmsContext tells you about the environment, like what page and module we're running in. It's supposed to replace the Dnn object in Razor and WebAPI code. Declaration public ICmsContext CmsContext { get; } Property Value Type Description ICmsContext Remarks New in v11.11 | Improve this Doc View Source Content The content object of the current razor view - IF the current view has content. If the view is a list, it will return the first item. Will be null otherwise. To tell if it's the demo/default item, use IsDemoItem . Declaration public dynamic Content { get; } Property Value Type Description System.Object A IDynamicEntity object with the current content - or null. | Improve this Doc View Source CreateInstancePath Location of the current code. This is important when trying to create instances for other code in relative folders - as this is usually not known. Declaration public string CreateInstancePath { get; set; } Property Value Type Description System.String The real path to the currently executed code - important for dynamically compiled code like WebApis | Improve this Doc View Source Data The data prepared for the current Code. Usually user data which was manually added to the instance, but can also be a query. Declaration public IBlockDataSource Data { get; } Property Value Type Description IBlockDataSource An IBlockDataSource which is as IDataSource . | Improve this Doc View Source Edit Helper commands to enable in-page editing functionality Use it to check if edit is enabled, generate context-json infos and provide toolbar buttons Declaration public IEditService Edit { get; } Property Value Type Description IEditService An IEditService object. | Improve this Doc View Source Header The header object of the current razor view, if it's a list and has a header object. If it's a list and doesn't have a header (and no default), it will return null. To tell if it's the demo/default item, use IsDemoItem . Declaration public dynamic Header { get; } Property Value Type Description System.Object A IDynamicEntity object with the current content. Remarks Introduced in 2sxc 10.10 - previously it was called ListContent, now deprecated. | Improve this Doc View Source Link Link helper object to create the correct links Declaration public ILinkService Link { get; } Property Value Type Description ILinkService A ILinkService object. | Improve this Doc View Source UnwrappedContents Declaration public IDynamicCode UnwrappedContents { get; } Property Value Type Description IDynamicCode Remarks The parent of this object. It's not called Parent but uses an exotic name to ensure that your code won't accidentally create a property with the same name. Methods | Improve this Doc View Source AsAdam(IEntity, String) Provides an Adam instance for this item and field Declaration public IFolder AsAdam(IEntity entity, string fieldName) Parameters Type Name Description IEntity entity The entity, often Content or similar System.String fieldName The field name, like \"Gallery\" or \"Pics\" Returns Type Description IFolder An Adam object for navigating the assets | Improve this Doc View Source AsAdam(IDynamicEntity, String) Provides an Adam instance for this item and field Declaration public IFolder AsAdam(IDynamicEntity entity, string fieldName) Parameters Type Name Description IDynamicEntity entity The entity, often Content or similar System.String fieldName The field name, like \"Gallery\" or \"Pics\" Returns Type Description IFolder An Adam object for navigating the assets | Improve this Doc View Source AsDynamic(Object) Convert a dynamic entity and return itself again. This is so coders don't have to worry if the original object was an IEntity or a IDynamicEntity in the first place. Declaration public dynamic AsDynamic(object dynamicEntity) Parameters Type Name Description System.Object dynamicEntity the original object Returns Type Description System.Object a dynamic object for easier coding | Improve this Doc View Source AsDynamic(Object[]) Declaration public dynamic AsDynamic(params object[] entities) Parameters Type Name Description System.Object [] entities Returns Type Description System.Object | Improve this Doc View Source AsDynamic(String, String) Take a json and provide it as a dynamic object to the code Declaration public dynamic AsDynamic(string json, string fallback = \"{}\") Parameters Type Name Description System.String json the original json string System.String fallback Alternate string to use, if the original json can't parse. Can also be null or the word \"error\" if you would prefer an error to be thrown. Returns Type Description System.Object A dynamic object representing the original json. If it can't be parsed, it will parse the fallback, which by default is an empty empty dynamic object. If you provide null for the fallback, then you will get null back. Remarks Added in 2sxc 10.22.00 | Improve this Doc View Source AsDynamic(IEntity) Wraps an entity into a IDynamicEntity Declaration public dynamic AsDynamic(IEntity entity) Parameters Type Name Description IEntity entity the original object Returns Type Description System.Object a dynamic object for easier coding | Improve this Doc View Source AsEntity(Object) Unwraps a dynamic entity back into the underlying IEntity Declaration public IEntity AsEntity(object dynamicEntity) Parameters Type Name Description System.Object dynamicEntity the wrapped IEntity Returns Type Description IEntity A normal IEntity | Improve this Doc View Source AsList(Object) Converts a list of IEntity objects into a list of IDynamicEntity objects. Declaration public IEnumerable<dynamic> AsList(object list) Parameters Type Name Description System.Object list typically a List/IEnumerable of Entities or DynamicEntities. Can also be a IDataSource in which case it uses the default stream. Returns Type Description System.Collections.Generic.IEnumerable < System.Object > a list of IDynamicEntity objects Remarks Added in 2sxc 10.21.00 | Improve this Doc View Source CreateInstance(String, String, String, String, Boolean) Create an instance of code lying in a file near this Declaration public dynamic CreateInstance(string virtualPath, string noParamOrder = \"Rule: All params must be named (https://r.2sxc.org/named-params)\", string name = null, string relativePath = null, bool throwOnError = true) Parameters Type Name Description System.String virtualPath path to the other code file to compile System.String noParamOrder see Convention: Named Parameters System.String name Override the class name to compile - usually not required as it should match the file name System.String relativePath optional relative path, will usually use the CreateInstancePath System.Boolean throwOnError throw errors if compiling fails, recommended Returns Type Description System.Object An object of the class in the file Remarks Note that the C# code which we are creating an instance of inherits from DynamicCode then it will automatically be initialized to support App, AsDynamic etc. | Improve this Doc View Source CreateSource<T>(IDataSource, ILookUpEngine) Create a IDataSource which will process data from the given stream. Declaration public T CreateSource<T>(IDataSource inSource = null, ILookUpEngine configurationProvider = null) where T : IDataSource Parameters Type Name Description IDataSource inSource The data source which will be the default In of the new data-source. ILookUpEngine configurationProvider An alternate configuration provider for the DataSource Returns Type Description T A typed DataSource object Type Parameters Name Description T A data-source type - must be inherited from IDataSource | Improve this Doc View Source CreateSource<T>(IDataStream) Create a IDataSource which will process data from the given stream. Declaration public T CreateSource<T>(IDataStream inStream) where T : IDataSource Parameters Type Name Description IDataStream inStream The stream which will be the default In of the new data-source. Returns Type Description T A typed DataSource object Type Parameters Name Description T A data-source type - must be inherited from IDataSource | Improve this Doc View Source GetContents() Declaration public IDynamicCode GetContents() Returns Type Description IDynamicCode | Improve this Doc View Source GetService<TService>() Get a service from the EAV / 2sxc Dependency Injection. Declaration public TService GetService<TService>() Returns Type Description TService An object of the type or interface requested Type Parameters Name Description TService Interface (preferred) or Class which is needed Remarks Added in 2sxc 11.11 Implements IDynamicCode ICreateInstance ICompatibilityLevel IHasLog IWrapper<T>"
  },
  "api/dot-net/ToSic.Sxc.Code.DynamicCode12.html": {
    "href": "api/dot-net/ToSic.Sxc.Code.DynamicCode12.html",
    "title": "Class DynamicCode12 | 2sxc 13 / EAV 13",
    "keywords": "Class DynamicCode12 New base class for v12 Dynamic Code Adds new properties and methods, and doesn't keep old / legacy APIs Inheritance System.Object HasLog DynamicCode DynamicCode12 Code12 Code12 Implements IWrapper < IDynamicCode > IDynamicCode12 IDynamicCode ICreateInstance ICompatibilityLevel IHasLog Inherited Members DynamicCode.UnwrappedContents DynamicCode.GetContents() DynamicCode.App DynamicCode.Data DynamicCode.GetService<TService>() DynamicCode.Content DynamicCode.Header DynamicCode.Link DynamicCode.Edit DynamicCode.CreateInstancePath DynamicCode.CreateInstance(String, String, String, String, Boolean) DynamicCode.CmsContext DynamicCode.AsDynamic(String, String) DynamicCode.AsDynamic(IEntity) DynamicCode.AsDynamic(Object) DynamicCode.AsDynamic(Object[]) DynamicCode.AsEntity(Object) DynamicCode.AsList(Object) DynamicCode.CreateSource<T>(IDataStream) DynamicCode.CreateSource<T>(IDataSource, ILookUpEngine) DynamicCode.AsAdam(IDynamicEntity, String) DynamicCode.AsAdam(IEntity, String) HasLog.Log HasLog.InitLog(String, ILog, String) HasLog.InitLog(String, ILog, String, CodeRef) Namespace : ToSic.Sxc.Code Assembly : ToSic.Sxc.dll Syntax [PublicApi] public class DynamicCode12 : DynamicCode, IWrapper<IDynamicCode>, IHasDynamicCodeRoot, INeedsDynamicCodeRoot, IDynamicCode12, IDynamicCode, ICreateInstance, ICompatibilityLevel, IHasLog Properties | Improve this Doc View Source Convert Conversion helper for common data conversions in Razor and WebAPIs Declaration public IConvertService Convert { get; } Property Value Type Description IConvertService Remarks Added in 2sxc 12.05 | Improve this Doc View Source DevTools Declaration public IDevTools DevTools { get; } Property Value Type Description ToSic.Sxc.Code.DevTools.IDevTools | Improve this Doc View Source Resources Resources for this Scenario. This is a dynamic object based on the IDynamicStack . It will combine both the Resources of the View and the App. The View-Resources will have priority. In future it may also include some global Resources. ü™í Use in Razor: @Resources.CtaButtonLabel Declaration public dynamic Resources { get; } Property Value Type Description System.Object Remarks New in 12.03 | Improve this Doc View Source Settings Settings for this Scenario. This is a dynamic object based on the IDynamicStack . It will combine both the Settings of the View and the App. The View-Settings will have priority. In future it may also include some global Settings. ü™í Use in Razor: @Settings.ItemsPerRow Declaration public dynamic Settings { get; } Property Value Type Description System.Object Remarks New in 12.03 Implements IWrapper<T> IDynamicCode12 IDynamicCode ICreateInstance ICompatibilityLevel IHasLog"
  },
  "api/dot-net/ToSic.Eav.DataSources.Caching.html": {
    "href": "api/dot-net/ToSic.Eav.DataSources.Caching.html",
    "title": "Namespace ToSic.Eav.DataSources.Caching | 2sxc 13 / EAV 13",
    "keywords": "Namespace ToSic.Eav.DataSources.Caching DataSources need various kinds of caching mechanisms, like... to cache the AppState once loaded to cache resulting streams in a cpu intensive query The Caching system is in charge of all this, and will also take care of clearing caches as well as updating downstream caches if an underlying source has been updated. History Introduced in 2sxc 04.00 Classes CacheAllStreams Special DataSource which automatically caches everything it's given. It's Used to optimize queries, so that heavier calculations don't need to be repeated if another request with the same signature is used. Internally it asks all up-stream DataSources what factors would determine their caching. So if part of the supplying DataSources would have a changed parameter (like a different filter), it will still run the full query and cache the results again. ListCache Responsible for caching lists / streams. Usually used in queries or sources which have an intensive loading or querying time. ListCacheItem Cache Item in the List-Cache. Interfaces ICanPurgeListCache Marks objects which can purge it's own cache, and also force upstream caches to be purged. This helps in scenarios where the code knows that the cache should be cleaned, but needs to rely on the whole tree to be cleaned. Without this, a cache would be cleared but the next-upstream would still be cached, so the next access would still return the same results. IListCache Marks objects that can cache lists based on certain rules - including retention time and if up-stream changes should refresh the cache."
  },
  "api/dot-net/ToSic.Sxc.DataSources.CmsBlock.html": {
    "href": "api/dot-net/ToSic.Sxc.DataSources.CmsBlock.html",
    "title": "Class CmsBlock | 2sxc 13 / EAV 13",
    "keywords": "Class CmsBlock This data-source delivers the core data for a CMS Block. It will look up the configuration in the CMS (like the Module-Settings in DNN) to determine what data is needed for the block. Usually it will then find a reference to a ContentBlock, from which it determines what content-items are assigned. It could also find that the template specifies a query, in which case it would retrieve that. Was previously called ModuleDataSource CmsBlock DataSource (Module-Data) The CmsBlock DataSource DataSource is part of the Standard 2sxc/Dnn Data Sources . It is the default data source as it directly delivers module-instance data and is used for all scenarios which don't explicitly have a query, and it can also be used as part of a query. How to use with the VisualQuery When using the VisualQuery it is already in the default / initial query: The above example shows: all data start in the cache ICache it is then by default passed through the PublishingFilter then it enters this Instance/Module, which gets the current ModuleInstance and passes on the data which has been assigned to it Using Module/Instance Data For Configuration Things get really exciting when you use values which the user edited in the module as a setting in your query. Here's an example: As you can see, the Default out of the CmsBlock is passed into the ValueSort data source with the stream-name Settings and is then used in a token to configure bbehavior of the sort. Manually Assigning a Module ID (2sxc 9.9) In 2sxc 9.9 we added the configuration dialog, so you can specify what module the data should come from. This allows you to have configuration-modules or primary-data-modules, which are re-used in queries: Programming With The CmsBlock DataSource We recommend to use the VisualQuery where possible, as it's easier to understand and is identical for C# and JavaScript. It's also better because it separates data-retrieval from visualization. The only property you need to set is InstanceId (2sxc 9.9+) if you want to provide a different module-id. Read also DataSource / DataStream List of all EAV Data Sources Query / VisualQuery Demo App and further links You should find some examples in this demo App Demo App with examples for most DataSources History Introduced in EAV 4.x, 2sxc ? Added ability to configure in in the visual-query (2sxc 9.9) <!-- note: this must be an H1 because of the automatic TOC in the code pages --> API Documentation Inheritance System.Object HasLog DataSourceBase CmsBlock Implements IDataSource IAppIdentity IZoneIdentity IAppIdentityLight ICacheKey ICacheExpiring ITimestamped ICanPurgeListCache IHasLog IDataTarget IDataPartShared Inherited Members DataSourceBase.ErrorStream DataSourceBase.SetError(String, String, Exception) DataSourceBase.GetRequiredInList(IImmutableList<IEntity>) DataSourceBase.GetRequiredInList(String, IImmutableList<IEntity>) DataSourceBase.Name DataSourceBase.AppId DataSourceBase.ZoneId DataSourceBase.Guid DataSourceBase.Configuration DataSourceBase.DataBuilder DataSourceBase.CacheRelevantConfigurations DataSourceBase.ConfigMask(String, String, Boolean) DataSourceBase.CachePartialKey DataSourceBase.CacheFullKey DataSourceBase.CacheTimestamp DataSourceBase.CacheChanged(Int64) DataSourceBase.PurgeList(Boolean) DataSourceBase.In DataSourceBase.Out DataSourceBase.Item[String] DataSourceBase.GetStream(String, String, Boolean, Boolean) DataSourceBase.List DataSourceBase.Attach(IDataSource) DataSourceBase.Attach(String, IDataSource, String) DataSourceBase.Attach(String, IDataStream) HasLog.Log HasLog.InitLog(String, ILog, String) HasLog.InitLog(String, ILog, String, CodeRef) Namespace : ToSic.Sxc.DataSources Assembly : ToSic.Sxc.dll Syntax [PublicApi_Stable_ForUseInYourCode] [VisualQuery(NiceName = \"CMS Block\", UiHint = \"Data for this CMS Block (instance/module)\", Icon = \"recent_actors\", Type = DataSourceType.Source, GlobalName = \"ToSic.Sxc.DataSources.CmsBlock, ToSic.Sxc\", ExpectsDataOfType = \"7c2b2bc2-68c6-4bc3-ba18-6e6b5176ba02\", In = new string[]{\"Default\"}, HelpLink = \"https://docs.2sxc.org/api/dot-net/ToSic.Sxc.DataSources.CmsBlock.html\", PreviousNames = new string[]{\"ToSic.SexyContent.DataSources.ModuleDataSource, ToSic.SexyContent\"})] public sealed class CmsBlock : DataSourceBase, IDataSource, IAppIdentity, IZoneIdentity, IAppIdentityLight, ICacheInfo, ICacheKey, ICacheExpiring, ITimestamped, ICanPurgeListCache, IHasLog, IDataTarget, IDataPartShared Constructors | Improve this Doc View Source CmsBlock(Lazy<CmsRuntime>, Lazy<IModule>) Declaration public CmsBlock(Lazy<CmsRuntime> lazyCmsRuntime, Lazy<IModule> moduleLazy) Parameters Type Name Description System.Lazy < ToSic.Sxc.Apps.CmsRuntime > lazyCmsRuntime System.Lazy < ToSic.Sxc.Context.IModule > moduleLazy Fields | Improve this Doc View Source InstanceIdKey Declaration public const string InstanceIdKey = \"Id\" Field Value Type Description System.String | Improve this Doc View Source InstanceLookupName Declaration public const string InstanceLookupName = \"module\" Field Value Type Description System.String Properties | Improve this Doc View Source LogId Declaration public override string LogId { get; } Property Value Type Description System.String Overrides ToSic.Eav.DataSources.DataSourceBase.LogId | Improve this Doc View Source ModuleId The instance-id of the CmsBlock (2sxc instance, DNN ModId). It's named Instance-Id to be more neutral as we're opening it to other platforms Declaration public int? ModuleId { get; set; } Property Value Type Description System.Nullable < System.Int32 > | Improve this Doc View Source OverrideView This allows external settings to override the view given by the configuration. This is used to temporarily use an alternate view. For example, when previewing a different template. Declaration public IView OverrideView { get; set; } Property Value Type Description IView Implements IDataSource IAppIdentity IZoneIdentity IAppIdentityLight ICacheKey ICacheExpiring ITimestamped ICanPurgeListCache IHasLog IDataTarget IDataPartShared"
  },
  "api/dot-net/ToSic.Sxc.DataSources.Block.html": {
    "href": "api/dot-net/ToSic.Sxc.DataSources.Block.html",
    "title": "Class Block | 2sxc 13 / EAV 13",
    "keywords": "Class Block The main data source for Blocks. Internally often uses CmsBlock to find what it should provide. It's based on the PassThrough data source, because it's just a coordination-wrapper. Inheritance System.Object HasLog DataSourceBase PassThrough Block Implements IBlockDataSource IDataSource IAppIdentity IZoneIdentity IAppIdentityLight ICacheKey ICacheExpiring ITimestamped ICanPurgeListCache IHasLog IDataTarget IDataPartShared Inherited Members PassThrough.CachePartialKey DataSourceBase.ErrorStream DataSourceBase.SetError(String, String, Exception) DataSourceBase.GetRequiredInList(IImmutableList<IEntity>) DataSourceBase.GetRequiredInList(String, IImmutableList<IEntity>) DataSourceBase.Name DataSourceBase.AppId DataSourceBase.ZoneId DataSourceBase.Guid DataSourceBase.Configuration DataSourceBase.DataBuilder DataSourceBase.CacheRelevantConfigurations DataSourceBase.ConfigMask(String, String, Boolean) DataSourceBase.CacheFullKey DataSourceBase.CacheTimestamp DataSourceBase.CacheChanged(Int64) DataSourceBase.PurgeList(Boolean) DataSourceBase.In DataSourceBase.Out DataSourceBase.Item[String] DataSourceBase.GetStream(String, String, Boolean, Boolean) DataSourceBase.List DataSourceBase.Attach(IDataSource) DataSourceBase.Attach(String, IDataSource, String) DataSourceBase.Attach(String, IDataStream) HasLog.Log HasLog.InitLog(String, ILog, String) HasLog.InitLog(String, ILog, String, CodeRef) Namespace : ToSic.Sxc.DataSources Assembly : ToSic.Sxc.dll Syntax [InternalApi_DoNotUse_MayChangeWithoutNotice] public class Block : PassThrough, IBlockDataSource, IDataSource, IAppIdentity, IZoneIdentity, IAppIdentityLight, ICacheInfo, ICacheKey, ICacheExpiring, ITimestamped, ICanPurgeListCache, IHasLog, IDataTarget, IDataPartShared Implements IBlockDataSource IDataSource IAppIdentity IZoneIdentity IAppIdentityLight ICacheKey ICacheExpiring ITimestamped ICanPurgeListCache IHasLog IDataTarget IDataPartShared"
  },
  "api/dot-net/ToSic.Sxc.Engines.TokenEngine.html": {
    "href": "api/dot-net/ToSic.Sxc.Engines.TokenEngine.html",
    "title": "Class TokenEngine | 2sxc 13 / EAV 13",
    "keywords": "Class TokenEngine Rendering Engine for Token based templates (html using [Content:Title] kind of placeholders. Inheritance System.Object HasLog EngineBase TokenEngine Implements IEngine IHasLog Inherited Members EngineBase.Helpers EngineBase.Init(IBlock) EngineBase.Render() EngineBase.Init(IBlock, Purpose) EngineBase.CustomizeData() EngineBase.CustomizeSearch(Dictionary<String, List<ISearchItem>>, IModule, DateTime) HasLog.Log HasLog.InitLog(String, ILog, String) HasLog.InitLog(String, ILog, String, CodeRef) Namespace : ToSic.Sxc.Engines Assembly : ToSic.Sxc.dll Syntax [InternalApi_DoNotUse_MayChangeWithoutNotice(\"this is just fyi\")] [EngineDefinition(Name = \"Token\")] public class TokenEngine : EngineBase, IEngine, IHasLog Constructors | Improve this Doc View Source TokenEngine(EngineBaseDependencies, Lazy<DynamicCodeRoot>, GeneratorLog<AppConfigDelegate>) Declaration public TokenEngine(EngineBaseDependencies helpers, Lazy<DynamicCodeRoot> dynCodeRootLazy, GeneratorLog<AppConfigDelegate> appConfigDelegateGenerator) Parameters Type Name Description ToSic.Sxc.Engines.EngineBaseDependencies helpers System.Lazy < DynamicCodeRoot > dynCodeRootLazy ToSic.Eav.Plumbing.GeneratorLog < ToSic.Sxc.LookUp.AppConfigDelegate > appConfigDelegateGenerator Methods | Improve this Doc View Source RenderTemplate() Declaration protected override string RenderTemplate() Returns Type Description System.String Overrides ToSic.Sxc.Engines.EngineBase.RenderTemplate() Implements IEngine IHasLog"
  },
  "api/dot-net/ToSic.Eav.DataSources.StreamFallback.html": {
    "href": "api/dot-net/ToSic.Eav.DataSources.StreamFallback.html",
    "title": "Class StreamFallback | 2sxc 13 / EAV 13",
    "keywords": "Class StreamFallback A DataSource that returns the first stream which has content The StreamFallback DataSource is part of the Standard EAV Data Sources . It will pass on the first stream which has results. The order of evaluation is based on the names of the streams as they enter the StreamFallback. How to use with the VisualQuery When using the VisualQuery you can just drag it into your query. This is what it usually looks like: The above example shows a query from the blog app : a stream-fallback with 4 in-streams the first stream which would filter by tag, if the URL had a tag in it - as the test-data has no tag, this stream delivers no results the second stream filters by author - as the url would have an author (specified in the test-values), it does return items The StreamFallback therefor passes on the items provided by the author-filter. Note that while using the VisualQuery, all other streams are also processed to show what's happening. At runtime it will stop processing other streams once it's found a first match. Programming With The StreamFallback DataSource We recommend to use the VisualQuery where possible, as it's easier to understand and is identical for C# and JavaScript. It's also better because it separates data-retrieval from visualization. Read also DataSource / DataStream List of all EAV Data Sources Query / VisualQuery Demo App and further links You should find some examples in this demo App Demo App with examples for most DataSources History Introduced in EAV 3.x, 2sxc ? <!-- note: this must be an H1 because of the automatic TOC in the code pages --> API Documentation Inheritance System.Object HasLog DataSourceBase StreamFallback Implements IDataSource IAppIdentity IZoneIdentity IAppIdentityLight ICacheKey ICacheExpiring ITimestamped ICanPurgeListCache IHasLog IDataTarget IDataPartShared Inherited Members DataSourceBase.ErrorStream DataSourceBase.SetError(String, String, Exception) DataSourceBase.GetRequiredInList(IImmutableList<IEntity>) DataSourceBase.GetRequiredInList(String, IImmutableList<IEntity>) DataSourceBase.Name DataSourceBase.AppId DataSourceBase.ZoneId DataSourceBase.Guid DataSourceBase.Configuration DataSourceBase.DataBuilder DataSourceBase.CacheRelevantConfigurations DataSourceBase.ConfigMask(String, String, Boolean) DataSourceBase.CachePartialKey DataSourceBase.CacheFullKey DataSourceBase.CacheTimestamp DataSourceBase.CacheChanged(Int64) DataSourceBase.PurgeList(Boolean) DataSourceBase.In DataSourceBase.Out DataSourceBase.Item[String] DataSourceBase.GetStream(String, String, Boolean, Boolean) DataSourceBase.List DataSourceBase.Attach(IDataSource) DataSourceBase.Attach(String, IDataSource, String) DataSourceBase.Attach(String, IDataStream) HasLog.Log HasLog.InitLog(String, ILog, String) HasLog.InitLog(String, ILog, String, CodeRef) Namespace : ToSic.Eav.DataSources Assembly : ToSic.Eav.DataSources.dll Syntax [PublicApi_Stable_ForUseInYourCode] [VisualQuery(NiceName = \"Stream Fallback\", UiHint = \"Find the first stream which has data\", Icon = \"call_merge\", Type = DataSourceType.Logic, GlobalName = \"ToSic.Eav.DataSources.StreamFallback, ToSic.Eav.DataSources\", DynamicOut = false, DynamicIn = true, HelpLink = \"https://r.2sxc.org/DsStreamFallback\")] public sealed class StreamFallback : DataSourceBase, IDataSource, IAppIdentity, IZoneIdentity, IAppIdentityLight, ICacheInfo, ICacheKey, ICacheExpiring, ITimestamped, ICanPurgeListCache, IHasLog, IDataTarget, IDataPartShared Remarks Technically many things could just identify the app they belong to, and let the system look up the zone. But this would be inefficient, so for optimization, many items identify themselves with both the app and zone Ids Implements IDataSource IAppIdentity IZoneIdentity IAppIdentityLight ICacheKey ICacheExpiring ITimestamped ICanPurgeListCache IHasLog IDataTarget IDataPartShared"
  },
  "api/dot-net/ToSic.Sxc.Dnn.DataSources.DnnUserProfile.html": {
    "href": "api/dot-net/ToSic.Sxc.Dnn.DataSources.DnnUserProfile.html",
    "title": "Class DnnUserProfile | 2sxc 13 / EAV 13",
    "keywords": "Class DnnUserProfile Get DNN user profiles as IEntity objects of one or many users. Inheritance System.Object HasLog DataSourceBase ExternalData DnnUserProfile Implements IDataSource IAppIdentity IZoneIdentity IAppIdentityLight ICacheKey ICacheExpiring ITimestamped ICanPurgeListCache IHasLog IDataTarget IDataPartShared Inherited Members ExternalData.CacheTimestamp DataSourceBase.ErrorStream DataSourceBase.SetError(String, String, Exception) DataSourceBase.GetRequiredInList(IImmutableList<IEntity>) DataSourceBase.GetRequiredInList(String, IImmutableList<IEntity>) DataSourceBase.Name DataSourceBase.AppId DataSourceBase.ZoneId DataSourceBase.Guid DataSourceBase.Configuration DataSourceBase.DataBuilder DataSourceBase.CacheRelevantConfigurations DataSourceBase.ConfigMask(String, String, Boolean) DataSourceBase.CachePartialKey DataSourceBase.CacheFullKey DataSourceBase.CacheChanged(Int64) DataSourceBase.PurgeList(Boolean) DataSourceBase.In DataSourceBase.Out DataSourceBase.Item[String] DataSourceBase.GetStream(String, String, Boolean, Boolean) DataSourceBase.List DataSourceBase.Attach(IDataSource) DataSourceBase.Attach(String, IDataSource, String) DataSourceBase.Attach(String, IDataStream) HasLog.Log HasLog.InitLog(String, ILog, String) HasLog.InitLog(String, ILog, String, CodeRef) Namespace : ToSic.Sxc.Dnn.DataSources Assembly : ToSic.Sxc.Dnn.Core.dll Syntax [PublicApi_Stable_ForUseInYourCode] [VisualQuery(NiceName = \"Dnn User Profiles\", UiHint = \"Users profiles of specified users in Dnn\", Icon = \"face\", Type = DataSourceType.Source, GlobalName = \"ToSic.Sxc.Dnn.DataSources.DnnUserProfile, ToSic.Sxc.Dnn\", ExpectsDataOfType = \"|Config ToSic.SexyContent.DataSources.DnnUserProfileDataSource\", PreviousNames = new string[]{\"ToSic.SexyContent.Environment.Dnn7.DataSources.DnnUserProfileDataSource, ToSic.SexyContent\"})] public class DnnUserProfile : ExternalData, IDataSource, IAppIdentity, IZoneIdentity, IAppIdentityLight, ICacheInfo, ICacheKey, ICacheExpiring, ITimestamped, ICanPurgeListCache, IHasLog, IDataTarget, IDataPartShared Constructors | Improve this Doc View Source DnnUserProfile(ISite, IZoneMapper) Declaration public DnnUserProfile(ISite site, IZoneMapper zoneMapper) Parameters Type Name Description ToSic.Eav.Context.ISite site ToSic.Eav.Run.IZoneMapper zoneMapper Properties | Improve this Doc View Source ContentType Gets or sets the Name of the ContentType to simulate Declaration public string ContentType { get; set; } Property Value Type Description System.String | Improve this Doc View Source Properties List of profile-properties to retrieve, comma-separated Declaration public string Properties { get; set; } Property Value Type Description System.String | Improve this Doc View Source TitleField Gets or sets the Name of the Title Attribute of the DNN-UserInfo Declaration public string TitleField { get; set; } Property Value Type Description System.String | Improve this Doc View Source UserIds The user id list of users to retrieve, comma-separated Declaration public string UserIds { get; set; } Property Value Type Description System.String Implements IDataSource IAppIdentity IZoneIdentity IAppIdentityLight ICacheKey ICacheExpiring ITimestamped ICanPurgeListCache IHasLog IDataTarget IDataPartShared"
  },
  "api/dot-net/ToSic.Sxc.Dnn.LookUp.DnnLookUpEngineResolver.html": {
    "href": "api/dot-net/ToSic.Sxc.Dnn.LookUp.DnnLookUpEngineResolver.html",
    "title": "Class DnnLookUpEngineResolver | 2sxc 13 / EAV 13",
    "keywords": "Class DnnLookUpEngineResolver Retrieves the current engine for a specific module. Internally it asks DNN for the current Property-Access objects and prepares them for use in EAV. Inheritance System.Object HasLog ToSic.Eav.Logging.HasLog < ILookUpEngineResolver > DnnLookUpEngineResolver Implements ILookUpEngineResolver IHasLog Inherited Members HasLog.Log HasLog.InitLog(String, ILog, String) HasLog.InitLog(String, ILog, String, CodeRef) Namespace : ToSic.Sxc.Dnn.LookUp Assembly : ToSic.Sxc.Dnn.Core.dll Syntax [InternalApi_DoNotUse_MayChangeWithoutNotice(\"this is just fyi\")] public class DnnLookUpEngineResolver : HasLog<ILookUpEngineResolver>, ILookUpEngineResolver, IHasLog<ILookUpEngineResolver>, IHasLog Constructors | Improve this Doc View Source DnnLookUpEngineResolver(IZoneCultureResolver) Declaration public DnnLookUpEngineResolver(IZoneCultureResolver cultureResolver) Parameters Type Name Description ToSic.Eav.Context.IZoneCultureResolver cultureResolver Methods | Improve this Doc View Source GetLookUpEngine(Int32) Get the engine for the current execution instance. Declaration public ILookUpEngine GetLookUpEngine(int moduleId) Parameters Type Name Description System.Int32 moduleId The instance ID - should be 0 if unknown Returns Type Description ILookUpEngine Implements ILookUpEngineResolver IHasLog"
  },
  "api/dot-net/ToSic.Eav.Apps.html": {
    "href": "api/dot-net/ToSic.Eav.Apps.html",
    "title": "Namespace ToSic.Eav.Apps | 2sxc 13 / EAV 13",
    "keywords": "Namespace ToSic.Eav.Apps The EAV App System. It's responsible for taking data and bundling it into virtual segments called Apps , and providing nice APIs to work with the apps. Classes App A single-use app-object providing quick simple api to access name, folder, data, metadata etc. AppBase Base object for things that have a full app-identity (app-id and zone-id) and can also log their state. AppData The Data object on an App. It's also a data-source of type App , so it has many streams, one for each content-type so you can use it in combination with other DataSources. The special feature is that it also has methods for data-manipulation, including Create, Update and Delete AppIdentity A full App-Identity. This is either used to pass identities around, or as a base class for more extensive objects which know their full identity. AppState A complete App state - usually cached in memory. Has many internal features for partial updates etc. But the primary purpose is to make sure the whole app is always available with everything. It also manages and caches relationships between entities of the same app. Zone Contains all the basic infos about a Zone - usually cached Interfaces IApp An App in memory - for quickly getting things done with the app data, queries etc. IAppData An App-DataSource which also provides direct commands to edit/update/delete data. IAppDataConfiguration The configuration of an app-data - usually relevant so the source will auto-filter out unpublished data for normal viewers. IAppIdentity Marks thing which belongs to an App and a Zone and know their full identity. IAppIdentityLight Marks things which belongs to an App - but it may only know about the app, not about the zone. For a full identity, see IAppIdentity . IZoneIdentity Marks things which belongs to a Zone"
  },
  "api/dot-net/ToSic.Eav.LookUp.html": {
    "href": "api/dot-net/ToSic.Eav.LookUp.html",
    "title": "Namespace ToSic.Eav.LookUp | 2sxc 13 / EAV 13",
    "keywords": "Namespace ToSic.Eav.LookUp Sometimes objects need to get values from the context - like... a URL Parameter the current date/time an App Setting or Resource etc. This is done through ToSic.Eav.LookUp .ILookUp objects. In many cases, we need to look up a few - like when we have a configuration made with Tokens . These would look like [App:Path] or [QueryString:Ui] . The tool which takes a list of these and looks all of them up is the ToSic.Eav.LookUp .ILookupEngine. Tip Read more about this in [](Abyss.Parts.LookUp.Index Classes LookUpBase Base Class to create your own LookUp Class - used by all Look-Ups. Read more about this in LookUp System LookUpEngine Takes a list of configuration masks (list of tokens) and resolves them with a bunch of LookUps. Read more about this in LookUp System LookUpIn<T> LookUpInDataTarget Look up stuff in a DataSource. It will take the first IEntity in a source and look up properties/attributes in that. Normally this is used in Queries, where you want to get a parameter from the In stream. LookUpInDictionary Look Up values from a .net dictionary. Case-Insensitive. Read more about this in LookUp System LookUpInEntity Get Values from an IEntity . Read more about this in LookUp System LookUpInLookUps This Value Provider chains two or more LookUps and tries one after another to deliver a result It's mainly used to override values which are given, by a special situation. Read more about this in LookUp System LookUpInMetadata LookUp things from metadata. This uses EAV Metadata system and will look up Metadata for something. As of now it's hardwired to look up Metadata of Entities. Read more about this in LookUp System LookUpInNameValueCollection Look-Up helper to get something from a standard .net NameValueCollection. Read more about this in LookUp System Interfaces ILookUp A key-value map which resolves keys like \"SortOrder\" to \"asc\". It's usually used to get pre-stored configuration or to get settings from the context. Read more about this in LookUp System ILookUpEngine Resolves Configurations from LookUps. Common use is for configurable DataSources ILookUpEngineResolver An object implementing this interface can provide an engine for the current context. It's important so that code can easily ask for the current engine, but that the real implementation is dependency-injected later on, as each environment (DNN, Nop, etc.) can provide different initial engines. Read more about this in LookUp System"
  },
  "api/dot-net/ToSic.Sxc.Blocks.html": {
    "href": "api/dot-net/ToSic.Sxc.Blocks.html",
    "title": "Namespace ToSic.Sxc.Blocks | 2sxc 13 / EAV 13",
    "keywords": "Namespace ToSic.Sxc.Blocks A unit of output it 2sxc is called a Block . In Dnn-Link, this can be like a Module , except that blocks can be inside other blocks. Looking at it from the Platform like Dnn, the entry object is an ICmsBlock which contains context information (in Dnns case, ModuleId etc.). Inside it is an IBlock which can itself contain more IBlocks. Note that each Block itself has Views IView and data specific to that block. Classes Render Block-Rendering system. It's responsible for taking a Block and delivering HTML for the output. It's used for InnerContent, so that Razor-Code can easily render additional content blocks. See also Inner Content (Content Within Other Content) Interfaces IBlock A unit / block of output in a CMS. IView Defines a view configuration which is loaded from an EntityBasedType . Enums Purpose These are the purposes of a block as it's being built. It can be built to generate a web-view, juts for indexing or possibly also for json publishing."
  },
  "api/dot-net/ToSic.Sxc.Engines.html": {
    "href": "api/dot-net/ToSic.Sxc.Engines.html",
    "title": "Namespace ToSic.Sxc.Engines | 2sxc 13 / EAV 13",
    "keywords": "Namespace ToSic.Sxc.Engines The Engines are the part of 2sxc that create output based on data. It's basically the part that takes a full configuration, consisting of... What App What View What Template What Data - could be from a query or from the instance ...and then generates an HTML using Razor or Tokens or whatever engine may come in future. Classes EngineBase The foundation for engines - must be inherited by other engines RazorEngine The razor engine, which compiles / runs engine templates TokenEngine Rendering Engine for Token based templates (html using [Content:Title] kind of placeholders. Interfaces IEngine The sub-system in charge of taking a configuration for an instance (aka Module) a template and using all that to produce an html-string for the browser."
  },
  "api/dot-net/ToSic.Eav.Caching.html": {
    "href": "api/dot-net/ToSic.Eav.Caching.html",
    "title": "Namespace ToSic.Eav.Caching | 2sxc 13 / EAV 13",
    "keywords": "Namespace ToSic.Eav.Caching Everything related to how the EAV caches stuff. Fairly internal tidbits, you probably won't need them. Classes AppsCache The default Apps Cache system running on a normal environment. AppsCacheBase The Apps Cache is the main cache for App States. This is just the abstract base implementation. The real cache must implement this and also provide platform specific adjustments so that the caching is in sync with the Environment. SynchronizedList<T> This is an IEnumerable which relies on an up-stream cache, which may change. That would require this IEnumerable to update what it delivers. SynchronizedObject<T> WIP 12.03 Interfaces IAppsCache Marks the objects which are responsible for caching AppState in memory. This is a very powerful system ensuring performance and more. ICacheDependent Marks something that is cache-dependent. Used for things that are themselves cached, but rely on an upstream cache. ICacheExpiring Marks objects which are cache-based, and which may contain obsolete cached data. ICacheKey Marks objects which can identify what cache it's for. For example, when parameters change what data is cached, then the cache-key can contain this parameter, so that a different cache is used based on changing parameters. ICacheKeyManager Generates cache-keys for certain objects and combines them with CacheKeys of parent-objects which this object relies on. ITimestamped Provides a time stamp when something was created / updated for caching."
  },
  "api/dot-net/ToSic.Sxc.Code.html": {
    "href": "api/dot-net/ToSic.Sxc.Code.html",
    "title": "Namespace ToSic.Sxc.Code | 2sxc 13 / EAV 13",
    "keywords": "Namespace ToSic.Sxc.Code Classes DynamicCode This is a base class for dynamic code which is compiled at runtime. It delegates all properties like App and methods like AsDynamic() to the parent item which initially caused it to be compiled. DynamicCode12 New base class for v12 Dynamic Code Adds new properties and methods, and doesn't keep old / legacy APIs DynamicCodeRoot Base class for any dynamic code root objects. Root objects are the ones compiled by 2sxc - like the RazorComponent or ApiController. If you create code for dynamic compilation, you'll always inherit from ToSic.Sxc.Dnn.DynamicCode. Note that other DynamicCode objects like RazorComponent or ApiController reference this object for all the interface methods of IDynamicCode . Interfaces ICreateInstance Marks objects - usually DynamicCode - which can create instances of other C# files. A special feature is that it must store a reference to the path it's in (provided by the compiler that created this instance). This is important, so that CreateInstance knows what path to start in. IDynamicCode Dynamic code files like Razor or WebApis. Supports many properties like App, etc. to ensure that the dynamic code has everything you need. Also provides many Conversions between IEntity and IDynamicEntity . Important for dynamic code files like Razor or WebApi. Note that there are many overloads to ensure that AsDynamic and AsEntity \"just work\" even if you give them the original data. IDynamicCode12 Interface for Dynamic Code with enhancements after v12. It extends IDynamicCode Dynamic Code is the API for files like Razor or WebApis. Supports many properties like App, etc. to ensure that the dynamic code has everything you need. Also provides many Conversions between IEntity and IDynamicEntity . Important for dynamic code files like Razor or WebApi. Note that there are many overloads to ensure that AsDynamic and AsEntity \"just work\" even if you give them the original data."
  },
  "api/dot-net/ToSic.Eav.Caching.AppsCache.html": {
    "href": "api/dot-net/ToSic.Eav.Caching.AppsCache.html",
    "title": "Class AppsCache | 2sxc 13 / EAV 13",
    "keywords": "Class AppsCache The default Apps Cache system running on a normal environment. Inheritance System.Object AppsCacheBase AppsCache Implements IAppsCache Inherited Members AppsCacheBase.Has(IAppIdentity) AppsCacheBase.Get(IServiceProvider, IAppIdentity) AppsCacheBase.Load(IServiceProvider, IAppIdentity, String) AppsCacheBase.Purge(IAppIdentity) AppsCacheBase.Update(IServiceProvider, IAppIdentity, IEnumerable<Int32>, ILog) Namespace : ToSic.Eav.Caching Assembly : ToSic.Eav.Core.dll Syntax [InternalApi_DoNotUse_MayChangeWithoutNotice(\"this is just fyi\")] public class AppsCache : AppsCacheBase, IAppsCache Methods | Improve this Doc View Source Get(String) Declaration protected override AppState Get(string key) Parameters Type Name Description System.String key Returns Type Description AppState Overrides ToSic.Eav.Caching.AppsCacheBase.Get(System.String) | Improve this Doc View Source Has(String) Declaration protected override bool Has(string cacheKey) Parameters Type Name Description System.String cacheKey Returns Type Description System.Boolean Overrides ToSic.Eav.Caching.AppsCacheBase.Has(System.String) | Improve this Doc View Source PurgeZones() Clean entire global cache, which includes the List of Zones and Apps as well as all the apps. Declaration public override void PurgeZones() Overrides AppsCacheBase.PurgeZones() | Improve this Doc View Source Remove(String) Declaration protected override void Remove(string key) Parameters Type Name Description System.String key Overrides ToSic.Eav.Caching.AppsCacheBase.Remove(System.String) | Improve this Doc View Source Set(String, AppState) Declaration protected override void Set(string key, AppState item) Parameters Type Name Description System.String key AppState item Overrides ToSic.Eav.Caching.AppsCacheBase.Set(System.String, ToSic.Eav.Apps.AppState) | Improve this Doc View Source Zones(IServiceProvider) Declaration public override IReadOnlyDictionary<int, Zone> Zones(IServiceProvider sp) Parameters Type Name Description System.IServiceProvider sp Returns Type Description System.Collections.Generic.IReadOnlyDictionary < System.Int32 , Zone > Overrides AppsCacheBase.Zones(IServiceProvider) Implements IAppsCache"
  },
  "api/dot-net/Custom.Hybrid.Code12.html": {
    "href": "api/dot-net/Custom.Hybrid.Code12.html",
    "title": "Class Code12 | 2sxc 13 / EAV 13",
    "keywords": "Class Code12 This is the base class for custom code (.cs) files in your Apps. By inheriting from this base class, you will automatically have the context like the App object etc. available. Inheritance System.Object HasLog DynamicCode DynamicCode12 Code12 Implements IWrapper < IDynamicCode > IDynamicCode12 IDynamicCode ICreateInstance ICompatibilityLevel IHasLog Inherited Members DynamicCode12.Convert DynamicCode12.Resources DynamicCode12.Settings DynamicCode12.DevTools DynamicCode.UnwrappedContents DynamicCode.GetContents() DynamicCode.App DynamicCode.Data DynamicCode.GetService<TService>() DynamicCode.Content DynamicCode.Header DynamicCode.Link DynamicCode.Edit DynamicCode.CreateInstancePath DynamicCode.CreateInstance(String, String, String, String, Boolean) DynamicCode.CmsContext DynamicCode.AsDynamic(String, String) DynamicCode.AsDynamic(IEntity) DynamicCode.AsDynamic(Object) DynamicCode.AsDynamic(Object[]) DynamicCode.AsEntity(Object) DynamicCode.AsList(Object) DynamicCode.CreateSource<T>(IDataStream) DynamicCode.CreateSource<T>(IDataSource, ILookUpEngine) DynamicCode.AsAdam(IDynamicEntity, String) DynamicCode.AsAdam(IEntity, String) HasLog.Log HasLog.InitLog(String, ILog, String) HasLog.InitLog(String, ILog, String, CodeRef) Namespace : Custom.Hybrid Assembly : ToSic.Sxc.dll Syntax [PublicApi_Stable_ForUseInYourCode] public abstract class Code12 : DynamicCode12, IWrapper<IDynamicCode>, IHasDynamicCodeRoot, INeedsDynamicCodeRoot, IDynamicCode12, IDynamicCode, ICreateInstance, ICompatibilityLevel, IHasLog Implements IWrapper<T> IDynamicCode12 IDynamicCode ICreateInstance ICompatibilityLevel IHasLog"
  },
  "api/dot-net/ToSic.Eav.DataSources.Queries.html": {
    "href": "api/dot-net/ToSic.Eav.DataSources.Queries.html",
    "title": "Namespace ToSic.Eav.DataSources.Queries | 2sxc 13 / EAV 13",
    "keywords": "Namespace ToSic.Eav.DataSources.Queries Query objects in the EAV contain a configuration how to wire up various Data-Sources to retrieve data. Users will usually construct them using the VisualQueryDesigner and the specifications of the query are then stored as Entity objects in the App. Most queries are then accessed either through Razor or C# code using App.Query[\"queryname\"] or directly using WebApi (if permissions allow this). History Introduced in 2sxc 06.00 Api features added in 2sxc 8.10 Classes Query Provides a data-source to a query, but won't assemble/compile the query unless accessed (lazy). QueryDefinition This contains the structure / definition of a query, which was originally stored in an IEntity QueryPartDefinition The configuration / definition of a query part. The QueryDefinition uses a bunch of these together to build a query. VisualQueryAttribute Custom Attribute for DataSources and use in the VisualQuery Designer. Will add information about help, configuration-content-types etc. Only DataSources which have this attribute will be listed in the designer-tool. Read more here: DataSource API: VisualQuery Attribute Structs Connection Represent a connection which connects two DataSources in a Query Interfaces IQuery Marks a special IDataSource which is a query. It has an underlying QueryDefinition and Params which can be modified by code before running the query. Enums DataSourceType Describes what a DataSource is for in the visual query (for logical grouping)"
  },
  "api/dot-net/ToSic.Eav.DataSources.html": {
    "href": "api/dot-net/ToSic.Eav.DataSources.html",
    "title": "Namespace ToSic.Eav.DataSources | 2sxc 13 / EAV 13",
    "keywords": "Namespace ToSic.Eav.DataSources DataSources are objects which deliver one or many DataStreams , which contain a bunch of content-items. They are then attached to each other (from one sources Out to another ones In ) creating a Query . Queries can be customized at will. The whole system is used to prepare/process data for views, WebApi or anything else. In most cases there will be a VisualQuery which connects all the parts automatically, but when you want to work with them programatically, here you'll find the API. Note We've hidden the constructors for all DataSource objects in these docs, because you should usually use the CreateSource<T>(...) command on the Razor template or WebApi, which will auto-configure things behind the scenes. Tip Read about DataSources here . It also explains how the configuration system works and how to create custom DataSources to deliver your data to EAV/2sxc. Classes App All the data inside an App. For example, it has a variable amount of Out-streams, one for each content-type in the app. AppRoot The App Root is the entry point for all data. It takes it's data from a hidden AppState Cache. It's implemented as a DataSource so that other DataSources can easily attach to it. This is also the object returned as the root in any query. AttributeFilter DataSource to only pass through configured AttributeNames - other attributes/properties are removed from the entities. AttributeRename DataSource to rename attributes. Will help to change internal field names to something which is more appropriate for your JS or whatever. Children Get Children Entities (child-relationships) of the Entities coming into this DataSource CsvDataSource DataSource for importing/reading CSV files. DataSourceBase The base class, which should always be inherited. Already implements things like Get One / Get many, Caching and a lot more. DataTable Provide Entities from a System.Data.DataTable. This is not meant for VisualQuery, but for code which pre-processes data in a DataTable and then wants to provide it as entities. EntityIdFilter A DataSource that filters Entities by Ids. Can handle multiple IDs if comma-separated. EntityTypeFilter Keep only entities of a specific content-type Error Internal DataSource to generate an error on purpose. This is to test / verify error handling in VisualQuery. See also VisualQuery 3: Debugging ExternalData Base DataSource class for providing data from external systems ItemFilterDuplicates A DataSource that removes duplicate items in a Stream. Often used after a StreamMerge. LanguageModeler Remodels multi-language values in own fields (like NameDe, NameEn) to single multi-language fields like Name Metadata Get Metadata (metadata Entities) of the Entities coming into this DataSource MetadataTargets Get Target Entities (metadata targets) of the Entities coming into this DataSource OwnerFilter Filter entities to show only these belonging to a specific user. Paging Do Paging to only return a limited amount of results + show how many such pages exist and which Page we are on. Parents Get Parent Entities (parent-relationships) of the Entities coming into this DataSource PassThrough A DataSource that forwards all In Connections. It's more for internal use. PublishingFilter Filter entities to show Drafts or only Published Entities QueryRun Run another query and provide the resulting data. The settings will provide the params for the inner query. RelationshipFilter Filter Entities by Value in a Related Entity. For example: Find all Books (desired Entity), whose Authors (related Entity) have a Country (Attribute) with 'Switzerland' (Value). SerializationConfiguration DataSource which changes how Streams will be serialized in the end. Shuffle Shuffle / Randomize the order of items in a Stream. Sql Provide Entities from a SQL Server StreamFallback A DataSource that returns the first stream which has content StreamMerge A DataSource that merges all streams on the In into one Out stream StreamPick A DataSource that returns a stream by the provided name. Usually this will be configured through [Params:SomeName] TreeModeler Use this to take imported data from elsewhere which is a table but would have a tree-like structure (folders, etc.). Tell it where/how the relationships are mapped, and it will create Entities that have navigable relationships for this. ValueFilter Return only Entities having a specific value in an Attribute/Property ValueSort Sort Entity by values in specified Attributes / Properties Interfaces IAppRoot Interface for the App Root - usually the very first node in any data-delivery or query. It's just like a normal IDataSource but will internally access the AppState from the IAppsCache . IConvertDataSource<T> Marks objects which can convert a DataSource to another format. This will always return some kind of dictionary with stream-names and the converted items as sub-lists. Usually used in serialization scenarios. IDataPartShared Shared properties of IDataSource and IDataTarget IDataSource Public interface for an Eav DataSource. All DataSource objects are based on this. IDataSourceConfiguration This helps a data source get configured. It manages all the properties which the data source will want to look up, as well as the LookUp engine which will perform the token resolution IDataStream Represents a DataStream object. This is a stream of IEntity objects, which has a source and a name. A stream can be read from, and it can be attached to upstream data-sources for further processing. IDataTarget Represents a data source that can be the recipient of Data. This basically means it has an In IDataStream"
  },
  "api/dot-net/ToSic.Sxc.Dnn.LookUp.html": {
    "href": "api/dot-net/ToSic.Sxc.Dnn.LookUp.html",
    "title": "Namespace ToSic.Sxc.Dnn.LookUp | 2sxc 13 / EAV 13",
    "keywords": "Namespace ToSic.Sxc.Dnn.LookUp This extends the abilities of ToSic.Eav.LookUp with more look-up objects for things that are either Dnn specific. For example, DnnLookUpEngineResolver retrieves all the LookUps relevant for the current module, to resolve Module:ModuleId etc. Classes DnnLookUpEngineResolver Retrieves the current engine for a specific module. Internally it asks DNN for the current Property-Access objects and prepares them for use in EAV. LookUpInDnnPropertyAccess Translator component which creates a LookUp object and internally accesses DNN PropertyAccess objects (which DNN uses for the same concept as LookUp)"
  },
  "api/dot-net/Custom.Dnn.Code12.html": {
    "href": "api/dot-net/Custom.Dnn.Code12.html",
    "title": "Class Code12 | 2sxc 13 / EAV 13",
    "keywords": "Class Code12 Base Class for Dynamic CSharp Classes in Dnn Class Custom.Dnn.Code12 for Dnn ‚ò¢Ô∏è This is the Dnn specific base class. It's the very same as Custom.Hybrid.Code12 except for the additional Dnn Property. Because of this, the documentation here only shows Dnn - for all other properties go to Custom.Hybrid.Code12 Tip If you don't need these special properties, we strongly suggest to move to the Hybrid implementation. Inheritance System.Object HasLog DynamicCode DynamicCode12 Code12 Implements IWrapper < IDynamicCode > IDynamicCode12 IDynamicCode ICreateInstance ICompatibilityLevel IHasLog IDnnDynamicCodeAdditions Inherited Members DynamicCode12.Convert DynamicCode12.Resources DynamicCode12.Settings DynamicCode12.DevTools DynamicCode.UnwrappedContents DynamicCode.GetContents() DynamicCode.App DynamicCode.Data DynamicCode.GetService<TService>() DynamicCode.Content DynamicCode.Header DynamicCode.Link DynamicCode.Edit DynamicCode.CreateInstancePath DynamicCode.CreateInstance(String, String, String, String, Boolean) DynamicCode.CmsContext DynamicCode.AsDynamic(String, String) DynamicCode.AsDynamic(IEntity) DynamicCode.AsDynamic(Object) DynamicCode.AsDynamic(Object[]) DynamicCode.AsEntity(Object) DynamicCode.AsList(Object) DynamicCode.CreateSource<T>(IDataStream) DynamicCode.CreateSource<T>(IDataSource, ILookUpEngine) DynamicCode.AsAdam(IDynamicEntity, String) DynamicCode.AsAdam(IEntity, String) HasLog.Log HasLog.InitLog(String, ILog, String) HasLog.InitLog(String, ILog, String, CodeRef) Namespace : Custom.Dnn Assembly : ToSic.Sxc.Dnn.Core.dll Syntax [PublicApi_Stable_ForUseInYourCode] public abstract class Code12 : DynamicCode12, IWrapper<IDynamicCode>, IHasDynamicCodeRoot, INeedsDynamicCodeRoot, IDynamicCode12, IDynamicCode, ICreateInstance, ICompatibilityLevel, IHasLog, IDnnDynamicCodeAdditions Properties | Improve this Doc View Source Dnn The DNN context. Declaration public IDnnContext Dnn { get; } Property Value Type Description IDnnContext The DNN context. Implements IWrapper<T> IDynamicCode12 IDynamicCode ICreateInstance ICompatibilityLevel IHasLog IDnnDynamicCodeAdditions"
  },
  "api/dot-net/ToSic.Eav.Caching.AppsCacheBase.html": {
    "href": "api/dot-net/ToSic.Eav.Caching.AppsCacheBase.html",
    "title": "Class AppsCacheBase | 2sxc 13 / EAV 13",
    "keywords": "Class AppsCacheBase The Apps Cache is the main cache for App States. This is just the abstract base implementation. The real cache must implement this and also provide platform specific adjustments so that the caching is in sync with the Environment. Inheritance System.Object AppsCacheBase AppsCache Implements IAppsCache Namespace : ToSic.Eav.Caching Assembly : ToSic.Eav.Core.dll Syntax [InternalApi_DoNotUse_MayChangeWithoutNotice(\"this is just fyi\")] public abstract class AppsCacheBase : IAppsCache Methods | Improve this Doc View Source Get(IServiceProvider, IAppIdentity) Retrieve an app from the cache Declaration public AppState Get(IServiceProvider sp, IAppIdentity app) Parameters Type Name Description System.IServiceProvider sp IAppIdentity app App identifier. Returns Type Description AppState The AppState of the app. | Improve this Doc View Source Has(IAppIdentity) Check if something is already in the cache Declaration public bool Has(IAppIdentity app) Parameters Type Name Description IAppIdentity app App identifier. Returns Type Description System.Boolean | Improve this Doc View Source Load(IServiceProvider, IAppIdentity, String) Load an app into cache, specifying the primary language. This is used in scenarios, where the primary language cannot be auto-detected, so it's set explicitly. Declaration public void Load(IServiceProvider sp, IAppIdentity app, string primaryLanguage) Parameters Type Name Description System.IServiceProvider sp IAppIdentity app App identifier. System.String primaryLanguage Primary language, lower case. | Improve this Doc View Source Purge(IAppIdentity) Clean cache for specific Zone and App Declaration public void Purge(IAppIdentity app) Parameters Type Name Description IAppIdentity app | Improve this Doc View Source PurgeZones() Clean entire global cache, which includes the List of Zones and Apps as well as all the apps. Declaration public abstract void PurgeZones() | Improve this Doc View Source Update(IServiceProvider, IAppIdentity, IEnumerable<Int32>, ILog) Tell the cache that an app has done a partial update. Only relevant for farm scenarios, where other nodes must be informed. Declaration public virtual AppState Update(IServiceProvider sp, IAppIdentity app, IEnumerable<int> entities, ILog log) Parameters Type Name Description System.IServiceProvider sp IAppIdentity app App identifier. System.Collections.Generic.IEnumerable < System.Int32 > entities List of entities which need to be updates. ILog log Log object to log what's happening. Returns Type Description AppState The updated AppState or null, if it wasn't in the cache so didn't need updating. | Improve this Doc View Source Zones(IServiceProvider) Declaration public abstract IReadOnlyDictionary<int, Zone> Zones(IServiceProvider sp) Parameters Type Name Description System.IServiceProvider sp Returns Type Description System.Collections.Generic.IReadOnlyDictionary < System.Int32 , Zone > Implements IAppsCache"
  },
  "api/dot-net/ToSic.Eav.Caching.IAppsCache.html": {
    "href": "api/dot-net/ToSic.Eav.Caching.IAppsCache.html",
    "title": "Interface IAppsCache | 2sxc 13 / EAV 13",
    "keywords": "Interface IAppsCache Marks the objects which are responsible for caching AppState in memory. This is a very powerful system ensuring performance and more. Namespace : ToSic.Eav.Caching Assembly : ToSic.Eav.Core.dll Syntax [InternalApi_DoNotUse_MayChangeWithoutNotice(\"this is just fyi\")] public interface IAppsCache Methods | Improve this Doc View Source Get(IServiceProvider, IAppIdentity) Retrieve an app from the cache Declaration AppState Get(IServiceProvider sp, IAppIdentity app) Parameters Type Name Description System.IServiceProvider sp IAppIdentity app App identifier. Returns Type Description AppState The AppState of the app. | Improve this Doc View Source Has(IAppIdentity) Check if something is already in the cache Declaration bool Has(IAppIdentity app) Parameters Type Name Description IAppIdentity app App identifier. Returns Type Description System.Boolean | Improve this Doc View Source Load(IServiceProvider, IAppIdentity, String) Load an app into cache, specifying the primary language. This is used in scenarios, where the primary language cannot be auto-detected, so it's set explicitly. Declaration void Load(IServiceProvider sp, IAppIdentity app, string primaryLanguage) Parameters Type Name Description System.IServiceProvider sp IAppIdentity app App identifier. System.String primaryLanguage Primary language, lower case. | Improve this Doc View Source Purge(IAppIdentity) Clean cache for specific Zone and App Declaration void Purge(IAppIdentity app) Parameters Type Name Description IAppIdentity app | Improve this Doc View Source PurgeZones() Clean entire global cache, which includes the List of Zones and Apps as well as all the apps. Declaration void PurgeZones() | Improve this Doc View Source Update(IServiceProvider, IAppIdentity, IEnumerable<Int32>, ILog) Tell the cache that an app has done a partial update. Only relevant for farm scenarios, where other nodes must be informed. Declaration AppState Update(IServiceProvider sp, IAppIdentity app, IEnumerable<int> entities, ILog log) Parameters Type Name Description System.IServiceProvider sp IAppIdentity app App identifier. System.Collections.Generic.IEnumerable < System.Int32 > entities List of entities which need to be updates. ILog log Log object to log what's happening. Returns Type Description AppState The updated AppState or null, if it wasn't in the cache so didn't need updating."
  },
  "api/dot-net/ToSic.Eav.DataSources.Caching.ListCache.html": {
    "href": "api/dot-net/ToSic.Eav.DataSources.Caching.ListCache.html",
    "title": "Class ListCache | 2sxc 13 / EAV 13",
    "keywords": "Class ListCache Responsible for caching lists / streams. Usually used in queries or sources which have an intensive loading or querying time. Inheritance System.Object HasLog ListCache Implements IHasLog IListCache Inherited Members HasLog.Log HasLog.InitLog(String, ILog, String) HasLog.InitLog(String, ILog, String, CodeRef) Namespace : ToSic.Eav.DataSources.Caching Assembly : ToSic.Eav.DataSources.dll Syntax [InternalApi_DoNotUse_MayChangeWithoutNotice(\"this is just fyi\")] public class ListCache : HasLog, IHasLog, IListCache Properties | Improve this Doc View Source DefaultDuration The time a list stays in the cache by default - default is 3600 = 1 hour. Is used in all Set commands where the default duration is needed. Declaration public int DefaultDuration { get; } Property Value Type Description System.Int32 Methods | Improve this Doc View Source Get(String) Get a list from the cache Declaration public ListCacheItem Get(string key) Parameters Type Name Description System.String key the identifier in the cache Returns Type Description ListCacheItem the cached list | Improve this Doc View Source Get(IDataStream) Get a list from the cache using a configured dataStream. The stream won't be queried, it serves as an identifier for the cache item. Declaration public ListCacheItem Get(IDataStream dataStream) Parameters Type Name Description IDataStream dataStream the data stream, which can provide it's cache-key Returns Type Description ListCacheItem the cached list | Improve this Doc View Source GetOrBuild(IDataStream, Func<IImmutableList<IEntity>>, Int32) Get cached item if available and valid, or rebuild cache using a mutual lock Declaration public ListCacheItem GetOrBuild(IDataStream stream, Func<IImmutableList<IEntity>> builderFunc, int durationInSeconds = 0) Parameters Type Name Description IDataStream stream The data stream on a data-source object System.Func < System.Collections.Immutable.IImmutableList < IEntity >> builderFunc a function which is only called if building is required System.Int32 durationInSeconds The cache validity duration in seconds. If 0 or omitted, default value will be used. Returns Type Description ListCacheItem The ListCacheItem - either from cache, or just created | Improve this Doc View Source Has(String) Check if it has this in the cache Declaration public bool Has(string key) Parameters Type Name Description System.String key the identifier in the cache Returns Type Description System.Boolean true if found | Improve this Doc View Source Has(IDataStream) Check if it has this in the cache Declaration public bool Has(IDataStream dataStream) Parameters Type Name Description IDataStream dataStream the data stream, which can provide it's cache-key Returns Type Description System.Boolean true if found | Improve this Doc View Source Remove(String) Remove an item from the list-cache using the string-key Declaration public void Remove(string key) Parameters Type Name Description System.String key the identifier in the cache | Improve this Doc View Source Remove(IDataStream) Remove an item from the list cache using a data-stream key Declaration public void Remove(IDataStream dataStream) Parameters Type Name Description IDataStream dataStream the data stream, which can provide it's cache-key | Improve this Doc View Source Set(String, IImmutableList<IEntity>, Int64, Int32, Boolean) Add an item to the list-cache Declaration public void Set(string key, IImmutableList<IEntity> list, long sourceTimestamp, int durationInSeconds = 0, bool slidingExpiration = true) Parameters Type Name Description System.String key cache key System.Collections.Immutable.IImmutableList < IEntity > list items to put into the cache for this cache key System.Int64 sourceTimestamp System.Int32 durationInSeconds The cache validity duration in seconds. If 0 or omitted, default value will be used. System.Boolean slidingExpiration | Improve this Doc View Source Set(IDataStream, Int32, Boolean) Add an item to the list-cache Declaration public void Set(IDataStream dataStream, int durationInSeconds = 0, bool slidingExpiration = true) Parameters Type Name Description IDataStream dataStream the data stream, which can provide it's cache-key System.Int32 durationInSeconds The cache validity duration in seconds. If 0 or omitted, default value will be used. System.Boolean slidingExpiration Implements IHasLog IListCache"
  },
  "abyss/releases/history/v09/index.html": {
    "href": "abyss/releases/history/v09/index.html",
    "title": "All Changes in EAV and 2sxc v9 | 2sxc 13 / EAV 13",
    "keywords": "All Changes in EAV and 2sxc v9 Version 9 Changes Version 9.0 [x] Change data access to Entity Framework Core 1.1 [x] Change IoC Layer to use .net Core mechanisms [x] Replace Quick-Dialogs with Angular4 implementation Changes Version 9.1 [x] Move primary quick-dialog GUI to bottom of page Changes Version 9.3 [x] Item-Level versioning, history and rollback Changes Version 9.4 [x] Drop all dependencies to Telerik - file browser using ADAM Changes Version 9.5 [x] Support for Dnn/Evoq Page Publishing Changes Version 9.6 [x] Extensive logging system to watch all internals Changes Version 9.7 - the JSON-Content-Types & Entities Upgrade [x] New features in entity json serialization [x] Support for schema-free (very dynamic) entities [x] new features in content-type json serialization [x] defined json format for content-types [x] full serialization and deserialization of json-based content types [x] SQL IRepository storage enhancements [x] extended SQL table Entities to also store AppId and ContentType (name) to ensure that json-entities can be stored [x] Support to persist entities as JSON in repository (DB) [x] file-storage implementation of IRepository loader, to created a standard-based app-content-types provider [x] Ability to provide file-based json content-types at a system level, which is probably the better solution for most scenarios (more flexible, easier to spot changes, etc.) [x] global content-types system [x] Support for code-provided content-types, which allows faster feature-evolution [x] Support for JSON based i18n on code-provided content-types, to allow better translation removed again, as not needed [x] Ensure export/import of data of these new content-types (req. extensive refactoring) [x] extensive automated testing of these new features Changes Version 9.8 - the VisualQuery Upgrade [x] SqlDataSource in VisualQuery Designer [x] Show DataSources which have Fallback-In-Streams in VisualQuery Designer [x] UI Updates on VisualQuery Designer, to better fit current needs [x] More help documentation for various data sources in VisualQuery Designer [x] Shuffle DataSource now configurable in VisualQuery [x] Support for Schema-Free Content (dynamic, without existing content-type) Changes Version 9.9 - another VisualQuery Upgrade [x] Enhance relationship filter to enable filtering on other fields of related items [x] Enhance other data sources with features which so far were not available in the visual designer Changes Version 9.10 - Combobox and more DataSources (WIP) [x] Combobox input type allowing a dropdown with values , but also allowing manual typing (to select pre-defined values, but also use Tokens) [x] StreamMerge DataSource [x] ItemFilterDuplicates DataSource [x] feature to export Json ContentTypes [x] multiple file-repos which deliver Content-Types, allows for any module to provide additional contenttypes Changes Version 9.11 - Query-Picker & more DataSources [x] Entity-Picker delivering items from a query, instead of a type [x] string-dropdown-query to pick string-items from a query instead of pre-filled [x] query export / import [x] multi-select items in a string-query-picker Changes Version 9.12 [x] Json-based global query definitions [x] Method to add parameters to a called query (like when using an entity-pickers which uses a query) [x] pre-build queries for things like zones, apps, content-types, fields, query-info etc. [x] data sources for Zones, Apps, Queries, Attributes, etc. [x] limit streams returned by a query Changes Version 9.13 [x] Enhanced API to create custom DataSources + ca. 10 blog posts for that [x] Standalone FnL / UDT DataSource (removed it from core distribution) Changes Version 9.14 LTS [x] New LTS Concept - see blog post about LTS 9.14 Changes Version 9.15-9.42 LTS Didn't have time to document this yet, sorry. If you need to know, best check the git-history. Breaking Changes in EAV and 2sxc Version 9 We try to minimize breaking changes, and most breaking changes won't affect your work, because it's internal API. We're documenting it here to ensure you know what happened, in case you still run into this. Version 9.20.00 (2018-03-04) Minor breaking change in ADAM properties, like Id instead of FolderID which was a leftover of Dnn naming. see full blog post Version 09.08.00 (2017-11-28) Minor breaking change List<IEntity> instead of Dictionary<int, IEntity> on the IDataSource see full blog post Version 09.03.00 (2017-10-08) Breaking change on inconsistent naming ToSic.Eav.IEntity instead of ToSic.Eav.Interfaces.IEntity . see full blog post"
  },
  "abyss/releases/history/v12/index.html": {
    "href": "abyss/releases/history/v12/index.html",
    "title": "All Changes in EAV and 2sxc v12 | 2sxc 13 / EAV 13",
    "keywords": "All Changes in EAV and 2sxc v12 Version 12 Changes Version 12.10 New Children DataSource New Parents DataSource New Metadata DataSource New MetadataTargets DataSource The StreamMerge DataSource got three new out-streams Distinct , And and Xor Moved IPageService from previously ToSic.Sxc.Web to ToSic.Sxc.Services but preserving compatibility with old code Moved IPageService from previously ToSic.Sxc.Web to ToSic.Sxc.Services but preserving compatibility with old code Breaking Change Version 12.10 Jquery is completely removed. This shouldn't affect your code, since all old code usually runs in DNN where jQuery is included by default. Changes Version 12.06 LTS No relevant changes Changes Version 12.05 Introduced IJsonService for json serialize/deserialize Introduced IConvertService for simple data-type conversion, also available on the Convert property of Razor12 and Api12 Introduced ILogService to log messages to the system (Dnn/Oqtane) Introduced IMailService to easily send mails cross-platform Introduced ISecureDataService to use encrypted settings Introduced IRenderService for inner-content rendering (Oqtane code must use this) Published ToSic.Eav.DataFormats.EavLight to better document simple eav data Published IConvertToEavLight as the new standard way to prepare entities for WebAPI serialization. This is meant to replace previous code using objects such as EntitiesToDictionary or DataToDictionary which are now marked as obsolete. New Razor12, Api12 and Code12 Classes now don't support old, obsolete APIs anymore Link.Image now also accepts parameters as a parameter Link.Image and Link.To always create safe urls now (spaces are encoded etc.) Link.To and Link.Image now have a parameter type which can be \"full\" to ensure domains are always added to links (for use in APIs generating RSS etc.) Update to RazorBlade v3.7 Edit.Toolbar now supports condition so that toolbars may or may not be created based on a true/false value Link.Image now also accepts a factor or aspectRatio which is a string like 1:2 or 3/4 AsDynamic(...) now also wraps anonymous objects in quite an amazing way Bugfix: lots of small ones Breaking Change Version 12.05 V12 adds new properties to Razor and WebAPI which could result in some surprises: Path , Convert , Settings , Resources and DevTools . Especially the new Path and Convert could clash with existing code which had @using System or @using System.IO so the code would just read Path.GetFileName(...) or something. Because of this, we only give the latest classes Custom.Dnn.Razor12 , Custom.Dnn.Code12 , Custom.Hybrid.Razor12 , Custom.Hybrid.Api12 etc. these properties. This means that previous base classes do not have these by design, and we encourage you to move to these latest base classes. Important: 2sxc 12.00 - 12.04 also had some of these properties on ToSic.Sxc.Dnn.RazorComponent as well as ToSic.Sxc.Dnn.ApiController . So if you were eager to use these properties but didn't change the base class, you were able to use it. To protect thousands of upgrade-scenarios we had to take them away from the old base classes. Sorry! Possible Breaking Changes We believe nothing broke, but it could be that some commands on EntitiesToDictionary or DataToDictionary were accidentally changed. Pls report so we can fix that. The Link.To(...) now returns safe URLs. This should not be an issue, but in rare cases post-processing of the string returned may expect spaces or something, which are now %20 We disabled old obsolete APIs on the new Razor12, Api12 and Code12 base classes. In case you were using this (not likely) you'll get an error telling you about this. Changes Version 12.04 incl 12.03 which was not officially released Settings Stack and Resources Stack added, and the Settings / Resources object now have this Global Settings.Images.xxx settings defined for Content, Screen, Lightbox and Section Global Settings.Resources.xxx defined for fancybox3, fancybox4, bootstrap4, bootstrap5 Link.Image API created to support predefined sizes/resize modes etc. Created feature where DynamicEntities can browse to sub-items using their identifier (used for Settings.Images.Content where Content is actually the title of a sub-entity) Added debug-feature for DynamicEntity get String-Dropdown inputs now have a value-key presets option (instead of the key-value which was flaky) and added support for escaping special characters #Oqtane 2.2 support added Introduced Monaco (VS-Code online) editor for beta-testing source-editing Breaking Change Version 12.04 DynamicEntity now has a property Count because it's a list as well, this could cause issues if a content-type has a property Count DynamicEntity is now always a list. Because of this we removed the DynamicEntityWithList object. We believe the type is never referenced in user code, but if it is, this would be a breaking change. Many parts that prepare Entities returned a Dictionary<string, object> and now return an IDictionary<string, object> . We believe this shouldn't hurt much, since the result would usually be in a var or returend directly to the API for streaming, but in case someone had used explicitly typed code, this will require a minor change Changes Version 12.02 Formulas feature finalized DynamicEntityStack object created Hybrid IPageService created with Activate and similar features CmsContext was enhanced with View information Content-Type icons can now be stored in the app with an [App:Path]/image.jpg style reference Enabled view-configuration to configure search behavior incl. not-to-index or what streams should be indexed turnOn created / deployed #Oqtane 2.1 support added in 2sxc 12.02.01 Changes Version 12.00 Todo"
  },
  "abyss/releases/history/changes-all.html": {
    "href": "abyss/releases/history/changes-all.html",
    "title": "Changes Overview for 2sxc/EAV | 2sxc 13 / EAV 13",
    "keywords": "Changes Overview for 2sxc/EAV This page collects all the changes of all versions into one place, making it easier to search for certain keywords. üëâ if you only care about breaking, please check Breaking Changes Overview for 2sxc/EAV Version 1-7 (2012-2016) Didn't find time to document this :) Version 13 TODO New WebApi route app/auto/data to replace /app/auto/content - the old one will still work, but we won't document it any more, because it was a confusing name Lots of metadata stuff... TODO: New sxc.data and sxc.query Breaking Changes in 2sxc 13.00 API Changes that may affect you An old, non-DI feature for Inner Content is being deprecated and will be removed in v14 see instructions An old feature for publishing module InstanceData as JSON is removed see instructions An old feature to create DataSources is removed see instructions Two old data-conversion features DataToDictionary and EntitiesToDictionary were removed see instructions Some internal functionality which enabled IEntity objects to convert links containing file:... and page:... has been removed. This only affects special deep code calls on IEntity and does _not affect DynamicEntity objects in Razor see instructions The old feature Eav.Factory.Resolve<T>() was deprecated and will be removed in v14 see instructions The old feature BlockDataSource.Cache.GetContentType(...) was removed see instructions The Dnn Static ToSic.Sxc.Dnn.Factory is being deprecated and will be removed in v14 see instructions Major Updates with may affect you The Image Resizer is being replaced with ImageFlow The App containing Site-wide settings is changed to Primary - previously it used the Content app for this. We believe this won't affect many users, as the settings-stack is still very new in v12 Things which probably don't affect anybody SQL changes - minor updates to the Database .net Framework and Dll Updated to Match Dnn 9 Requirements - but still works in Dnn 7.4.2 .net Framework 4.7.2 now required (previously .net Framework 4.5.1) .net Standard 2.0.3 required (previously .net Standard 1.6) Important : This will be referenced in the web.config upon installation Dependency Injection updated to .net core 2.1.1 (previously 1.1) Newtonsoft.Json updated to v10.0.3 Entity Framework updated to 2.1.1 (previously 1.1) - Oqtane is unmodified and uses 3.1.4 Dnn DLLs renamed ToSic.Sxc.Dnn.dll became ToSic.Sxc.Dnn.Core.dll for consistency ToSic.SexyContent.WebApi.dll became ToSic.Sxc.Dnn.WebApi.dll ToSic.SexyContent.Razor.dll became ToSic.Sxc.Dnn.Razor.dll An internal object ToSic.Eav.Apps.State was removed Internal APIs which were removed Static ToSic.Eav.Data.Builder.AttribBuilder.AddValue(...) 13.01 JSON fields Link.Image with srcSet Parameter ? ToSic.Sxc.Services.IFeaturesService 13.02 JS Global Apps 13.03 TODO 13.04 TODO 13.05 Moved the Web.IInPageEditingHelper to Services.IEditService - this is non breaking and shouldn't matter, as people won't be using the direct inteface Moved the Web.ILinkHelper to Services.ILinkService - this is non breaking and shouldn't matter, as people won't be using the direct inteface Version 12 Changes Version 12.10 New Children DataSource New Parents DataSource New Metadata DataSource New MetadataTargets DataSource The StreamMerge DataSource got three new out-streams Distinct , And and Xor Moved IPageService from previously ToSic.Sxc.Web to ToSic.Sxc.Services but preserving compatibility with old code Moved IPageService from previously ToSic.Sxc.Web to ToSic.Sxc.Services but preserving compatibility with old code Breaking Change Version 12.10 Jquery is completely removed. This shouldn't affect your code, since all old code usually runs in DNN where jQuery is included by default. Changes Version 12.06 LTS No relevant changes Changes Version 12.05 Introduced IJsonService for json serialize/deserialize Introduced IConvertService for simple data-type conversion, also available on the Convert property of Razor12 and Api12 Introduced ILogService to log messages to the system (Dnn/Oqtane) Introduced IMailService to easily send mails cross-platform Introduced ISecureDataService to use encrypted settings Introduced IRenderService for inner-content rendering (Oqtane code must use this) Published ToSic.Eav.DataFormats.EavLight to better document simple eav data Published IConvertToEavLight as the new standard way to prepare entities for WebAPI serialization. This is meant to replace previous code using objects such as EntitiesToDictionary or DataToDictionary which are now marked as obsolete. New Razor12, Api12 and Code12 Classes now don't support old, obsolete APIs anymore Link.Image now also accepts parameters as a parameter Link.Image and Link.To always create safe urls now (spaces are encoded etc.) Link.To and Link.Image now have a parameter type which can be \"full\" to ensure domains are always added to links (for use in APIs generating RSS etc.) Update to RazorBlade v3.7 Edit.Toolbar now supports condition so that toolbars may or may not be created based on a true/false value Link.Image now also accepts a factor or aspectRatio which is a string like 1:2 or 3/4 AsDynamic(...) now also wraps anonymous objects in quite an amazing way Bugfix: lots of small ones Breaking Change Version 12.05 V12 adds new properties to Razor and WebAPI which could result in some surprises: Path , Convert , Settings , Resources and DevTools . Especially the new Path and Convert could clash with existing code which had @using System or @using System.IO so the code would just read Path.GetFileName(...) or something. Because of this, we only give the latest classes Custom.Dnn.Razor12 , Custom.Dnn.Code12 , Custom.Hybrid.Razor12 , Custom.Hybrid.Api12 etc. these properties. This means that previous base classes do not have these by design, and we encourage you to move to these latest base classes. Important: 2sxc 12.00 - 12.04 also had some of these properties on ToSic.Sxc.Dnn.RazorComponent as well as ToSic.Sxc.Dnn.ApiController . So if you were eager to use these properties but didn't change the base class, you were able to use it. To protect thousands of upgrade-scenarios we had to take them away from the old base classes. Sorry! Possible Breaking Changes We believe nothing broke, but it could be that some commands on EntitiesToDictionary or DataToDictionary were accidentally changed. Pls report so we can fix that. The Link.To(...) now returns safe URLs. This should not be an issue, but in rare cases post-processing of the string returned may expect spaces or something, which are now %20 We disabled old obsolete APIs on the new Razor12, Api12 and Code12 base classes. In case you were using this (not likely) you'll get an error telling you about this. Changes Version 12.04 incl 12.03 which was not officially released Settings Stack and Resources Stack added, and the Settings / Resources object now have this Global Settings.Images.xxx settings defined for Content, Screen, Lightbox and Section Global Settings.Resources.xxx defined for fancybox3, fancybox4, bootstrap4, bootstrap5 Link.Image API created to support predefined sizes/resize modes etc. Created feature where DynamicEntities can browse to sub-items using their identifier (used for Settings.Images.Content where Content is actually the title of a sub-entity) Added debug-feature for DynamicEntity get String-Dropdown inputs now have a value-key presets option (instead of the key-value which was flaky) and added support for escaping special characters #Oqtane 2.2 support added Introduced Monaco (VS-Code online) editor for beta-testing source-editing Breaking Change Version 12.04 DynamicEntity now has a property Count because it's a list as well, this could cause issues if a content-type has a property Count DynamicEntity is now always a list. Because of this we removed the DynamicEntityWithList object. We believe the type is never referenced in user code, but if it is, this would be a breaking change. Many parts that prepare Entities returned a Dictionary<string, object> and now return an IDictionary<string, object> . We believe this shouldn't hurt much, since the result would usually be in a var or returend directly to the API for streaming, but in case someone had used explicitly typed code, this will require a minor change Changes Version 12.02 Formulas feature finalized DynamicEntityStack object created Hybrid IPageService created with Activate and similar features CmsContext was enhanced with View information Content-Type icons can now be stored in the app with an [App:Path]/image.jpg style reference Enabled view-configuration to configure search behavior incl. not-to-index or what streams should be indexed turnOn created / deployed #Oqtane 2.1 support added in 2sxc 12.02.01 Changes Version 12.00 Todo Version 11 Changes Version 11.00 Breaking Changes The following changes are all super-low-profile, but we want to document them just to be through: DataStream and IDataStream loses a very old property called .LightList - we're pretty sure it's not in use anywhere, if you have it, just use .List instead. Enhancements Brand new Admin UI based on Angular 9 and Ivy with new Code-Editor, new VisualQuery and much more Razor CodeBehind Automatic Polymorphism Updated Razor Blades to 3.02 with the new Tags.SafeUrl(...) command Field: Boolean-Tristate which saves true/false/null App.Data.Create(...) now returns entities it just created Changes Version 11.01 Enhancements In-Page Toolbar now recognises sub-item lists and provides sorting and editing buttons #2009 Item-lists now have a button to add existing items to them #1278 New system to create extensions in an app, in the system folder Ability to create custom Input Fields just by placing them in the system folder #2070 Minor Improve Equality Check for DynamicEntities and EntitiesInList #2075 Data-table in admin UI now shows Title field no matter if there is another field which is the title #1639 Button to flush app-cache in admin-ui #2073 2sxc Insights now available from the super-user toolbar #2069 PT translations are added again #2064 Loads of enhancements and minor issues in the UI Changes Version 11.02 Enhancements App-Extensions system in the folder system Custom WebComponent based input fields #2082 API to reconfigure the wysiwyg input control #2090 Show view use with links to pages and more #2077 UI - fields can now be set to not-translate #2086 UI - boolean can now show different labels based on the value it has #2085 Minor Add HR language pack for editor #2087 show app-name in admin ui show app-icon in apps-management #2078 Changes Version 11.03 - todo Changes Version 11.04 - todo Changes Version 11.05 Old Edit UI be removed Old Admin-UI be removed APIs which only the old UIs used be removed Old helper JS for AngularJS apps (located in /js/angularjs ) will be removed from the distribution. They had not been updated for over 3 years and we believe they were not widely used. Anybody upgrading will still preserve the files that are there. If you really need them, download an old release of 2sxc and get them manually. Changes Version 11.06 - 11.11 - todo üëâ See the Project Issues Changes Version 11.13 VisualQuery 3 with a lot of new features Click on a stream shows what's in that stream Much better error handling to avoid queries from crashing if a stream has an error All internal DataSources were updated to use this new Error-Handling Output of Query is now tabbed which is much nicer to use Visual-Query only returns top 25 results by default to help with creating queries with large amounts of data UI was enhanced to show more user-friendly names/infos DynamicIn was introduced so DataSources can indicate that they expect a lot of In-streams UI enhanced with better/larger buttons/icons In Streams are now managed better so they can connect before it's known if the source Out actually has that stream New DataSource Error to provoke an error in a Query for testing New DataSource SerializationConfiguration lets you determine how things are serialized DataSource AttributeFilter enhanced to have keep-all or remove-all and multi-line configuration (easier) New DataSource Tutorial with updated sample code Insights-Logging was enhanced to log Exceptions (used in the VisualQuery Error handling) Bugfixes Toolbar had issue when color code was numbers only Changes Version 11.14 - 11.22 LTS TODO Breaking Changes in EAV and 2sxc v11 We try to minimize breaking changes, and most breaking changes won't affect your work, because it's internal API. We're documenting it here to ensure you know what happened, in case you still run into this. Summary There were small breaking changes in 11.00 to 11.11 but they were internal so shouldn't affect normal developers. Breaking Changes Version 11.07 - Drop the old edit UI In 11.07 the old edit UI was removed, so customizations for that UI would not be in effect any more. Breaking Changes Version 11.10 - Mainly Dependency Injection In v11.10 we used much more dependency injection than ever before and stopped using static values which were still in the API in many places. Because of this, certain helper objects to create entities or lookup values were changed and their constructors were changed. We invested a lot of time to try to ensure that old APIs still work, but in case you're hit by one of these, make sure you check the DI and switch to resolving the objects using DI. Breaking Changes Version 11.11 - Language Detection Previously the language detection used the Thread culture. Turns out this wasn't reliable because Dnn does some funny stuff (probably historical) which means that API-calls ended up using the language stored in some cookie instead of the one specified by the URL. We changed this, which should be more reliable. But if you were relying on this strange effect, then it may be a breaking change. Internally our tokens were also using the thread culture. When we changed this, we also had to change how tokens pick up the language. In rare cases this may affect you. We changed all tokens to always resolve boolean values to true / false (previously they would have been changed to the current language, like wahr for german). We believe this change is only an improvement, and should ensure that internal resolves in Queries etc. result in reliable output. Breaking Changes Version 11.11 - DataSources: DataSourceConfiguration Note that we also improved the DataSourceConfiguration to an interface IDataSourceConfiguration and documented this. As a side effect the API stays the same, but you will have to recompile your data sources for them to work again - sorry. Breaking Changes Version 11.11.03 - IEntity Values IEntity had a command called Value(fieldName) which was probably never used. The idea used to be that it does language lookup internally, but we refactored this out since it could never be fully reliable because the full language list wasn't known to the IEntity . So we re-purposed the method (assuming it's not used) to just lookup the first occurance of the value. This way it`s useful for configurations and similar which are not multi-language. IEntity also had a Value(fieldname, lookup) method. We are deprecating it, and making the lookup not happen from now on. We believe it was never used. IEntity had a command called PrimaryValue(fieldName) which was probably never ever used, so we're deprecating it. Use Value(fieldName) instead. Breaking Changes Version 11.11.03 - Other UI Toolbar dropped the button and command for item-history , as the history is now part of the edit dialog Version 10 Changes Version 10.01 - 10.09 LTS Develop and fine-tuning of the new Edit-UI based on Angular 8 Changes Version 10.20-00 to 10.20-05 Enhanced ListCache so it will prevent parallel buildup - important for long-loading DataSources like SharePoint DataSources Updating to RazorBlade 3.1 which doesn't need extension methods Changes Version 10.20-06 Created AsDynamic(string) Created AsDynamic(DataSource) to enable AsDynamic(Data) instead of AsDynamic(Data[\"Default\"]) Changes Version 10.21 New AsList() for better code New AsDynamic(string) to work with json /dist/ is now cleaned up on every update, to better distribute changing JS file structures Changes Version 10.22 Query Params added for VisualQuery Created QueryRun DataSource Insights now includes the code file and line numbers Insights now also measures time needed to execute some code Various performance enhancements Improved SoC for AppsCache and AppRoot DataSource Changes Version 10.23 Lots of logging enhancements Changes Version 10.24 LTS New stable LTS Improved/fixed QueryRun DataSource Improved Insights Enhancements to use 2sxc with Redis Cache WYSIWYG enhancements for better H1-Hx, P and Blockquote Performance enhancements Intenal refactoring for APIs Introduced an internal Compatibility-Level to disable very old features when using new RazorComponents Changes Version 10.25 LTS Changed how the $2sxc client JavaScripts are loaded for much better performance and better Google PageSpeed Enabled various features for the Content area which previously were hidden, like Resources and Settings Released brand new Content-Templates App with best-practices for 10.25 Fixed bugs with Evoq Page Publishing Enhanced the ValueFilter DataSource to handle dates which were null Changes Version 10.26 TinyMCE Updated to 5.1 Enhanced CreateInstance API to also work when compiling Razor files from a WebApi New DataSource StreamPick New automatic Param called [Params:ShowDrafts] to be used in VisualQuery - returns True or False New tokens [App:AppId] and [App:ZoneId] to use in VisualQuery calles (dropdown from query) Changed List-Caching bbehavior to create more reliable cache-keys for complex queries (previously it only went through Default streams to generate the cache-key) Changes Version 10.27 Possibly breaking changes Because the dynamic entity list now has a type which is dynamic, it cannot be cast to List<dynamic> any more. IList<dynamic> works, but in case you have any code casting it to List<dynamic> you'll need to change that to either IList<dynamic> or IEnumerable<dynamic> . New Features / Major Improvements Changed DynamicEntity so that accessing a property which contains many other entities it will return a DynamicEntityWithList . This allows Razor files to access the properties like .EntityId or .FirstName of the main entity in a sub-list easily without requiring AsList(...) #1993 Updated Quick-Dialog to use Angular 9, Ivy and the latest Dnn-Sxc-Angular #1992 New DataSource AttributeRename #2004 Completely refactored internal list management API #1995 Complete refactoring of the inpage code to make it typesafe (no more any types) Created brand-new, simpler way to create custom Toolbars and specs Introduces JS/API 2sxc-Insights for debugging In-Page code Enhancements Performance-Enhance App DataSource to delay building objects until needed #1991 Performance-Enhance internal Token Lookup #1998 Enhanced Dnn Search Index logging #1997 Corrected help-links on all data sources #1994 Bugfixes Cache-All-Streams only used the Default-Streams for Cache-Key identification #1988 QueryRun DataSource doesn't show statitics on all streams #1989 Modified date and Owner information were missing on json stored entities #2005 / #2006 Fixed bug in JS API for non-2sxc endpoint resolution #2000 Queries didn't resolve Dnn tokens when accessed in the Search Index #1999 Breaking Changes in EAV and 2sxc We try to minimize breaking changes, and most breaking changes won't affect your work, because it's internal API. We're documenting it here to ensure you know what happened, in case you still run into this. Summary Version 10 has a lot of small breaking changes because we restructured the internal API so it's consistent when we publish it. All these things shouldn't affect you, because they were internal APIs, but in case it does - here's what we did. Version 10.22 and 10.23 Renamed the RootDataSource and the Interface to IAppRoot Split SOC of the AppRoot DataSource so that caching, Root-Metadata and ListCache is fully separate Since the Logging system now auto-picks up the code lines and names of the methods, we simplified the commands and dropped some parameters. Moved quite a bit of the DataSource objects into sub-objects, again for SOC. Version 10.20-04 (ca. 2019-12-03) Renamed DataTableDataSource to DataTable , old name still works. Renamed ExternalDataDataSource to ExternalData , old name still works. Renamed ToSic.SexyContent.DataSources.ModuleDataSource to ToSic.Sxc.DataSources.CmsBlock , old name still works. Renamed ToSic.Eav.DataSources.VisualQuery.VisualQueryAttribute to ToSic.Eav.DataSources.Queries.VisualQueryAttribute , old name still works. Renamed ToSic.SexyContent.Environment.Dnn7.Factory to ToSic.Sxc.Dnn.Factory , old name still works. Renamed ToSic.Eav.DataSources.BaseDataSource to ToSic.Eav.DataSources.DataSourceBase for consistency, old name still works. Moved the LookUp namespaces into the Core DLL Version 10.20-02 (ca. 2019-11-22) More internal changes which shouldn't affect anybody, but make the API ready for public docs... Moved/renamed the internal Eav.AppDataPackage to Eav.Apps.AppState Moved/renamed some internal interfaces like Entity... Did a major change for how Attribute<T> for relationships work. Before they were Attribute<EntityRelationship> and now they are Attribute<IEnumerable<IEntity>> . This also affects Value<EntityRelationship> which is now Value<IEnumerable<IEntity>> Moved Tenant<T> and Container<T> including matching interfaces to Eav.Environment Renamed IAppIdentity to IInAppAndZone and IZoneIdentity to IInZone Renamed ICacheKeyProvider to ICacheKey Renamed CacheChainedIEnumerable<T> to SynchronizedList<T> Moved/Renamed MetadataFor to Eav.Metadata.Target . Left old name compatible. Moved some extension methods for IEntity from ToSic.Eav.Data.Query to ToSic.Eav.Data Changed Permissions to be strongly typed EntityBased objects Version 10.20.01 (2019-11-12) Internal code now uses the term Header instead of ListContent . External code provides both for backward-compatibility moved internal interfaces for engines (Razor/Token) to final namespaces ToSic.Sxc.Engines IEngine EngineBase ITokenEngine IRazorEngine corrected architecture - some template-management code had slipped into Eav.Apps , was moved back to Sxc.Apps The Template object was moved from Eav.Apps to Sxc.Views and we added an interface IView . We also renamed the internal properti ViewNameInUrl to UrlIdentifier . To correct the API a CmsManager was created extending the AppManager, which is in charge of Views Moving internal stuff related to content blocks IContentBlock from SexyContent.Interfaces to Sxc.Blocks from ToSic.SexyContent.ISxcInstance to ToSic.Sxc.Blocks.IBlockContext actually moved a lot of things there incl. ContentBlock now BlockConfiguration and more - all internal stuff Moving the ToSic.SexyContent.App to ToSic.Sxc.Apps.App In a razor page, we added the preferred Purpose . The old InstancePurpose will still work Placed some things we just moved in 10.20 to a final place - since it's a very recent change, we updated the docs in the 10.20.00 section Changed, but completely internal Some namespaces on SexyContent.ContentBlocks were moved to Sxc.Blocks Version 10.20.00 (2019-11-05) the internal interface IInPageEditingHelpers was moved from ToSic.SexyContent.Interfaces to the namespace ToSic.Sxc.Web the internal interface ILinkHelper was moved to ToSic.Sxc.Web the internal interface IHtmlHelper was moved to ToSic.Sxc.Dnn the property Configuration on dynamic entities was deprecated in 2sxc 4 and removed in 2sxc 10 - we don't think it was ever used moved internal Metadata interfaces (ca. 5) into final namespace ToSic.Eav.Metadata Moved a bunch of internal interfaces which we believe were never used externally from ToSic.Eav.Interfaces to ToSic.Eav.Data ToSic.Eav.Data.IAttribute ToSic.Eav.IAttribute<T> IAttributeBase IAttributeDefinition IChildEntities IContentType IDimension IEntityLight ILanguage IRelationshipManager IValue IValue<T> IValueOfDimension<T> Moved a bunch of internal interfaces which we believe were never used externally from ToSic.Eav.Apps.Interfaces to ToSic.Eav.Apps IApp IAppData IAppDataConfiguration IAppEnvironment IEnvironmentFactory IInstanceInfo IItemListAction IPagePublishing ITenant IZoneMapper the internal namespace ToSic.Eav.ValueProvider was changed to ToSic.Eav.LookUp and inside it we renamed a bunch of internal interfaces and objects which we believe were never used externally Deprecated/Changed, but not broken the internal interface ToSic.SexyContent.IAppAndDataHelpers was renamed to ToSic.Sxc.IDynamicCode but the old interface still exists, so it shouldn't break it was used by Mobius Forms moved ToSic.Eav.Interfaces.IEntity to ToSic.Eav.Data.IEntity - but preserved the old interface for compatibility it was used everywhere Clean-Up, but not broken We're transitioning to the term Header instead of ListContent in templates. The Razor pages and WebApi have this starting now, while old terms still work. Note that we're not creating a HeaderPresentation , because you should use Header.Presentation Version 9 Changes Version 9.0 [x] Change data access to Entity Framework Core 1.1 [x] Change IoC Layer to use .net Core mechanisms [x] Replace Quick-Dialogs with Angular4 implementation Changes Version 9.1 [x] Move primary quick-dialog GUI to bottom of page Changes Version 9.3 [x] Item-Level versioning, history and rollback Changes Version 9.4 [x] Drop all dependencies to Telerik - file browser using ADAM Changes Version 9.5 [x] Support for Dnn/Evoq Page Publishing Changes Version 9.6 [x] Extensive logging system to watch all internals Changes Version 9.7 - the JSON-Content-Types & Entities Upgrade [x] New features in entity json serialization [x] Support for schema-free (very dynamic) entities [x] new features in content-type json serialization [x] defined json format for content-types [x] full serialization and deserialization of json-based content types [x] SQL IRepository storage enhancements [x] extended SQL table Entities to also store AppId and ContentType (name) to ensure that json-entities can be stored [x] Support to persist entities as JSON in repository (DB) [x] file-storage implementation of IRepository loader, to created a standard-based app-content-types provider [x] Ability to provide file-based json content-types at a system level, which is probably the better solution for most scenarios (more flexible, easier to spot changes, etc.) [x] global content-types system [x] Support for code-provided content-types, which allows faster feature-evolution [x] Support for JSON based i18n on code-provided content-types, to allow better translation removed again, as not needed [x] Ensure export/import of data of these new content-types (req. extensive refactoring) [x] extensive automated testing of these new features Changes Version 9.8 - the VisualQuery Upgrade [x] SqlDataSource in VisualQuery Designer [x] Show DataSources which have Fallback-In-Streams in VisualQuery Designer [x] UI Updates on VisualQuery Designer, to better fit current needs [x] More help documentation for various data sources in VisualQuery Designer [x] Shuffle DataSource now configurable in VisualQuery [x] Support for Schema-Free Content (dynamic, without existing content-type) Changes Version 9.9 - another VisualQuery Upgrade [x] Enhance relationship filter to enable filtering on other fields of related items [x] Enhance other data sources with features which so far were not available in the visual designer Changes Version 9.10 - Combobox and more DataSources (WIP) [x] Combobox input type allowing a dropdown with values , but also allowing manual typing (to select pre-defined values, but also use Tokens) [x] StreamMerge DataSource [x] ItemFilterDuplicates DataSource [x] feature to export Json ContentTypes [x] multiple file-repos which deliver Content-Types, allows for any module to provide additional contenttypes Changes Version 9.11 - Query-Picker & more DataSources [x] Entity-Picker delivering items from a query, instead of a type [x] string-dropdown-query to pick string-items from a query instead of pre-filled [x] query export / import [x] multi-select items in a string-query-picker Changes Version 9.12 [x] Json-based global query definitions [x] Method to add parameters to a called query (like when using an entity-pickers which uses a query) [x] pre-build queries for things like zones, apps, content-types, fields, query-info etc. [x] data sources for Zones, Apps, Queries, Attributes, etc. [x] limit streams returned by a query Changes Version 9.13 [x] Enhanced API to create custom DataSources + ca. 10 blog posts for that [x] Standalone FnL / UDT DataSource (removed it from core distribution) Changes Version 9.14 LTS [x] New LTS Concept - see blog post about LTS 9.14 Changes Version 9.15-9.42 LTS Didn't have time to document this yet, sorry. If you need to know, best check the git-history. Breaking Changes in EAV and 2sxc Version 9 We try to minimize breaking changes, and most breaking changes won't affect your work, because it's internal API. We're documenting it here to ensure you know what happened, in case you still run into this. Version 9.20.00 (2018-03-04) Minor breaking change in ADAM properties, like Id instead of FolderID which was a leftover of Dnn naming. see full blog post Version 09.08.00 (2017-11-28) Minor breaking change List<IEntity> instead of Dictionary<int, IEntity> on the IDataSource see full blog post Version 09.03.00 (2017-10-08) Breaking change on inconsistent naming ToSic.Eav.IEntity instead of ToSic.Eav.Interfaces.IEntity . see full blog post Changes Version 8 Changes Version 8.00 - 8.8 Didn't find time to document this :) Changes Version 8.09 [x] Very Rich Content (Inner Content 2.0) [x] Item-Delete directly from in-page toolbar Changes Version 8.10 [x] Shuffle data sources (to randomize items) [x] Public (anonyomous) REST API for query and read/write content-items Changes Version 8.11-8.12 Mostly smaller bugfixes"
  },
  "abyss/releases/history/v11/index.html": {
    "href": "abyss/releases/history/v11/index.html",
    "title": "All Changes in EAV and 2sxc v11 | 2sxc 13 / EAV 13",
    "keywords": "All Changes in EAV and 2sxc v11 Version 11 Changes Version 11.00 Breaking Changes The following changes are all super-low-profile, but we want to document them just to be through: DataStream and IDataStream loses a very old property called .LightList - we're pretty sure it's not in use anywhere, if you have it, just use .List instead. Enhancements Brand new Admin UI based on Angular 9 and Ivy with new Code-Editor, new VisualQuery and much more Razor CodeBehind Automatic Polymorphism Updated Razor Blades to 3.02 with the new Tags.SafeUrl(...) command Field: Boolean-Tristate which saves true/false/null App.Data.Create(...) now returns entities it just created Changes Version 11.01 Enhancements In-Page Toolbar now recognises sub-item lists and provides sorting and editing buttons #2009 Item-lists now have a button to add existing items to them #1278 New system to create extensions in an app, in the system folder Ability to create custom Input Fields just by placing them in the system folder #2070 Minor Improve Equality Check for DynamicEntities and EntitiesInList #2075 Data-table in admin UI now shows Title field no matter if there is another field which is the title #1639 Button to flush app-cache in admin-ui #2073 2sxc Insights now available from the super-user toolbar #2069 PT translations are added again #2064 Loads of enhancements and minor issues in the UI Changes Version 11.02 Enhancements App-Extensions system in the folder system Custom WebComponent based input fields #2082 API to reconfigure the wysiwyg input control #2090 Show view use with links to pages and more #2077 UI - fields can now be set to not-translate #2086 UI - boolean can now show different labels based on the value it has #2085 Minor Add HR language pack for editor #2087 show app-name in admin ui show app-icon in apps-management #2078 Changes Version 11.03 - todo Changes Version 11.04 - todo Changes Version 11.05 Old Edit UI be removed Old Admin-UI be removed APIs which only the old UIs used be removed Old helper JS for AngularJS apps (located in /js/angularjs ) will be removed from the distribution. They had not been updated for over 3 years and we believe they were not widely used. Anybody upgrading will still preserve the files that are there. If you really need them, download an old release of 2sxc and get them manually. Changes Version 11.06 - 11.11 - todo üëâ See the Project Issues Changes Version 11.13 VisualQuery 3 with a lot of new features Click on a stream shows what's in that stream Much better error handling to avoid queries from crashing if a stream has an error All internal DataSources were updated to use this new Error-Handling Output of Query is now tabbed which is much nicer to use Visual-Query only returns top 25 results by default to help with creating queries with large amounts of data UI was enhanced to show more user-friendly names/infos DynamicIn was introduced so DataSources can indicate that they expect a lot of In-streams UI enhanced with better/larger buttons/icons In Streams are now managed better so they can connect before it's known if the source Out actually has that stream New DataSource Error to provoke an error in a Query for testing New DataSource SerializationConfiguration lets you determine how things are serialized DataSource AttributeFilter enhanced to have keep-all or remove-all and multi-line configuration (easier) New DataSource Tutorial with updated sample code Insights-Logging was enhanced to log Exceptions (used in the VisualQuery Error handling) Bugfixes Toolbar had issue when color code was numbers only Changes Version 11.14 - 11.22 LTS TODO Breaking Changes in EAV and 2sxc v11 We try to minimize breaking changes, and most breaking changes won't affect your work, because it's internal API. We're documenting it here to ensure you know what happened, in case you still run into this. Summary There were small breaking changes in 11.00 to 11.11 but they were internal so shouldn't affect normal developers. Breaking Changes Version 11.07 - Drop the old edit UI In 11.07 the old edit UI was removed, so customizations for that UI would not be in effect any more. Breaking Changes Version 11.10 - Mainly Dependency Injection In v11.10 we used much more dependency injection than ever before and stopped using static values which were still in the API in many places. Because of this, certain helper objects to create entities or lookup values were changed and their constructors were changed. We invested a lot of time to try to ensure that old APIs still work, but in case you're hit by one of these, make sure you check the DI and switch to resolving the objects using DI. Breaking Changes Version 11.11 - Language Detection Previously the language detection used the Thread culture. Turns out this wasn't reliable because Dnn does some funny stuff (probably historical) which means that API-calls ended up using the language stored in some cookie instead of the one specified by the URL. We changed this, which should be more reliable. But if you were relying on this strange effect, then it may be a breaking change. Internally our tokens were also using the thread culture. When we changed this, we also had to change how tokens pick up the language. In rare cases this may affect you. We changed all tokens to always resolve boolean values to true / false (previously they would have been changed to the current language, like wahr for german). We believe this change is only an improvement, and should ensure that internal resolves in Queries etc. result in reliable output. Breaking Changes Version 11.11 - DataSources: DataSourceConfiguration Note that we also improved the DataSourceConfiguration to an interface IDataSourceConfiguration and documented this. As a side effect the API stays the same, but you will have to recompile your data sources for them to work again - sorry. Breaking Changes Version 11.11.03 - IEntity Values IEntity had a command called Value(fieldName) which was probably never used. The idea used to be that it does language lookup internally, but we refactored this out since it could never be fully reliable because the full language list wasn't known to the IEntity . So we re-purposed the method (assuming it's not used) to just lookup the first occurance of the value. This way it`s useful for configurations and similar which are not multi-language. IEntity also had a Value(fieldname, lookup) method. We are deprecating it, and making the lookup not happen from now on. We believe it was never used. IEntity had a command called PrimaryValue(fieldName) which was probably never ever used, so we're deprecating it. Use Value(fieldName) instead. Breaking Changes Version 11.11.03 - Other UI Toolbar dropped the button and command for item-history , as the history is now part of the edit dialog"
  },
  "abyss/releases/history/v10/index.html": {
    "href": "abyss/releases/history/v10/index.html",
    "title": "All Changes in EAV and 2sxc v10 | 2sxc 13 / EAV 13",
    "keywords": "All Changes in EAV and 2sxc v10 Version 10 Changes Version 10.01 - 10.09 LTS Develop and fine-tuning of the new Edit-UI based on Angular 8 Changes Version 10.20-00 to 10.20-05 Enhanced ListCache so it will prevent parallel buildup - important for long-loading DataSources like SharePoint DataSources Updating to RazorBlade 3.1 which doesn't need extension methods Changes Version 10.20-06 Created AsDynamic(string) Created AsDynamic(DataSource) to enable AsDynamic(Data) instead of AsDynamic(Data[\"Default\"]) Changes Version 10.21 New AsList() for better code New AsDynamic(string) to work with json /dist/ is now cleaned up on every update, to better distribute changing JS file structures Changes Version 10.22 Query Params added for VisualQuery Created QueryRun DataSource Insights now includes the code file and line numbers Insights now also measures time needed to execute some code Various performance enhancements Improved SoC for AppsCache and AppRoot DataSource Changes Version 10.23 Lots of logging enhancements Changes Version 10.24 LTS New stable LTS Improved/fixed QueryRun DataSource Improved Insights Enhancements to use 2sxc with Redis Cache WYSIWYG enhancements for better H1-Hx, P and Blockquote Performance enhancements Intenal refactoring for APIs Introduced an internal Compatibility-Level to disable very old features when using new RazorComponents Changes Version 10.25 LTS Changed how the $2sxc client JavaScripts are loaded for much better performance and better Google PageSpeed Enabled various features for the Content area which previously were hidden, like Resources and Settings Released brand new Content-Templates App with best-practices for 10.25 Fixed bugs with Evoq Page Publishing Enhanced the ValueFilter DataSource to handle dates which were null Changes Version 10.26 TinyMCE Updated to 5.1 Enhanced CreateInstance API to also work when compiling Razor files from a WebApi New DataSource StreamPick New automatic Param called [Params:ShowDrafts] to be used in VisualQuery - returns True or False New tokens [App:AppId] and [App:ZoneId] to use in VisualQuery calles (dropdown from query) Changed List-Caching bbehavior to create more reliable cache-keys for complex queries (previously it only went through Default streams to generate the cache-key) Changes Version 10.27 Possibly breaking changes Because the dynamic entity list now has a type which is dynamic, it cannot be cast to List<dynamic> any more. IList<dynamic> works, but in case you have any code casting it to List<dynamic> you'll need to change that to either IList<dynamic> or IEnumerable<dynamic> . New Features / Major Improvements Changed DynamicEntity so that accessing a property which contains many other entities it will return a DynamicEntityWithList . This allows Razor files to access the properties like .EntityId or .FirstName of the main entity in a sub-list easily without requiring AsList(...) #1993 Updated Quick-Dialog to use Angular 9, Ivy and the latest Dnn-Sxc-Angular #1992 New DataSource AttributeRename #2004 Completely refactored internal list management API #1995 Complete refactoring of the inpage code to make it typesafe (no more any types) Created brand-new, simpler way to create custom Toolbars and specs Introduces JS/API 2sxc-Insights for debugging In-Page code Enhancements Performance-Enhance App DataSource to delay building objects until needed #1991 Performance-Enhance internal Token Lookup #1998 Enhanced Dnn Search Index logging #1997 Corrected help-links on all data sources #1994 Bugfixes Cache-All-Streams only used the Default-Streams for Cache-Key identification #1988 QueryRun DataSource doesn't show statitics on all streams #1989 Modified date and Owner information were missing on json stored entities #2005 / #2006 Fixed bug in JS API for non-2sxc endpoint resolution #2000 Queries didn't resolve Dnn tokens when accessed in the Search Index #1999 Breaking Changes in EAV and 2sxc We try to minimize breaking changes, and most breaking changes won't affect your work, because it's internal API. We're documenting it here to ensure you know what happened, in case you still run into this. Summary Version 10 has a lot of small breaking changes because we restructured the internal API so it's consistent when we publish it. All these things shouldn't affect you, because they were internal APIs, but in case it does - here's what we did. Version 10.22 and 10.23 Renamed the RootDataSource and the Interface to IAppRoot Split SOC of the AppRoot DataSource so that caching, Root-Metadata and ListCache is fully separate Since the Logging system now auto-picks up the code lines and names of the methods, we simplified the commands and dropped some parameters. Moved quite a bit of the DataSource objects into sub-objects, again for SOC. Version 10.20-04 (ca. 2019-12-03) Renamed DataTableDataSource to DataTable , old name still works. Renamed ExternalDataDataSource to ExternalData , old name still works. Renamed ToSic.SexyContent.DataSources.ModuleDataSource to ToSic.Sxc.DataSources.CmsBlock , old name still works. Renamed ToSic.Eav.DataSources.VisualQuery.VisualQueryAttribute to ToSic.Eav.DataSources.Queries.VisualQueryAttribute , old name still works. Renamed ToSic.SexyContent.Environment.Dnn7.Factory to ToSic.Sxc.Dnn.Factory , old name still works. Renamed ToSic.Eav.DataSources.BaseDataSource to ToSic.Eav.DataSources.DataSourceBase for consistency, old name still works. Moved the LookUp namespaces into the Core DLL Version 10.20-02 (ca. 2019-11-22) More internal changes which shouldn't affect anybody, but make the API ready for public docs... Moved/renamed the internal Eav.AppDataPackage to Eav.Apps.AppState Moved/renamed some internal interfaces like Entity... Did a major change for how Attribute<T> for relationships work. Before they were Attribute<EntityRelationship> and now they are Attribute<IEnumerable<IEntity>> . This also affects Value<EntityRelationship> which is now Value<IEnumerable<IEntity>> Moved Tenant<T> and Container<T> including matching interfaces to Eav.Environment Renamed IAppIdentity to IInAppAndZone and IZoneIdentity to IInZone Renamed ICacheKeyProvider to ICacheKey Renamed CacheChainedIEnumerable<T> to SynchronizedList<T> Moved/Renamed MetadataFor to Eav.Metadata.Target . Left old name compatible. Moved some extension methods for IEntity from ToSic.Eav.Data.Query to ToSic.Eav.Data Changed Permissions to be strongly typed EntityBased objects Version 10.20.01 (2019-11-12) Internal code now uses the term Header instead of ListContent . External code provides both for backward-compatibility moved internal interfaces for engines (Razor/Token) to final namespaces ToSic.Sxc.Engines IEngine EngineBase ITokenEngine IRazorEngine corrected architecture - some template-management code had slipped into Eav.Apps , was moved back to Sxc.Apps The Template object was moved from Eav.Apps to Sxc.Views and we added an interface IView . We also renamed the internal properti ViewNameInUrl to UrlIdentifier . To correct the API a CmsManager was created extending the AppManager, which is in charge of Views Moving internal stuff related to content blocks IContentBlock from SexyContent.Interfaces to Sxc.Blocks from ToSic.SexyContent.ISxcInstance to ToSic.Sxc.Blocks.IBlockContext actually moved a lot of things there incl. ContentBlock now BlockConfiguration and more - all internal stuff Moving the ToSic.SexyContent.App to ToSic.Sxc.Apps.App In a razor page, we added the preferred Purpose . The old InstancePurpose will still work Placed some things we just moved in 10.20 to a final place - since it's a very recent change, we updated the docs in the 10.20.00 section Changed, but completely internal Some namespaces on SexyContent.ContentBlocks were moved to Sxc.Blocks Version 10.20.00 (2019-11-05) the internal interface IInPageEditingHelpers was moved from ToSic.SexyContent.Interfaces to the namespace ToSic.Sxc.Web the internal interface ILinkHelper was moved to ToSic.Sxc.Web the internal interface IHtmlHelper was moved to ToSic.Sxc.Dnn the property Configuration on dynamic entities was deprecated in 2sxc 4 and removed in 2sxc 10 - we don't think it was ever used moved internal Metadata interfaces (ca. 5) into final namespace ToSic.Eav.Metadata Moved a bunch of internal interfaces which we believe were never used externally from ToSic.Eav.Interfaces to ToSic.Eav.Data ToSic.Eav.Data.IAttribute ToSic.Eav.IAttribute<T> IAttributeBase IAttributeDefinition IChildEntities IContentType IDimension IEntityLight ILanguage IRelationshipManager IValue IValue<T> IValueOfDimension<T> Moved a bunch of internal interfaces which we believe were never used externally from ToSic.Eav.Apps.Interfaces to ToSic.Eav.Apps IApp IAppData IAppDataConfiguration IAppEnvironment IEnvironmentFactory IInstanceInfo IItemListAction IPagePublishing ITenant IZoneMapper the internal namespace ToSic.Eav.ValueProvider was changed to ToSic.Eav.LookUp and inside it we renamed a bunch of internal interfaces and objects which we believe were never used externally Deprecated/Changed, but not broken the internal interface ToSic.SexyContent.IAppAndDataHelpers was renamed to ToSic.Sxc.IDynamicCode but the old interface still exists, so it shouldn't break it was used by Mobius Forms moved ToSic.Eav.Interfaces.IEntity to ToSic.Eav.Data.IEntity - but preserved the old interface for compatibility it was used everywhere Clean-Up, but not broken We're transitioning to the term Header instead of ListContent in templates. The Razor pages and WebApi have this starting now, while old terms still work. Note that we're not creating a HeaderPresentation , because you should use Header.Presentation"
  },
  "abyss/parts/look-up/lookup-in.html": {
    "href": "abyss/parts/look-up/lookup-in.html",
    "title": "In LookUp in Query Parameters | 2sxc 13 / EAV 13",
    "keywords": "In LookUp in Query Parameters <!-- Data Highlights --> <!-- ADAM --> <!-- Server --> <!-- Prepare --> <!-- Data Source --> <!-- Optimzers --> <!-- Process / Awesomize --> <!-- Libraries --> <!-- data formats --> <!-- Browser --> <!-- Frameworks --> <!-- App show parts --> <!-- Interact parts --> <!-- Edit parts --> <!-- Edit UI parts --> <!-- SPA parts --> <!-- Custom highlight boxes - can be controlled by in-page CSS --> you are here (click to zoom) - discover the stack .context-box-summary .lookup-sources { visibility: visible; } Data Sources in a query can retrieve values from another data-source which is a source. Use the [In:source-name:attribute-name] syntax. So if you have a Value DataSource which has the Default -in with the data to filter, and a Module -in comes from the Module Settings, you would write [In:Module:Category] to filter by the the category as selected in the module settings. Here's an example with the SQL DataSource: The SqlDataSource has a SQL statement with a [In:Mod:PortalId] token It's important that the connection containing the data is called Mod for this to work The data handed to it will contain the PortalId 1 And another example showing the older UI with the ValueSort DataSource: Read also VisualQuery Parameters VisualQuery: In Streams CmsBlock Parameters for the DataSources and the Query History In added in 2sxc 07.00"
  },
  "abyss/parts/look-up/lookup-params.html": {
    "href": "abyss/parts/look-up/lookup-params.html",
    "title": "Params LookUp in Query Parameters | 2sxc 13 / EAV 13",
    "keywords": "Params LookUp in Query Parameters <!-- Data Highlights --> <!-- ADAM --> <!-- Server --> <!-- Prepare --> <!-- Data Source --> <!-- Optimzers --> <!-- Process / Awesomize --> <!-- Libraries --> <!-- data formats --> <!-- Browser --> <!-- Frameworks --> <!-- App show parts --> <!-- Interact parts --> <!-- Edit parts --> <!-- Edit UI parts --> <!-- SPA parts --> <!-- Custom highlight boxes - can be controlled by in-page CSS --> you are here (click to zoom) - discover the stack .context-box-summary .lookup-sources { visibility: visible; } 2sxc 10.22 introduced a new parameter source called Params . With this you can write things like [Params:Sort] . The query now has a special LookUp for the source Params . This should help you make nicer, more flexible queries and also allow you to set these query parameters from C# code. Configure in VisualQuery This shows how to use Params in VisualQuery : Here's what you see in the image An Item ID Filter is being configured and it could directly use [QueryString:Id] but instead it uses the [Params:EntityId] The Query Parameters are configured to resolve EntityId as [QueryString:Id] For testing purposes the Test Parameters have a test-value for this When this is run during testing, it will use the test-parameters, and at runtime it will use the ?Id=... from the url. Note Your queries can also use params that you didn't configure - but they will return nothing unless you would set them in your C# code before you run the query. Tip We recommend to always use the Params for everything as it's simpler to see all the parameters your query depends on. So if you have a ValueFilter expecting a value from the url, we recommend that you Create a param FilterLastName=[QueryString:LastName] In your data-source configuration, use [Params:FilterLastName] Read also VisualQuery Parameters History Params added in 2sxc 10.22"
  },
  "abyss/releases/history/v09/_all09.html": {
    "href": "abyss/releases/history/v09/_all09.html",
    "title": "Version 9 | 2sxc 13 / EAV 13",
    "keywords": "Version 9 Changes Version 9.0 [x] Change data access to Entity Framework Core 1.1 [x] Change IoC Layer to use .net Core mechanisms [x] Replace Quick-Dialogs with Angular4 implementation Changes Version 9.1 [x] Move primary quick-dialog GUI to bottom of page Changes Version 9.3 [x] Item-Level versioning, history and rollback Changes Version 9.4 [x] Drop all dependencies to Telerik - file browser using ADAM Changes Version 9.5 [x] Support for Dnn/Evoq Page Publishing Changes Version 9.6 [x] Extensive logging system to watch all internals Changes Version 9.7 - the JSON-Content-Types & Entities Upgrade [x] New features in entity json serialization [x] Support for schema-free (very dynamic) entities [x] new features in content-type json serialization [x] defined json format for content-types [x] full serialization and deserialization of json-based content types [x] SQL IRepository storage enhancements [x] extended SQL table Entities to also store AppId and ContentType (name) to ensure that json-entities can be stored [x] Support to persist entities as JSON in repository (DB) [x] file-storage implementation of IRepository loader, to created a standard-based app-content-types provider [x] Ability to provide file-based json content-types at a system level, which is probably the better solution for most scenarios (more flexible, easier to spot changes, etc.) [x] global content-types system [x] Support for code-provided content-types, which allows faster feature-evolution [x] Support for JSON based i18n on code-provided content-types, to allow better translation removed again, as not needed [x] Ensure export/import of data of these new content-types (req. extensive refactoring) [x] extensive automated testing of these new features Changes Version 9.8 - the VisualQuery Upgrade [x] SqlDataSource in VisualQuery Designer [x] Show DataSources which have Fallback-In-Streams in VisualQuery Designer [x] UI Updates on VisualQuery Designer, to better fit current needs [x] More help documentation for various data sources in VisualQuery Designer [x] Shuffle DataSource now configurable in VisualQuery [x] Support for Schema-Free Content (dynamic, without existing content-type) Changes Version 9.9 - another VisualQuery Upgrade [x] Enhance relationship filter to enable filtering on other fields of related items [x] Enhance other data sources with features which so far were not available in the visual designer Changes Version 9.10 - Combobox and more DataSources (WIP) [x] Combobox input type allowing a dropdown with values , but also allowing manual typing (to select pre-defined values, but also use Tokens) [x] StreamMerge DataSource [x] ItemFilterDuplicates DataSource [x] feature to export Json ContentTypes [x] multiple file-repos which deliver Content-Types, allows for any module to provide additional contenttypes Changes Version 9.11 - Query-Picker & more DataSources [x] Entity-Picker delivering items from a query, instead of a type [x] string-dropdown-query to pick string-items from a query instead of pre-filled [x] query export / import [x] multi-select items in a string-query-picker Changes Version 9.12 [x] Json-based global query definitions [x] Method to add parameters to a called query (like when using an entity-pickers which uses a query) [x] pre-build queries for things like zones, apps, content-types, fields, query-info etc. [x] data sources for Zones, Apps, Queries, Attributes, etc. [x] limit streams returned by a query Changes Version 9.13 [x] Enhanced API to create custom DataSources + ca. 10 blog posts for that [x] Standalone FnL / UDT DataSource (removed it from core distribution) Changes Version 9.14 LTS [x] New LTS Concept - see blog post about LTS 9.14 Changes Version 9.15-9.42 LTS Didn't have time to document this yet, sorry. If you need to know, best check the git-history."
  },
  "abyss/releases/history/v12/_all12.html": {
    "href": "abyss/releases/history/v12/_all12.html",
    "title": "Version 12 | 2sxc 13 / EAV 13",
    "keywords": "Version 12 Changes Version 12.10 New Children DataSource New Parents DataSource New Metadata DataSource New MetadataTargets DataSource The StreamMerge DataSource got three new out-streams Distinct , And and Xor Moved IPageService from previously ToSic.Sxc.Web to ToSic.Sxc.Services but preserving compatibility with old code Moved IPageService from previously ToSic.Sxc.Web to ToSic.Sxc.Services but preserving compatibility with old code Breaking Change Version 12.10 Jquery is completely removed. This shouldn't affect your code, since all old code usually runs in DNN where jQuery is included by default. Changes Version 12.06 LTS No relevant changes Changes Version 12.05 Introduced IJsonService for json serialize/deserialize Introduced IConvertService for simple data-type conversion, also available on the Convert property of Razor12 and Api12 Introduced ILogService to log messages to the system (Dnn/Oqtane) Introduced IMailService to easily send mails cross-platform Introduced ISecureDataService to use encrypted settings Introduced IRenderService for inner-content rendering (Oqtane code must use this) Published ToSic.Eav.DataFormats.EavLight to better document simple eav data Published IConvertToEavLight as the new standard way to prepare entities for WebAPI serialization. This is meant to replace previous code using objects such as EntitiesToDictionary or DataToDictionary which are now marked as obsolete. New Razor12, Api12 and Code12 Classes now don't support old, obsolete APIs anymore Link.Image now also accepts parameters as a parameter Link.Image and Link.To always create safe urls now (spaces are encoded etc.) Link.To and Link.Image now have a parameter type which can be \"full\" to ensure domains are always added to links (for use in APIs generating RSS etc.) Update to RazorBlade v3.7 Edit.Toolbar now supports condition so that toolbars may or may not be created based on a true/false value Link.Image now also accepts a factor or aspectRatio which is a string like 1:2 or 3/4 AsDynamic(...) now also wraps anonymous objects in quite an amazing way Bugfix: lots of small ones Breaking Change Version 12.05 V12 adds new properties to Razor and WebAPI which could result in some surprises: Path , Convert , Settings , Resources and DevTools . Especially the new Path and Convert could clash with existing code which had @using System or @using System.IO so the code would just read Path.GetFileName(...) or something. Because of this, we only give the latest classes Custom.Dnn.Razor12 , Custom.Dnn.Code12 , Custom.Hybrid.Razor12 , Custom.Hybrid.Api12 etc. these properties. This means that previous base classes do not have these by design, and we encourage you to move to these latest base classes. Important: 2sxc 12.00 - 12.04 also had some of these properties on ToSic.Sxc.Dnn.RazorComponent as well as ToSic.Sxc.Dnn.ApiController . So if you were eager to use these properties but didn't change the base class, you were able to use it. To protect thousands of upgrade-scenarios we had to take them away from the old base classes. Sorry! Possible Breaking Changes We believe nothing broke, but it could be that some commands on EntitiesToDictionary or DataToDictionary were accidentally changed. Pls report so we can fix that. The Link.To(...) now returns safe URLs. This should not be an issue, but in rare cases post-processing of the string returned may expect spaces or something, which are now %20 We disabled old obsolete APIs on the new Razor12, Api12 and Code12 base classes. In case you were using this (not likely) you'll get an error telling you about this. Changes Version 12.04 incl 12.03 which was not officially released Settings Stack and Resources Stack added, and the Settings / Resources object now have this Global Settings.Images.xxx settings defined for Content, Screen, Lightbox and Section Global Settings.Resources.xxx defined for fancybox3, fancybox4, bootstrap4, bootstrap5 Link.Image API created to support predefined sizes/resize modes etc. Created feature where DynamicEntities can browse to sub-items using their identifier (used for Settings.Images.Content where Content is actually the title of a sub-entity) Added debug-feature for DynamicEntity get String-Dropdown inputs now have a value-key presets option (instead of the key-value which was flaky) and added support for escaping special characters #Oqtane 2.2 support added Introduced Monaco (VS-Code online) editor for beta-testing source-editing Breaking Change Version 12.04 DynamicEntity now has a property Count because it's a list as well, this could cause issues if a content-type has a property Count DynamicEntity is now always a list. Because of this we removed the DynamicEntityWithList object. We believe the type is never referenced in user code, but if it is, this would be a breaking change. Many parts that prepare Entities returned a Dictionary<string, object> and now return an IDictionary<string, object> . We believe this shouldn't hurt much, since the result would usually be in a var or returend directly to the API for streaming, but in case someone had used explicitly typed code, this will require a minor change Changes Version 12.02 Formulas feature finalized DynamicEntityStack object created Hybrid IPageService created with Activate and similar features CmsContext was enhanced with View information Content-Type icons can now be stored in the app with an [App:Path]/image.jpg style reference Enabled view-configuration to configure search behavior incl. not-to-index or what streams should be indexed turnOn created / deployed #Oqtane 2.1 support added in 2sxc 12.02.01 Changes Version 12.00 Todo"
  },
  "basics/data/relationships/index.html": {
    "href": "basics/data/relationships/index.html",
    "title": "Entity Relationships | 2sxc 13 / EAV 13",
    "keywords": "Entity Relationships This explains Entity Relationships . For an overview check out Understanding Data... . Data can be related to other data, like when a Book belongs to a Category and also has an Author . Since all data-items are called Entities we call this Entity Relationships . Additionally, there are also Entities which explicitly enhance/describes another thing . That kind of relationship is called Metadata . How Entity-Relationships Work Each Entity has many fields, some containing text, numbers etc. but some can also point to another item. These kinds of fields are called Entity Fields . When configured correctly, an entity-field shows a dropdown of items. So in the case of a book, the Author field may show a dropdown of Person items. There are different types of relationships: 1:n means that one thing can refer to many other things - like a book which points to many categories n:1 means that many things can refer to one thing - like many books pointing to the same author n:n means that many things can refer to many things - like many blog-posts pointing to many tags (the blog can refer to many tags, and each tag may be pointed to by many blogs) 1:1 relationships are when one thing refers to one other thing, and neither are re-used again. This is not often used in CMSs. Relationships Preserve Item-Order Since 2sxc/EAV data is often used for Content-Management it's important to note that: Relationships preserve the Order of the Related Items. This means that an editor adding Author relationships to a Book can organize them in an order if he/she wishes to do this. The output template can then choose to either output these Authors in the order they were managed, or sort them by Title or other property if that would be more appropriate. Relationships are Cross-Language Values of Entities are multi-language, but relationships-connections apply to all languages. So the list of Authors is the same for all languages. Metadata Relationships This is a very different concept, where an Entity enriches something else. Read more about it in metadata . Advanced Topics Razor LINQ tutorial showing how to navigate between relationships RelationshipFilter Data Source to find items related to another item History Introduced in 2sxc 2.0"
  },
  "basics/prepare/index.html": {
    "href": "basics/prepare/index.html",
    "title": "Prepare Data for Templates and WebApi | 2sxc 13 / EAV 13",
    "keywords": "Prepare Data for Templates and WebApi <!-- Data Highlights --> <!-- ADAM --> <!-- Server --> <!-- Prepare --> <!-- Data Source --> <!-- Optimzers --> <!-- Process / Awesomize --> <!-- Libraries --> <!-- data formats --> <!-- Browser --> <!-- Frameworks --> <!-- App show parts --> <!-- Interact parts --> <!-- Edit parts --> <!-- Edit UI parts --> <!-- SPA parts --> <!-- Custom highlight boxes - can be controlled by in-page CSS --> you are here (click to zoom) - discover the stack .context-box-summary .prepare-all { visibility: visible; } A common Step in the data-flow is the Data Preparation before the View or Custom WebApi work with it. This is fully automated and has three common scenarios: No Prepare where no Data is used or at least no Instance Data Default where content added to a Module by an editor is retrieved and prepared Query where a custom VisualQuery is configured to get the data Note: A special case where data is prepared is when it's used for indexing in the full-text search. This is documented in Search . No Preparation Two cases need no preparation at all Templates / code which don't use any data Templates / code which use only general App data or Queries but not instance data In these cases the View is configured to not use data and the template or WebApi will either not use data or will only access it through the App.Data which has all data at it's disposal. Default Preparation: Instance Data By default all Module Instances can have data which the editor has added manually in the CMS UI. This corresponds to the normal Content Editing scenario. Internally it uses a Query which looks like this: This does the following (starting from the bottom): The ICache is an IAppRoot DataSource which hass all data of this App The PublishingFilter will then ensure that editors can see draft-data, and public users can only see published data The ModuleDataSource is a CmsBlock which will select all relevant data of this Module instance It then provides the retrieved data on a Stream Default (all the items) and Header (previously ListContent ) The Template or WebApi running for this Module Instance will then have this data Content or often @Content has the first item on the Default stream Header or ofter @Header has the first and only item on the ListContent stream Data will contain all the streams as configured in the above query, usually you will use Data[\"Default\"] to loop through lists of all the content items Note that the ModuleDataSource also does some more magic like Retrieve the Demo-Item as configured in the View, if no data exists (or a public user is looking at the page, and the data is still draft) Add more information like IsDemoItem to each piece of Information The Content App only has this kind of preparation. Customs Apps can also use this, but it can also be configured to use custom Queries (see below). Query Preparation If your View is configured to use a Query it will instead run this query. Note Note that your query can also extend the standard Query as mentioned above and provide both the normal edited content and add more streams as needed. Tip A common use case for Queries extending the default query is scenarios where the edited content provides parameters for the Query. For example, the Header of the News App could contain a property Category which the editor can choose. The rest of the Query could then use this category to filter what items are retrieved. Note about Accessing all App Data in your Code Your template / WebAPI can also always access all the data in the App using App.Data . You may Also want to Learn about Create queries using VisualQuery Prepare data in code Prepare data for the full-text search index of the platform Headless WebAPI DataSources Read more Queries Content App"
  },
  "basics/query/data-sources/index.html": {
    "href": "basics/query/data-sources/index.html",
    "title": "All DataSource Objects in 2sxc / EAV | 2sxc 13 / EAV 13",
    "keywords": "All DataSource Objects in 2sxc / EAV <!-- Data Highlights --> <!-- ADAM --> <!-- Server --> <!-- Prepare --> <!-- Data Source --> <!-- Optimzers --> <!-- Process / Awesomize --> <!-- Libraries --> <!-- data formats --> <!-- Browser --> <!-- Frameworks --> <!-- App show parts --> <!-- Interact parts --> <!-- Edit parts --> <!-- Edit UI parts --> <!-- SPA parts --> <!-- Custom highlight boxes - can be controlled by in-page CSS --> you are here (click to zoom) - discover the stack .context-box-summary .query { visibility: visible; } 2sxc provides a large set of DataSource objects which either get data from somewhere (SQL, CSV, ...) or modify data on the In and passing it to Out . This page will give you an overview and link you to further sources if you need to know more. All Public DataSources These are all the data sources which are either provided in the default installation of 2sxc. Data Source Purpose Description & Details App Get Data Provides each content-type on the out-stream AppRoot Get Data This is the root cache node per App AttributeFilter Modify Removes properties/attributes. AttributeRename Modify Renames properties/attributes. CacheAllStreams Caching Cache all streams passing through Children Get Data Get all related child enties v12.10 CmsBlock Get Data Current Module instance data ‚Ä¶ Will get the content-items assigned to a Dnn-Module. This is used internally on each view, but can also be used when using module-data to configure a query. CsvDataSource Get Data Get data from a CSV-file DataSourceBase (base) The base class for all DataSources DataTable Get Data Base class for coding using .net Tables EntityIdFilter Filter Get one or more items with specific Ids EntityTypeFilter Filter Get items of a specific content-type Error (internal) Generate an error for testing VisualQuery debug ExternalData (base) Base Class for external data DataSources ItemFilterDuplicates Logic Find and remove OR retrieve duplicate items LanguageModeler Modify Restructure imported data to be multi-language new in v11.20 OwnerFilter Filter Get items created by specific user Paging Logic Page through items Parents Get Data Get all related parent enties v12.10 PassThrough (internal) Do-Nothing DataSource mainly for testing PublishingFilter Filter Filters items the current user shouldn't see ‚Ä¶ This is part of the \"Unpublished-Data\" concept. Since each item could be either published or draft, this helps you show the correct ones for the current user based on his edit-rights. It's automatically in the default pipeline, unless you explicitly don't want it. Query (internal) Internal system to run Queries QueryRun Sub-Query Run another query and use results RelationshipFilter Filter Filter items with a specific relationship Serialization Configuration special Control created JSON content for security and optimization Shuffle Logic Shuffle/randomize item order Sql Get Data Get SQL data as entities ‚Ä¶ This lets you get data from any SQL data base. It also has powerful script-injection protection, so messy parameters won't hurt it. StreamFallback Logic Returns the first stream having data ‚Ä¶ Use this to choose from multiple in-streams which data to show. It will use all the in-streams sorted A-Z, and return the first stream which can deliver data. The remaining streams will not be queried. StreamMerge Logic Merge multiple streams into one StreamPick Logic Pick a stream by stream-name‚Ä¶ Use this to pick one of multiple in-streams by name. Often used together with the token [Params:ShowDrafts] TreeModeler Modify Restructure imported data to have tree-relationships new in v11.20 ValueFilter Filter Filters by value ValueSort Sort Sorts all items by values Dnn DataSources These are Dnn specific DataSources and won't work on Oqtane. Data Source Purpose Description & Details Dnn FormAndList Get Data Get data from the old FnL Use old FnL data in 2sxc ‚Ä¶ Will let you access Form-And-List aka UDT (Universal Data Table) data. Note that this DataSource is in external DLLs and has not been maintained, it probably doesn't work any more. DnnSql DataSource Get Data Get data from the Dnn Database DnnUserProfile Get Data Get Dnn Users and profiles Internal / System DataSources These data sources are used internally, like for selecting an App in an edit dialog. Data Source Purpose Description & Details Apps (system) Get all Apps in a Zone/Site Attributes (system) Get all Attributes of a Content-Type Block (system) Helper to correct data with Templates ContentTypes (system) Get all ContentTypes of an App QueryInfo (system) Provide debug info when creating Queries Zones (system) Get all Zones (Sites) in an installation Demo App and further links You should find some code examples in this demo App ... More links: Description of the feature on 2sxc docs History Introduced in 2sxc ??.??"
  },
  "net-code/data-sources/custom/configurable-datasource.html": {
    "href": "net-code/data-sources/custom/configurable-datasource.html",
    "title": "Configurable DataSource | 2sxc 13 / EAV 13",
    "keywords": "Configurable DataSource <!-- Data Highlights --> <!-- ADAM --> <!-- Server --> <!-- Prepare --> <!-- Data Source --> <!-- Optimzers --> <!-- Process / Awesomize --> <!-- Libraries --> <!-- data formats --> <!-- Browser --> <!-- Frameworks --> <!-- App show parts --> <!-- Interact parts --> <!-- Edit parts --> <!-- Edit UI parts --> <!-- SPA parts --> <!-- Custom highlight boxes - can be controlled by in-page CSS --> you are here (click to zoom) - discover the stack .context-box-summary .datasource-custom, .context-box-summary .query-params, .context-box-summary .data-configuration { visibility: visible; } Most Custom DataSources will want to provide a configuration UI to the editor. Here we'll explain how you must code your DataSource that it can be configurable. 1. Create Typed Properties For each piece of configuration your DataSource expects you should expose a normal property which will have that value. Internally it should get the data from the Configuration object which is an IDataSourceConfiguration . Here's an example from the ValueFilter : private const string AttrKey = \"Attribute\"; private const string OperatorKey = \"Operator\"; /// <summary> /// The attribute whose value will be scanned / filtered. /// </summary> public string Attribute { get => Configuration[AttrKey]; set => Configuration[AttrKey] = value; } /// <summary> /// The comparison operator, == by default, many possibilities exist /// depending on the original types we're comparing /// </summary> public string Operator { get => Configuration[OperatorKey]; set => Configuration[OperatorKey] = value; } Remember that if the type is not string, you'll have to add some type-checking and fallbacks, since the Configuration object only works with strings to handle Tokens. 2. Configure Where the Values come from in the Constructor public ValueFilter(ValueLanguages valLanguages) { Provide(GetValueFilterOrFallback); ConfigMask(AttrKey, \"[Settings:Attribute]\"); ConfigMask(FilterKey, \"[Settings:Value]\"); ConfigMask(OperatorKey, \"[Settings:Operator||==]\"); ConfigMask(TakeKey, \"[Settings:Take]\"); } Note that we're using the ConfigMask command and using the standard Token Syntax . The ConfigMask(...) will actually add the property to the Configuration manager which will later on fill in the tokens from values in the UI. Things to note in the example above: The Attribute property is going to come from the Settings The Operator property is also coming from the Settings but if it's not supplied, will do a fallback to == 3. Ensure Tokens are Replaced Before Use In your code which will generate the List of results, you must first call one important command: private IImmutableList<IEntity> GetValueFilter() { var opBefore = Operator; // would return \"[Settings:Operator||==]\" Configuration.Parse(); var opAfter = Operator; // now returns \"==\" // rest of the code to do what this DataSource must do } This will make sure that all tokens are parsed/converted in the list of values. Accessing the Operator property before calling this would give your code an unexpected [Settings:Operator||==] . After calling Configuration.Parse() the Operator property will give you == or whatever was configured in the settings. History General Tokens introduced in 2sxc 1.0 Most enhancements were in 2sxc 07.00 2sxc 10 and 11 changed the Configuration API to better separate the Configuration Manager"
  },
  "net-code/data-sources/custom/configuration-parse.html": {
    "href": "net-code/data-sources/custom/configuration-parse.html",
    "title": "DataSource Configuration: Configuration.Parse() | 2sxc 13 / EAV 13",
    "keywords": "DataSource Configuration: Configuration.Parse() <!-- Data Highlights --> <!-- ADAM --> <!-- Server --> <!-- Prepare --> <!-- Data Source --> <!-- Optimzers --> <!-- Process / Awesomize --> <!-- Libraries --> <!-- data formats --> <!-- Browser --> <!-- Frameworks --> <!-- App show parts --> <!-- Interact parts --> <!-- Edit parts --> <!-- Edit UI parts --> <!-- SPA parts --> <!-- Custom highlight boxes - can be controlled by in-page CSS --> you are here (click to zoom) - discover the stack .context-box-summary .datasource-custom, .context-box-summary .query-params, .context-box-summary .data-configuration { visibility: visible; } If a DataSource is configurable , then the code must parse any configuration tokens before accessing the values. This is done with Configuration.Parse() . It will cycle through all settings previously added by ConfigMask and resolve the tokens. How to use Configuration.Parse() Here's a simple example of the PublishingFilter DataSources : public PublishingFilter() { Provide(PublishingFilterList); ConfigMask(QueryConstants.ParamsShowDraftKey, \"[Settings:ShowDrafts||false]\"); } const string ParamsShowDraftKey = \"ShowDrafts\"; public bool ShowDrafts { get => bool.Parse(Configuration[ParamsShowDraftKey]); set => Configuration[ParamsShowDraftKey] = value.ToString(); } private IImmutableList<IEntity> PublishingFilterList() { var before = ShowDrafts; // here it's \"[Settings:ShowDrafts||false]\" which would fail Configuration.Parse(); var after = ShowDrafts; // here it's `false` (or `true` if user is editor) var outStreamName = ShowDrafts ? Constants.DraftsStreamName : Constants.PublishedStreamName; return In[outStreamName].Immutable; } If we would read the ShowDrafts property before running Configuration.Parse() then the tokens would not be resolved yet. After calling Configuration.Parse() all tokens/values have been resolved and it works as expected. Breaking Change This command used to be called EnsureConfigurationIsLoaded() but was changed in 2sxc 10 or 11. We didn't notice until the new API was already widespread in use that older systems still used the previous mechanism. Read also DataSource API - DataSource API overview Demo Code and further links Tutorial DataSource History Introduced in EAV 4.x, 2sxc 07.00 Modified from EnsureConfigurationIsLoaded to Configuration.Parse (breaking change, sorry) ca. 2sxc 11"
  },
  "api/dot-net/ToSic.Eav.DataSources.Shuffle.html": {
    "href": "api/dot-net/ToSic.Eav.DataSources.Shuffle.html",
    "title": "Class Shuffle | 2sxc 13 / EAV 13",
    "keywords": "Class Shuffle Shuffle / Randomize the order of items in a Stream. The Shuffle DataSource is part of the Standard EAV Data Sources . It will randomize the order of items which came in. This is common for components which show \"3 random quotes\" and similar scenarios. How to use with the VisualQuery When using the VisualQuery you can just drag it into your query. This is what it usually looks like: The above example shows: a content-type filter limiting the items to type Company a shuffle which only passes on 3 random companies Programming With The Shuffle DataSource We recommend to use the VisualQuery where possible, as it's easier to understand and is identical for C# and JavaScript. It's also better because it separates data-retrieval from visualization. Read also DataSource / DataStream List of all EAV Data Sources Query / VisualQuery Demo App and further links You should find some examples in this demo App Demo App with examples for most DataSources History Introduced in EAV 4.x, 2sxc ? <!-- note: this must be an H1 because of the automatic TOC in the code pages --> API Documentation Inheritance System.Object HasLog DataSourceBase Shuffle Implements IDataSource IAppIdentity IZoneIdentity IAppIdentityLight ICacheKey ICacheExpiring ITimestamped ICanPurgeListCache IHasLog IDataTarget IDataPartShared Inherited Members DataSourceBase.ErrorStream DataSourceBase.SetError(String, String, Exception) DataSourceBase.GetRequiredInList(IImmutableList<IEntity>) DataSourceBase.GetRequiredInList(String, IImmutableList<IEntity>) DataSourceBase.Name DataSourceBase.AppId DataSourceBase.ZoneId DataSourceBase.Guid DataSourceBase.Configuration DataSourceBase.DataBuilder DataSourceBase.CacheRelevantConfigurations DataSourceBase.ConfigMask(String, String, Boolean) DataSourceBase.CachePartialKey DataSourceBase.CacheFullKey DataSourceBase.CacheTimestamp DataSourceBase.CacheChanged(Int64) DataSourceBase.PurgeList(Boolean) DataSourceBase.In DataSourceBase.Out DataSourceBase.Item[String] DataSourceBase.GetStream(String, String, Boolean, Boolean) DataSourceBase.List DataSourceBase.Attach(IDataSource) DataSourceBase.Attach(String, IDataSource, String) DataSourceBase.Attach(String, IDataStream) HasLog.Log HasLog.InitLog(String, ILog, String) HasLog.InitLog(String, ILog, String, CodeRef) Namespace : ToSic.Eav.DataSources Assembly : ToSic.Eav.DataSources.dll Syntax [PublicApi_Stable_ForUseInYourCode] [VisualQuery(NiceName = \"Shuffle\", UiHint = \"Mix/randomize the order of items\", Icon = \"shuffle\", Type = DataSourceType.Sort, GlobalName = \"ToSic.Eav.DataSources.Shuffle, ToSic.Eav.DataSources\", DynamicOut = false, In = new string[]{\"Default*\"}, ExpectsDataOfType = \"38e7822b-1049-4539-bb3f-f99949b1b1d1\", HelpLink = \"https://r.2sxc.org/DsShuffle\")] public sealed class Shuffle : DataSourceBase, IDataSource, IAppIdentity, IZoneIdentity, IAppIdentityLight, ICacheInfo, ICacheKey, ICacheExpiring, ITimestamped, ICanPurgeListCache, IHasLog, IDataTarget, IDataPartShared Remarks Technically many things could just identify the app they belong to, and let the system look up the zone. But this would be inefficient, so for optimization, many items identify themselves with both the app and zone Ids Properties | Improve this Doc View Source Take Amount of items to take / return when shuffling. Defaults to 0. Declaration public int Take { get; set; } Property Value Type Description System.Int32 Implements IDataSource IAppIdentity IZoneIdentity IAppIdentityLight ICacheKey ICacheExpiring ITimestamped ICanPurgeListCache IHasLog IDataTarget IDataPartShared"
  },
  "api/dot-net/ToSic.Eav.DataSources.Paging.html": {
    "href": "api/dot-net/ToSic.Eav.DataSources.Paging.html",
    "title": "Class Paging | 2sxc 13 / EAV 13",
    "keywords": "Class Paging Do Paging to only return a limited amount of results + show how many such pages exist and which Page we are on. The Paging DataSource is part of the Standard EAV Data Sources . It will limit the items returned to a page containing just a few items, and will also provide a paging-information so that the UI knows what page it's on and how many pages remain. How to use with the VisualQuery When using the VisualQuery you can just drag it into your query. This is what it usually looks like: The above example shows: a content-type filter limiting the items to type Company a Paging which only passes on the first 3 companies of page 1 Using Url Parameters for Paging This example shows how you can use the Url Parameter to page through the results: ...you could also set the page size from other tokens like url or app-configuration, like this: Programming With The Paging DataSource We recommend to use the VisualQuery where possible, as it's easier to understand and is identical for C# and JavaScript. It's also better because it separates data-retrieval from visualization. Read also DataSource / DataStream List of all EAV Data Sources Query / VisualQuery Demo App and further links You should find some examples in this demo App Demo App with examples for most DataSources History Introduced in EAV 4.x, 2sxc ? <!-- note: this must be an H1 because of the automatic TOC in the code pages --> API Documentation Inheritance System.Object HasLog DataSourceBase Paging Implements IDataSource IAppIdentity IZoneIdentity IAppIdentityLight ICacheKey ICacheExpiring ITimestamped ICanPurgeListCache IHasLog IDataTarget IDataPartShared Inherited Members DataSourceBase.ErrorStream DataSourceBase.SetError(String, String, Exception) DataSourceBase.GetRequiredInList(IImmutableList<IEntity>) DataSourceBase.GetRequiredInList(String, IImmutableList<IEntity>) DataSourceBase.Name DataSourceBase.AppId DataSourceBase.ZoneId DataSourceBase.Guid DataSourceBase.Configuration DataSourceBase.DataBuilder DataSourceBase.CacheRelevantConfigurations DataSourceBase.ConfigMask(String, String, Boolean) DataSourceBase.CachePartialKey DataSourceBase.CacheFullKey DataSourceBase.CacheTimestamp DataSourceBase.CacheChanged(Int64) DataSourceBase.PurgeList(Boolean) DataSourceBase.In DataSourceBase.Out DataSourceBase.Item[String] DataSourceBase.GetStream(String, String, Boolean, Boolean) DataSourceBase.List DataSourceBase.Attach(IDataSource) DataSourceBase.Attach(String, IDataSource, String) DataSourceBase.Attach(String, IDataStream) HasLog.Log HasLog.InitLog(String, ILog, String) HasLog.InitLog(String, ILog, String, CodeRef) Namespace : ToSic.Eav.DataSources Assembly : ToSic.Eav.DataSources.dll Syntax [PublicApi_Stable_ForUseInYourCode] [VisualQuery(NiceName = \"Paging\", UiHint = \"Split data into pages and forward just one batch\", Icon = \"auto_stories\", Type = DataSourceType.Logic, GlobalName = \"ToSic.Eav.DataSources.Paging, ToSic.Eav.DataSources\", DynamicOut = false, In = new string[]{\"Default*\"}, ExpectsDataOfType = \"|Config ToSic.Eav.DataSources.Paging\", HelpLink = \"https://r.2sxc.org/DsPaging\")] public sealed class Paging : DataSourceBase, IDataSource, IAppIdentity, IZoneIdentity, IAppIdentityLight, ICacheInfo, ICacheKey, ICacheExpiring, ITimestamped, ICanPurgeListCache, IHasLog, IDataTarget, IDataPartShared Remarks Technically many things could just identify the app they belong to, and let the system look up the zone. But this would be inefficient, so for optimization, many items identify themselves with both the app and zone Ids Properties | Improve this Doc View Source PageNumber The Page number to show - defaults to 1 Declaration public int PageNumber { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source PageSize The Page size in the paging. Defaults to 10. Declaration public int PageSize { get; set; } Property Value Type Description System.Int32 Implements IDataSource IAppIdentity IZoneIdentity IAppIdentityLight ICacheKey ICacheExpiring ITimestamped ICanPurgeListCache IHasLog IDataTarget IDataPartShared"
  },
  "api/dot-net/ToSic.Eav.DataSources.MetadataTargets.html": {
    "href": "api/dot-net/ToSic.Eav.DataSources.MetadataTargets.html",
    "title": "Class MetadataTargets | 2sxc 13 / EAV 13",
    "keywords": "Class MetadataTargets Get Target Entities (metadata targets) of the Entities coming into this DataSource Inheritance System.Object HasLog DataSourceBase ToSic.Eav.DataSources.MetadataDataSourceBase MetadataTargets Implements IDataSource IAppIdentity IZoneIdentity IAppIdentityLight ICacheKey ICacheExpiring ITimestamped ICanPurgeListCache IHasLog IDataTarget IDataPartShared Inherited Members DataSourceBase.ErrorStream DataSourceBase.SetError(String, String, Exception) DataSourceBase.GetRequiredInList(IImmutableList<IEntity>) DataSourceBase.GetRequiredInList(String, IImmutableList<IEntity>) DataSourceBase.Name DataSourceBase.AppId DataSourceBase.ZoneId DataSourceBase.Guid DataSourceBase.Configuration DataSourceBase.DataBuilder DataSourceBase.CacheRelevantConfigurations DataSourceBase.ConfigMask(String, String, Boolean) DataSourceBase.CachePartialKey DataSourceBase.CacheFullKey DataSourceBase.CacheTimestamp DataSourceBase.CacheChanged(Int64) DataSourceBase.PurgeList(Boolean) DataSourceBase.In DataSourceBase.Out DataSourceBase.Item[String] DataSourceBase.GetStream(String, String, Boolean, Boolean) DataSourceBase.List DataSourceBase.Attach(IDataSource) DataSourceBase.Attach(String, IDataSource, String) DataSourceBase.Attach(String, IDataStream) HasLog.Log HasLog.InitLog(String, ILog, String) HasLog.InitLog(String, ILog, String, CodeRef) Namespace : ToSic.Eav.DataSources Assembly : ToSic.Eav.DataSources.dll Syntax [VisualQuery(NiceName = \"Metadata Targets\", UiHint = \"Get the item's targets (if they are metadata)\", Icon = \"loyalty\", Type = DataSourceType.Lookup, GlobalName = \"afaf73d9-775c-4932-aebd-23e898b1643e\", In = new string[]{\"Default*\"}, DynamicOut = false, ExpectsDataOfType = \"7dcd26eb-a70c-4a4f-bb3b-5bd5da304232\", HelpLink = \"https://r.2sxc.org/DsMetadataTargets\")] [InternalApi_DoNotUse_MayChangeWithoutNotice(\"WIP\")] public class MetadataTargets : MetadataDataSourceBase, IDataSource, IAppIdentity, IZoneIdentity, IAppIdentityLight, ICacheInfo, ICacheKey, ICacheExpiring, ITimestamped, ICanPurgeListCache, IHasLog, IDataTarget, IDataPartShared Remarks Added in v12.10 Constructors | Improve this Doc View Source MetadataTargets(IAppStates) Declaration public MetadataTargets(IAppStates appStates) Parameters Type Name Description ToSic.Eav.Apps.IAppStates appStates Fields | Improve this Doc View Source _appState Declaration public AppState _appState Field Value Type Description AppState Properties | Improve this Doc View Source ContentTypeName TODO Declaration public override string ContentTypeName { get; set; } Property Value Type Description System.String Overrides ToSic.Eav.DataSources.MetadataDataSourceBase.ContentTypeName | Improve this Doc View Source FilterDuplicates Declaration public bool FilterDuplicates { get; set; } Property Value Type Description System.Boolean Remarks Defaults to true Methods | Improve this Doc View Source SpecificGet(IImmutableList<IEntity>, String) Declaration protected override IEnumerable<IEntity> SpecificGet(IImmutableList<IEntity> originals, string typeName) Parameters Type Name Description System.Collections.Immutable.IImmutableList < IEntity > originals System.String typeName Returns Type Description System.Collections.Generic.IEnumerable < IEntity > Overrides ToSic.Eav.DataSources.MetadataDataSourceBase.SpecificGet(System.Collections.Immutable.IImmutableList<ToSic.Eav.Data.IEntity>, System.String) Implements IDataSource IAppIdentity IZoneIdentity IAppIdentityLight ICacheKey ICacheExpiring ITimestamped ICanPurgeListCache IHasLog IDataTarget IDataPartShared"
  },
  "api/dot-net/ToSic.Eav.DataSources.Sql.html": {
    "href": "api/dot-net/ToSic.Eav.DataSources.Sql.html",
    "title": "Class Sql | 2sxc 13 / EAV 13",
    "keywords": "Class Sql Provide Entities from a SQL Server The SqlDataSource DataSource is part of the Standard EAV Data Sources . It lets you use data from SQL databases as if they were entities. How to use with the VisualQuery When using the VisualQuery you can just drag it into your query. The Default out will contain the items from the DB: We recommend that you rename it so you know what it's for: You can then configure your connection to the DB and Query as you need it: Understanding the Settings Title & Notes This is just for your notes, to remind you what this is for and to put notes about anything you wanted to remember. Connection There are two ways to connect to SQL databases: using a Connection Name (which points to a detailed connection string in the web.config ) or using a detailed Connection String as you need it. We recommend to use connection names where possible. If you provide both, the connection name will be used: The SQL-Query The Query section has quite a lot of options, most of which are not required but are important for this to work: Here's what you need to know Content Type all entities must have a type-name - so you can just enter something here - in most cases the exact name isn't important, because you usually don't refer back to this, unless further processing will try to filter this or something EntityId and EntityTitle when using entities in 2sxc / EAV, each entity must be able to supply a title and an ID which is an integer. This is important for internal data processing to work. For this to work with SQL, the source needs to know what data-fields to use for this. By default it will use a field called EntityId and EntityTitle , but you can also use any other field - in which case you must supply the names in the following fields. Using URL Parameters in Queries The SQL DataSource can also use queries which use URL Parameters. It's safe and automatically prevent SQL Injection. For example, you can do the following: SELECT TOP (1000) PortalId as EntityId, HomeDirectory as EntityTitle,PortalID,ExpiryDate, AdministratorRoleId,GUID,HomeDirectory, CreatedOnDate,PortalGroupID FROM [Portals] Where PortalId = [QueryString:Id] This will automatically use the id parameter from the URL to filter the result. Using Another Entity As SQL Parameter You can of course use the In stream to provide entities which configure the SQL. The following example has a content-type SqlSetting with only one item (to make the example easier to understand). The App DataSource delivers this in the AppSetting stream, which also goes into the Sql as AppSetting and is then used as a token in the SQL: Using A Value from a Module-Instance as SQL Parameter This works like in the App-example: Provide the data from the ModuleDataSource as an In stream to the SqlDataSource, and use that to filter: Programming With The SqlDataSource DataSource We recommend to use the VisualQuery where possible, as it's easier to understand and is identical for C# and JavaScript. It's also better because it separates data-retrieval from visualization. An example code @{ var sql = CreateSource<ToSic.Eav.DataSources.Sql>(); sql.ConnectionString = \"SiteSqlServer\"; // use Dnn sql.SelectCommand = \"Select ... From\"; // your sql here } @foreach(var post in AsDynamic(sql[\"Default\"])) { <div>@post.EntityTitle</div> } Important When Coding Note that data sources only retrieve data once, and then ignore any further configuration. So you must set everything before accessing the data. Read also DataSource / DataStream List of all EAV Data Sources Query / VisualQuery Demo App and further links You should find some examples in this demo App Demo App with examples for most DataSources History Introduced in EAV 3.x, in 2sxc ? <!-- note: this must be an H1 because of the automatic TOC in the code pages --> API Documentation Inheritance System.Object HasLog DataSourceBase ExternalData Sql DnnSql Implements IDataSource IAppIdentity IZoneIdentity IAppIdentityLight ICacheKey ICacheExpiring ITimestamped ICanPurgeListCache IHasLog IDataTarget IDataPartShared Inherited Members ExternalData.CacheTimestamp DataSourceBase.ErrorStream DataSourceBase.SetError(String, String, Exception) DataSourceBase.GetRequiredInList(IImmutableList<IEntity>) DataSourceBase.GetRequiredInList(String, IImmutableList<IEntity>) DataSourceBase.Name DataSourceBase.AppId DataSourceBase.ZoneId DataSourceBase.Guid DataSourceBase.Configuration DataSourceBase.DataBuilder DataSourceBase.CacheRelevantConfigurations DataSourceBase.ConfigMask(String, String, Boolean) DataSourceBase.CachePartialKey DataSourceBase.CacheFullKey DataSourceBase.CacheChanged(Int64) DataSourceBase.PurgeList(Boolean) DataSourceBase.In DataSourceBase.Out DataSourceBase.Item[String] DataSourceBase.GetStream(String, String, Boolean, Boolean) DataSourceBase.List DataSourceBase.Attach(IDataSource) DataSourceBase.Attach(String, IDataSource, String) DataSourceBase.Attach(String, IDataStream) HasLog.Log HasLog.InitLog(String, ILog, String) HasLog.InitLog(String, ILog, String, CodeRef) Namespace : ToSic.Eav.DataSources Assembly : ToSic.Eav.DataSources.dll Syntax [PublicApi_Stable_ForUseInYourCode] [VisualQuery(NiceName = \"SQL Data\", UiHint = \"Get data from a database using SQL\", Icon = \"dynamic_form\", Type = DataSourceType.Source, GlobalName = \"ToSic.Eav.DataSources.Sql, ToSic.Eav.DataSources\", DynamicOut = false, ExpectsDataOfType = \"c76901b5-0345-4866-9fa3-6208de7f8543\", PreviousNames = new string[]{\"ToSic.Eav.DataSources.SqlDataSource, ToSic.Eav.DataSources\"}, HelpLink = \"https://r.2sxc.org/DsSql\")] public class Sql : ExternalData, IDataSource, IAppIdentity, IZoneIdentity, IAppIdentityLight, ICacheInfo, ICacheKey, ICacheExpiring, ITimestamped, ICanPurgeListCache, IHasLog, IDataTarget, IDataPartShared Remarks Technically many things could just identify the app they belong to, and let the system look up the zone. But this would be inefficient, so for optimization, many items identify themselves with both the app and zone Ids Fields | Improve this Doc View Source ErrorTitleForbiddenSql Declaration public const string ErrorTitleForbiddenSql = \"Forbidden SQL words\" Field Value Type Description System.String Properties | Improve this Doc View Source ConnectionString ConnectionString to the DB Declaration public string ConnectionString { get; set; } Property Value Type Description System.String | Improve this Doc View Source ConnectionStringName Name of the ConnectionString in the Application.Config to use Declaration public string ConnectionStringName { get; set; } Property Value Type Description System.String | Improve this Doc View Source ContentType Name of the ContentType which we'll pretend the items have. Declaration public string ContentType { get; set; } Property Value Type Description System.String | Improve this Doc View Source EntityIdField Name of the Column used as EntityId Declaration public string EntityIdField { get; set; } Property Value Type Description System.String | Improve this Doc View Source SelectCommand SQL Command for selecting data. Declaration public string SelectCommand { get; set; } Property Value Type Description System.String | Improve this Doc View Source TitleField Name of the Title Attribute of the Source DataTable Declaration public string TitleField { get; set; } Property Value Type Description System.String Implements IDataSource IAppIdentity IZoneIdentity IAppIdentityLight ICacheKey ICacheExpiring ITimestamped ICanPurgeListCache IHasLog IDataTarget IDataPartShared"
  },
  "api/dot-net/ToSic.Eav.DataSources.OwnerFilter.html": {
    "href": "api/dot-net/ToSic.Eav.DataSources.OwnerFilter.html",
    "title": "Class OwnerFilter | 2sxc 13 / EAV 13",
    "keywords": "Class OwnerFilter Filter entities to show only these belonging to a specific user. The OwnerFilter DataSource is part of the Standard EAV Data Sources . It will only let items pass through, which a specific user (often the current one) has created initially. You will typically use the OwnerFilter in scenarios where users create their own data, and should only see/edit items which they own (usually in combination with security settings, which only allow the owner to modify their own items). How to use with the VisualQuery When using the VisualQuery you can just drag it into your query. You must then edit the settings once - and usually you will use the recommended prefilled-form. But you can also do something different. This is what it usually looks like: The above example shows: a content-type filter limiting the items to type Company an owner-filter which receives 5 items, but only lets 3 pass, because the Test Settings have a demo-value of the user who only created 3 of the 5 items. Programming With The OwnerFilter DataSource We recommend to use the VisualQuery where possible, as it's easier to understand and is identical for C# and JavaScript. It's also better because it separates data-retrieval from visualization. Read also DataSource / DataStream List of all EAV Data Sources Query / VisualQuery Demo App and further links You should find some examples in this demo App Demo App with examples for most DataSources History Introduced in EAV 3.x, 2sxc ? <!-- note: this must be an H1 because of the automatic TOC in the code pages --> API Documentation Inheritance System.Object HasLog DataSourceBase OwnerFilter Implements IDataSource IAppIdentity IZoneIdentity IAppIdentityLight ICacheKey ICacheExpiring ITimestamped ICanPurgeListCache IHasLog IDataTarget IDataPartShared Inherited Members DataSourceBase.ErrorStream DataSourceBase.SetError(String, String, Exception) DataSourceBase.GetRequiredInList(IImmutableList<IEntity>) DataSourceBase.GetRequiredInList(String, IImmutableList<IEntity>) DataSourceBase.Name DataSourceBase.AppId DataSourceBase.ZoneId DataSourceBase.Guid DataSourceBase.Configuration DataSourceBase.DataBuilder DataSourceBase.CacheRelevantConfigurations DataSourceBase.ConfigMask(String, String, Boolean) DataSourceBase.CachePartialKey DataSourceBase.CacheFullKey DataSourceBase.CacheTimestamp DataSourceBase.CacheChanged(Int64) DataSourceBase.PurgeList(Boolean) DataSourceBase.In DataSourceBase.Out DataSourceBase.Item[String] DataSourceBase.GetStream(String, String, Boolean, Boolean) DataSourceBase.List DataSourceBase.Attach(IDataSource) DataSourceBase.Attach(String, IDataSource, String) DataSourceBase.Attach(String, IDataStream) HasLog.Log HasLog.InitLog(String, ILog, String) HasLog.InitLog(String, ILog, String, CodeRef) Namespace : ToSic.Eav.DataSources Assembly : ToSic.Eav.DataSources.dll Syntax [PublicApi_Stable_ForUseInYourCode] [VisualQuery(NiceName = \"Owner Filter\", UiHint = \"Keep only item created by a specified user\", Icon = \"attribution\", Type = DataSourceType.Security, GlobalName = \"ToSic.Eav.DataSources.OwnerFilter, ToSic.Eav.DataSources\", DynamicOut = false, In = new string[]{\"Default*\"}, ExpectsDataOfType = \"|Config ToSic.Eav.DataSources.OwnerFilter\", HelpLink = \"https://r.2sxc.org/DsOwnerFilter\")] public class OwnerFilter : DataSourceBase, IDataSource, IAppIdentity, IZoneIdentity, IAppIdentityLight, ICacheInfo, ICacheKey, ICacheExpiring, ITimestamped, ICanPurgeListCache, IHasLog, IDataTarget, IDataPartShared Remarks Technically many things could just identify the app they belong to, and let the system look up the zone. But this would be inefficient, so for optimization, many items identify themselves with both the app and zone Ids Properties | Improve this Doc View Source Identity The identity of the user to filter by. Uses the Identity-token convention like dnn:1 is the user #1 in the DNN DB Declaration public string Identity { get; set; } Property Value Type Description System.String Implements IDataSource IAppIdentity IZoneIdentity IAppIdentityLight ICacheKey ICacheExpiring ITimestamped ICanPurgeListCache IHasLog IDataTarget IDataPartShared"
  },
  "api/dot-net/ToSic.Eav.DataSources.LanguageModeler.html": {
    "href": "api/dot-net/ToSic.Eav.DataSources.LanguageModeler.html",
    "title": "Class LanguageModeler | 2sxc 13 / EAV 13",
    "keywords": "Class LanguageModeler Remodels multi-language values in own fields (like NameDe, NameEn) to single multi-language fields like Name Inheritance System.Object HasLog DataSourceBase LanguageModeler Implements IDataSource IAppIdentity IZoneIdentity IAppIdentityLight ICacheKey ICacheExpiring ITimestamped ICanPurgeListCache IHasLog IDataTarget IDataPartShared Inherited Members DataSourceBase.ErrorStream DataSourceBase.SetError(String, String, Exception) DataSourceBase.GetRequiredInList(IImmutableList<IEntity>) DataSourceBase.GetRequiredInList(String, IImmutableList<IEntity>) DataSourceBase.Name DataSourceBase.AppId DataSourceBase.ZoneId DataSourceBase.Guid DataSourceBase.Configuration DataSourceBase.DataBuilder DataSourceBase.CacheRelevantConfigurations DataSourceBase.ConfigMask(String, String, Boolean) DataSourceBase.CachePartialKey DataSourceBase.CacheFullKey DataSourceBase.CacheTimestamp DataSourceBase.CacheChanged(Int64) DataSourceBase.PurgeList(Boolean) DataSourceBase.In DataSourceBase.Out DataSourceBase.Item[String] DataSourceBase.GetStream(String, String, Boolean, Boolean) DataSourceBase.List DataSourceBase.Attach(IDataSource) DataSourceBase.Attach(String, IDataSource, String) DataSourceBase.Attach(String, IDataStream) HasLog.Log HasLog.InitLog(String, ILog, String) HasLog.InitLog(String, ILog, String, CodeRef) Namespace : ToSic.Eav.DataSources Assembly : ToSic.Eav.DataSources.dll Syntax [VisualQuery(GlobalName = \"f390e460-46ff-4a6e-883f-f50fdeb363ee\", NiceName = \"Language Modeler\", UiHint = \"Combine values to multi-language values\", Icon = \"translate\", PreviousNames = new string[]{\"f390e460-46ff-4a6e-883f-f50fdeb363ee\", \"ToSic.Eav.DataSources.FieldMapping, ToSic.Eav.DataSources.SharePoint\"}, Type = DataSourceType.Modify, ExpectsDataOfType = \"7b4fce73-9c29-4517-af14-0a704da5b958\", In = new string[]{\"Default*\"}, HelpLink = \"https://r.2sxc.org/DsLanguageModeler\")] [PublicApi(\"Brand new in v11.20, WIP, may still change a bit\")] public sealed class LanguageModeler : DataSourceBase, IDataSource, IAppIdentity, IZoneIdentity, IAppIdentityLight, ICacheInfo, ICacheKey, ICacheExpiring, ITimestamped, ICanPurgeListCache, IHasLog, IDataTarget, IDataPartShared Remarks New in v11.20 Properties | Improve this Doc View Source FieldMap Contains the field map which configures how fields should be connected. Declaration public string FieldMap { get; set; } Property Value Type Description System.String | Improve this Doc View Source LogId Declaration public override string LogId { get; } Property Value Type Description System.String Overrides ToSic.Eav.DataSources.DataSourceBase.LogId Implements IDataSource IAppIdentity IZoneIdentity IAppIdentityLight ICacheKey ICacheExpiring ITimestamped ICanPurgeListCache IHasLog IDataTarget IDataPartShared"
  },
  "api/dot-net/ToSic.Eav.DataSources.StreamPick.html": {
    "href": "api/dot-net/ToSic.Eav.DataSources.StreamPick.html",
    "title": "Class StreamPick | 2sxc 13 / EAV 13",
    "keywords": "Class StreamPick A DataSource that returns a stream by the provided name. Usually this will be configured through [Params:SomeName] The StreamPick DataSource is part of the Standard EAV Data Sources . It will pick a stream from In and pass that on to Out. How to use with the VisualQuery When using the VisualQuery you can just drag it into your query. This is what it usually looks like: In this screenshot you can see: The DataSource which we are configuring The stream called True The stream called False The configuration which will resolve a token to True or False and thereby pick the stream Programming With The StreamPick DataSource We recommend to use the VisualQuery where possible, as it's easier to understand and is identical for C# and JavaScript. It's also better because it separates data-retrieval from visualization. Read also DataSource / DataStream List of all EAV Data Sources Query / VisualQuery Demo App and further links You should find some examples in this demo App Demo App with examples for most DataSources History Introduced in EAV / 2sxc 10.26 <!-- note: this must be an H1 because of the automatic TOC in the code pages --> API Documentation Inheritance System.Object HasLog DataSourceBase StreamPick Implements IDataSource IAppIdentity IZoneIdentity IAppIdentityLight ICacheKey ICacheExpiring ITimestamped ICanPurgeListCache IHasLog IDataTarget IDataPartShared Inherited Members DataSourceBase.ErrorStream DataSourceBase.SetError(String, String, Exception) DataSourceBase.GetRequiredInList(IImmutableList<IEntity>) DataSourceBase.GetRequiredInList(String, IImmutableList<IEntity>) DataSourceBase.Name DataSourceBase.AppId DataSourceBase.ZoneId DataSourceBase.Guid DataSourceBase.Configuration DataSourceBase.DataBuilder DataSourceBase.CacheRelevantConfigurations DataSourceBase.ConfigMask(String, String, Boolean) DataSourceBase.CachePartialKey DataSourceBase.CacheFullKey DataSourceBase.CacheTimestamp DataSourceBase.CacheChanged(Int64) DataSourceBase.PurgeList(Boolean) DataSourceBase.In DataSourceBase.Out DataSourceBase.Item[String] DataSourceBase.GetStream(String, String, Boolean, Boolean) DataSourceBase.List DataSourceBase.Attach(IDataSource) DataSourceBase.Attach(String, IDataSource, String) DataSourceBase.Attach(String, IDataStream) HasLog.Log HasLog.InitLog(String, ILog, String) HasLog.InitLog(String, ILog, String, CodeRef) Namespace : ToSic.Eav.DataSources Assembly : ToSic.Eav.DataSources.dll Syntax [PublicApi_Stable_ForUseInYourCode] [VisualQuery(NiceName = \"Pick Stream\", UiHint = \"Choose a stream\", Icon = \"call_merge\", Type = DataSourceType.Logic, GlobalName = \"ToSic.Eav.DataSources.StreamPick, ToSic.Eav.DataSources\", ExpectsDataOfType = \"67b19864-df6d-400b-9f37-f41f1dd69c4a\", DynamicOut = false, DynamicIn = true, HelpLink = \"https://r.2sxc.org/DsStreamPick\")] public sealed class StreamPick : DataSourceBase, IDataSource, IAppIdentity, IZoneIdentity, IAppIdentityLight, ICacheInfo, ICacheKey, ICacheExpiring, ITimestamped, ICanPurgeListCache, IHasLog, IDataTarget, IDataPartShared Remarks Introduced in 10.26 Properties | Improve this Doc View Source StreamName The stream name to lookup. Declaration public string StreamName { get; set; } Property Value Type Description System.String | Improve this Doc View Source UseParentStreams The attribute whose value will be sorted by. Declaration public bool UseParentStreams { get; set; } Property Value Type Description System.Boolean Remarks This feature has not been fully implemented yet. The idea would be that it could access an \"App\" or similar and dynamically access streams from there This may also have a security risk, so don't finish till this is clarified Implements IDataSource IAppIdentity IZoneIdentity IAppIdentityLight ICacheKey ICacheExpiring ITimestamped ICanPurgeListCache IHasLog IDataTarget IDataPartShared"
  },
  "api/dot-net/ToSic.Eav.DataSources.SerializationConfiguration.html": {
    "href": "api/dot-net/ToSic.Eav.DataSources.SerializationConfiguration.html",
    "title": "Class SerializationConfiguration | 2sxc 13 / EAV 13",
    "keywords": "Class SerializationConfiguration DataSource which changes how Streams will be serialized in the end. Inheritance System.Object HasLog DataSourceBase SerializationConfiguration Implements IDataSource IAppIdentity IZoneIdentity IAppIdentityLight ICacheKey ICacheExpiring ITimestamped ICanPurgeListCache IHasLog IDataTarget IDataPartShared Inherited Members DataSourceBase.ErrorStream DataSourceBase.SetError(String, String, Exception) DataSourceBase.GetRequiredInList(IImmutableList<IEntity>) DataSourceBase.GetRequiredInList(String, IImmutableList<IEntity>) DataSourceBase.Name DataSourceBase.AppId DataSourceBase.ZoneId DataSourceBase.Guid DataSourceBase.Configuration DataSourceBase.DataBuilder DataSourceBase.CacheRelevantConfigurations DataSourceBase.ConfigMask(String, String, Boolean) DataSourceBase.CachePartialKey DataSourceBase.CacheFullKey DataSourceBase.CacheTimestamp DataSourceBase.CacheChanged(Int64) DataSourceBase.PurgeList(Boolean) DataSourceBase.In DataSourceBase.Item[String] DataSourceBase.GetStream(String, String, Boolean, Boolean) DataSourceBase.List DataSourceBase.Attach(IDataSource) DataSourceBase.Attach(String, IDataSource, String) DataSourceBase.Attach(String, IDataStream) HasLog.Log HasLog.InitLog(String, ILog, String) HasLog.InitLog(String, ILog, String, CodeRef) Namespace : ToSic.Eav.DataSources Assembly : ToSic.Eav.DataSources.dll Syntax [PublicApi_Stable_ForUseInYourCode] [VisualQuery(NiceName = \"Serialization Configuration\", UiHint = \"Determine how this data is Serialized\", Icon = \"settings_ethernet\", Type = DataSourceType.Modify, GlobalName = \"2952e680-4aaa-4a12-adf7-325cb2854358\", DynamicOut = true, In = new string[]{\"Default\"}, ExpectsDataOfType = \"5c84cd3f-f853-40b3-81cf-dee6a07dc411\", HelpLink = \"https://r.2sxc.org/DsSerializationConfiguration\")] public class SerializationConfiguration : DataSourceBase, IDataSource, IAppIdentity, IZoneIdentity, IAppIdentityLight, ICacheInfo, ICacheKey, ICacheExpiring, ITimestamped, ICanPurgeListCache, IHasLog, IDataTarget, IDataPartShared Remarks New in v11.20 Fields | Improve this Doc View Source KeepAll Declaration public static string KeepAll Field Value Type Description System.String | Improve this Doc View Source KeepNone Declaration public static string KeepNone Field Value Type Description System.String Properties | Improve this Doc View Source DropFalseValues todo Declaration public string DropFalseValues { get; set; } Property Value Type Description System.String | Improve this Doc View Source IncludeCreated Should the Created date be included in serialization Declaration public string IncludeCreated { get; set; } Property Value Type Description System.String | Improve this Doc View Source IncludeGuid Should the GUID be included in serialization Declaration public string IncludeGuid { get; set; } Property Value Type Description System.String | Improve this Doc View Source IncludeId Should the ID be included in serialization Declaration public string IncludeId { get; set; } Property Value Type Description System.String | Improve this Doc View Source IncludeMetadata Should the Metadata ID be included in serialization Declaration public string IncludeMetadata { get; set; } Property Value Type Description System.String | Improve this Doc View Source IncludeMetadataFor Should the Metadata target/for information be included in serialization Declaration public string IncludeMetadataFor { get; set; } Property Value Type Description System.String | Improve this Doc View Source IncludeMetadataForId Should the Metadata target/for information be included in serialization Declaration public string IncludeMetadataForId { get; set; } Property Value Type Description System.String | Improve this Doc View Source IncludeMetadataForType Should the Metadata target/for information be included in serialization Declaration public string IncludeMetadataForType { get; set; } Property Value Type Description System.String | Improve this Doc View Source IncludeMetadataGuid Should the Metadata GUID be included in serialization Declaration public string IncludeMetadataGuid { get; set; } Property Value Type Description System.String | Improve this Doc View Source IncludeMetadataId Should the Metadata ID be included in serialization Declaration public string IncludeMetadataId { get; set; } Property Value Type Description System.String | Improve this Doc View Source IncludeMetadataTitle Should the default Title of the Metadata be included as \"Title\" in serialization Declaration public string IncludeMetadataTitle { get; set; } Property Value Type Description System.String | Improve this Doc View Source IncludeModified Should the Modified date be included in serialization Declaration public string IncludeModified { get; set; } Property Value Type Description System.String | Improve this Doc View Source IncludeRelationshipGuid Should the Relationship GUID be included in serialization Declaration public string IncludeRelationshipGuid { get; set; } Property Value Type Description System.String | Improve this Doc View Source IncludeRelationshipId Should the Relationship ID be included in serialization Declaration public string IncludeRelationshipId { get; set; } Property Value Type Description System.String | Improve this Doc View Source IncludeRelationships Should the Relationship ID be included in serialization Declaration public string IncludeRelationships { get; set; } Property Value Type Description System.String | Improve this Doc View Source IncludeRelationshipTitle Should the default Title of the Relationship be included as \"Title\" in serialization Declaration public string IncludeRelationshipTitle { get; set; } Property Value Type Description System.String | Improve this Doc View Source IncludeTitle Should the default Title be included as \"Title\" in serialization Declaration public string IncludeTitle { get; set; } Property Value Type Description System.String | Improve this Doc View Source Out Gets the Dictionary of Out-Streams. This is the internal accessor, as usually you'll use this[\"name\"] instead. In rare cases you need the Out, for example to list the stream names in the data source. Declaration public override IDictionary<string, IDataStream> Out { get; } Property Value Type Description System.Collections.Generic.IDictionary < System.String , IDataStream > A dictionary of named IDataStream objects Overrides DataSourceBase.Out | Improve this Doc View Source RemoveEmptyStrings todo Declaration public string RemoveEmptyStrings { get; set; } Property Value Type Description System.String | Improve this Doc View Source RemoveNullValues todo Declaration public string RemoveNullValues { get; set; } Property Value Type Description System.String | Improve this Doc View Source RemoveZeroValues todo Declaration public string RemoveZeroValues { get; set; } Property Value Type Description System.String Implements IDataSource IAppIdentity IZoneIdentity IAppIdentityLight ICacheKey ICacheExpiring ITimestamped ICanPurgeListCache IHasLog IDataTarget IDataPartShared"
  },
  "api/dot-net/ToSic.Eav.DataSources.Metadata.html": {
    "href": "api/dot-net/ToSic.Eav.DataSources.Metadata.html",
    "title": "Class Metadata | 2sxc 13 / EAV 13",
    "keywords": "Class Metadata Get Metadata (metadata Entities) of the Entities coming into this DataSource Inheritance System.Object HasLog DataSourceBase ToSic.Eav.DataSources.MetadataDataSourceBase Metadata Implements IDataSource IAppIdentity IZoneIdentity IAppIdentityLight ICacheKey ICacheExpiring ITimestamped ICanPurgeListCache IHasLog IDataTarget IDataPartShared Inherited Members DataSourceBase.ErrorStream DataSourceBase.SetError(String, String, Exception) DataSourceBase.GetRequiredInList(IImmutableList<IEntity>) DataSourceBase.GetRequiredInList(String, IImmutableList<IEntity>) DataSourceBase.Name DataSourceBase.AppId DataSourceBase.ZoneId DataSourceBase.Guid DataSourceBase.Configuration DataSourceBase.DataBuilder DataSourceBase.CacheRelevantConfigurations DataSourceBase.ConfigMask(String, String, Boolean) DataSourceBase.CachePartialKey DataSourceBase.CacheFullKey DataSourceBase.CacheTimestamp DataSourceBase.CacheChanged(Int64) DataSourceBase.PurgeList(Boolean) DataSourceBase.In DataSourceBase.Out DataSourceBase.Item[String] DataSourceBase.GetStream(String, String, Boolean, Boolean) DataSourceBase.List DataSourceBase.Attach(IDataSource) DataSourceBase.Attach(String, IDataSource, String) DataSourceBase.Attach(String, IDataStream) HasLog.Log HasLog.InitLog(String, ILog, String) HasLog.InitLog(String, ILog, String, CodeRef) Namespace : ToSic.Eav.DataSources Assembly : ToSic.Eav.DataSources.dll Syntax [VisualQuery(NiceName = \"Metadata\", UiHint = \"Get the item's metadata\", Icon = \"local_offer\", Type = DataSourceType.Lookup, GlobalName = \"3ab4b010-2daa-4a7f-b882-635d2d9fa0a0\", In = new string[]{\"Default*\"}, DynamicOut = false, ExpectsDataOfType = \"d7858b36-1ef1-4c3d-b15c-c567b0d7bdd4\", HelpLink = \"https://r.2sxc.org/DsMetadata\")] [InternalApi_DoNotUse_MayChangeWithoutNotice(\"WIP\")] public class Metadata : MetadataDataSourceBase, IDataSource, IAppIdentity, IZoneIdentity, IAppIdentityLight, ICacheInfo, ICacheKey, ICacheExpiring, ITimestamped, ICanPurgeListCache, IHasLog, IDataTarget, IDataPartShared Remarks Added in v12.10 Properties | Improve this Doc View Source ContentTypeName TODO Declaration public override string ContentTypeName { get; set; } Property Value Type Description System.String Overrides ToSic.Eav.DataSources.MetadataDataSourceBase.ContentTypeName Methods | Improve this Doc View Source SpecificGet(IImmutableList<IEntity>, String) Declaration protected override IEnumerable<IEntity> SpecificGet(IImmutableList<IEntity> originals, string typeName) Parameters Type Name Description System.Collections.Immutable.IImmutableList < IEntity > originals System.String typeName Returns Type Description System.Collections.Generic.IEnumerable < IEntity > Overrides ToSic.Eav.DataSources.MetadataDataSourceBase.SpecificGet(System.Collections.Immutable.IImmutableList<ToSic.Eav.Data.IEntity>, System.String) Implements IDataSource IAppIdentity IZoneIdentity IAppIdentityLight ICacheKey ICacheExpiring ITimestamped ICanPurgeListCache IHasLog IDataTarget IDataPartShared"
  },
  "api/dot-net/ToSic.Eav.DataSources.DataSourceBase.html": {
    "href": "api/dot-net/ToSic.Eav.DataSources.DataSourceBase.html",
    "title": "Class DataSourceBase | 2sxc 13 / EAV 13",
    "keywords": "Class DataSourceBase The base class, which should always be inherited. Already implements things like Get One / Get many, Caching and a lot more. The DataSourceBase DataSource is the base class for all Standard EAV Data Sources . All DataSources should inherit from this. Read also DataSource / DataStream List of all EAV Data Sources Query / VisualQuery History Introduced in EAV 4.x, 2sxc 6 Enhanced with Error methods for VisualQuery 3 in 2sxc 11.13 <!-- note: this must be an H1 because of the automatic TOC in the code pages --> API Documentation Inheritance System.Object HasLog DataSourceBase App AppRoot AttributeFilter AttributeRename CacheAllStreams EntityIdFilter EntityTypeFilter Error ExternalData ItemFilterDuplicates LanguageModeler OwnerFilter Paging PassThrough PublishingFilter Query QueryRun RelationshipFilter SerializationConfiguration Shuffle StreamFallback StreamMerge StreamPick Apps Attributes ContentTypes QueryInfo Zones TreeModeler ValueFilter ValueSort CmsBlock Implements IDataSource IAppIdentity IZoneIdentity IAppIdentityLight ICacheKey ICacheExpiring ITimestamped ICanPurgeListCache IHasLog IDataTarget IDataPartShared Inherited Members HasLog.Log HasLog.InitLog(String, ILog, String) HasLog.InitLog(String, ILog, String, CodeRef) Namespace : ToSic.Eav.DataSources Assembly : ToSic.Eav.DataSources.dll Syntax [PublicApi_Stable_ForUseInYourCode] public abstract class DataSourceBase : HasLog, IDataSource, IAppIdentity, IZoneIdentity, IAppIdentityLight, ICacheInfo, ICacheKey, ICacheExpiring, ITimestamped, ICanPurgeListCache, IHasLog, IDataTarget, IDataPartShared Constructors | Improve this Doc View Source DataSourceBase() Constructor - must be without parameters, otherwise the DI can't construct it. Declaration protected DataSourceBase() Fields | Improve this Doc View Source ErrorStream This variable contains a stream of exceptions to return as a result of the DataSource. It is available because often some inner call will have to prepare an error and can't return the stream. So the inner call will set the variable and your primary GetList() can then do a check like this: private IImmutableList<IEntity> GetList() { var useMultiLanguage = GetMultiLanguageSetting(); if (!ErrorStream.IsDefaultOrEmpty) return ErrorStream; var result = ... return result; } Or if you're using Call Logging do something like this: private IImmutableList<IEntity> GetList() { var callLog = Log.Call<IImmutableList<IEntity>>(); var useMultiLanguage = GetMultiLanguageSetting(); if (!ErrorStream.IsDefaultOrEmpty) return callLog(\"error\", ErrorStream); var result = ... return callLog(\"ok\", result); } Declaration [PublicApi] protected ImmutableArray<IEntity> ErrorStream Field Value Type Description System.Collections.Immutable.ImmutableArray < IEntity > Remarks Introduced in 2sxc 11.13 Properties | Improve this Doc View Source AppId The app id as used internally Declaration public virtual int AppId { get; set; } Property Value Type Description System.Int32 The App ID this thing belongs to | Improve this Doc View Source CacheFullKey Combination of the current key and all keys of upstream cached items, to create a long unique key for this context. Declaration public virtual string CacheFullKey { get; } Property Value Type Description System.String Full key containing own partial key and upstream keys. | Improve this Doc View Source CachePartialKey Unique key-id for this specific situation - could be the same for all instances, or could vary by some parameter. Declaration public virtual string CachePartialKey { get; } Property Value Type Description System.String A string which is specific to this cache-item. | Improve this Doc View Source CacheRelevantConfigurations Some configuration of the data source is cache-relevant, others are not. This list contains the names of all configuration items which are cache relevant. It will be used when generating a unique ID for caching the data. Declaration [InternalApi_DoNotUse_MayChangeWithoutNotice] public List<string> CacheRelevantConfigurations { get; set; } Property Value Type Description System.Collections.Generic.List < System.String > | Improve this Doc View Source CacheTimestamp System time-stamp of when the data in this cached thing was initialized or updated. Depending on the implementation, this may go up-stream and return an up-stream value. Declaration public virtual long CacheTimestamp { get; } Property Value Type Description System.Int64 A timestamp as a long number | Improve this Doc View Source Configuration The configuration system of this data source. Keeps track of all values which the data source will need, and manages the LookUp engine which provides these values. Declaration public IDataSourceConfiguration Configuration { get; } Property Value Type Description IDataSourceConfiguration | Improve this Doc View Source DataBuilder Declaration protected IDataBuilder DataBuilder { get; } Property Value Type Description IDataBuilder | Improve this Doc View Source Guid Internal ID usually from persisted configurations IF the configuration was build from an pre-stored query. Declaration public Guid Guid { get; set; } Property Value Type Description System.Guid The guid of this data source which identifies the configuration IEntity of the data source. | Improve this Doc View Source In List of all In connections Declaration public IDictionary<string, IDataStream> In { get; } Property Value Type Description System.Collections.Generic.IDictionary < System.String , IDataStream > | Improve this Doc View Source Item[String] Gets the Out-Stream with specified Name. Declaration public IDataStream this[string outName] { get; } Parameters Type Name Description System.String outName Property Value Type Description IDataStream an IDataStream of the desired name Exceptions Type Condition System.NullReferenceException if the stream does not exist | Improve this Doc View Source List The items in the data-source - to be exact, the ones in the Default stream. Declaration public IEnumerable<IEntity> List { get; } Property Value Type Description System.Collections.Generic.IEnumerable < IEntity > A list of IEntity items in the Default stream. | Improve this Doc View Source Name Name of this DataSource - not usually relevant. Declaration public string Name { get; } Property Value Type Description System.String Name of this source. | Improve this Doc View Source Out Gets the Dictionary of Out-Streams. This is the internal accessor, as usually you'll use this[\"name\"] instead. In rare cases you need the Out, for example to list the stream names in the data source. Declaration public virtual IDictionary<string, IDataStream> Out { get; protected set; } Property Value Type Description System.Collections.Generic.IDictionary < System.String , IDataStream > A dictionary of named IDataStream objects | Improve this Doc View Source ZoneId ID of the zone (EAV Tenant) Declaration public virtual int ZoneId { get; set; } Property Value Type Description System.Int32 The zone ID this thing belongs to Methods | Improve this Doc View Source Attach(String, IDataSource, String) Add a single named stream to the In Declaration [PublicApi] public void Attach(string streamName, IDataSource dataSource, string sourceName = \"Default\") Parameters Type Name Description System.String streamName In-name of the stream IDataSource dataSource The data source - will use it's default out System.String sourceName The stream name on the source, will default to \"Default\" | Improve this Doc View Source Attach(String, IDataStream) Add a single named stream to the In Declaration [PublicApi] public void Attach(string streamName, IDataStream dataStream) Parameters Type Name Description System.String streamName In-name of the stream IDataStream dataStream The data stream to attach | Improve this Doc View Source Attach(IDataSource) Attach a DataSource to In - replaces all existing in-streams. Declaration [PublicApi] public void Attach(IDataSource dataSource) Parameters Type Name Description IDataSource dataSource DataSource to attach | Improve this Doc View Source CacheChanged(Int64) Detect if the cache has old data, by comparing it to a timestamp which may be newer. This is implemented in each object, because sometimes it compares its own timestamp, sometimes that of another underlying object. Declaration public virtual bool CacheChanged(long newCacheTimeStamp) Parameters Type Name Description System.Int64 newCacheTimeStamp New time stamp to compare with Returns Type Description System.Boolean True if the timestamps differ, false if it's the same | Improve this Doc View Source ConfigMask(String, String, Boolean) Add a value to the configuration list for later resolving tokens and using in Cache-Keys. Declaration [PublicApi] protected void ConfigMask(string key, string mask, bool cacheRelevant = true) Parameters Type Name Description System.String key The internal key to reference this value in the Configuration[Key] dictionary. System.String mask The string containing Tokens which will be parsed to find the final value. System.Boolean cacheRelevant If this key should be part of the cache-key. Default is true. Set to false for parameters which don't affect the result or are confidential (like passwords) | Improve this Doc View Source GetRequiredInList(out IImmutableList<IEntity>) Get a required Stream from In. If it doesn't exist return false and place the error message in the list for returning to the caller. Usage usually like this in your GetList() function: private IImmutableList<IEntity> GetList() { if (!GetRequiredInList(out var originals)) return originals; var result = ...; return result; } Or if you're using Call Logging do something like this: private IImmutableList<IEntity> GetList() { var callLog = Log.Call<IImmutableList<IEntity>>(); if (!GetRequiredInList(out var originals)) return callLog(\"error\", originals); var result = ... return callLog(\"ok\", result); } Declaration [PublicApi] protected bool GetRequiredInList(out IImmutableList<IEntity> list) Parameters Type Name Description System.Collections.Immutable.IImmutableList < IEntity > list The variable which will contain the list or the error-list Returns Type Description System.Boolean True if the stream exists and is not null, otherwise false Remarks Introduced in 2sxc 11.13 | Improve this Doc View Source GetRequiredInList(String, out IImmutableList<IEntity>) Get a required Stream from In. If it doesn't exist return false and place the error message in the list for returning to the caller. Usage usually like this in your GetList() function: private IImmutableList<IEntity> GetList() { if (!GetRequiredInList(\"Fallback\", out var fallback)) return fallback; var result = ...; return result; } Or if you're using Call Logging do something like this: private IImmutableList<IEntity> GetList() { var callLog = Log.Call<IImmutableList<IEntity>>(); if (!GetRequiredInList(\"Fallback\", out var fallback)) return callLog(\"error\", fallback); var result = ... return callLog(\"ok\", result); } Declaration [PublicApi] protected bool GetRequiredInList(string name, out IImmutableList<IEntity> list) Parameters Type Name Description System.String name Stream name - optional System.Collections.Immutable.IImmutableList < IEntity > list The variable which will contain the list or the error-list Returns Type Description System.Boolean True if the stream exists and is not null, otherwise false Remarks Introduced in 2sxc 11.13 | Improve this Doc View Source GetStream(String, String, Boolean, Boolean) Gets the Out-Stream with specified Name and allowing some error handling if not found. Declaration public IDataStream GetStream(string name = null, string noParamOrder = \"Rule: All params must be named (https://r.2sxc.org/named-params)\", bool nullIfNotFound = false, bool emptyIfNotFound = false) Parameters Type Name Description System.String name The desired stream name. If empty, will default to the default stream. System.String noParamOrder see Convention: Named Parameters System.Boolean nullIfNotFound In case the stream name isn't found, will return null. Ideal for chaining with ?? System.Boolean emptyIfNotFound In case the stream name isn't found, will return an empty stream. Ideal for using LINQ directly. Returns Type Description IDataStream an IDataStream of the desired name Remarks Added in 2sxc 12.05 for more in-depth checking if a stream exists, you can access the Out which is an IDictionary Exceptions Type Condition System.NullReferenceException if the stream does not exist and nullIfNotFound is false | Improve this Doc View Source PurgeList(Boolean) Remove the current data from the cache, optionally also purge everything upstream Declaration public virtual void PurgeList(bool cascade = false) Parameters Type Name Description System.Boolean cascade true to purge all sources as well, default is false | Improve this Doc View Source SetError(String, String, Exception) This will generate an Error Stream and return it as well as place it in the ErrorStream. Declaration [PublicApi] protected ImmutableArray<IEntity> SetError(string title, string message, Exception ex = null) Parameters Type Name Description System.String title Error title System.String message Error message System.Exception ex .net exception - would be logged if provided Returns Type Description System.Collections.Immutable.ImmutableArray < IEntity > A list containing the error entity Remarks Introduced in 2sxc 11.13 Implements IDataSource IAppIdentity IZoneIdentity IAppIdentityLight ICacheKey ICacheExpiring ITimestamped ICanPurgeListCache IHasLog IDataTarget IDataPartShared"
  },
  "api/dot-net/ToSic.Sxc.Engines.EngineBase.html": {
    "href": "api/dot-net/ToSic.Sxc.Engines.EngineBase.html",
    "title": "Class EngineBase | 2sxc 13 / EAV 13",
    "keywords": "Class EngineBase The foundation for engines - must be inherited by other engines Inheritance System.Object HasLog EngineBase RazorEngine TokenEngine Implements IEngine IHasLog Inherited Members HasLog.Log HasLog.InitLog(String, ILog, String) HasLog.InitLog(String, ILog, String, CodeRef) Namespace : ToSic.Sxc.Engines Assembly : ToSic.Sxc.dll Syntax [InternalApi_DoNotUse_MayChangeWithoutNotice(\"this is just fyi\")] public abstract class EngineBase : HasLog, IEngine, IHasLog Constructors | Improve this Doc View Source EngineBase(EngineBaseDependencies) Empty constructor, so it can be used in dependency injection Declaration protected EngineBase(EngineBaseDependencies helpers) Parameters Type Name Description ToSic.Sxc.Engines.EngineBaseDependencies helpers Fields | Improve this Doc View Source Helpers Declaration protected readonly EngineBaseDependencies Helpers Field Value Type Description ToSic.Sxc.Engines.EngineBaseDependencies Methods | Improve this Doc View Source CustomizeData() Mechanism which allows the view to change data it will show in a stream-based way. This helps to ensure that other parts like JSON-Streams or Search have the same information as the view itself. Declaration [Obsolete(\"Shouldn't be used any more, but will continue to work for indefinitely for old base classes, not in v12. There are now better ways of doing this\")] public virtual void CustomizeData() | Improve this Doc View Source CustomizeSearch(Dictionary<String, List<ISearchItem>>, IModule, DateTime) Declaration [Obsolete(\"Shouldn't be used any more, but will continue to work for indefinitely for old base classes, not in v12. There are now better ways of doing this\")] public virtual void CustomizeSearch(Dictionary<string, List<ISearchItem>> searchInfos, IModule moduleInfo, DateTime beginDate) Parameters Type Name Description System.Collections.Generic.Dictionary < System.String , System.Collections.Generic.List < ISearchItem >> searchInfos ToSic.Sxc.Context.IModule moduleInfo System.DateTime beginDate | Improve this Doc View Source Init(IBlock) Declaration public void Init(IBlock block) Parameters Type Name Description IBlock block | Improve this Doc View Source Init(IBlock, Purpose) Initialize the Engine (pass everything needed for Render to it). This is not in the constructor, because IEngines usually get constructed with DI, so the constructor is off-limits. Declaration public void Init(IBlock block, Purpose purpose) Parameters Type Name Description IBlock block block within the cms Purpose purpose Purpose of the engine (show in web, search-index, etc.). The custom code may adapt its behavior depending on the purpose | Improve this Doc View Source Render() Renders a template, returning a string with the rendered template. Declaration public RenderEngineResult Render() Returns Type Description ToSic.Sxc.Engines.RenderEngineResult The string - usually HTML - which the engine created. Implements IEngine IHasLog"
  },
  "api/dot-net/ToSic.Eav.Apps.AppData.html": {
    "href": "api/dot-net/ToSic.Eav.Apps.AppData.html",
    "title": "Class AppData | 2sxc 13 / EAV 13",
    "keywords": "Class AppData The Data object on an App. It's also a data-source of type App , so it has many streams, one for each content-type so you can use it in combination with other DataSources. The special feature is that it also has methods for data-manipulation, including Create, Update and Delete Inheritance System.Object HasLog DataSourceBase App AppData Implements IAppData IDataSource IAppIdentity IZoneIdentity IAppIdentityLight ICacheKey ICanPurgeListCache IHasLog IDataTarget IDataPartShared IMetadataSource ICacheExpiring ITimestamped Inherited Members App.AppSwitch App.ZoneSwitch App.AppState App.RequiresRebuildOfOut App.Out DataSourceBase.ErrorStream DataSourceBase.SetError(String, String, Exception) DataSourceBase.GetRequiredInList(IImmutableList<IEntity>) DataSourceBase.GetRequiredInList(String, IImmutableList<IEntity>) DataSourceBase.Name DataSourceBase.AppId DataSourceBase.ZoneId DataSourceBase.Guid DataSourceBase.Configuration DataSourceBase.DataBuilder DataSourceBase.CacheRelevantConfigurations DataSourceBase.ConfigMask(String, String, Boolean) DataSourceBase.CachePartialKey DataSourceBase.CacheFullKey DataSourceBase.CacheTimestamp DataSourceBase.CacheChanged(Int64) DataSourceBase.PurgeList(Boolean) DataSourceBase.In DataSourceBase.Item[String] DataSourceBase.GetStream(String, String, Boolean, Boolean) DataSourceBase.List DataSourceBase.Attach(IDataSource) DataSourceBase.Attach(String, IDataSource, String) DataSourceBase.Attach(String, IDataStream) HasLog.Log HasLog.InitLog(String, ILog, String) HasLog.InitLog(String, ILog, String, CodeRef) Namespace : ToSic.Eav.Apps Assembly : ToSic.Eav.Apps.dll Syntax [PublicApi_Stable_ForUseInYourCode] public sealed class AppData : App, IAppData, IDataSource, IAppIdentity, IZoneIdentity, IAppIdentityLight, ICacheInfo, ICacheKey, ICanPurgeListCache, IHasLog, IDataTarget, IDataPartShared, IMetadataSource, ICacheExpiring, ITimestamped Constructors | Improve this Doc View Source AppData(LazyInit<SimpleDataController>, IAppStates) Declaration public AppData(LazyInit<SimpleDataController> dataController, IAppStates appStates) Parameters Type Name Description ToSic.Eav.Plumbing.LazyInit < ToSic.Eav.Api.Api01.SimpleDataController > dataController ToSic.Eav.Apps.IAppStates appStates Methods | Improve this Doc View Source Create(String, Dictionary<String, Object>, String, ITarget) Create a new entity in the storage. Declaration public IEntity Create(string contentTypeName, Dictionary<string, object> values, string userName = null, ITarget target = null) Parameters Type Name Description System.String contentTypeName The type name System.Collections.Generic.Dictionary < System.String , System.Object > values a dictionary of values to be stored System.String userName the current user name - will be logged as the author ITarget target information if this new item is to be metadata for something Returns Type Description IEntity Remarks Changed in 2sxc 10.30 - now returns the id of the created items | Improve this Doc View Source Create(String, IEnumerable<Dictionary<String, Object>>, String) Create a bunch of new entities in one single call (much faster, because cache doesn't need to repopulate in the mean time). Declaration public IEnumerable<IEntity> Create(string contentTypeName, IEnumerable<Dictionary<string, object>> multiValues, string userName = null) Parameters Type Name Description System.String contentTypeName The type name System.Collections.Generic.IEnumerable < System.Collections.Generic.Dictionary < System.String , System.Object >> multiValues many dictionaries, each will become an own item when stored System.String userName the current user name - will be logged as the author Returns Type Description System.Collections.Generic.IEnumerable < IEntity > Remarks You can't create items which are metadata with this, for that, please use the Create-one overload Changed in 2sxc 10.30 - now returns the id of the created items | Improve this Doc View Source Delete(Int32, String) Delete an existing item Declaration public void Delete(int entityId, string userName = null) Parameters Type Name Description System.Int32 entityId The item ID System.String userName the current user name - will be logged as the author of the change | Improve this Doc View Source GetCustomMetadata<TKey>(TKey, String) Declaration public IEnumerable<IEntity> GetCustomMetadata<TKey>(TKey key, string contentTypeName = null) Parameters Type Name Description TKey key System.String contentTypeName Returns Type Description System.Collections.Generic.IEnumerable < IEntity > Type Parameters Name Description TKey | Improve this Doc View Source GetMetadata<TKey>(Int32, TKey, String) Declaration public IEnumerable<IEntity> GetMetadata<TKey>(int targetType, TKey key, string contentTypeName = null) Parameters Type Name Description System.Int32 targetType TKey key System.String contentTypeName Returns Type Description System.Collections.Generic.IEnumerable < IEntity > Type Parameters Name Description TKey | Improve this Doc View Source GetMetadata<TKey>(TargetTypes, TKey, String) Declaration public IEnumerable<IEntity> GetMetadata<TKey>(TargetTypes targetType, TKey key, string contentTypeName = null) Parameters Type Name Description TargetTypes targetType TKey key System.String contentTypeName Returns Type Description System.Collections.Generic.IEnumerable < IEntity > Type Parameters Name Description TKey | Improve this Doc View Source Update(Int32, Dictionary<String, Object>, String) Update an existing item. Declaration public void Update(int entityId, Dictionary<string, object> values, string userName = null) Parameters Type Name Description System.Int32 entityId The item ID System.Collections.Generic.Dictionary < System.String , System.Object > values a dictionary of values to be updated System.String userName the current user name - will be logged as the author of the change Implements IAppData IDataSource IAppIdentity IZoneIdentity IAppIdentityLight ICacheKey ICanPurgeListCache IHasLog IDataTarget IDataPartShared IMetadataSource ICacheExpiring ITimestamped"
  },
  "api/dot-net/ToSic.Eav.Apps.App.html": {
    "href": "api/dot-net/ToSic.Eav.Apps.App.html",
    "title": "Class App | 2sxc 13 / EAV 13",
    "keywords": "Class App A single-use app-object providing quick simple api to access name, folder, data, metadata etc. Inheritance System.Object HasLog AppBase App App Implements IHasLog IApp IAppIdentity IZoneIdentity IAppIdentityLight IHasMetadata IHasPermissions Inherited Members AppBase.ZoneId AppBase.AppId AppBase.Init(IAppIdentity, CodeRef, ILog) HasLog.Log HasLog.InitLog(String, ILog, String) HasLog.InitLog(String, ILog, String, CodeRef) Namespace : ToSic.Eav.Apps Assembly : ToSic.Eav.Apps.dll Syntax [PublicApi_Stable_ForUseInYourCode] public class App : AppBase, IHasLog, IApp, IAppIdentityWithPublishingState, IAppIdentity, IZoneIdentity, IAppIdentityLight, IHasMetadata, IHasPermissions Constructors | Improve this Doc View Source App(App.AppDependencies, String) Declaration public App(App.AppDependencies dependencies, string logName = null) Parameters Type Name Description ToSic.Eav.Apps.App.AppDependencies dependencies All the dependencies of this app, managed by this app System.String logName must be null by default, because of DI Fields | Improve this Doc View Source AppConfiguration Declaration protected IEntity AppConfiguration Field Value Type Description IEntity | Improve this Doc View Source AppResources Declaration protected IEntity AppResources Field Value Type Description IEntity | Improve this Doc View Source AppSettings Declaration protected IEntity AppSettings Field Value Type Description IEntity Properties | Improve this Doc View Source Data Data of the app Declaration public IAppData Data { get; } Property Value Type Description IAppData | Improve this Doc View Source Folder App Folder Declaration public string Folder { get; } Property Value Type Description System.String The folder as configured in the app configuration. | Improve this Doc View Source Hidden If the app should be hidden from the normal app-picker. Important to configure apps once and then hide from normal users. Declaration public bool Hidden { get; } Property Value Type Description System.Boolean The hidden-state as configured in the app configuration. | Improve this Doc View Source Metadata The app metadata - like settings, resources etc. Declaration public IMetadataOf Metadata { get; } Property Value Type Description IMetadataOf A metadata provider for the app | Improve this Doc View Source Name App Name Declaration public string Name { get; } Property Value Type Description System.String The name as configured in the app configuration. | Improve this Doc View Source NameId NameId of the App - usually a string-GUID Declaration public string NameId { get; } Property Value Type Description System.String | Improve this Doc View Source Permissions Permissions of this app Declaration public IEnumerable<Permission> Permissions { get; } Property Value Type Description System.Collections.Generic.IEnumerable < Permission > | Improve this Doc View Source Query Accessor to queries. Use like: App.Query.Count App.Query.ContainsKey(...) App.Query[\"One Event\"].List Declaration public IDictionary<string, IQuery> Query { get; } Property Value Type Description System.Collections.Generic.IDictionary < System.String , IQuery > A dictionary with all queries. Internally the dictionary will not be built unless accessed. | Improve this Doc View Source ShowDrafts Declaration public bool ShowDrafts { get; } Property Value Type Description System.Boolean Methods | Improve this Doc View Source GetQuery(String) Declaration public Query GetQuery(string name) Parameters Type Name Description System.String name Returns Type Description Query | Improve this Doc View Source Init(IAppIdentity, Func<App, IAppDataConfiguration>, ILog) Declaration protected App Init(IAppIdentity appIdentity, Func<App, IAppDataConfiguration> buildConfiguration, ILog parentLog) Parameters Type Name Description IAppIdentity appIdentity System.Func < App , IAppDataConfiguration > buildConfiguration ILog parentLog Returns Type Description App | Improve this Doc View Source InitializeResourcesSettingsAndMetadata() Assign all kinds of metadata / resources / settings (App-Mode only) Declaration protected void InitializeResourcesSettingsAndMetadata() Implements IHasLog IApp IAppIdentity IZoneIdentity IAppIdentityLight IHasMetadata IHasPermissions"
  },
  "api/dot-net/ToSic.Eav.Logging.html": {
    "href": "api/dot-net/ToSic.Eav.Logging.html",
    "title": "Namespace ToSic.Eav.Logging | 2sxc 13 / EAV 13",
    "keywords": "Namespace ToSic.Eav.Logging The EAV system has a powerful internal logging system. It's the backbone to Insights. This is where it resides - usually you don't want to know about it ;). If you do, here a short conceptual background: Any object can have a property - usually called Log which is an ILog . Using this the object can call the Log.Add(...) to add messages. Many other commands help in various scenarios. The real power comes from chaining these - because each logger can know what parent-logger it reports to. This allows us to reproduce the chain of events in the original code, because you can track where loggers were made, and how they relate. The really amazing bit (added in 2sxc 10.22/10.23) is that the logger will also pick up the class names, code-file names and line of code where it was logged üòé. Most objects which use the Log, implement the IHasLog , often by inheriting ToSic.Eav.Logging .HasLog which automates things when initializing - like the chaining of the Loggers. Classes CodeRef Reference to code - containing the path to the file, the method name and the line in the code. HasLog Base class for most objects which simply want to implement log and log-chaining. Interfaces IHasLog Objects which can log their activity, and share their log with other objects in the chain to produce extensive internal logging. ILog A logger with special capabilities. It can take log messages, and chain itself to other loggers. If chained, it can broadcast the messages to the other loggers from that time forward. Basically this is the backbone of Insights."
  },
  "api/dot-net/ToSic.Sxc.Dnn.DynamicCode.html": {
    "href": "api/dot-net/ToSic.Sxc.Dnn.DynamicCode.html",
    "title": "Class DynamicCode | 2sxc 13 / EAV 13",
    "keywords": "Class DynamicCode This is a base class for custom code files with context. If you create a class file for dynamic use and inherit from this, then the compiler will automatically add objects like Link, Dnn, etc. The class then also has AsDynamic(...) and AsList(...) commands like a normal razor page. Inheritance System.Object HasLog DynamicCode DynamicCode Implements IWrapper < IDynamicCode > IDnnDynamicCode IDynamicCode ICreateInstance ICompatibilityLevel IHasLog IDnnDynamicCodeAdditions Inherited Members DynamicCode.UnwrappedContents DynamicCode.GetContents() DynamicCode.App DynamicCode.Data DynamicCode.GetService<TService>() DynamicCode.Content DynamicCode.Header DynamicCode.Link DynamicCode.Edit DynamicCode.CreateInstancePath DynamicCode.CreateInstance(String, String, String, String, Boolean) DynamicCode.CmsContext DynamicCode.AsDynamic(String, String) DynamicCode.AsDynamic(IEntity) DynamicCode.AsDynamic(Object) DynamicCode.AsDynamic(Object[]) DynamicCode.AsEntity(Object) DynamicCode.AsList(Object) DynamicCode.CreateSource<T>(IDataStream) DynamicCode.CreateSource<T>(IDataSource, ILookUpEngine) DynamicCode.AsAdam(IDynamicEntity, String) DynamicCode.AsAdam(IEntity, String) HasLog.Log HasLog.InitLog(String, ILog, String) HasLog.InitLog(String, ILog, String, CodeRef) Namespace : ToSic.Sxc.Dnn Assembly : ToSic.Sxc.Dnn.Core.dll Syntax [PublicApi_Stable_ForUseInYourCode] public abstract class DynamicCode : DynamicCode, IWrapper<IDynamicCode>, IHasDynamicCodeRoot, INeedsDynamicCodeRoot, IDnnDynamicCode, IDynamicCode, ICreateInstance, ICompatibilityLevel, IHasLog, IDnnDynamicCodeAdditions Properties | Improve this Doc View Source Dnn The DNN context. Declaration public IDnnContext Dnn { get; } Property Value Type Description IDnnContext The DNN context. Implements IWrapper<T> IDnnDynamicCode IDynamicCode ICreateInstance ICompatibilityLevel IHasLog IDnnDynamicCodeAdditions"
  },
  "api/dot-net/Custom.Dnn.html": {
    "href": "api/dot-net/Custom.Dnn.html",
    "title": "Namespace Custom.Dnn | 2sxc 13 / EAV 13",
    "keywords": "Namespace Custom.Dnn Namespace for base classes of custom code, razor and WebApis in DNN Custom.Dnn Namespace for Dnn ‚ò¢Ô∏è This contains all the base classes for your own solutions, which are targeted to Dnn ‚ò¢Ô∏è. Versioned Base Classes All the base classes in this have a version number, so it will become easier to document differences between versions and also to give guidance how to upgrade in case of future breaking changes or security issues. Previous Base Classes Previously other base classes were recommended. They will continue to work, but we'll only enhance the features on these base classes. To see previous base classes, check out #todoc Classes Api12 The base class for APIs which only need to work in Dnn. They internally inherit from DnnApiController which inherits from ApiController System.Web.Http.ApiController and in addition to all the DynamicCode properties also have all the features of that base class. Code12 The base class for custom code. If you inherit from this class, you'll automatically have all the properties from DynamicCode . Razor12 The base class for custom Razor. If you inherit from this class, you'll automatically have all the properties from DynamicCode . Classes Api12 Base Class for modern Api Controllers in Dnn Code12 Base Class for Dynamic CSharp Classes in Dnn Razor12 Base Class for Dynamic CSharp Classes in Dnn"
  },
  "api/dot-net/ToSic.Eav.DataSources.TreeModeler.html": {
    "href": "api/dot-net/ToSic.Eav.DataSources.TreeModeler.html",
    "title": "Class TreeModeler | 2sxc 13 / EAV 13",
    "keywords": "Class TreeModeler Use this to take imported data from elsewhere which is a table but would have a tree-like structure (folders, etc.). Tell it where/how the relationships are mapped, and it will create Entities that have navigable relationships for this. Inheritance System.Object HasLog DataSourceBase TreeModeler Implements IDataSource IAppIdentity IZoneIdentity IAppIdentityLight ICacheKey ICacheExpiring ITimestamped ICanPurgeListCache IHasLog IDataTarget IDataPartShared Inherited Members DataSourceBase.ErrorStream DataSourceBase.SetError(String, String, Exception) DataSourceBase.GetRequiredInList(IImmutableList<IEntity>) DataSourceBase.GetRequiredInList(String, IImmutableList<IEntity>) DataSourceBase.Name DataSourceBase.AppId DataSourceBase.ZoneId DataSourceBase.Guid DataSourceBase.Configuration DataSourceBase.DataBuilder DataSourceBase.CacheRelevantConfigurations DataSourceBase.ConfigMask(String, String, Boolean) DataSourceBase.CachePartialKey DataSourceBase.CacheFullKey DataSourceBase.CacheTimestamp DataSourceBase.CacheChanged(Int64) DataSourceBase.PurgeList(Boolean) DataSourceBase.In DataSourceBase.Out DataSourceBase.Item[String] DataSourceBase.GetStream(String, String, Boolean, Boolean) DataSourceBase.List DataSourceBase.Attach(IDataSource) DataSourceBase.Attach(String, IDataSource, String) DataSourceBase.Attach(String, IDataStream) HasLog.Log HasLog.InitLog(String, ILog, String) HasLog.InitLog(String, ILog, String, CodeRef) Namespace : ToSic.Eav.DataSources Assembly : ToSic.Eav.DataSources.dll Syntax [VisualQuery(GlobalName = \"58cfcbd6-e2ae-40f7-9acf-ac8d758adff9\", NiceName = \"Relationship/Tree Modeler\", UiHint = \"Connect items to create relationships or trees\", Icon = \"account_tree\", PreviousNames = new string[]{\"58cfcbd6-e2ae-40f7-9acf-ac8d758adff9\", \"ToSic.Eav.DataSources.TreeBuilder, ToSic.Eav.DataSources.SharePoint\"}, Type = DataSourceType.Modify, ExpectsDataOfType = \"d167054a-fe0f-4e98-b1f1-0a9990873e86\", In = new string[]{\"Default*\"}, HelpLink = \"https://r.2sxc.org/DsTreeModeler\")] [PublicApi(\"Brand new in v11.20, WIP, may still change a bit\")] public sealed class TreeModeler : DataSourceBase, IDataSource, IAppIdentity, IZoneIdentity, IAppIdentityLight, ICacheInfo, ICacheKey, ICacheExpiring, ITimestamped, ICanPurgeListCache, IHasLog, IDataTarget, IDataPartShared Remarks New in v11.20 Properties | Improve this Doc View Source Identifier This determines what property is used as ID on the parent. Currently only allows \"EntityId\" and \"EntityGuid\" Declaration public string Identifier { get; set; } Property Value Type Description System.String | Improve this Doc View Source LogId Declaration public override string LogId { get; } Property Value Type Description System.String Overrides ToSic.Eav.DataSources.DataSourceBase.LogId | Improve this Doc View Source NewChildrenField The name of the new field on the parent, which will reference the children Declaration public string NewChildrenField { get; set; } Property Value Type Description System.String | Improve this Doc View Source NewParentField Name of the new field on a child, which will reference the parent. Declaration public string NewParentField { get; set; } Property Value Type Description System.String | Improve this Doc View Source ParentReferenceField The property on a child which contains the parent ID Declaration public string ParentReferenceField { get; set; } Property Value Type Description System.String Implements IDataSource IAppIdentity IZoneIdentity IAppIdentityLight ICacheKey ICacheExpiring ITimestamped ICanPurgeListCache IHasLog IDataTarget IDataPartShared"
  },
  "api/dot-net/ToSic.Sxc.Dnn.DataSources.DnnSql.html": {
    "href": "api/dot-net/ToSic.Sxc.Dnn.DataSources.DnnSql.html",
    "title": "Class DnnSql | 2sxc 13 / EAV 13",
    "keywords": "Class DnnSql Retrieves data from SQL, specifically using the DNN Connection String Data Source: DnnSql The DnnSql DataSource is part of the Standard Dnn Data Sources . It lets you use data from the Dnn SQL databases as if they were entities. This is what it looks like: How to use Internally the DnnSqlDataSource is exactly the same as the Sql DataSource just with fewer options, because you cannot choose most of the settings. Please consult the Sql DataSource documentation to see how you can use it. We recommend to use the VisualQuery where possible, as it's easier to understand and is identical for C# and JavaScript. It's also better because it separates data-retrieval from visualization. Read also DataSource / DataStream List of all EAV Data Sources Query / VisualQuery Demo App and further links You should find some examples in this demo App Demo App with examples for most DataSources History Introduced in EAV 3.x, in 2sxc ? <!-- note: this must be an H1 because of the automatic TOC in the code pages --> API Documentation Inheritance System.Object HasLog DataSourceBase ExternalData Sql DnnSql Implements IDataSource IAppIdentity IZoneIdentity IAppIdentityLight ICacheKey ICacheExpiring ITimestamped ICanPurgeListCache IHasLog IDataTarget IDataPartShared Inherited Members Sql.ConnectionStringName Sql.ConnectionString Sql.SelectCommand Sql.ContentType Sql.TitleField Sql.EntityIdField Sql.ErrorTitleForbiddenSql ExternalData.CacheTimestamp DataSourceBase.ErrorStream DataSourceBase.SetError(String, String, Exception) DataSourceBase.GetRequiredInList(IImmutableList<IEntity>) DataSourceBase.GetRequiredInList(String, IImmutableList<IEntity>) DataSourceBase.Name DataSourceBase.AppId DataSourceBase.ZoneId DataSourceBase.Guid DataSourceBase.Configuration DataSourceBase.DataBuilder DataSourceBase.CacheRelevantConfigurations DataSourceBase.ConfigMask(String, String, Boolean) DataSourceBase.CachePartialKey DataSourceBase.CacheFullKey DataSourceBase.CacheChanged(Int64) DataSourceBase.PurgeList(Boolean) DataSourceBase.In DataSourceBase.Out DataSourceBase.Item[String] DataSourceBase.GetStream(String, String, Boolean, Boolean) DataSourceBase.List DataSourceBase.Attach(IDataSource) DataSourceBase.Attach(String, IDataSource, String) DataSourceBase.Attach(String, IDataStream) HasLog.Log HasLog.InitLog(String, ILog, String) HasLog.InitLog(String, ILog, String, CodeRef) Namespace : ToSic.Sxc.Dnn.DataSources Assembly : ToSic.Sxc.Dnn.Core.dll Syntax [PublicApi_Stable_ForUseInYourCode] [VisualQuery(NiceName = \"Dnn SQL\", UiHint = \"Data from the Dnn database\", Icon = \"dynamic_form\", Type = DataSourceType.Source, GlobalName = \"ToSic.Sxc.Dnn.DataSources.DnnSql, ToSic.Sxc.Dnn\", DynamicOut = false, PreviousNames = new string[]{\"ToSic.SexyContent.DataSources.DnnSqlDataSource, ToSic.SexyContent\", \"ToSic.SexyContent.Environment.Dnn7.DataSources.DnnSqlDataSource, ToSic.SexyContent\"}, HelpLink = \"https://github.com/2sic/2sxc/wiki/DotNet-DataSource-DnnSqlDataSource\", ExpectsDataOfType = \"|Config ToSic.SexyContent.DataSources.DnnSqlDataSource\")] public class DnnSql : Sql, IDataSource, IAppIdentity, IZoneIdentity, IAppIdentityLight, ICacheInfo, ICacheKey, ICacheExpiring, ITimestamped, ICanPurgeListCache, IHasLog, IDataTarget, IDataPartShared Constructors | Improve this Doc View Source DnnSql() Declaration public DnnSql() Implements IDataSource IAppIdentity IZoneIdentity IAppIdentityLight ICacheKey ICacheExpiring ITimestamped ICanPurgeListCache IHasLog IDataTarget IDataPartShared"
  },
  "api/dot-net/ToSic.Eav.DataSources.Caching.CacheAllStreams.html": {
    "href": "api/dot-net/ToSic.Eav.DataSources.Caching.CacheAllStreams.html",
    "title": "Class CacheAllStreams | 2sxc 13 / EAV 13",
    "keywords": "Class CacheAllStreams Special DataSource which automatically caches everything it's given. It's Used to optimize queries, so that heavier calculations don't need to be repeated if another request with the same signature is used. Internally it asks all up-stream DataSources what factors would determine their caching. So if part of the supplying DataSources would have a changed parameter (like a different filter), it will still run the full query and cache the results again. Inheritance System.Object HasLog DataSourceBase CacheAllStreams Implements IDataSource IAppIdentity IZoneIdentity IAppIdentityLight ICacheKey ICacheExpiring ITimestamped ICanPurgeListCache IHasLog IDataTarget IDataPartShared Inherited Members DataSourceBase.ErrorStream DataSourceBase.SetError(String, String, Exception) DataSourceBase.GetRequiredInList(IImmutableList<IEntity>) DataSourceBase.GetRequiredInList(String, IImmutableList<IEntity>) DataSourceBase.Name DataSourceBase.AppId DataSourceBase.ZoneId DataSourceBase.Guid DataSourceBase.Configuration DataSourceBase.DataBuilder DataSourceBase.CacheRelevantConfigurations DataSourceBase.ConfigMask(String, String, Boolean) DataSourceBase.CachePartialKey DataSourceBase.CacheFullKey DataSourceBase.CacheTimestamp DataSourceBase.CacheChanged(Int64) DataSourceBase.PurgeList(Boolean) DataSourceBase.In DataSourceBase.Item[String] DataSourceBase.GetStream(String, String, Boolean, Boolean) DataSourceBase.List DataSourceBase.Attach(IDataSource) DataSourceBase.Attach(String, IDataSource, String) DataSourceBase.Attach(String, IDataStream) HasLog.Log HasLog.InitLog(String, ILog, String) HasLog.InitLog(String, ILog, String, CodeRef) Namespace : ToSic.Eav.DataSources.Caching Assembly : ToSic.Eav.DataSources.dll Syntax [VisualQuery(NiceName = \"Cache Streams\", UiHint = \"Cache all streams based on some rules\", Icon = \"history_toggle_off\", Type = DataSourceType.Cache, GlobalName = \"ToSic.Eav.DataSources.Caching.CacheAllStreams, ToSic.Eav.DataSources\", DynamicOut = true, DynamicIn = true, ExpectsDataOfType = \"|Config ToSic.Eav.DataSources.Caches.CacheAllStreams\", PreviousNames = new string[]{\"ToSic.Eav.DataSources.Caches.CacheAllStreams, ToSic.Eav.DataSources\"}, HelpLink = \"https://github.com/2sic/2sxc/wiki/DotNet-DataSource-CacheAllStreams\")] [PublicApi_Stable_ForUseInYourCode] public class CacheAllStreams : DataSourceBase, IDataSource, IAppIdentity, IZoneIdentity, IAppIdentityLight, ICacheInfo, ICacheKey, ICacheExpiring, ITimestamped, ICanPurgeListCache, IHasLog, IDataTarget, IDataPartShared Properties | Improve this Doc View Source CacheDurationInSeconds How long to keep these streams in the cache Declaration public int CacheDurationInSeconds { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source Out Gets the Dictionary of Out-Streams. This is the internal accessor, as usually you'll use this[\"name\"] instead. In rare cases you need the Out, for example to list the stream names in the data source. Declaration public override IDictionary<string, IDataStream> Out { get; } Property Value Type Description System.Collections.Generic.IDictionary < System.String , IDataStream > A dictionary of named IDataStream objects Overrides DataSourceBase.Out | Improve this Doc View Source RefreshOnSourceRefresh If a source-refresh should trigger a cache rebuild Declaration public bool RefreshOnSourceRefresh { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source ReturnCacheWhileRefreshing Perform a cache rebuild async. Declaration public bool ReturnCacheWhileRefreshing { get; set; } Property Value Type Description System.Boolean Implements IDataSource IAppIdentity IZoneIdentity IAppIdentityLight ICacheKey ICacheExpiring ITimestamped ICanPurgeListCache IHasLog IDataTarget IDataPartShared"
  },
  "api/dot-net/ToSic.Eav.DataSources.QueryRun.html": {
    "href": "api/dot-net/ToSic.Eav.DataSources.QueryRun.html",
    "title": "Class QueryRun | 2sxc 13 / EAV 13",
    "keywords": "Class QueryRun Run another query and provide the resulting data. The settings will provide the params for the inner query. The QueryRun DataSource is part of the Standard EAV Data Sources . It will run another query and give it parameters if needed. Read more about it here: Sub-Queries: Re-Use Queries in Other Queries How to use with the VisualQuery When using the VisualQuery you can just drag it into your query and set the parameters. History Introduced in 2sxc 10.24 <!-- note: this must be an H1 because of the automatic TOC in the code pages --> API Documentation Inheritance System.Object HasLog DataSourceBase QueryRun Implements IDataSource IAppIdentity IZoneIdentity IAppIdentityLight ICacheKey ICacheExpiring ITimestamped ICanPurgeListCache IHasLog IDataTarget IDataPartShared Inherited Members DataSourceBase.ErrorStream DataSourceBase.SetError(String, String, Exception) DataSourceBase.GetRequiredInList(IImmutableList<IEntity>) DataSourceBase.GetRequiredInList(String, IImmutableList<IEntity>) DataSourceBase.Name DataSourceBase.AppId DataSourceBase.ZoneId DataSourceBase.Guid DataSourceBase.Configuration DataSourceBase.DataBuilder DataSourceBase.CacheRelevantConfigurations DataSourceBase.ConfigMask(String, String, Boolean) DataSourceBase.CachePartialKey DataSourceBase.CacheFullKey DataSourceBase.CacheTimestamp DataSourceBase.CacheChanged(Int64) DataSourceBase.PurgeList(Boolean) DataSourceBase.In DataSourceBase.Item[String] DataSourceBase.GetStream(String, String, Boolean, Boolean) DataSourceBase.List DataSourceBase.Attach(IDataSource) DataSourceBase.Attach(String, IDataSource, String) DataSourceBase.Attach(String, IDataStream) HasLog.Log HasLog.InitLog(String, ILog, String) HasLog.InitLog(String, ILog, String, CodeRef) Namespace : ToSic.Eav.DataSources Assembly : ToSic.Eav.DataSources.dll Syntax [PublicApi_Stable_ForUseInYourCode] [VisualQuery(NiceName = \"Query Run\", UiHint = \"Get data from another Query\", Icon = \"launch\", Type = DataSourceType.Source, GlobalName = \"ToSic.Eav.DataSources.QueryRun, ToSic.Eav.DataSources\", DynamicOut = true, ExpectsDataOfType = \"78d25ea6-66cc-44a2-b45d-77749cd9420a\", HelpLink = \"https://r.2sxc.org/QueryRun\")] public class QueryRun : DataSourceBase, IDataSource, IAppIdentity, IZoneIdentity, IAppIdentityLight, ICacheInfo, ICacheKey, ICacheExpiring, ITimestamped, ICanPurgeListCache, IHasLog, IDataTarget, IDataPartShared Properties | Improve this Doc View Source Out Gets the Dictionary of Out-Streams. This is the internal accessor, as usually you'll use this[\"name\"] instead. In rare cases you need the Out, for example to list the stream names in the data source. Declaration public override IDictionary<string, IDataStream> Out { get; } Property Value Type Description System.Collections.Generic.IDictionary < System.String , IDataStream > A dictionary of named IDataStream objects Overrides DataSourceBase.Out Implements IDataSource IAppIdentity IZoneIdentity IAppIdentityLight ICacheKey ICacheExpiring ITimestamped ICanPurgeListCache IHasLog IDataTarget IDataPartShared"
  },
  "api/dot-net/ToSic.Eav.DataSources.AttributeRename.html": {
    "href": "api/dot-net/ToSic.Eav.DataSources.AttributeRename.html",
    "title": "Class AttributeRename | 2sxc 13 / EAV 13",
    "keywords": "Class AttributeRename DataSource to rename attributes. Will help to change internal field names to something which is more appropriate for your JS or whatever. TODO: update the standard list with attribute rename and the StreamSwitch one I made last week The AttributeRename DataSource is part of the Standard EAV Data Sources . It renames attributes from items so that the result has more appropriate field/property names. Optionally it will also remove all fields which have not been renamed, in case you only want the smaller, renamed items. How to use with the VisualQuery When using the VisualQuery you can just drag it into your query. Now you can configure what properties you want and not. In this screenshot you can see: The DataSource which we're configuring The field map renaming fields Toggle to keep attributes which were not renamed - default is True The optional type name which you can give the modified entities - default is blank, resulting in the original type being used Programming With The AttributeRename DataSource We recommend to use the VisualQuery where possible, as it's easier to understand and is identical for C# and JavaScript. It's also better because it separates data-retrieval from visualization. Read also DataSource / DataStream List of all EAV Data Sources Query / VisualQuery Demo App and further links You should find some examples in this demo App Demo App with examples for most DataSources History Introduced in EAV / 2sxc 10.27 <!-- note: this must be an H1 because of the automatic TOC in the code pages --> API Documentation Inheritance System.Object HasLog DataSourceBase AttributeRename Implements IDataSource IAppIdentity IZoneIdentity IAppIdentityLight ICacheKey ICacheExpiring ITimestamped ICanPurgeListCache IHasLog IDataTarget IDataPartShared Inherited Members DataSourceBase.ErrorStream DataSourceBase.SetError(String, String, Exception) DataSourceBase.GetRequiredInList(IImmutableList<IEntity>) DataSourceBase.GetRequiredInList(String, IImmutableList<IEntity>) DataSourceBase.Name DataSourceBase.AppId DataSourceBase.ZoneId DataSourceBase.Guid DataSourceBase.Configuration DataSourceBase.DataBuilder DataSourceBase.CacheRelevantConfigurations DataSourceBase.ConfigMask(String, String, Boolean) DataSourceBase.CachePartialKey DataSourceBase.CacheFullKey DataSourceBase.CacheTimestamp DataSourceBase.CacheChanged(Int64) DataSourceBase.PurgeList(Boolean) DataSourceBase.In DataSourceBase.Out DataSourceBase.Item[String] DataSourceBase.GetStream(String, String, Boolean, Boolean) DataSourceBase.List DataSourceBase.Attach(IDataSource) DataSourceBase.Attach(String, IDataSource, String) DataSourceBase.Attach(String, IDataStream) HasLog.Log HasLog.InitLog(String, ILog, String) HasLog.InitLog(String, ILog, String, CodeRef) Namespace : ToSic.Eav.DataSources Assembly : ToSic.Eav.DataSources.dll Syntax [PublicApi_Stable_ForUseInYourCode] [VisualQuery(NiceName = \"Rename Attribute/Property\", UiHint = \"Rename some attributes / properties\", Icon = \"edit_attributes\", Type = DataSourceType.Modify, GlobalName = \"ToSic.Eav.DataSources.AttributeRename, ToSic.Eav.DataSources\", DynamicOut = false, In = new string[]{\"Default*\"}, ExpectsDataOfType = \"c5918cb8-d35a-48c7-9380-a437edde66d2\", HelpLink = \"https://r.2sxc.org/DsAttributeRename\")] public class AttributeRename : DataSourceBase, IDataSource, IAppIdentity, IZoneIdentity, IAppIdentityLight, ICacheInfo, ICacheKey, ICacheExpiring, ITimestamped, ICanPurgeListCache, IHasLog, IDataTarget, IDataPartShared Remarks Technically many things could just identify the app they belong to, and let the system look up the zone. But this would be inefficient, so for optimization, many items identify themselves with both the app and zone Ids Properties | Improve this Doc View Source AttributeMap A string containing one or more attribute maps. The syntax is \"NewName=OldName\" - one mapping per line Declaration public string AttributeMap { get; set; } Property Value Type Description System.String | Improve this Doc View Source KeepOtherAttributes True/false if attributes not renamed should be preserved. Declaration public bool KeepOtherAttributes { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source TypeName A string containing one or more attribute maps. The syntax is \"NewName=OldName\" - one mapping per line Declaration public string TypeName { get; set; } Property Value Type Description System.String Implements IDataSource IAppIdentity IZoneIdentity IAppIdentityLight ICacheKey ICacheExpiring ITimestamped ICanPurgeListCache IHasLog IDataTarget IDataPartShared"
  },
  "api/dot-net/ToSic.Sxc.DataSources.Pages.html": {
    "href": "api/dot-net/ToSic.Sxc.DataSources.Pages.html",
    "title": "Class Pages | 2sxc 13 / EAV 13",
    "keywords": "Class Pages Deliver a list of pages from the current platform (Dnn or Oqtane) Inheritance System.Object HasLog DataSourceBase ExternalData ToSic.Sxc.DataSources.CmsBases.PagesBase Pages Implements IDataSource IAppIdentity IZoneIdentity IAppIdentityLight ICacheKey ICacheExpiring ITimestamped ICanPurgeListCache IHasLog IDataTarget IDataPartShared Inherited Members ExternalData.CacheTimestamp DataSourceBase.ErrorStream DataSourceBase.SetError(String, String, Exception) DataSourceBase.GetRequiredInList(IImmutableList<IEntity>) DataSourceBase.GetRequiredInList(String, IImmutableList<IEntity>) DataSourceBase.Name DataSourceBase.AppId DataSourceBase.ZoneId DataSourceBase.Guid DataSourceBase.Configuration DataSourceBase.DataBuilder DataSourceBase.CacheRelevantConfigurations DataSourceBase.ConfigMask(String, String, Boolean) DataSourceBase.CachePartialKey DataSourceBase.CacheFullKey DataSourceBase.CacheChanged(Int64) DataSourceBase.PurgeList(Boolean) DataSourceBase.In DataSourceBase.Out DataSourceBase.Item[String] DataSourceBase.GetStream(String, String, Boolean, Boolean) DataSourceBase.List DataSourceBase.Attach(IDataSource) DataSourceBase.Attach(String, IDataSource, String) DataSourceBase.Attach(String, IDataStream) HasLog.Log HasLog.InitLog(String, ILog, String) HasLog.InitLog(String, ILog, String, CodeRef) Namespace : ToSic.Sxc.DataSources Assembly : ToSic.Sxc.Dnn.Core.dll Syntax [PublicApi] [VisualQuery(ExpectsDataOfType = \"\", GlobalName = \"e35031b2-3e99-41fe-a5ac-b79f447d5800\", HelpLink = \"\", Icon = \"find_in_page\", NiceName = \"Pages\", Type = DataSourceType.Source, UiHint = \"Pages in the CMS\")] public class Pages : PagesBase, IDataSource, IAppIdentity, IZoneIdentity, IAppIdentityLight, ICacheInfo, ICacheKey, ICacheExpiring, ITimestamped, ICanPurgeListCache, IHasLog, IDataTarget, IDataPartShared Methods | Improve this Doc View Source GetPagesInternal() Declaration protected override List<PagesBase.TempPageInfo> GetPagesInternal() Returns Type Description System.Collections.Generic.List < ToSic.Sxc.DataSources.CmsBases.PagesBase.TempPageInfo > Overrides ToSic.Sxc.DataSources.CmsBases.PagesBase.GetPagesInternal() Implements IDataSource IAppIdentity IZoneIdentity IAppIdentityLight ICacheKey ICacheExpiring ITimestamped ICanPurgeListCache IHasLog IDataTarget IDataPartShared"
  },
  "api/dot-net/Custom.Hybrid.Api12.html": {
    "href": "api/dot-net/Custom.Hybrid.Api12.html",
    "title": "Class Api12 | 2sxc 13 / EAV 13",
    "keywords": "Class Api12 This is the base class for all custom API Controllers. With this, your code receives the full context incl. the current App, DNN, Data, etc. Inheritance System.Object System.Web.Http.ApiController DotNetNuke.Web.Api.DnnApiController ToSic.Sxc.Dnn.WebApi.DnnApiControllerWithFixes < ToSic.Eav.WebApi.DummyControllerReal > ToSic.Sxc.WebApi.SxcApiControllerBase < ToSic.Eav.WebApi.DummyControllerReal > ToSic.Sxc.WebApi.DynamicApiController Api12 Api12 Implements IDynamicCode12 IDynamicCode ICreateInstance ICompatibilityLevel IHasLog IDynamicWebApi Namespace : Custom.Hybrid Assembly : ToSic.Sxc.Dnn.WebApi.dll Syntax [PublicApi_Stable_ForUseInYourCode(\"This is the official base class for v12+\")] public abstract class Api12 : DynamicApiController, IHttpController, IDisposable, IDynamicCode12, IDynamicCode, ICreateInstance, ICompatibilityLevel, IHasLog, IDynamicWebApi, IHasDynamicCodeRoot, IDynamicCodeBeforeV10 Constructors | Improve this Doc View Source Api12() Declaration protected Api12() | Improve this Doc View Source Api12(String) Declaration protected Api12(string logSuffix) Parameters Type Name Description System.String logSuffix Properties | Improve this Doc View Source App A fully prepared IApp object letting you access all the data and queries in the current app. Declaration public IApp App { get; } Property Value Type Description IApp The current app | Improve this Doc View Source CmsContext The CmsContext tells you about the environment, like what page and module we're running in. It's supposed to replace the Dnn object in Razor and WebAPI code. Declaration public ICmsContext CmsContext { get; } Property Value Type Description ICmsContext Remarks New in v11.11 | Improve this Doc View Source Content The content object of the current razor view - IF the current view has content. If the view is a list, it will return the first item. Will be null otherwise. To tell if it's the demo/default item, use IsDemoItem . Declaration public dynamic Content { get; } Property Value Type Description System.Object A IDynamicEntity object with the current content - or null. | Improve this Doc View Source Convert Conversion helper for common data conversions in Razor and WebAPIs Declaration public IConvertService Convert { get; } Property Value Type Description IConvertService Remarks Added in 2sxc 12.05 | Improve this Doc View Source Data The data prepared for the current Code. Usually user data which was manually added to the instance, but can also be a query. Declaration public IBlockDataSource Data { get; } Property Value Type Description IBlockDataSource An IBlockDataSource which is as IDataSource . | Improve this Doc View Source DevTools Declaration public IDevTools DevTools { get; } Property Value Type Description ToSic.Sxc.Code.DevTools.IDevTools | Improve this Doc View Source Edit Helper commands to enable in-page editing functionality Use it to check if edit is enabled, generate context-json infos and provide toolbar buttons Declaration public IEditService Edit { get; } Property Value Type Description IEditService An IEditService object. | Improve this Doc View Source Header The header object of the current razor view, if it's a list and has a header object. If it's a list and doesn't have a header (and no default), it will return null. To tell if it's the demo/default item, use IsDemoItem . Declaration public dynamic Header { get; } Property Value Type Description System.Object A IDynamicEntity object with the current content. Remarks Introduced in 2sxc 10.10 - previously it was called ListContent, now deprecated. | Improve this Doc View Source Link Link helper object to create the correct links Declaration public ILinkService Link { get; } Property Value Type Description ILinkService A ILinkService object. | Improve this Doc View Source Resources Resources for this Scenario. This is a dynamic object based on the IDynamicStack . It will combine both the Resources of the View and the App. The View-Resources will have priority. In future it may also include some global Resources. ü™í Use in Razor: @Resources.CtaButtonLabel Declaration public dynamic Resources { get; } Property Value Type Description System.Object Remarks New in 12.03 | Improve this Doc View Source Settings Settings for this Scenario. This is a dynamic object based on the IDynamicStack . It will combine both the Settings of the View and the App. The View-Settings will have priority. In future it may also include some global Settings. ü™í Use in Razor: @Settings.ItemsPerRow Declaration public dynamic Settings { get; } Property Value Type Description System.Object Remarks New in 12.03 Methods | Improve this Doc View Source Accepted() Creates a .net-core like AcceptedResult object that produces an .net-core like StatusCodes.Status202Accepted response. Declaration [NonAction] public dynamic Accepted() Returns Type Description System.Object The created .net-core like AcceptedResult for the response. | Improve this Doc View Source AsAdam(IEntity, String) Provides an Adam instance for this item and field Declaration public IFolder AsAdam(IEntity entity, string fieldName) Parameters Type Name Description IEntity entity The entity, often Content or similar System.String fieldName The field name, like \"Gallery\" or \"Pics\" Returns Type Description IFolder An Adam object for navigating the assets | Improve this Doc View Source AsAdam(IDynamicEntity, String) Provides an Adam instance for this item and field Declaration public IFolder AsAdam(IDynamicEntity entity, string fieldName) Parameters Type Name Description IDynamicEntity entity The entity, often Content or similar System.String fieldName The field name, like \"Gallery\" or \"Pics\" Returns Type Description IFolder An Adam object for navigating the assets | Improve this Doc View Source AsDynamic(Object) Convert a dynamic entity and return itself again. This is so coders don't have to worry if the original object was an IEntity or a IDynamicEntity in the first place. Declaration public dynamic AsDynamic(object dynamicEntity) Parameters Type Name Description System.Object dynamicEntity the original object Returns Type Description System.Object a dynamic object for easier coding | Improve this Doc View Source AsDynamic(Object[]) Convert one or many Entities and Dynamic entities into an IDynamicStack Declaration [PublicApi(\"Careful - still Experimental in 12.02\")] public dynamic AsDynamic(params object[] entities) Parameters Type Name Description System.Object [] entities one or more source object Returns Type Description System.Object a dynamic object for easier coding Remarks New in 12.05 | Improve this Doc View Source AsDynamic(String, String) Take a json and provide it as a dynamic object to the code Declaration public dynamic AsDynamic(string json, string fallback = \"{}\") Parameters Type Name Description System.String json the original json string System.String fallback Alternate string to use, if the original json can't parse. Can also be null or the word \"error\" if you would prefer an error to be thrown. Returns Type Description System.Object A dynamic object representing the original json. If it can't be parsed, it will parse the fallback, which by default is an empty empty dynamic object. If you provide null for the fallback, then you will get null back. Remarks Added in 2sxc 10.22.00 | Improve this Doc View Source AsDynamic(IEntity) Wraps an entity into a IDynamicEntity Declaration public dynamic AsDynamic(IEntity entity) Parameters Type Name Description IEntity entity the original object Returns Type Description System.Object a dynamic object for easier coding | Improve this Doc View Source AsEntity(Object) Unwraps a dynamic entity back into the underlying IEntity Declaration public IEntity AsEntity(object dynamicEntity) Parameters Type Name Description System.Object dynamicEntity the wrapped IEntity Returns Type Description IEntity A normal IEntity | Improve this Doc View Source AsList(Object) Converts a list of IEntity objects into a list of IDynamicEntity objects. Declaration public IEnumerable<dynamic> AsList(object list) Parameters Type Name Description System.Object list typically a List/IEnumerable of Entities or DynamicEntities. Can also be a IDataSource in which case it uses the default stream. Returns Type Description System.Collections.Generic.IEnumerable < System.Object > a list of IDynamicEntity objects Remarks Added in 2sxc 10.21.00 | Improve this Doc View Source BadRequest() Creates an .net-core like BadRequestResult that produces a .net-core like StatusCodes.Status400BadRequest response. Declaration [NonAction] public dynamic BadRequest() Returns Type Description System.Object The created .net-core like BadRequestResult for the response. | Improve this Doc View Source Conflict() Creates an .net-core like ConflictResult that produces a .net-core like StatusCodes.Status409Conflict response. Declaration [NonAction] public dynamic Conflict() Returns Type Description System.Object The created .net-core like ConflictResult for the response. | Improve this Doc View Source Conflict(Object) Creates an .net-core like ConflictObjectResult that produces a .net-core like StatusCodes.Status409Conflict response. Declaration [NonAction] public dynamic Conflict(object error) Parameters Type Name Description System.Object error Contains errors to be returned to the client. Returns Type Description System.Object The created .net-core like ConflictObjectResult for the response. | Improve this Doc View Source CreateSource<T>(IDataSource, ILookUpEngine) Create a IDataSource which will process data from the given stream. Declaration public T CreateSource<T>(IDataSource inSource = null, ILookUpEngine configurationProvider = null) where T : IDataSource Parameters Type Name Description IDataSource inSource The data source which will be the default In of the new data-source. ILookUpEngine configurationProvider An alternate configuration provider for the DataSource Returns Type Description T A typed DataSource object Type Parameters Name Description T A data-source type - must be inherited from IDataSource | Improve this Doc View Source CreateSource<T>(IDataStream) Create a IDataSource which will process data from the given stream. Declaration public T CreateSource<T>(IDataStream inStream) where T : IDataSource Parameters Type Name Description IDataStream inStream The stream which will be the default In of the new data-source. Returns Type Description T A typed DataSource object Type Parameters Name Description T A data-source type - must be inherited from IDataSource | Improve this Doc View Source File(String, Nullable<Boolean>, String, String, String, Object) Create a File-result to stream to the client Declaration public dynamic File(string noParamOrder = \"Rule: All params must be named (https://r.2sxc.org/named-params)\", bool? download = default(bool? ), string virtualPath = null, string contentType = null, string fileDownloadName = null, object contents = null) Parameters Type Name Description System.String noParamOrder see Convention: Named Parameters System.Nullable < System.Boolean > download If a download should be enforced (otherwise the file may just be displayed - like an image) System.String virtualPath Path in the website to get the file from. Provide either virtualPath or contents System.String contentType Mime Content-type. Will try to auto-detect from virtualPath or fileDownloadName if not provided. System.String fileDownloadName Download name. If provided, it will try to force download/save on the browser. System.Object contents Content of the result - a string, byte[] or stream to include. Returns Type Description System.Object Remarks Added in 2sxc 12.05 | Improve this Doc View Source Forbid() Creates a .net-core like ForbidResult (.net-core like StatusCodes.Status403Forbidden by default). Declaration [NonAction] public dynamic Forbid() Returns Type Description System.Object The created .net-core like ForbidResult for the response. Remarks Some authentication schemes, such as cookies, will convert .net-core like StatusCodes.Status403Forbidden to a redirect to show a login page. | Improve this Doc View Source NoContent() Creates a .net-core like NoContentResult object that produces an empty .net-core like StatusCodes.Status204NoContent response. Declaration [NonAction] public dynamic NoContent() Returns Type Description System.Object The created .net-core like NoContentResult object for the response. | Improve this Doc View Source NotFound() Creates an .net-core like NotFoundResult that produces a .net-core like StatusCodes.Status404NotFound response. Declaration [NonAction] public dynamic NotFound() Returns Type Description System.Object The created .net-core like NotFoundResult for the response. | Improve this Doc View Source NotFound(Object) Creates an .net-core like NotFoundObjectResult that produces a .net-core like StatusCodes.Status404NotFound response. Declaration [NonAction] public dynamic NotFound(object value) Parameters Type Name Description System.Object value Returns Type Description System.Object The created .net-core like NotFoundObjectResult for the response. | Improve this Doc View Source Ok() Creates a .net-core like OkResult object that produces an empty .net-core like StatusCodes.Status200OK response. Declaration [NonAction] public dynamic Ok() Returns Type Description System.Object The created .net-core like OkResult for the response. | Improve this Doc View Source Ok(Object) Creates an .net-core like OkObjectResult object that produces an .net-core like StatusCodes.Status200OK response. Declaration [NonAction] public dynamic Ok(object value) Parameters Type Name Description System.Object value The content value to format in the entity body. Returns Type Description System.Object The created .net-core like OkObjectResult for the response. | Improve this Doc View Source Redirect(String) Creates a .net-core like RedirectResult object that redirects (.net-core like StatusCodes.Status302Found ) to the specified url . Declaration [NonAction] public dynamic Redirect(string url) Parameters Type Name Description System.String url The URL to redirect to. Returns Type Description System.Object The created .net-core like RedirectResult for the response. | Improve this Doc View Source RedirectPermanent(String) Creates a .net-core like RedirectResult object with .net-core like RedirectResult.Permanent set to true (.net-core like StatusCodes.Status301MovedPermanently ) using the specified url . Declaration [NonAction] public dynamic RedirectPermanent(string url) Parameters Type Name Description System.String url The URL to redirect to. Returns Type Description System.Object The created .net-core like RedirectResult for the response. | Improve this Doc View Source SaveInAdam(String, Stream, String, String, Nullable<Guid>, String, String) Save a file from a stream (usually an upload from the browser) into an adam-field of an item. Read more about this in the the WebAPI docs for SaveInAdam Declaration public IFile SaveInAdam(string noParamOrder = \"Rule: All params must be named (https://r.2sxc.org/named-params)\", Stream stream = null, string fileName = null, string contentType = null, Guid? guid = default(Guid? ), string field = null, string subFolder = \"\") Parameters Type Name Description System.String noParamOrder see Convention: Named Parameters System.IO.Stream stream the stream System.String fileName file name to save to System.String contentType content-type of the target item (important for security checks) System.Nullable < System.Guid > guid System.String field System.String subFolder Returns Type Description IFile | Improve this Doc View Source StatusCode(Int32) Creates a .net-core like StatusCodeResult object by specifying a statusCode . Declaration [NonAction] public dynamic StatusCode(int statusCode) Parameters Type Name Description System.Int32 statusCode The status code to set on the response. Returns Type Description System.Object The created .net-core like StatusCodeResult object for the response. | Improve this Doc View Source StatusCode(Int32, Object) Creates a .net-core like ObjectResult object by specifying a statusCode and value Declaration [NonAction] public dynamic StatusCode(int statusCode, object value) Parameters Type Name Description System.Int32 statusCode The status code to set on the response. System.Object value The value to set on the .net-core like `ObjectResult\"/>. Returns Type Description System.Object The created .net-core like ObjectResult object for the response. | Improve this Doc View Source Unauthorized() Creates an .net-core like UnauthorizedResult that produces an .net-core like StatusCodes.Status401Unauthorized response. Declaration [NonAction] public dynamic Unauthorized() Returns Type Description System.Object The created .net-core like UnauthorizedResult for the response. | Improve this Doc View Source Unauthorized(Object) Creates an .net-core like UnauthorizedObjectResult that produces a .net-core like StatusCodes.Status401Unauthorized response. Declaration [NonAction] public dynamic Unauthorized(object value) Parameters Type Name Description System.Object value Returns Type Description System.Object The created .net-core like UnauthorizedObjectResult for the response. Implements IDynamicCode12 IDynamicCode ICreateInstance ICompatibilityLevel IHasLog IDynamicWebApi"
  },
  "api/dot-net/ToSic.Eav.DataSources.Sys.QueryInfo.html": {
    "href": "api/dot-net/ToSic.Eav.DataSources.Sys.QueryInfo.html",
    "title": "Class QueryInfo | 2sxc 13 / EAV 13",
    "keywords": "Class QueryInfo A DataSource that returns infos about a query. For example, it says how many out-streams are available and what fields can be used on each stream. This is used in fields which let you pick a query, stream and field from that stream. Inheritance System.Object HasLog DataSourceBase QueryInfo Implements IDataSource IAppIdentity IZoneIdentity IAppIdentityLight ICacheKey ICacheExpiring ITimestamped ICanPurgeListCache IHasLog IDataTarget IDataPartShared Inherited Members DataSourceBase.ErrorStream DataSourceBase.SetError(String, String, Exception) DataSourceBase.GetRequiredInList(IImmutableList<IEntity>) DataSourceBase.GetRequiredInList(String, IImmutableList<IEntity>) DataSourceBase.Name DataSourceBase.AppId DataSourceBase.ZoneId DataSourceBase.Guid DataSourceBase.Configuration DataSourceBase.DataBuilder DataSourceBase.CacheRelevantConfigurations DataSourceBase.ConfigMask(String, String, Boolean) DataSourceBase.CachePartialKey DataSourceBase.CacheFullKey DataSourceBase.CacheTimestamp DataSourceBase.CacheChanged(Int64) DataSourceBase.PurgeList(Boolean) DataSourceBase.In DataSourceBase.Out DataSourceBase.Item[String] DataSourceBase.GetStream(String, String, Boolean, Boolean) DataSourceBase.List DataSourceBase.Attach(IDataSource) DataSourceBase.Attach(String, IDataSource, String) DataSourceBase.Attach(String, IDataStream) HasLog.Log HasLog.InitLog(String, ILog, String) HasLog.InitLog(String, ILog, String, CodeRef) Namespace : ToSic.Eav.DataSources.Sys Assembly : ToSic.Eav.DataSources.dll Syntax [InternalApi_DoNotUse_MayChangeWithoutNotice] [VisualQuery(NiceName = \"DataSources\", UiHint = \"List the DataSources available in the system\", Icon = \"present_to_all\", Type = DataSourceType.System, GlobalName = \"ToSic.Eav.DataSources.System.QueryInfo, ToSic.Eav.DataSources\", Difficulty = DifficultyBeta.Advanced, DynamicOut = false, ExpectsDataOfType = \"4638668f-d506-4f5c-ae37-aa7fdbbb5540\", HelpLink = \"https://docs.2sxc.org/api/dot-net/ToSic.Eav.DataSources.System.QueryInfo.html\")] public sealed class QueryInfo : DataSourceBase, IDataSource, IAppIdentity, IZoneIdentity, IAppIdentityLight, ICacheInfo, ICacheKey, ICacheExpiring, ITimestamped, ICanPurgeListCache, IHasLog, IDataTarget, IDataPartShared Remarks Technically many things could just identify the app they belong to, and let the system look up the zone. But this would be inefficient, so for optimization, many items identify themselves with both the app and zone Ids Constructors | Improve this Doc View Source QueryInfo(Lazy<QueryManager>, QueryBuilder) Constructs a new Attributes DS Declaration public QueryInfo(Lazy<QueryManager> queryManagerLazy, QueryBuilder queryBuilder) Parameters Type Name Description System.Lazy < ToSic.Eav.DataSources.Queries.QueryManager > queryManagerLazy ToSic.Eav.DataSources.Queries.QueryBuilder queryBuilder Properties | Improve this Doc View Source LogId Declaration public override string LogId { get; } Property Value Type Description System.String Overrides ToSic.Eav.DataSources.DataSourceBase.LogId | Improve this Doc View Source QueryBuilder Declaration public QueryBuilder QueryBuilder { get; } Property Value Type Description ToSic.Eav.DataSources.Queries.QueryBuilder | Improve this Doc View Source QueryName The content-type name Declaration public string QueryName { get; set; } Property Value Type Description System.String | Improve this Doc View Source StreamName Declaration public string StreamName { get; set; } Property Value Type Description System.String Implements IDataSource IAppIdentity IZoneIdentity IAppIdentityLight ICacheKey ICacheExpiring ITimestamped ICanPurgeListCache IHasLog IDataTarget IDataPartShared"
  },
  "api/dot-net/ToSic.Sxc.Engines.RazorEngine.html": {
    "href": "api/dot-net/ToSic.Sxc.Engines.RazorEngine.html",
    "title": "Class RazorEngine | 2sxc 13 / EAV 13",
    "keywords": "Class RazorEngine The razor engine, which compiles / runs engine templates Inheritance System.Object HasLog EngineBase RazorEngine Implements IEngine IHasLog Inherited Members EngineBase.Helpers EngineBase.Init(IBlock) EngineBase.Render() EngineBase.Init(IBlock, Purpose) HasLog.Log HasLog.InitLog(String, ILog, String) HasLog.InitLog(String, ILog, String, CodeRef) Namespace : ToSic.Sxc.Engines Assembly : ToSic.Sxc.Dnn.Razor.dll Syntax [InternalApi_DoNotUse_MayChangeWithoutNotice(\"this is just fyi\")] [EngineDefinition(Name = \"Razor\")] public class RazorEngine : EngineBase, IRazorEngine, IEngine, IHasLog Constructors | Improve this Doc View Source RazorEngine(EngineBaseDependencies, Lazy<DnnDynamicCodeRoot>) Declaration public RazorEngine(EngineBaseDependencies helpers, Lazy<DnnDynamicCodeRoot> dnnDynCodeLazy) Parameters Type Name Description ToSic.Sxc.Engines.EngineBaseDependencies helpers System.Lazy < ToSic.Sxc.Dnn.Code.DnnDynamicCodeRoot > dnnDynCodeLazy Methods | Improve this Doc View Source CustomizeData() Mechanism which allows the view to change data it will show in a stream-based way. This helps to ensure that other parts like JSON-Streams or Search have the same information as the view itself. Declaration [Obsolete(\"Shouldn't be used any more, but will continue to work for indefinitely for old base classes, not in v12. There are now better ways of doing this\")] public override void CustomizeData() Overrides EngineBase.CustomizeData() | Improve this Doc View Source CustomizeSearch(Dictionary<String, List<ISearchItem>>, IModule, DateTime) Declaration [Obsolete(\"Shouldn't be used any more, but will continue to work for indefinitely for old base classes, not in v12. There are now better ways of doing this\")] public override void CustomizeSearch(Dictionary<string, List<ISearchItem>> searchInfos, IModule moduleInfo, DateTime beginDate) Parameters Type Name Description System.Collections.Generic.Dictionary < System.String , System.Collections.Generic.List < ISearchItem >> searchInfos ToSic.Sxc.Context.IModule moduleInfo System.DateTime beginDate Overrides EngineBase.CustomizeSearch(Dictionary<String, List<ISearchItem>>, IModule, DateTime) | Improve this Doc View Source RenderTemplate() Declaration protected override string RenderTemplate() Returns Type Description System.String Overrides ToSic.Sxc.Engines.EngineBase.RenderTemplate() Implements IEngine IHasLog"
  },
  "api/dot-net/ToSic.Sxc.Engines.IEngine.html": {
    "href": "api/dot-net/ToSic.Sxc.Engines.IEngine.html",
    "title": "Interface IEngine | 2sxc 13 / EAV 13",
    "keywords": "Interface IEngine The sub-system in charge of taking a configuration for an instance (aka Module) a template and using all that to produce an html-string for the browser. Inherited Members IHasLog.Log Namespace : ToSic.Sxc.Engines Assembly : ToSic.Sxc.dll Syntax [InternalApi_DoNotUse_MayChangeWithoutNotice(\"this is just fyi\")] public interface IEngine : IHasLog Methods | Improve this Doc View Source CustomizeData() Mechanism which allows the view to change data it will show in a stream-based way. This helps to ensure that other parts like JSON-Streams or Search have the same information as the view itself. Declaration [Obsolete(\"Shouldn't be used any more, but will continue to work for indefinitely for old base classes, not in v12. There are now better ways of doing this\")] void CustomizeData() | Improve this Doc View Source Init(IBlock) Declaration void Init(IBlock block) Parameters Type Name Description IBlock block | Improve this Doc View Source Init(IBlock, Purpose) Initialize the Engine (pass everything needed for Render to it). This is not in the constructor, because IEngines usually get constructed with DI, so the constructor is off-limits. Declaration void Init(IBlock block, Purpose purpose) Parameters Type Name Description IBlock block block within the cms Purpose purpose Purpose of the engine (show in web, search-index, etc.). The custom code may adapt its behavior depending on the purpose | Improve this Doc View Source Render() Renders a template, returning a string with the rendered template. Declaration RenderEngineResult Render() Returns Type Description ToSic.Sxc.Engines.RenderEngineResult The string - usually HTML - which the engine created."
  },
  "api/dot-net/ToSic.Eav.DataSources.StreamMerge.html": {
    "href": "api/dot-net/ToSic.Eav.DataSources.StreamMerge.html",
    "title": "Class StreamMerge | 2sxc 13 / EAV 13",
    "keywords": "Class StreamMerge A DataSource that merges all streams on the In into one Out stream The StreamMerge DataSource is part of the Standard EAV Data Sources . It will create a new stream containing everything which came into this data source. How to use with the VisualQuery When using the VisualQuery you can just drag it into your query. This is what it usually looks like: The above example shows two filters finding items and delivering them on the same stream. Example Using ItemFilterDuplicates A common scenario will also combine this using the ItemFilterDuplicates , in case various in-streams deliver the same item: No Settings The StreamMerge DataSource has no settings to configure. Note that it will automatically merge the streams in A-Z order of the In-Stream names. Programming With The StreamMerge DataSource We recommend to use the VisualQuery where possible, as it's easier to understand and is identical for C# and JavaScript. It's also better because it separates data-retrieval from visualization. Read also DataSource / DataStream List of all EAV Data Sources Query / VisualQuery Demo App and further links You should find some examples in this demo App Demo App with examples for most DataSources History Introduced in EAV 4.x, 2sxc 9.10 <!-- note: this must be an H1 because of the automatic TOC in the code pages --> API Documentation Inheritance System.Object HasLog DataSourceBase StreamMerge Implements IDataSource IAppIdentity IZoneIdentity IAppIdentityLight ICacheKey ICacheExpiring ITimestamped ICanPurgeListCache IHasLog IDataTarget IDataPartShared Inherited Members DataSourceBase.ErrorStream DataSourceBase.SetError(String, String, Exception) DataSourceBase.GetRequiredInList(IImmutableList<IEntity>) DataSourceBase.GetRequiredInList(String, IImmutableList<IEntity>) DataSourceBase.Name DataSourceBase.AppId DataSourceBase.ZoneId DataSourceBase.Guid DataSourceBase.Configuration DataSourceBase.DataBuilder DataSourceBase.CacheRelevantConfigurations DataSourceBase.ConfigMask(String, String, Boolean) DataSourceBase.CachePartialKey DataSourceBase.CacheFullKey DataSourceBase.CacheTimestamp DataSourceBase.CacheChanged(Int64) DataSourceBase.PurgeList(Boolean) DataSourceBase.In DataSourceBase.Out DataSourceBase.Item[String] DataSourceBase.GetStream(String, String, Boolean, Boolean) DataSourceBase.List DataSourceBase.Attach(IDataSource) DataSourceBase.Attach(String, IDataSource, String) DataSourceBase.Attach(String, IDataStream) HasLog.Log HasLog.InitLog(String, ILog, String) HasLog.InitLog(String, ILog, String, CodeRef) Namespace : ToSic.Eav.DataSources Assembly : ToSic.Eav.DataSources.dll Syntax [PublicApi_Stable_ForUseInYourCode] [VisualQuery(NiceName = \"Merge Streams\", UiHint = \"Combine multiple streams into one\", Icon = \"merge_type\", Type = DataSourceType.Logic, GlobalName = \"ToSic.Eav.DataSources.StreamMerge, ToSic.Eav.DataSources\", DynamicOut = false, DynamicIn = true, HelpLink = \"https://r.2sxc.org/DsStreamMerge\")] public sealed class StreamMerge : DataSourceBase, IDataSource, IAppIdentity, IZoneIdentity, IAppIdentityLight, ICacheInfo, ICacheKey, ICacheExpiring, ITimestamped, ICanPurgeListCache, IHasLog, IDataTarget, IDataPartShared Remarks History v12.10 added new Out streams Distinct removes duplicates, And keeps items which are in all streams and Xor keeps items which are only in one stream Implements IDataSource IAppIdentity IZoneIdentity IAppIdentityLight ICacheKey ICacheExpiring ITimestamped ICanPurgeListCache IHasLog IDataTarget IDataPartShared"
  },
  "api/dot-net/ToSic.Eav.DataSources.PublishingFilter.html": {
    "href": "api/dot-net/ToSic.Eav.DataSources.PublishingFilter.html",
    "title": "Class PublishingFilter | 2sxc 13 / EAV 13",
    "keywords": "Class PublishingFilter Filter entities to show Drafts or only Published Entities The PublishingFilter DataSource is part of the Standard EAV Data Sources . It will hide unpublished items for non-editors and provide these drafts if an editor is viewing the results. How to use with the VisualQuery When using the VisualQuery you can just drag it into your query. Here's a picture showing app data with or without publishing filter: Configuring the PublishingFilter DataSource The PublishingFilter has no configuration. How does it work? Since the published/unpublished is a very common query, internally the cache actually already provides different streams for this - and the PublishingFilter simply chooses the stream based on the current permissions. Programming With The PublishingDataSource We recommend to use the VisualQuery where possible, as it's easier to understand and is identical for C# and JavaScript. It's also better because it separates data-retrieval from visualization. Read also DataSource / DataStream List of all EAV Data Sources Query / VisualQuery Demo App and further links You should find some examples in this demo App Demo App with examples for most DataSources History Introduced in EAV 3.x, in 2sxc ? <!-- note: this must be an H1 because of the automatic TOC in the code pages --> API Documentation Inheritance System.Object HasLog DataSourceBase PublishingFilter Implements IDataSource IAppIdentity IZoneIdentity IAppIdentityLight ICacheKey ICacheExpiring ITimestamped ICanPurgeListCache IHasLog IDataTarget IDataPartShared Inherited Members DataSourceBase.ErrorStream DataSourceBase.SetError(String, String, Exception) DataSourceBase.GetRequiredInList(IImmutableList<IEntity>) DataSourceBase.GetRequiredInList(String, IImmutableList<IEntity>) DataSourceBase.Name DataSourceBase.AppId DataSourceBase.ZoneId DataSourceBase.Guid DataSourceBase.Configuration DataSourceBase.DataBuilder DataSourceBase.CacheRelevantConfigurations DataSourceBase.ConfigMask(String, String, Boolean) DataSourceBase.CachePartialKey DataSourceBase.CacheFullKey DataSourceBase.CacheTimestamp DataSourceBase.CacheChanged(Int64) DataSourceBase.PurgeList(Boolean) DataSourceBase.In DataSourceBase.Out DataSourceBase.Item[String] DataSourceBase.GetStream(String, String, Boolean, Boolean) DataSourceBase.List DataSourceBase.Attach(IDataSource) DataSourceBase.Attach(String, IDataSource, String) DataSourceBase.Attach(String, IDataStream) HasLog.Log HasLog.InitLog(String, ILog, String) HasLog.InitLog(String, ILog, String, CodeRef) Namespace : ToSic.Eav.DataSources Assembly : ToSic.Eav.DataSources.dll Syntax [PublicApi_Stable_ForUseInYourCode] [VisualQuery(NiceName = \"Publishing Filter\", UiHint = \"Keep data based on user roles (editor sees draft items)\", Icon = \"visibility\", Type = DataSourceType.Security, GlobalName = \"ToSic.Eav.DataSources.PublishingFilter, ToSic.Eav.DataSources\", In = new string[]{\"Published*\", \"Default*\", \"Drafts*\"}, DynamicOut = false, HelpLink = \"https://r.2sxc.org/DsPublishingFilter\")] public class PublishingFilter : DataSourceBase, IDataSource, IAppIdentity, IZoneIdentity, IAppIdentityLight, ICacheInfo, ICacheKey, ICacheExpiring, ITimestamped, ICanPurgeListCache, IHasLog, IDataTarget, IDataPartShared Remarks Technically many things could just identify the app they belong to, and let the system look up the zone. But this would be inefficient, so for optimization, many items identify themselves with both the app and zone Ids Properties | Improve this Doc View Source ShowDrafts Indicates whether to show drafts or only Published Entities. Declaration public bool ShowDrafts { get; set; } Property Value Type Description System.Boolean Implements IDataSource IAppIdentity IZoneIdentity IAppIdentityLight ICacheKey ICacheExpiring ITimestamped ICanPurgeListCache IHasLog IDataTarget IDataPartShared"
  },
  "api/dot-net/ToSic.Eav.DataSources.PassThrough.html": {
    "href": "api/dot-net/ToSic.Eav.DataSources.PassThrough.html",
    "title": "Class PassThrough | 2sxc 13 / EAV 13",
    "keywords": "Class PassThrough A DataSource that forwards all In Connections. It's more for internal use. Inheritance System.Object HasLog DataSourceBase PassThrough Block Implements IDataSource IAppIdentity IZoneIdentity IAppIdentityLight ICacheKey ICacheExpiring ITimestamped ICanPurgeListCache IHasLog IDataTarget IDataPartShared Inherited Members DataSourceBase.ErrorStream DataSourceBase.SetError(String, String, Exception) DataSourceBase.GetRequiredInList(IImmutableList<IEntity>) DataSourceBase.GetRequiredInList(String, IImmutableList<IEntity>) DataSourceBase.Name DataSourceBase.AppId DataSourceBase.ZoneId DataSourceBase.Guid DataSourceBase.Configuration DataSourceBase.DataBuilder DataSourceBase.CacheRelevantConfigurations DataSourceBase.ConfigMask(String, String, Boolean) DataSourceBase.CacheFullKey DataSourceBase.CacheTimestamp DataSourceBase.CacheChanged(Int64) DataSourceBase.PurgeList(Boolean) DataSourceBase.In DataSourceBase.Out DataSourceBase.Item[String] DataSourceBase.GetStream(String, String, Boolean, Boolean) DataSourceBase.List DataSourceBase.Attach(IDataSource) DataSourceBase.Attach(String, IDataSource, String) DataSourceBase.Attach(String, IDataStream) HasLog.Log HasLog.InitLog(String, ILog, String) HasLog.InitLog(String, ILog, String, CodeRef) Namespace : ToSic.Eav.DataSources Assembly : ToSic.Eav.DataSources.dll Syntax [PublicApi_Stable_ForUseInYourCode] [VisualQuery(NiceName = \"Pass-Through\", UiHint = \"Technical DataSource, doesn't do anything\", Icon = \"copy-all\", Type = DataSourceType.Source, Difficulty = DifficultyBeta.Advanced, GlobalName = \"ToSic.Eav.DataSources.PassThrough, ToSic.Eav.DataSources\", DynamicOut = true, DynamicIn = true)] public class PassThrough : DataSourceBase, IDataSource, IAppIdentity, IZoneIdentity, IAppIdentityLight, ICacheInfo, ICacheKey, ICacheExpiring, ITimestamped, ICanPurgeListCache, IHasLog, IDataTarget, IDataPartShared Remarks Technically many things could just identify the app they belong to, and let the system look up the zone. But this would be inefficient, so for optimization, many items identify themselves with both the app and zone Ids Properties | Improve this Doc View Source CachePartialKey provide a static cachekey - as there is nothing dynamic on this source to modify the cache Declaration public override string CachePartialKey { get; } Property Value Type Description System.String Overrides DataSourceBase.CachePartialKey Remarks if the key is not static (like the default setup) it will always cause errors Implements IDataSource IAppIdentity IZoneIdentity IAppIdentityLight ICacheKey ICacheExpiring ITimestamped ICanPurgeListCache IHasLog IDataTarget IDataPartShared"
  },
  "api/dot-net/ToSic.Eav.DataSources.Error.html": {
    "href": "api/dot-net/ToSic.Eav.DataSources.Error.html",
    "title": "Class Error | 2sxc 13 / EAV 13",
    "keywords": "Class Error Internal DataSource to generate an error on purpose. This is to test / verify error handling in VisualQuery. See also VisualQuery 3: Debugging Inheritance System.Object HasLog DataSourceBase Error Implements IDataSource IAppIdentity IZoneIdentity IAppIdentityLight ICacheKey ICacheExpiring ITimestamped ICanPurgeListCache IHasLog IDataTarget IDataPartShared Inherited Members DataSourceBase.ErrorStream DataSourceBase.SetError(String, String, Exception) DataSourceBase.GetRequiredInList(IImmutableList<IEntity>) DataSourceBase.GetRequiredInList(String, IImmutableList<IEntity>) DataSourceBase.Name DataSourceBase.AppId DataSourceBase.ZoneId DataSourceBase.Guid DataSourceBase.Configuration DataSourceBase.DataBuilder DataSourceBase.CacheRelevantConfigurations DataSourceBase.ConfigMask(String, String, Boolean) DataSourceBase.CachePartialKey DataSourceBase.CacheFullKey DataSourceBase.CacheTimestamp DataSourceBase.CacheChanged(Int64) DataSourceBase.PurgeList(Boolean) DataSourceBase.In DataSourceBase.Out DataSourceBase.Item[String] DataSourceBase.GetStream(String, String, Boolean, Boolean) DataSourceBase.List DataSourceBase.Attach(IDataSource) DataSourceBase.Attach(String, IDataSource, String) DataSourceBase.Attach(String, IDataStream) HasLog.Log HasLog.InitLog(String, ILog, String) HasLog.InitLog(String, ILog, String, CodeRef) Namespace : ToSic.Eav.DataSources Assembly : ToSic.Eav.DataSources.dll Syntax [VisualQuery(NiceName = \"Error DataSource\", UiHint = \"Generate an error - primarily for debugging\", Icon = \"warning\", Type = DataSourceType.Debug, Difficulty = DifficultyBeta.Advanced, GlobalName = \"e19ee6c4-5209-4c3d-8ae1-f4cbcf875c0a\")] [PublicApi] public class Error : DataSourceBase, IDataSource, IAppIdentity, IZoneIdentity, IAppIdentityLight, ICacheInfo, ICacheKey, ICacheExpiring, ITimestamped, ICanPurgeListCache, IHasLog, IDataTarget, IDataPartShared Remarks In advanced programming scenarios you can also use this DataSource instead of another one to provide a stream of errors. Constructors | Improve this Doc View Source Error() Constructor to tell the system what out-streams we have. In this case it's just the \"Default\" containing a fake exception. Declaration public Error() Properties | Improve this Doc View Source Message The error message. Defaults to \"Demo message of the Error DataSource\" Declaration public string Message { get; set; } Property Value Type Description System.String | Improve this Doc View Source Title The error title. Defaults to \"Demo Error\" Declaration public string Title { get; set; } Property Value Type Description System.String Implements IDataSource IAppIdentity IZoneIdentity IAppIdentityLight ICacheKey ICacheExpiring ITimestamped ICanPurgeListCache IHasLog IDataTarget IDataPartShared"
  },
  "api/dot-net/ToSic.Eav.DataSources.App.html": {
    "href": "api/dot-net/ToSic.Eav.DataSources.App.html",
    "title": "Class App | 2sxc 13 / EAV 13",
    "keywords": "Class App All the data inside an App. For example, it has a variable amount of Out-streams, one for each content-type in the app. The App DataSource is part of the Standard EAV Data Sources . It provides all items of the current App or of another App if needed. How to use with the VisualQuery When using the VisualQuery you can just drag it into your query. In its initial state, the Default out stream will deliver all Entities of all Content-Types which you can then filter. üîë However, you can rename that or create more; the out-connections will automatically filter to the name of the matching content types , which looks like this: There are three common use cases: 1. Using App With The Current App You can either just use it without any In stream, then it will just deliver the published items. This is because without an In , the App will automatically build an In providing published only. If you do provide any kind of in, it will use that as the source. So if you provide a Publishing-Source on the in, which will cause the App DataSource to differ the result based on the user who is looking at it. So editors would see unpublished as well: 2. Using App with Other App The App-DataSource can also be configured to deliver data from another app. For this, to configure and set the ZoneId and AppId: You can also deliver data from different Apps by using multiple App sources: Programming With The App DataSource We recommend to use the VisualQuery where possible, as it's easier to understand and is identical for C# and JavaScript. It's also better because it separates data-retrieval from visualization. Important: to access data of the current App, please use the App.Data as it's a pre-build object with the same streams. For example, use App.Data[\"BlogPost\"] to get all the BlogPost items. An example code @{ var blog = CreateSource<ToSic.Eav.DataSources.App>(); blog.ZoneSwitch = 2; // go to Zone 2 blog.AppSwitch = 403; // go to App 403 } @foreach(var post in AsDynamic(blog[\"BlogPost\"])) { <div>@post.EntityTitle</div> } The previous example creates an App source to the zone 2, app 403 and retrieves all items of type BlogPost to show in a loop. Important When Coding Note that data sources only retrieve data once, and then ignore any further configuration. So you must set Zone/App before accessing the data. Read also DataSource / DataStream List of all EAV Data Sources Query / VisualQuery Razor examples using App.Data Demo App and further links You should find some examples in this demo App Demo App with examples for most DataSources History Introduced in EAV 3.x, in ca. 2sxc 6.x <!-- note: this must be an H1 because of the automatic TOC in the code pages --> API Documentation Inheritance System.Object HasLog DataSourceBase App AppData Implements IDataSource IAppIdentity IZoneIdentity IAppIdentityLight ICacheKey ICacheExpiring ITimestamped ICanPurgeListCache IHasLog IDataTarget IDataPartShared Inherited Members DataSourceBase.ErrorStream DataSourceBase.SetError(String, String, Exception) DataSourceBase.GetRequiredInList(IImmutableList<IEntity>) DataSourceBase.GetRequiredInList(String, IImmutableList<IEntity>) DataSourceBase.Name DataSourceBase.AppId DataSourceBase.ZoneId DataSourceBase.Guid DataSourceBase.Configuration DataSourceBase.DataBuilder DataSourceBase.CacheRelevantConfigurations DataSourceBase.ConfigMask(String, String, Boolean) DataSourceBase.CachePartialKey DataSourceBase.CacheFullKey DataSourceBase.CacheTimestamp DataSourceBase.CacheChanged(Int64) DataSourceBase.PurgeList(Boolean) DataSourceBase.In DataSourceBase.Item[String] DataSourceBase.GetStream(String, String, Boolean, Boolean) DataSourceBase.List DataSourceBase.Attach(IDataSource) DataSourceBase.Attach(String, IDataSource, String) DataSourceBase.Attach(String, IDataStream) HasLog.Log HasLog.InitLog(String, ILog, String) HasLog.InitLog(String, ILog, String, CodeRef) Namespace : ToSic.Eav.DataSources Assembly : ToSic.Eav.DataSources.dll Syntax [PublicApi_Stable_ForUseInYourCode] [VisualQuery(NiceName = \"App\", UiHint = \"All data in an app with streams for type\", Icon = \"table_chart\", Type = DataSourceType.Source, GlobalName = \"ToSic.Eav.DataSources.App, ToSic.Eav.DataSources\", DynamicOut = true, In = new string[]{\"Default\"}, ExpectsDataOfType = \"|Config ToSic.Eav.DataSources.App\", HelpLink = \"https://r.2sxc.org/DsApp\")] public class App : DataSourceBase, IDataSource, IAppIdentity, IZoneIdentity, IAppIdentityLight, ICacheInfo, ICacheKey, ICacheExpiring, ITimestamped, ICanPurgeListCache, IHasLog, IDataTarget, IDataPartShared Fields | Improve this Doc View Source RequiresRebuildOfOut Declaration protected bool RequiresRebuildOfOut Field Value Type Description System.Boolean Properties | Improve this Doc View Source AppState Declaration protected AppState AppState { get; } Property Value Type Description AppState | Improve this Doc View Source AppSwitch Use this to re-target the app-source to another app. Note that this can only be done before ever accessing the app - once the object has started reading data, switching has no more effect. Declaration public int AppSwitch { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source Out Gets the Dictionary of Out-Streams. This is the internal accessor, as usually you'll use this[\"name\"] instead. In rare cases you need the Out, for example to list the stream names in the data source. Declaration public override IDictionary<string, IDataStream> Out { get; } Property Value Type Description System.Collections.Generic.IDictionary < System.String , IDataStream > A dictionary of named IDataStream objects Overrides DataSourceBase.Out | Improve this Doc View Source ZoneSwitch Use this to re-target the app-source to another zone. Note that this can only be done before ever accessing the app - once the object has started reading data, switching has no more effect. Declaration public int ZoneSwitch { get; set; } Property Value Type Description System.Int32 Implements IDataSource IAppIdentity IZoneIdentity IAppIdentityLight ICacheKey ICacheExpiring ITimestamped ICanPurgeListCache IHasLog IDataTarget IDataPartShared"
  },
  "api/dot-net/ToSic.Eav.DataSources.Sys.ContentTypes.html": {
    "href": "api/dot-net/ToSic.Eav.DataSources.Sys.ContentTypes.html",
    "title": "Class ContentTypes | 2sxc 13 / EAV 13",
    "keywords": "Class ContentTypes A DataSource that all content-types of an app. Inheritance System.Object HasLog DataSourceBase ContentTypes Implements IDataSource IAppIdentity IZoneIdentity IAppIdentityLight ICacheKey ICacheExpiring ITimestamped ICanPurgeListCache IHasLog IDataTarget IDataPartShared Inherited Members DataSourceBase.ErrorStream DataSourceBase.SetError(String, String, Exception) DataSourceBase.GetRequiredInList(IImmutableList<IEntity>) DataSourceBase.GetRequiredInList(String, IImmutableList<IEntity>) DataSourceBase.Name DataSourceBase.AppId DataSourceBase.ZoneId DataSourceBase.Guid DataSourceBase.Configuration DataSourceBase.DataBuilder DataSourceBase.CacheRelevantConfigurations DataSourceBase.ConfigMask(String, String, Boolean) DataSourceBase.CachePartialKey DataSourceBase.CacheFullKey DataSourceBase.CacheTimestamp DataSourceBase.CacheChanged(Int64) DataSourceBase.PurgeList(Boolean) DataSourceBase.In DataSourceBase.Out DataSourceBase.Item[String] DataSourceBase.GetStream(String, String, Boolean, Boolean) DataSourceBase.List DataSourceBase.Attach(IDataSource) DataSourceBase.Attach(String, IDataSource, String) DataSourceBase.Attach(String, IDataStream) HasLog.Log HasLog.InitLog(String, ILog, String) HasLog.InitLog(String, ILog, String, CodeRef) Namespace : ToSic.Eav.DataSources.Sys Assembly : ToSic.Eav.Apps.dll Syntax [InternalApi_DoNotUse_MayChangeWithoutNotice] [VisualQuery(NiceName = \"Content Types\", UiHint = \"Types of an App\", Icon = \"dns\", Type = DataSourceType.System, GlobalName = \"ToSic.Eav.DataSources.System.ContentTypes, ToSic.Eav.Apps\", Difficulty = DifficultyBeta.Advanced, DynamicOut = false, ExpectsDataOfType = \"37b25044-29bb-4c78-85e4-7b89f0abaa2c\", PreviousNames = new string[]{\"ToSic.Eav.DataSources.System.ContentTypes, ToSic.Eav.Apps\", \"ToSic.Eav.DataSources.ContentTypes, ToSic.Eav.Apps\"}, HelpLink = \"https://github.com/2sic/2sxc/wiki/DotNet-DataSource-ContentTypes\")] public sealed class ContentTypes : DataSourceBase, IDataSource, IAppIdentity, IZoneIdentity, IAppIdentityLight, ICacheInfo, ICacheKey, ICacheExpiring, ITimestamped, ICanPurgeListCache, IHasLog, IDataTarget, IDataPartShared Remarks Technically many things could just identify the app they belong to, and let the system look up the zone. But this would be inefficient, so for optimization, many items identify themselves with both the app and zone Ids Properties | Improve this Doc View Source LogId Declaration public override string LogId { get; } Property Value Type Description System.String Overrides ToSic.Eav.DataSources.DataSourceBase.LogId | Improve this Doc View Source OfAppId The app id Declaration public int OfAppId { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source OfScope The content-type name Declaration public string OfScope { get; set; } Property Value Type Description System.String Implements IDataSource IAppIdentity IZoneIdentity IAppIdentityLight ICacheKey ICacheExpiring ITimestamped ICanPurgeListCache IHasLog IDataTarget IDataPartShared"
  },
  "api/dot-net/Custom.Hybrid.html": {
    "href": "api/dot-net/Custom.Hybrid.html",
    "title": "Namespace Custom.Hybrid | 2sxc 13 / EAV 13",
    "keywords": "Namespace Custom.Hybrid Custom.Hybrid Namespace Dnn ‚ò¢Ô∏è & Oqtane ü©∏ This contains all the base classes for your own solutions, which will work across platforms (Dnn ‚ò¢Ô∏è, Oqtane ü©∏, NopCommerce üîµ etc.) Basically it's the CMS parts, without being specific to Dnn implementations. Versioned Base Classes All the base classes in this have a version number, so it will become easier to document differences between versions and also to give guidance how to upgrade in case of future breaking changes or security issues. Classes Api12 The base class for hybrid APIs. They internally inherit either from from DnnApiController or from Microsoft.AspNetCore.Mvc.Controller and in addition to all the DynamicCode properties also have all the features of that base class - but you should be careful using base-class properties, as they will probably not be hybrid any more. Code12 The base class for custom hybrid code. If you inherit from this class, you'll automatically have all the properties from DynamicCode . Razor12 The base class for custom Razor. If you inherit from this class, you'll automatically have all the properties from DynamicCode . Classes Api12 This is the base class for all custom API Controllers. With this, your code receives the full context incl. the current App, DNN, Data, etc. Code12 This is the base class for custom code (.cs) files in your Apps. By inheriting from this base class, you will automatically have the context like the App object etc. available. Razor12 The base class for Hybrid Razor-Components in 2sxc 12 Provides context objects like CmsContext, helpers like Edit and much more."
  },
  "api/dot-net/ToSic.Eav.Repositories.FolderBasedRepository.html": {
    "href": "api/dot-net/ToSic.Eav.Repositories.FolderBasedRepository.html",
    "title": "Class FolderBasedRepository | 2sxc 13 / EAV 13",
    "keywords": "Class FolderBasedRepository Use this to tell the EAV at boot time that there is another folder based repository. This will cause the EAV to load that folders Content-Types and Queries. Inheritance System.Object HasLog ToSic.Eav.Repositories.RepositoryBase FolderBasedRepository Implements IHasLog Inherited Members HasLog.Log HasLog.InitLog(String, ILog, String) HasLog.InitLog(String, ILog, String, CodeRef) Namespace : ToSic.Eav.Repositories Assembly : ToSic.Eav.Core.dll Syntax [PublicApi] public abstract class FolderBasedRepository : RepositoryBase, IHasLog Constructors | Improve this Doc View Source FolderBasedRepository() Empty constructor is very important, as this is typically used by inheriting classes Declaration protected FolderBasedRepository() Properties | Improve this Doc View Source RootPaths Declaration public abstract List<string> RootPaths { get; } Property Value Type Description System.Collections.Generic.List < System.String > Implements IHasLog"
  },
  "api/dot-net/ToSic.Eav.Repositories.html": {
    "href": "api/dot-net/ToSic.Eav.Repositories.html",
    "title": "Namespace ToSic.Eav.Repositories | 2sxc 13 / EAV 13",
    "keywords": "Namespace ToSic.Eav.Repositories Classes FolderBasedRepository Use this to tell the EAV at boot time that there is another folder based repository. This will cause the EAV to load that folders Content-Types and Queries."
  },
  "api/dot-net/ToSic.Sxc.Dnn.DataSources.html": {
    "href": "api/dot-net/ToSic.Sxc.Dnn.DataSources.html",
    "title": "Namespace ToSic.Sxc.Dnn.DataSources | 2sxc 13 / EAV 13",
    "keywords": "Namespace ToSic.Sxc.Dnn.DataSources This contains new DataSources for EAV, which only Dnn can provide. It extends the standard EAV Data-Sources . Classes DnnSql Retrieves data from SQL, specifically using the DNN Connection String DnnUserProfile Get DNN user profiles as IEntity objects of one or many users."
  },
  "api/dot-net/ToSic.Eav.Apps.AppBase.html": {
    "href": "api/dot-net/ToSic.Eav.Apps.AppBase.html",
    "title": "Class AppBase | 2sxc 13 / EAV 13",
    "keywords": "Class AppBase Base object for things that have a full app-identity (app-id and zone-id) and can also log their state. Inheritance System.Object HasLog AppBase App AppState Implements IHasLog IAppIdentity IZoneIdentity IAppIdentityLight Inherited Members HasLog.Log HasLog.InitLog(String, ILog, String) HasLog.InitLog(String, ILog, String, CodeRef) Namespace : ToSic.Eav.Apps Assembly : ToSic.Eav.Core.dll Syntax [InternalApi_DoNotUse_MayChangeWithoutNotice(\"this is just fyi\")] public abstract class AppBase : HasLog, IHasLog, IAppIdentity, IZoneIdentity, IAppIdentityLight Constructors | Improve this Doc View Source AppBase(String, CodeRef) DI Constructor - always run Init afterwards Declaration protected AppBase(string logName, CodeRef codeRef) Parameters Type Name Description System.String logName CodeRef codeRef Properties | Improve this Doc View Source AppId The app id as used internally Declaration public int AppId { get; } Property Value Type Description System.Int32 The App ID this thing belongs to | Improve this Doc View Source ZoneId ID of the zone (EAV Tenant) Declaration public int ZoneId { get; } Property Value Type Description System.Int32 The zone ID this thing belongs to Methods | Improve this Doc View Source Init(IAppIdentity, CodeRef, ILog) App identity containing zone/app combination Declaration protected AppBase Init(IAppIdentity app, CodeRef code, ILog parentLog) Parameters Type Name Description IAppIdentity app the identity CodeRef code code-ref, must be created first ILog parentLog the current log - could be null if necessary Returns Type Description AppBase Implements IHasLog IAppIdentity IZoneIdentity IAppIdentityLight"
  },
  "api/dot-net/ToSic.Sxc.Apps.html": {
    "href": "api/dot-net/ToSic.Sxc.Apps.html",
    "title": "Namespace ToSic.Sxc.Apps | 2sxc 13 / EAV 13",
    "keywords": "Namespace ToSic.Sxc.Apps This extends the ToSic.Eav.Apps with things relevant in a CMS. Most of this isn't documented yet. Classes App A single-use app-object providing quick simple api to access name, folder, data, metadata etc. AppConfiguration The configuration of the app, as you can set it in the app-package definition. Interfaces IApp An app-object as is available in a razor template or WebApi"
  },
  "api/dot-net/ToSic.Sxc.Blocks.IBlock.html": {
    "href": "api/dot-net/ToSic.Sxc.Blocks.IBlock.html",
    "title": "Interface IBlock | 2sxc 13 / EAV 13",
    "keywords": "Interface IBlock A unit / block of output in a CMS. Inherited Members IZoneIdentity.ZoneId IAppIdentityLight.AppId IHasLog.Log Namespace : ToSic.Sxc.Blocks Assembly : ToSic.Sxc.dll Syntax [InternalApi_DoNotUse_MayChangeWithoutNotice(\"this is just fyi\")] public interface IBlock : IAppIdentity, IZoneIdentity, IAppIdentityLight, IHasLog Properties | Improve this Doc View Source App The app this block is running in Declaration IApp App { get; } Property Value Type Description IApp | Improve this Doc View Source Context The context we're running in, with tenant, container etc. Declaration IContextOfBlock Context { get; } Property Value Type Description ToSic.Sxc.Context.IContextOfBlock | Improve this Doc View Source Data The IBlockDataSource which delivers data for this block (will be used by the IEngine together with the View) Declaration IBlockDataSource Data { get; } Property Value Type Description IBlockDataSource | Improve this Doc View Source View The view which will be used to render this block Declaration IView View { get; set; } Property Value Type Description IView"
  },
  "js-code/edit-form/formulas/index.html": {
    "href": "js-code/edit-form/formulas/index.html",
    "title": "Formulas JavaScript Specs | 2sxc 13 / EAV 13",
    "keywords": "Formulas JavaScript Specs Formulas let you create JavaScript functions to calculate Values and Properties of things in the edit form. Learn about the Formula concepts here. It also shows you the UIs, how to configure etc. Examples Set Field Value to missing-data if empty This formula would be applied to the fields Value . v1(data) { return data.value ? data.value : 'missing-data'; } Set Field Visibility based on another Toggle Switch This formula would be applied to the Setting Visible . v1(data) { return data.ShowAdvanced; } Add an Emoji to a Group-Heading if inside it an important property was set This formula would be applied to a group headings Setting Name which is the visible title: v1(data) { return data.default + (data.EditInstructions || data.ListInstructions ? ' ‚úÖ' : ''); } Note that we're returning data.default and some more text, not data.value . This is because the value would change on each cycle, but data.default contains the original value. V1 Function Specs All functions must be called v1 , it must be lower case This is important because we cannot guess when the API will change, and we also expect to introduce an Excel-like syntax which would begin with = The first line in the code must start with the function name v1 . You cannot put comments or empty lines before the v1 Your function must have brackets afterwards and it can have 0, 1 or two params, so you can use one of the following v1() { ... } v1(data) { ... } v1(data, context) { ...} The parameter names are anything you want, but the order of what you get is always data and then context . You can also write v1(d, c) { ... } You Must Return a Valid Value Each field type or property may expect a different data type. Make sure you provide that. Warning If you return nothing, undefined or the wrong data type, the result will be ignored and the value/setting will not be changed. Common Mistakes returning nothing with return; - this will be regarded as an error and be ignored. returning undefined . Returning a falsy instead of a real true or false for a boolean value The data Object The data object contains the most commonly used data, specifically value - the value which would be used if the function didn't run default - the default value this thing would have based on field configuration (use for reset to default) prefill - the prefill value initial - the initial value this setting/field had when it was loaded (use for reset to initial) new in 12.02 [FieldName] - all the values of the other fields parameters.[paramname] - all the parameters passed to the dialog, currently the ones in the prefill - WIP v13.06, not final Example of the data object in a Formula which would set the Visible property of a field FullName : data = { \"value\": true, // It's visible ATM \"default\": false, // Originally hidden till first/last were given \"prefill\": undefined, // Would contain prefill information \"FirstName\": \"Douglas\", // string \"LastName\": \"Adams\", // string \"Birthday\": \"1952-03-11T00:00:00.000Z\", // string, always as neutral/Zulu/UTC time \"Awards\": [\"guid-guid\", \"guid-guid\"], // IDs pointing to other entities \"FullName\": \"Douglas Adams\", // calculated by formula \"Photo\": \"file:72\", // link information \"Album\": \"\", // library fields have no value } Special Remarks about Date Values Dates are stored as strings, not as Date objects. The UI doesn't care about time zones, so the strings always use Zulu time and not the local time zone . This may cause some challenges which you want to know about. Returned Date Objects If your function returns a date-object we will assume that you were creating a new date and didn't worry about time zones. So we will simply drop the time-zone information and assume that's what you wanted. So if you do return new Date(); it will contain something like Tue Jun 08 2021 11:22:33 GMT+0200 (Central European Summer Time) . We will treat this as 2021-06-08T11:22:33 and ignore the time zone. The UI will then also show 2021-06-08 11:22:33 Returned Date Strings If you return a date-string without time-zone like 2021-06-08 10:00 we will assume this is what you want, and treat it as such. If you return a date-string with time zone like 2021-06-08 10:00 +0200 we will assume you used something like new Date().toString() and ignore the time zone, so we'll keep 2021-06-08 10:00 because you almost certainly didn't realize that the toString() would result in a wrong time. Likely Problems on Date-Formulas Basically if you create a new Date() object and return that, everything will work as expected. And you construct a UTC-only date everything will work too. Where things will surprise you is when you convert the data.value and simply return it without making corrections. These things will cause problems: Problem: return new Date(data.value); No Problem: return new Date(); Problem: var x = new Date(data.value); x.setMinutes(0); x.setSeconds(0); return x; No Problem: var x = new Date(); x.setMinutes(0); x.setSeconds(0); return x; Problem: var otherFieldDate = new Date(data.Birthday).getDay(); will probably return the wrong day This is because our data.value doesn't have a time zone, and converting it to Date(...) will construct a date in the users time zone resulting in a shift by a few hours. So this will only affect formulas which use the existing date, modify it, and are not aware of the time-zones. To fix this, make sure that if you convert existing data to a Date, you pretend it's in the time-zone changes of the current browser. This example shows a formula that will remove the time on a new date or the existing one. v1(data, context) { // Use existing date (but pretend it's local time by dropping 'Z') or use current Date var date = data.value ? new Date(data.value.replace('Z', '')) : new Date(); date.setHours(0,0,0,0); // flush all time parts return date; } Another option is to work with the Zulu time but make sure you UTC it when returning, or work with .getTimezoneOffset() . The context Object The context contain additional information about the context we're running in. cache - an object which is only for this function and will be persisted across calls - use it to save temporary values debug - a true/false toggle if the form is in debug mode - Use this to show/hide really advanced fields. new in 12.02 target - everything about the target of the formula - the current field type = What the function processes Field.Value or Field.Settings (Future: Form.Variable etc.) name - field name or setting-name, so FirstName or Visible entity id - the id of the entity - 0 if it's new guid - the GUID of the entity, always provided culture code name - this will return undefined scenarios where no languages are activated features isEnabled('FeatureName') - will return true if this feature is enabled. Important: only admins users will know about all available features, non-admins will only have a subset marked as public. WIP v13.06 get('FeatureName') - will return the feature object WIP v13.06 experimental - this is for internal APIs we're testing, they are not public. You can use them, but expect the APIs to change in near future Using the context.cache In some cases you may want to remember a result of intermediate work. For this you can use the context.cache object. A simple exammple would be if you only want to run something once, in which case you could write something like this v1(data, context) { // don't do anything on following runs / return existing value if(context.cache.notFirstRun) return data.value; context.cache.notFirstRun = true; return true; } Future, don't implement yet getSettings(...) getEntities(...) getFields(entity) entities [entity] guid id Tips and Tricks You can always add a console.log(data, context); or similar in your code to see in real time what's being processed. You can also add a line debugger; and the browser will stop at this line so you can inspect the variables and watch your code. For now, we strongly recommend to use Formulas as pure functions , but with experience the recommendation may change. Future features Ability to read other properties of fields - like check if a field is visible Excel-style formula syntax using =[Field] Ability to read other entities / check their types etc. Ability to read fields of other entities History Introduced in 2sxc 12.01 Added data.parameters in v13.06 BETA Added context.features.isEnabled('FeatureName') in v13.06 BETA Added context.features.get('FeatureName') in v13.06 BETA"
  },
  "basics/edit/formulas/specs.html": {
    "href": "basics/edit/formulas/specs.html",
    "title": "Formulas Technical Specs | 2sxc 13 / EAV 13",
    "keywords": "Formulas Technical Specs <!-- Data Highlights --> <!-- ADAM --> <!-- Server --> <!-- Prepare --> <!-- Data Source --> <!-- Optimzers --> <!-- Process / Awesomize --> <!-- Libraries --> <!-- data formats --> <!-- Browser --> <!-- Frameworks --> <!-- App show parts --> <!-- Interact parts --> <!-- Edit parts --> <!-- Edit UI parts --> <!-- SPA parts --> <!-- Custom highlight boxes - can be controlled by in-page CSS --> you are here (click to zoom) - discover the stack .context-box-summary .browser-edit-ui { visibility: visible; } These are additional infos so you understand the behavior better. The Target The target key of a formula determines what your Formula will affect. Since data.value contains what would be used if your formula didn't run, then this of course will also contain the previous value of the target. Target Types Field.Value - will get / set a value on a field. This is always the full key. Field.Settings - will get will get/set a setting of the field. This is just the Type identifier. A full key often includes the exact setting to be addressed, like Field.Settings.Name - change the label / name / title of a field Field.Settings.Visible - Controls the visibility of the field / group. true means visible Field.Settings.Disabled - controls that the field can be interacted with or is disabled. true means it's blocked Field.Settings.Required - shows if a field is required warning required isn't fully implemented ATM - the form will not always reliably enforce this if it's changed dynamically Field.Settings. [Anything] - other Settings that can be changed Tip Remember that data.value contains the value which would be used if the formula didn't run. If you need the value in the field/setting at form-load, use data.default . And if you are doing some prefill-magic, you can get that on data.prefill . üëâ Read more about this is the JS Docs . Formulas for General Settings Field.Settings.Name - Label of a Field This can be changed as needed. We recommend that you don't add * to the name, as this is the default indicator for required and would confuse users. Field.Settings.Visible - Show/Hide a Field When you set this on a group, it applies to all properties in the group. So hiding a group hides all fields inside it, showing it shows all fields inside it. Field.Settings.Disabled - Enable/Disable a Field If you return true to set Disabled=true it will disable the UI. Of course if the field is already not visible, the user won't see this. Important Even if you set Disabled=false other rules may override this. For example, if the field may not be translated and you're on a secondary language, it will still remain disabled. Important Disabling a group will not disable all the fields in it. We may consider implementing this some day, but as of now it won't happen, so you'll need to disable each field if this is what you need. Field.Settings.Required - Mark Field as Required This determines if the Field is required. Important Changing the required changes the * indicator on the UI, but as of v12.01 it doesn't yet affect the validity checks in the form. This is an important limitation to be aware of. Formulas for Other Settings Field.Settings.Collapsed - for Groups This is a setting which only would affect group fields. Setting Collapsed to true collapses the group, to false opens it. Tip Remember that data.default will always give you the initial state of this setting. Field.Settings. [Anything] Since many controls can have other settings these can be controlled by formulas as well. Important We haven't tried every setting and some may not have the expected result, since the form has never been this dynamic before. We'll work on fixing issues as we hear about them. Formula Lifecycle When do Formulas Run? As of now, they run whenever any data changes in the form. This can mean that they run multiple times because if formulas depend on each other, there may be a few cycles till all values stabilize. In future we'll probably provide more settings to control how often they run. Missing Context Information As of now the formulas always run on every change detection. The following information is currently not yet given to the formula: What phase of the lifecycle the formula is on (init, pre-render, etc.) Events which happened before Run-count We'll consider how to handle this best, but for now, you simply don't have the information in your formula. Can Formulas be Disabled? Stored Formulas can be disabled with a toggle. But you cannot disable Formulas at runtime (like using another value to control that). Even Formulas whose result is discarded are still run. This is not a final decision but as of now it's just how it works. If you need to conditionally run your formula, just put the condition into the formula itself. Running Formulas on Specific Events (WIP) This is not yet possible. Reasoning behind these standards (WIP) Start with v1(...) The function must always start with v1 so that future enhancements which need a new signature can be created without breaking stuff people made till then We could put the function type into another setting so that we could just write (data) {...} but that would cause problems when people post questions, because you would always have to ask which function version is being used. So writing v1 may seem a bit less elegant, it will save us a lot of problems supporting users. Write a JS function syntax v1(...) { } In future we'll probably also support an Excel-like syntax like =[FirstName] & \" \" & [LastName] . For now we assume that the initial = will differentiate between the formula types Use simple data object - this is what 95% of all formulas will need, so it should be there to keep most formulas really simple. Offer a more complex context object - in rare cases you need to know more about the current situation and maybe access more data from the form. To keep the data simple, we must place other stuff on the context object. Possible collisions on data if a field is called value - because the data.value should point to the current value. Since fields are usualy pascal-case, there should almost never be a name collision (so a field called value or default in lower case ). If such a collisions exists, people will have to rename the fields for now. In future, we'll provide all the fields and more information in the context . History Introduced in 2sxc 12.01"
  },
  "basics/edit/formulas/designer.html": {
    "href": "basics/edit/formulas/designer.html",
    "title": "Formula Designer | 2sxc 13 / EAV 13",
    "keywords": "Formula Designer <!-- Data Highlights --> <!-- ADAM --> <!-- Server --> <!-- Prepare --> <!-- Data Source --> <!-- Optimzers --> <!-- Process / Awesomize --> <!-- Libraries --> <!-- data formats --> <!-- Browser --> <!-- Frameworks --> <!-- App show parts --> <!-- Interact parts --> <!-- Edit parts --> <!-- Edit UI parts --> <!-- SPA parts --> <!-- Custom highlight boxes - can be controlled by in-page CSS --> you are here (click to zoom) - discover the stack .context-box-summary .browser-edit-ui { visibility: visible; } In the Edit-UI you can always enter a Debug-Mode to develop / debug your formulas using real life data. Enter Debug Mode When the edit form is open, press Ctrl + Alt + Shift (Ctrl + Option + Shift on Mac) and click anywhere in the form. The debug bar should appear. If you have difficulties, use this checklist . Select Formula to work On In the dialog you'll see dropdowns to select the entity, field and property. Things that already have a formula are bold: The Formula Designer These are the important parts in the UI: Tab for the Formula Designer Tab for logs/errors caused by formulas Pick the Entity on which to edit a formula - this often has only 1 entry Pick the Field on which to edit the formula Pick the Property or select Value to determine what the formula affects Free-Text entry to create formulas for other properties. Use Fields.Settings.SettingName Help Formula code - see JS Formulas docs Data-Snippets showing you what the data object has for use in your code Results (live) when the formula is running to show what came out of it Edit to enter formula edit mode Reset the formula to what it was originally Save - this will only work if the configuration already contained save data ( limitation in v12.01 ) Play Debugging By default, as soon as you're working on a formula, it will dump the data , context and result to the console once it's running. This is what that looks like (Make sure to enter debug mode in Chrome using F12): You can also to do additional debugging. For that please consult the JavaScript Formulas Docs Limited Saving Capabilities As of now the live-developer can be used to develop the formulas and you can update formulas which had already existed. As of v12.01 you cannot save new formulas. For this you'll need to copy-paste them manually to the Field-Settings. Once they have been created you can go back to the designer and change/save them from there. History Added in 2sxc 12.01"
  },
  "basics/edit/formulas/index.html": {
    "href": "basics/edit/formulas/index.html",
    "title": "Formulas (Logic) in the Edit Form | 2sxc 13 / EAV 13",
    "keywords": "Formulas (Logic) in the Edit Form <!-- Data Highlights --> <!-- ADAM --> <!-- Server --> <!-- Prepare --> <!-- Data Source --> <!-- Optimzers --> <!-- Process / Awesomize --> <!-- Libraries --> <!-- data formats --> <!-- Browser --> <!-- Frameworks --> <!-- App show parts --> <!-- Interact parts --> <!-- Edit parts --> <!-- Edit UI parts --> <!-- SPA parts --> <!-- Custom highlight boxes - can be controlled by in-page CSS --> you are here (click to zoom) - discover the stack .context-box-summary .browser-edit-ui { visibility: visible; } 2sxc 12 introduces Formulas which let you dynamically change all kind of things in the edit UI. With it you can dynamically change the value of the field General field settigns like Visibility to show/hide a field Disabled to enable/disable a field Name to change the label Field-specific settings like Collapsed on a field-group to change if it's open/closed Demo How To Create & Develop Formulas Formulas are stored as normal data as part of the Content-Type. As shown in this image, all fields having formulas are easy to discern: You can create or edit Formulas them in the general field settings: üëâ To develop Formulas we suggest you try the Interactive Formula Designer Specs and JavaScript Documentation üëâ Check out the JS Formula Documentation üëâ Also read about the Formula Specs üëâ Also read about the new empty-end Field to close a Field-Group More You should also check Ephemeral / Temporary Fields as they are very useful together with Formulas. History Introduced in 2sxc 12.01"
  }
}